(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.manualproof.sync.atomic.
Require Export New.golang.theory.

Require Export New.code.sync.atomic.
Module atomic.
Axiom falso : False.
Module noCopy.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End noCopy.

Section instances.
Context `{ffi_syntax}.
Global Instance into_val_noCopy `{ffi_syntax} : IntoVal noCopy.t.
Admitted.

Global Instance into_val_typed_noCopy `{ffi_syntax} : IntoValTyped noCopy.t atomic.noCopy :=
{|
  default_val := noCopy.mk;
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.

Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_noCopy `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ}:
  PureWp True
    (struct.make atomic.noCopy (alist_val [
    ]))%struct
    #(noCopy.mk).
Admitted.


End instances.
Module align64.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End align64.

Section instances.
Context `{ffi_syntax}.
Global Instance into_val_align64 `{ffi_syntax} : IntoVal align64.t.
Admitted.

Global Instance into_val_typed_align64 `{ffi_syntax} : IntoValTyped align64.t atomic.align64 :=
{|
  default_val := align64.mk;
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.

Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_align64 `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ}:
  PureWp True
    (struct.make atomic.align64 (alist_val [
    ]))%struct
    #(align64.mk).
Admitted.


End instances.
Module Uint64.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  _0' : noCopy.t;
  _1' : align64.t;
  v' : w64;
}.
End def.
End Uint64.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Uint64 `{ffi_syntax}: Settable _ :=
  settable! Uint64.mk < Uint64._0'; Uint64._1'; Uint64.v' >.
Global Instance into_val_Uint64 `{ffi_syntax} : IntoVal Uint64.t.
Admitted.

Global Instance into_val_typed_Uint64 `{ffi_syntax} : IntoValTyped Uint64.t atomic.Uint64 :=
{|
  default_val := Uint64.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Uint64__0 `{ffi_syntax} : IntoValStructField "_0" atomic.Uint64 Uint64._0'.
Admitted.

Global Instance into_val_struct_field_Uint64__1 `{ffi_syntax} : IntoValStructField "_1" atomic.Uint64 Uint64._1'.
Admitted.

Global Instance into_val_struct_field_Uint64_v `{ffi_syntax} : IntoValStructField "v" atomic.Uint64 Uint64.v'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Uint64 `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} _0' _1' v':
  PureWp True
    (struct.make atomic.Uint64 (alist_val [
      "_0" ::= #_0';
      "_1" ::= #_1';
      "v" ::= #v'
    ]))%struct
    #(Uint64.mk _0' _1' v').
Admitted.


Global Instance Uint64_struct_fields_split dq l (v : Uint64.t) :
  StructFieldsSplit dq l v (
    "H_0" ∷ l ↦s[atomic.Uint64 :: "_0"]{dq} v.(Uint64._0') ∗
    "H_1" ∷ l ↦s[atomic.Uint64 :: "_1"]{dq} v.(Uint64._1') ∗
    "Hv" ∷ l ↦s[atomic.Uint64 :: "v"]{dq} v.(Uint64.v')
  ).
Admitted.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined atomic :=
{|
  is_pkg_defined := is_global_definitions atomic var_addrs;
|}.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_CompareAndSwapUint64 :
  WpFuncCall atomic "CompareAndSwapUint64" _ (is_pkg_defined atomic) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AddUint64 :
  WpFuncCall atomic "AddUint64" _ (is_pkg_defined atomic) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_LoadUint64 :
  WpFuncCall atomic "LoadUint64" _ (is_pkg_defined atomic) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_StoreUint64 :
  WpFuncCall atomic "StoreUint64" _ (is_pkg_defined atomic) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Uint64'ptr_Add :
  WpMethodCall atomic "Uint64'ptr" "Add" _ (is_pkg_defined atomic) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Uint64'ptr_CompareAndSwap :
  WpMethodCall atomic "Uint64'ptr" "CompareAndSwap" _ (is_pkg_defined atomic) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Uint64'ptr_Load :
  WpMethodCall atomic "Uint64'ptr" "Load" _ (is_pkg_defined atomic) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Uint64'ptr_Store :
  WpMethodCall atomic "Uint64'ptr" "Store" _ (is_pkg_defined atomic) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End atomic.
