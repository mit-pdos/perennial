(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.manualproof.sync.
Require Export New.generatedproof.sync.atomic.
Require Export New.generatedproof.internal.race.
Require Export New.golang.theory.

Require Export New.code.sync.

Set Default Proof Using "Type".

Module sync.

(* type sync.copyChecker *)
Module copyChecker.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End copyChecker.

Global Instance bounded_size_copyChecker : BoundedTypeSize sync.copyChecker.
Admitted.

Global Instance into_val_copyChecker `{ffi_syntax} : IntoVal copyChecker.t.
Admitted.

Global Instance into_val_typed_copyChecker `{ffi_syntax} : IntoValTyped copyChecker.t sync.copyChecker.
Admitted.

(* type sync.noCopy *)
Module noCopy.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End noCopy.

Section instances.
Context `{ffi_syntax}.
Global Instance noCopy_ty_wf : struct.Wf sync.noCopy.
Proof. apply _. Qed.

#[local] Transparent sync.noCopy.
#[local] Typeclasses Transparent sync.noCopy.
Global Instance into_val_noCopy : IntoVal noCopy.t :=
  {| to_val_def v :=
    struct.val_aux sync.noCopy [
    ]%struct
  |}.

Global Program Instance into_val_typed_noCopy : IntoValTyped noCopy.t sync.noCopy :=
{|
  default_val := noCopy.mk;
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_noCopy:
  PureWp True
    (struct.make #sync.noCopy (alist_val [
    ]))%struct
    #(noCopy.mk).
Proof. solve_struct_make_pure_wp. Qed.

End instances.

(* type sync.Map *)
Module Map.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Map.

Global Instance bounded_size_Map : BoundedTypeSize sync.Map.
Admitted.

Global Instance into_val_Map `{ffi_syntax} : IntoVal Map.t.
Admitted.

Global Instance into_val_typed_Map `{ffi_syntax} : IntoValTyped Map.t sync.Map.
Admitted.

(* type sync.Locker *)
Module Locker.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Locker.

Global Instance bounded_size_Locker : BoundedTypeSize sync.Locker.
Admitted.

Global Instance into_val_Locker `{ffi_syntax} : IntoVal Locker.t.
Admitted.

Global Instance into_val_typed_Locker `{ffi_syntax} : IntoValTyped Locker.t sync.Locker.
Admitted.

(* type sync.Once *)
Module Once.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  _0' : noCopy.t;
  done' : atomic.Uint32.t;
  m' : Mutex.t;
}.
End def.
End Once.

Section instances.
Context `{ffi_syntax}.
Global Instance Once_ty_wf : struct.Wf sync.Once.
Proof. apply _. Qed.

Global Instance settable_Once : Settable Once.t :=
  settable! Once.mk < Once._0'; Once.done'; Once.m' >.
#[local] Transparent sync.Once.
#[local] Typeclasses Transparent sync.Once.
Global Instance into_val_Once : IntoVal Once.t :=
  {| to_val_def v :=
    struct.val_aux sync.Once [
    "_0" ::= #(Once._0' v);
    "done" ::= #(Once.done' v);
    "m" ::= #(Once.m' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Once : IntoValTyped Once.t sync.Once :=
{|
  default_val := Once.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Once__0 : IntoValStructField "_0" sync.Once Once._0'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Once_done : IntoValStructField "done" sync.Once Once.done'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Once_m : IntoValStructField "m" sync.Once Once.m'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Once _0' done' m':
  PureWp True
    (struct.make #sync.Once (alist_val [
      "_0" ::= #_0';
      "done" ::= #done';
      "m" ::= #m'
    ]))%struct
    #(Once.mk _0' done' m').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Once_struct_fields_split dq l (v : Once.t) :
  StructFieldsSplit dq l v (
    "H_0" ∷ l ↦s[sync.Once :: "_0"]{dq} v.(Once._0') ∗
    "Hdone" ∷ l ↦s[sync.Once :: "done"]{dq} v.(Once.done') ∗
    "Hm" ∷ l ↦s[sync.Once :: "m"]{dq} v.(Once.m')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Once._0' v)) (sync.Once) "_0"%go.
  simpl_one_flatten_struct (# (Once.done' v)) (sync.Once) "done"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type sync.Pool *)
Module Pool.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Pool.

Global Instance bounded_size_Pool : BoundedTypeSize sync.Pool.
Admitted.

Global Instance into_val_Pool `{ffi_syntax} : IntoVal Pool.t.
Admitted.

Global Instance into_val_typed_Pool `{ffi_syntax} : IntoValTyped Pool.t sync.Pool.
Admitted.

(* type sync.poolLocalInternal *)
Module poolLocalInternal.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End poolLocalInternal.

Global Instance bounded_size_poolLocalInternal : BoundedTypeSize sync.poolLocalInternal.
Admitted.

Global Instance into_val_poolLocalInternal `{ffi_syntax} : IntoVal poolLocalInternal.t.
Admitted.

Global Instance into_val_typed_poolLocalInternal `{ffi_syntax} : IntoValTyped poolLocalInternal.t sync.poolLocalInternal.
Admitted.

(* type sync.poolLocal *)
Module poolLocal.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End poolLocal.

Global Instance bounded_size_poolLocal : BoundedTypeSize sync.poolLocal.
Admitted.

Global Instance into_val_poolLocal `{ffi_syntax} : IntoVal poolLocal.t.
Admitted.

Global Instance into_val_typed_poolLocal `{ffi_syntax} : IntoValTyped poolLocal.t sync.poolLocal.
Admitted.

(* type sync.poolDequeue *)
Module poolDequeue.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End poolDequeue.

Global Instance bounded_size_poolDequeue : BoundedTypeSize sync.poolDequeue.
Admitted.

Global Instance into_val_poolDequeue `{ffi_syntax} : IntoVal poolDequeue.t.
Admitted.

Global Instance into_val_typed_poolDequeue `{ffi_syntax} : IntoValTyped poolDequeue.t sync.poolDequeue.
Admitted.

(* type sync.eface *)
Module eface.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End eface.

Global Instance bounded_size_eface : BoundedTypeSize sync.eface.
Admitted.

Global Instance into_val_eface `{ffi_syntax} : IntoVal eface.t.
Admitted.

Global Instance into_val_typed_eface `{ffi_syntax} : IntoValTyped eface.t sync.eface.
Admitted.

(* type sync.dequeueNil *)
Module dequeueNil.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End dequeueNil.

Global Instance bounded_size_dequeueNil : BoundedTypeSize sync.dequeueNil.
Admitted.

Global Instance into_val_dequeueNil `{ffi_syntax} : IntoVal dequeueNil.t.
Admitted.

Global Instance into_val_typed_dequeueNil `{ffi_syntax} : IntoValTyped dequeueNil.t sync.dequeueNil.
Admitted.

(* type sync.poolChain *)
Module poolChain.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End poolChain.

Global Instance bounded_size_poolChain : BoundedTypeSize sync.poolChain.
Admitted.

Global Instance into_val_poolChain `{ffi_syntax} : IntoVal poolChain.t.
Admitted.

Global Instance into_val_typed_poolChain `{ffi_syntax} : IntoValTyped poolChain.t sync.poolChain.
Admitted.

(* type sync.poolChainElt *)
Module poolChainElt.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End poolChainElt.

Global Instance bounded_size_poolChainElt : BoundedTypeSize sync.poolChainElt.
Admitted.

Global Instance into_val_poolChainElt `{ffi_syntax} : IntoVal poolChainElt.t.
Admitted.

Global Instance into_val_typed_poolChainElt `{ffi_syntax} : IntoValTyped poolChainElt.t sync.poolChainElt.
Admitted.

(* type sync.notifyList *)
Module notifyList.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End notifyList.

Global Instance bounded_size_notifyList : BoundedTypeSize sync.notifyList.
Admitted.

Global Instance into_val_notifyList `{ffi_syntax} : IntoVal notifyList.t.
Admitted.

Global Instance into_val_typed_notifyList `{ffi_syntax} : IntoValTyped notifyList.t sync.notifyList.
Admitted.

(* type sync.RWMutex *)
Module RWMutex.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  w' : Mutex.t;
  writerSem' : w32;
  readerSem' : w32;
  readerCount' : atomic.Int32.t;
  readerWait' : atomic.Int32.t;
}.
End def.
End RWMutex.

Section instances.
Context `{ffi_syntax}.
Global Instance RWMutex_ty_wf : struct.Wf sync.RWMutex.
Proof. apply _. Qed.

Global Instance settable_RWMutex : Settable RWMutex.t :=
  settable! RWMutex.mk < RWMutex.w'; RWMutex.writerSem'; RWMutex.readerSem'; RWMutex.readerCount'; RWMutex.readerWait' >.
#[local] Transparent sync.RWMutex.
#[local] Typeclasses Transparent sync.RWMutex.
Global Instance into_val_RWMutex : IntoVal RWMutex.t :=
  {| to_val_def v :=
    struct.val_aux sync.RWMutex [
    "w" ::= #(RWMutex.w' v);
    "writerSem" ::= #(RWMutex.writerSem' v);
    "readerSem" ::= #(RWMutex.readerSem' v);
    "readerCount" ::= #(RWMutex.readerCount' v);
    "readerWait" ::= #(RWMutex.readerWait' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_RWMutex : IntoValTyped RWMutex.t sync.RWMutex :=
{|
  default_val := RWMutex.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_RWMutex_w : IntoValStructField "w" sync.RWMutex RWMutex.w'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_RWMutex_writerSem : IntoValStructField "writerSem" sync.RWMutex RWMutex.writerSem'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_RWMutex_readerSem : IntoValStructField "readerSem" sync.RWMutex RWMutex.readerSem'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_RWMutex_readerCount : IntoValStructField "readerCount" sync.RWMutex RWMutex.readerCount'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_RWMutex_readerWait : IntoValStructField "readerWait" sync.RWMutex RWMutex.readerWait'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_RWMutex w' writerSem' readerSem' readerCount' readerWait':
  PureWp True
    (struct.make #sync.RWMutex (alist_val [
      "w" ::= #w';
      "writerSem" ::= #writerSem';
      "readerSem" ::= #readerSem';
      "readerCount" ::= #readerCount';
      "readerWait" ::= #readerWait'
    ]))%struct
    #(RWMutex.mk w' writerSem' readerSem' readerCount' readerWait').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance RWMutex_struct_fields_split dq l (v : RWMutex.t) :
  StructFieldsSplit dq l v (
    "Hw" ∷ l ↦s[sync.RWMutex :: "w"]{dq} v.(RWMutex.w') ∗
    "HwriterSem" ∷ l ↦s[sync.RWMutex :: "writerSem"]{dq} v.(RWMutex.writerSem') ∗
    "HreaderSem" ∷ l ↦s[sync.RWMutex :: "readerSem"]{dq} v.(RWMutex.readerSem') ∗
    "HreaderCount" ∷ l ↦s[sync.RWMutex :: "readerCount"]{dq} v.(RWMutex.readerCount') ∗
    "HreaderWait" ∷ l ↦s[sync.RWMutex :: "readerWait"]{dq} v.(RWMutex.readerWait')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (RWMutex.w' v)) (sync.RWMutex) "w"%go.
  simpl_one_flatten_struct (# (RWMutex.writerSem' v)) (sync.RWMutex) "writerSem"%go.
  simpl_one_flatten_struct (# (RWMutex.readerSem' v)) (sync.RWMutex) "readerSem"%go.
  simpl_one_flatten_struct (# (RWMutex.readerCount' v)) (sync.RWMutex) "readerCount"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type sync.rlocker *)
Module rlocker.

#[global] Transparent sync.rlocker.
#[global] Typeclasses Transparent sync.rlocker.
Section def.
Context `{ffi_syntax}.
Definition t := RWMutex.t.
End def.
End rlocker.

(* type sync.WaitGroup *)
Module WaitGroup.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  noCopy' : noCopy.t;
  state' : atomic.Uint64.t;
  sema' : w32;
}.
End def.
End WaitGroup.

Section instances.
Context `{ffi_syntax}.
Global Instance WaitGroup_ty_wf : struct.Wf sync.WaitGroup.
Proof. apply _. Qed.

Global Instance settable_WaitGroup : Settable WaitGroup.t :=
  settable! WaitGroup.mk < WaitGroup.noCopy'; WaitGroup.state'; WaitGroup.sema' >.
#[local] Transparent sync.WaitGroup.
#[local] Typeclasses Transparent sync.WaitGroup.
Global Instance into_val_WaitGroup : IntoVal WaitGroup.t :=
  {| to_val_def v :=
    struct.val_aux sync.WaitGroup [
    "noCopy" ::= #(WaitGroup.noCopy' v);
    "state" ::= #(WaitGroup.state' v);
    "sema" ::= #(WaitGroup.sema' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_WaitGroup : IntoValTyped WaitGroup.t sync.WaitGroup :=
{|
  default_val := WaitGroup.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_WaitGroup_noCopy : IntoValStructField "noCopy" sync.WaitGroup WaitGroup.noCopy'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_WaitGroup_state : IntoValStructField "state" sync.WaitGroup WaitGroup.state'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_WaitGroup_sema : IntoValStructField "sema" sync.WaitGroup WaitGroup.sema'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_WaitGroup noCopy' state' sema':
  PureWp True
    (struct.make #sync.WaitGroup (alist_val [
      "noCopy" ::= #noCopy';
      "state" ::= #state';
      "sema" ::= #sema'
    ]))%struct
    #(WaitGroup.mk noCopy' state' sema').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance WaitGroup_struct_fields_split dq l (v : WaitGroup.t) :
  StructFieldsSplit dq l v (
    "HnoCopy" ∷ l ↦s[sync.WaitGroup :: "noCopy"]{dq} v.(WaitGroup.noCopy') ∗
    "Hstate" ∷ l ↦s[sync.WaitGroup :: "state"]{dq} v.(WaitGroup.state') ∗
    "Hsema" ∷ l ↦s[sync.WaitGroup :: "sema"]{dq} v.(WaitGroup.sema')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (WaitGroup.noCopy' v)) (sync.WaitGroup) "noCopy"%go.
  simpl_one_flatten_struct (# (WaitGroup.state' v)) (sync.WaitGroup) "state"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_sync : IsPkgDefinedPure sync :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single sync ∧
      is_pkg_defined_pure code.sync.atomic.atomic ∧
      is_pkg_defined_pure code.internal.race.race;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_sync : IsPkgDefined sync :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single sync ∗
       is_pkg_defined code.sync.atomic.atomic ∗
       is_pkg_defined code.internal.race.race)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_NewCond :
  WpFuncCall sync.NewCond _ (is_pkg_defined sync) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_runtime_Semacquire :
  WpFuncCall sync.runtime_Semacquire _ (is_pkg_defined sync) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_runtime_SemacquireWaitGroup :
  WpFuncCall sync.runtime_SemacquireWaitGroup _ (is_pkg_defined sync) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_runtime_SemacquireRWMutexR :
  WpFuncCall sync.runtime_SemacquireRWMutexR _ (is_pkg_defined sync) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_runtime_SemacquireRWMutex :
  WpFuncCall sync.runtime_SemacquireRWMutex _ (is_pkg_defined sync) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_runtime_Semrelease :
  WpFuncCall sync.runtime_Semrelease _ (is_pkg_defined sync) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Cond'ptr_Broadcast :
  WpMethodCall (ptrT.id sync.Cond.id) "Broadcast" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Cond'ptr_Signal :
  WpMethodCall (ptrT.id sync.Cond.id) "Signal" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Cond'ptr_Wait :
  WpMethodCall (ptrT.id sync.Cond.id) "Wait" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Mutex'ptr_Lock :
  WpMethodCall (ptrT.id sync.Mutex.id) "Lock" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Mutex'ptr_TryLock :
  WpMethodCall (ptrT.id sync.Mutex.id) "TryLock" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Mutex'ptr_Unlock :
  WpMethodCall (ptrT.id sync.Mutex.id) "Unlock" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Once'ptr_Do :
  WpMethodCall (ptrT.id sync.Once.id) "Do" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Once'ptr_doSlow :
  WpMethodCall (ptrT.id sync.Once.id) "doSlow" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_RWMutex'ptr_Lock :
  WpMethodCall (ptrT.id sync.RWMutex.id) "Lock" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_RWMutex'ptr_RLock :
  WpMethodCall (ptrT.id sync.RWMutex.id) "RLock" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_RWMutex'ptr_RLocker :
  WpMethodCall (ptrT.id sync.RWMutex.id) "RLocker" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_RWMutex'ptr_RUnlock :
  WpMethodCall (ptrT.id sync.RWMutex.id) "RUnlock" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_RWMutex'ptr_TryLock :
  WpMethodCall (ptrT.id sync.RWMutex.id) "TryLock" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_RWMutex'ptr_TryRLock :
  WpMethodCall (ptrT.id sync.RWMutex.id) "TryRLock" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_RWMutex'ptr_Unlock :
  WpMethodCall (ptrT.id sync.RWMutex.id) "Unlock" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_RWMutex'ptr_rUnlockSlow :
  WpMethodCall (ptrT.id sync.RWMutex.id) "rUnlockSlow" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_WaitGroup'ptr_Add :
  WpMethodCall (ptrT.id sync.WaitGroup.id) "Add" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_WaitGroup'ptr_Done :
  WpMethodCall (ptrT.id sync.WaitGroup.id) "Done" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_WaitGroup'ptr_Wait :
  WpMethodCall (ptrT.id sync.WaitGroup.id) "Wait" _ (is_pkg_defined sync) :=
  ltac:(solve_wp_method_call).

End names.
End sync.
