(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.crypto.ed25519.

Set Default Proof Using "Type".

Module ed25519.

(* type ed25519.PublicKey *)
Module PublicKey.

#[global] Transparent ed25519.PublicKey.
#[global] Typeclasses Transparent ed25519.PublicKey.
Section def.
Context `{ffi_syntax}.
Definition t := slice.t.
End def.
End PublicKey.

(* type ed25519.PrivateKey *)
Module PrivateKey.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End PrivateKey.

Global Instance bounded_size_PrivateKey : BoundedTypeSize ed25519.PrivateKey.
Admitted.

Global Instance into_val_PrivateKey `{ffi_syntax} : IntoVal PrivateKey.t.
Admitted.

Global Instance into_val_typed_PrivateKey `{ffi_syntax} : IntoValTyped PrivateKey.t ed25519.PrivateKey.
Admitted.

(* type ed25519.Options *)
Module Options.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Options.

Global Instance bounded_size_Options : BoundedTypeSize ed25519.Options.
Admitted.

Global Instance into_val_Options `{ffi_syntax} : IntoVal Options.t.
Admitted.

Global Instance into_val_typed_Options `{ffi_syntax} : IntoValTyped Options.t ed25519.Options.
Admitted.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_ed25519 : IsPkgDefinedPure ed25519 :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single ed25519;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_ed25519 : IsPkgDefined ed25519 :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single ed25519)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

End names.
End ed25519.
