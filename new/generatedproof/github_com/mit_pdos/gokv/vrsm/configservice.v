(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.generatedproof.github_com.mit_pdos.gokv.reconnectclient.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.e.
Require Export New.generatedproof.log.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.mit_pdos.gokv.urpc.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.paxos.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.vrsm.configservice.

Set Default Proof Using "Type".

Module configservice.

(* type configservice.Clerk *)
Module Clerk.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  cls' : slice.t;
  leader' : w64;
}.
End def.
End Clerk.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Clerk : Settable Clerk.t :=
  settable! Clerk.mk < Clerk.mu'; Clerk.cls'; Clerk.leader' >.
Global Instance into_val_Clerk : IntoVal Clerk.t :=
  {| to_val_def v :=
    struct.val_aux configservice.Clerk [
    "mu" ::= #(Clerk.mu' v);
    "cls" ::= #(Clerk.cls' v);
    "leader" ::= #(Clerk.leader' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Clerk : IntoValTyped Clerk.t configservice.Clerk :=
{|
  default_val := Clerk.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Clerk_mu : IntoValStructField "mu" configservice.Clerk Clerk.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Clerk_cls : IntoValStructField "cls" configservice.Clerk Clerk.cls'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Clerk_leader : IntoValStructField "leader" configservice.Clerk Clerk.leader'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Clerk mu' cls' leader':
  PureWp True
    (struct.make #configservice.Clerk (alist_val [
      "mu" ::= #mu';
      "cls" ::= #cls';
      "leader" ::= #leader'
    ]))%struct
    #(Clerk.mk mu' cls' leader').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Clerk_struct_fields_split dq l (v : Clerk.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[configservice.Clerk :: "mu"]{dq} v.(Clerk.mu') ∗
    "Hcls" ∷ l ↦s[configservice.Clerk :: "cls"]{dq} v.(Clerk.cls') ∗
    "Hleader" ∷ l ↦s[configservice.Clerk :: "leader"]{dq} v.(Clerk.leader')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Clerk.mu' v)) configservice.Clerk "mu"%go.
  simpl_one_flatten_struct (# (Clerk.cls' v)) configservice.Clerk "cls"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type configservice.state *)
Module state.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  epoch' : w64;
  reservedEpoch' : w64;
  leaseExpiration' : w64;
  wantLeaseToExpire' : bool;
  config' : slice.t;
}.
End def.
End state.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_state : Settable state.t :=
  settable! state.mk < state.epoch'; state.reservedEpoch'; state.leaseExpiration'; state.wantLeaseToExpire'; state.config' >.
Global Instance into_val_state : IntoVal state.t :=
  {| to_val_def v :=
    struct.val_aux configservice.state [
    "epoch" ::= #(state.epoch' v);
    "reservedEpoch" ::= #(state.reservedEpoch' v);
    "leaseExpiration" ::= #(state.leaseExpiration' v);
    "wantLeaseToExpire" ::= #(state.wantLeaseToExpire' v);
    "config" ::= #(state.config' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_state : IntoValTyped state.t configservice.state :=
{|
  default_val := state.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_state_epoch : IntoValStructField "epoch" configservice.state state.epoch'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_state_reservedEpoch : IntoValStructField "reservedEpoch" configservice.state state.reservedEpoch'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_state_leaseExpiration : IntoValStructField "leaseExpiration" configservice.state state.leaseExpiration'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_state_wantLeaseToExpire : IntoValStructField "wantLeaseToExpire" configservice.state state.wantLeaseToExpire'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_state_config : IntoValStructField "config" configservice.state state.config'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_state epoch' reservedEpoch' leaseExpiration' wantLeaseToExpire' config':
  PureWp True
    (struct.make #configservice.state (alist_val [
      "epoch" ::= #epoch';
      "reservedEpoch" ::= #reservedEpoch';
      "leaseExpiration" ::= #leaseExpiration';
      "wantLeaseToExpire" ::= #wantLeaseToExpire';
      "config" ::= #config'
    ]))%struct
    #(state.mk epoch' reservedEpoch' leaseExpiration' wantLeaseToExpire' config').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance state_struct_fields_split dq l (v : state.t) :
  StructFieldsSplit dq l v (
    "Hepoch" ∷ l ↦s[configservice.state :: "epoch"]{dq} v.(state.epoch') ∗
    "HreservedEpoch" ∷ l ↦s[configservice.state :: "reservedEpoch"]{dq} v.(state.reservedEpoch') ∗
    "HleaseExpiration" ∷ l ↦s[configservice.state :: "leaseExpiration"]{dq} v.(state.leaseExpiration') ∗
    "HwantLeaseToExpire" ∷ l ↦s[configservice.state :: "wantLeaseToExpire"]{dq} v.(state.wantLeaseToExpire') ∗
    "Hconfig" ∷ l ↦s[configservice.state :: "config"]{dq} v.(state.config')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (state.epoch' v)) configservice.state "epoch"%go.
  simpl_one_flatten_struct (# (state.reservedEpoch' v)) configservice.state "reservedEpoch"%go.
  simpl_one_flatten_struct (# (state.leaseExpiration' v)) configservice.state "leaseExpiration"%go.
  simpl_one_flatten_struct (# (state.wantLeaseToExpire' v)) configservice.state "wantLeaseToExpire"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type configservice.Server *)
Module Server.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  s' : loc;
}.
End def.
End Server.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Server : Settable Server.t :=
  settable! Server.mk < Server.s' >.
Global Instance into_val_Server : IntoVal Server.t :=
  {| to_val_def v :=
    struct.val_aux configservice.Server [
    "s" ::= #(Server.s' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Server : IntoValTyped Server.t configservice.Server :=
{|
  default_val := Server.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Server_s : IntoValStructField "s" configservice.Server Server.s'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Server s':
  PureWp True
    (struct.make #configservice.Server (alist_val [
      "s" ::= #s'
    ]))%struct
    #(Server.mk s').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Server_struct_fields_split dq l (v : Server.t) :
  StructFieldsSplit dq l v (
    "Hs" ∷ l ↦s[configservice.Server :: "s"]{dq} v.(Server.s')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined configservice :=
{|
  is_pkg_defined := is_global_definitions configservice var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_EncodeConfig :
  WpFuncCall configservice "EncodeConfig" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DecodeConfig :
  WpFuncCall configservice "DecodeConfig" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MakeClerk :
  WpFuncCall configservice "MakeClerk" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_encodeState :
  WpFuncCall configservice "encodeState" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_decodeState :
  WpFuncCall configservice "decodeState" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_makeServer :
  WpFuncCall configservice "makeServer" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_StartServer :
  WpFuncCall configservice "StartServer" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_GetConfig :
  WpMethodCall configservice "Clerk'ptr" "GetConfig" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_GetLease :
  WpMethodCall configservice "Clerk'ptr" "GetLease" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_ReserveEpochAndGetConfig :
  WpMethodCall configservice "Clerk'ptr" "ReserveEpochAndGetConfig" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_TryWriteConfig :
  WpMethodCall configservice "Clerk'ptr" "TryWriteConfig" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_GetConfig :
  WpMethodCall configservice "Server'ptr" "GetConfig" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_GetLease :
  WpMethodCall configservice "Server'ptr" "GetLease" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_ReserveEpochAndGetConfig :
  WpMethodCall configservice "Server'ptr" "ReserveEpochAndGetConfig" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_TryWriteConfig :
  WpMethodCall configservice "Server'ptr" "TryWriteConfig" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_tryAcquire :
  WpMethodCall configservice "Server'ptr" "tryAcquire" _ (is_pkg_defined configservice) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End configservice.
