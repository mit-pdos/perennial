(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.mit_pdos.gokv.reconfig.replica.becomeprimaryargs_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.reconnectclient.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.replica.applyasbackupargs_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.replica.applyreply_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.replica.err_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.replica.getstateargs_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.replica.getstatereply_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.replica.increasecommitargs_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.replica.setstateargs_gk.
Require Export New.generatedproof.log.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.mit_pdos.gokv.urpc.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.configservice.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.replica.becomeprimaryargs_gk.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.vrsm.replica.

Set Default Proof Using "Type".

Module replica.

(* type replica.Op *)
Module Op.
Section def.
Context `{ffi_syntax}.
Definition t := slice.t.
End def.
End Op.

(* type replica.StateMachine *)
Module StateMachine.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  StartApply' : func.t;
  ApplyReadonly' : func.t;
  SetStateAndUnseal' : func.t;
  GetStateAndSeal' : func.t;
}.
End def.
End StateMachine.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_StateMachine : Settable StateMachine.t :=
  settable! StateMachine.mk < StateMachine.StartApply'; StateMachine.ApplyReadonly'; StateMachine.SetStateAndUnseal'; StateMachine.GetStateAndSeal' >.
Global Instance into_val_StateMachine : IntoVal StateMachine.t :=
  {| to_val_def v :=
    struct.val_aux replica.StateMachine [
    "StartApply" ::= #(StateMachine.StartApply' v);
    "ApplyReadonly" ::= #(StateMachine.ApplyReadonly' v);
    "SetStateAndUnseal" ::= #(StateMachine.SetStateAndUnseal' v);
    "GetStateAndSeal" ::= #(StateMachine.GetStateAndSeal' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_StateMachine : IntoValTyped StateMachine.t replica.StateMachine :=
{|
  default_val := StateMachine.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_StateMachine_StartApply : IntoValStructField "StartApply" replica.StateMachine StateMachine.StartApply'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_StateMachine_ApplyReadonly : IntoValStructField "ApplyReadonly" replica.StateMachine StateMachine.ApplyReadonly'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_StateMachine_SetStateAndUnseal : IntoValStructField "SetStateAndUnseal" replica.StateMachine StateMachine.SetStateAndUnseal'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_StateMachine_GetStateAndSeal : IntoValStructField "GetStateAndSeal" replica.StateMachine StateMachine.GetStateAndSeal'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_StateMachine StartApply' ApplyReadonly' SetStateAndUnseal' GetStateAndSeal':
  PureWp True
    (struct.make #replica.StateMachine (alist_val [
      "StartApply" ::= #StartApply';
      "ApplyReadonly" ::= #ApplyReadonly';
      "SetStateAndUnseal" ::= #SetStateAndUnseal';
      "GetStateAndSeal" ::= #GetStateAndSeal'
    ]))%struct
    #(StateMachine.mk StartApply' ApplyReadonly' SetStateAndUnseal' GetStateAndSeal').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance StateMachine_struct_fields_split dq l (v : StateMachine.t) :
  StructFieldsSplit dq l v (
    "HStartApply" ∷ l ↦s[replica.StateMachine :: "StartApply"]{dq} v.(StateMachine.StartApply') ∗
    "HApplyReadonly" ∷ l ↦s[replica.StateMachine :: "ApplyReadonly"]{dq} v.(StateMachine.ApplyReadonly') ∗
    "HSetStateAndUnseal" ∷ l ↦s[replica.StateMachine :: "SetStateAndUnseal"]{dq} v.(StateMachine.SetStateAndUnseal') ∗
    "HGetStateAndSeal" ∷ l ↦s[replica.StateMachine :: "GetStateAndSeal"]{dq} v.(StateMachine.GetStateAndSeal')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (StateMachine.StartApply' v)) (replica.StateMachine) "StartApply"%go.
  simpl_one_flatten_struct (# (StateMachine.ApplyReadonly' v)) (replica.StateMachine) "ApplyReadonly"%go.
  simpl_one_flatten_struct (# (StateMachine.SetStateAndUnseal' v)) (replica.StateMachine) "SetStateAndUnseal"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type replica.SyncStateMachine *)
Module SyncStateMachine.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Apply' : func.t;
  ApplyReadonly' : func.t;
  SetStateAndUnseal' : func.t;
  GetStateAndSeal' : func.t;
}.
End def.
End SyncStateMachine.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_SyncStateMachine : Settable SyncStateMachine.t :=
  settable! SyncStateMachine.mk < SyncStateMachine.Apply'; SyncStateMachine.ApplyReadonly'; SyncStateMachine.SetStateAndUnseal'; SyncStateMachine.GetStateAndSeal' >.
Global Instance into_val_SyncStateMachine : IntoVal SyncStateMachine.t :=
  {| to_val_def v :=
    struct.val_aux replica.SyncStateMachine [
    "Apply" ::= #(SyncStateMachine.Apply' v);
    "ApplyReadonly" ::= #(SyncStateMachine.ApplyReadonly' v);
    "SetStateAndUnseal" ::= #(SyncStateMachine.SetStateAndUnseal' v);
    "GetStateAndSeal" ::= #(SyncStateMachine.GetStateAndSeal' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_SyncStateMachine : IntoValTyped SyncStateMachine.t replica.SyncStateMachine :=
{|
  default_val := SyncStateMachine.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_SyncStateMachine_Apply : IntoValStructField "Apply" replica.SyncStateMachine SyncStateMachine.Apply'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_SyncStateMachine_ApplyReadonly : IntoValStructField "ApplyReadonly" replica.SyncStateMachine SyncStateMachine.ApplyReadonly'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_SyncStateMachine_SetStateAndUnseal : IntoValStructField "SetStateAndUnseal" replica.SyncStateMachine SyncStateMachine.SetStateAndUnseal'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_SyncStateMachine_GetStateAndSeal : IntoValStructField "GetStateAndSeal" replica.SyncStateMachine SyncStateMachine.GetStateAndSeal'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_SyncStateMachine Apply' ApplyReadonly' SetStateAndUnseal' GetStateAndSeal':
  PureWp True
    (struct.make #replica.SyncStateMachine (alist_val [
      "Apply" ::= #Apply';
      "ApplyReadonly" ::= #ApplyReadonly';
      "SetStateAndUnseal" ::= #SetStateAndUnseal';
      "GetStateAndSeal" ::= #GetStateAndSeal'
    ]))%struct
    #(SyncStateMachine.mk Apply' ApplyReadonly' SetStateAndUnseal' GetStateAndSeal').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance SyncStateMachine_struct_fields_split dq l (v : SyncStateMachine.t) :
  StructFieldsSplit dq l v (
    "HApply" ∷ l ↦s[replica.SyncStateMachine :: "Apply"]{dq} v.(SyncStateMachine.Apply') ∗
    "HApplyReadonly" ∷ l ↦s[replica.SyncStateMachine :: "ApplyReadonly"]{dq} v.(SyncStateMachine.ApplyReadonly') ∗
    "HSetStateAndUnseal" ∷ l ↦s[replica.SyncStateMachine :: "SetStateAndUnseal"]{dq} v.(SyncStateMachine.SetStateAndUnseal') ∗
    "HGetStateAndSeal" ∷ l ↦s[replica.SyncStateMachine :: "GetStateAndSeal"]{dq} v.(SyncStateMachine.GetStateAndSeal')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (SyncStateMachine.Apply' v)) (replica.SyncStateMachine) "Apply"%go.
  simpl_one_flatten_struct (# (SyncStateMachine.ApplyReadonly' v)) (replica.SyncStateMachine) "ApplyReadonly"%go.
  simpl_one_flatten_struct (# (SyncStateMachine.SetStateAndUnseal' v)) (replica.SyncStateMachine) "SetStateAndUnseal"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type replica.Clerk *)
Module Clerk.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  cl' : loc;
}.
End def.
End Clerk.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Clerk : Settable Clerk.t :=
  settable! Clerk.mk < Clerk.cl' >.
Global Instance into_val_Clerk : IntoVal Clerk.t :=
  {| to_val_def v :=
    struct.val_aux replica.Clerk [
    "cl" ::= #(Clerk.cl' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Clerk : IntoValTyped Clerk.t replica.Clerk :=
{|
  default_val := Clerk.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Clerk_cl : IntoValStructField "cl" replica.Clerk Clerk.cl'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Clerk cl':
  PureWp True
    (struct.make #replica.Clerk (alist_val [
      "cl" ::= #cl'
    ]))%struct
    #(Clerk.mk cl').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Clerk_struct_fields_split dq l (v : Clerk.t) :
  StructFieldsSplit dq l v (
    "Hcl" ∷ l ↦s[replica.Clerk :: "cl"]{dq} v.(Clerk.cl')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

(* type replica.Server *)
Module Server.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  epoch' : w64;
  sealed' : bool;
  sm' : loc;
  nextIndex' : w64;
  canBecomePrimary' : bool;
  isPrimary' : bool;
  clerks' : slice.t;
  isPrimary_cond' : loc;
  opAppliedConds' : loc;
  leaseExpiration' : w64;
  leaseValid' : bool;
  committedNextIndex' : w64;
  committedNextIndex_cond' : loc;
  confCk' : loc;
}.
End def.
End Server.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Server : Settable Server.t :=
  settable! Server.mk < Server.mu'; Server.epoch'; Server.sealed'; Server.sm'; Server.nextIndex'; Server.canBecomePrimary'; Server.isPrimary'; Server.clerks'; Server.isPrimary_cond'; Server.opAppliedConds'; Server.leaseExpiration'; Server.leaseValid'; Server.committedNextIndex'; Server.committedNextIndex_cond'; Server.confCk' >.
Global Instance into_val_Server : IntoVal Server.t :=
  {| to_val_def v :=
    struct.val_aux replica.Server [
    "mu" ::= #(Server.mu' v);
    "epoch" ::= #(Server.epoch' v);
    "sealed" ::= #(Server.sealed' v);
    "sm" ::= #(Server.sm' v);
    "nextIndex" ::= #(Server.nextIndex' v);
    "canBecomePrimary" ::= #(Server.canBecomePrimary' v);
    "isPrimary" ::= #(Server.isPrimary' v);
    "clerks" ::= #(Server.clerks' v);
    "isPrimary_cond" ::= #(Server.isPrimary_cond' v);
    "opAppliedConds" ::= #(Server.opAppliedConds' v);
    "leaseExpiration" ::= #(Server.leaseExpiration' v);
    "leaseValid" ::= #(Server.leaseValid' v);
    "committedNextIndex" ::= #(Server.committedNextIndex' v);
    "committedNextIndex_cond" ::= #(Server.committedNextIndex_cond' v);
    "confCk" ::= #(Server.confCk' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Server : IntoValTyped Server.t replica.Server :=
{|
  default_val := Server.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Server_mu : IntoValStructField "mu" replica.Server Server.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_epoch : IntoValStructField "epoch" replica.Server Server.epoch'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_sealed : IntoValStructField "sealed" replica.Server Server.sealed'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_sm : IntoValStructField "sm" replica.Server Server.sm'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_nextIndex : IntoValStructField "nextIndex" replica.Server Server.nextIndex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_canBecomePrimary : IntoValStructField "canBecomePrimary" replica.Server Server.canBecomePrimary'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_isPrimary : IntoValStructField "isPrimary" replica.Server Server.isPrimary'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_clerks : IntoValStructField "clerks" replica.Server Server.clerks'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_isPrimary_cond : IntoValStructField "isPrimary_cond" replica.Server Server.isPrimary_cond'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_opAppliedConds : IntoValStructField "opAppliedConds" replica.Server Server.opAppliedConds'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_leaseExpiration : IntoValStructField "leaseExpiration" replica.Server Server.leaseExpiration'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_leaseValid : IntoValStructField "leaseValid" replica.Server Server.leaseValid'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_committedNextIndex : IntoValStructField "committedNextIndex" replica.Server Server.committedNextIndex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_committedNextIndex_cond : IntoValStructField "committedNextIndex_cond" replica.Server Server.committedNextIndex_cond'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_confCk : IntoValStructField "confCk" replica.Server Server.confCk'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Server mu' epoch' sealed' sm' nextIndex' canBecomePrimary' isPrimary' clerks' isPrimary_cond' opAppliedConds' leaseExpiration' leaseValid' committedNextIndex' committedNextIndex_cond' confCk':
  PureWp True
    (struct.make #replica.Server (alist_val [
      "mu" ::= #mu';
      "epoch" ::= #epoch';
      "sealed" ::= #sealed';
      "sm" ::= #sm';
      "nextIndex" ::= #nextIndex';
      "canBecomePrimary" ::= #canBecomePrimary';
      "isPrimary" ::= #isPrimary';
      "clerks" ::= #clerks';
      "isPrimary_cond" ::= #isPrimary_cond';
      "opAppliedConds" ::= #opAppliedConds';
      "leaseExpiration" ::= #leaseExpiration';
      "leaseValid" ::= #leaseValid';
      "committedNextIndex" ::= #committedNextIndex';
      "committedNextIndex_cond" ::= #committedNextIndex_cond';
      "confCk" ::= #confCk'
    ]))%struct
    #(Server.mk mu' epoch' sealed' sm' nextIndex' canBecomePrimary' isPrimary' clerks' isPrimary_cond' opAppliedConds' leaseExpiration' leaseValid' committedNextIndex' committedNextIndex_cond' confCk').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Server_struct_fields_split dq l (v : Server.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[replica.Server :: "mu"]{dq} v.(Server.mu') ∗
    "Hepoch" ∷ l ↦s[replica.Server :: "epoch"]{dq} v.(Server.epoch') ∗
    "Hsealed" ∷ l ↦s[replica.Server :: "sealed"]{dq} v.(Server.sealed') ∗
    "Hsm" ∷ l ↦s[replica.Server :: "sm"]{dq} v.(Server.sm') ∗
    "HnextIndex" ∷ l ↦s[replica.Server :: "nextIndex"]{dq} v.(Server.nextIndex') ∗
    "HcanBecomePrimary" ∷ l ↦s[replica.Server :: "canBecomePrimary"]{dq} v.(Server.canBecomePrimary') ∗
    "HisPrimary" ∷ l ↦s[replica.Server :: "isPrimary"]{dq} v.(Server.isPrimary') ∗
    "Hclerks" ∷ l ↦s[replica.Server :: "clerks"]{dq} v.(Server.clerks') ∗
    "HisPrimary_cond" ∷ l ↦s[replica.Server :: "isPrimary_cond"]{dq} v.(Server.isPrimary_cond') ∗
    "HopAppliedConds" ∷ l ↦s[replica.Server :: "opAppliedConds"]{dq} v.(Server.opAppliedConds') ∗
    "HleaseExpiration" ∷ l ↦s[replica.Server :: "leaseExpiration"]{dq} v.(Server.leaseExpiration') ∗
    "HleaseValid" ∷ l ↦s[replica.Server :: "leaseValid"]{dq} v.(Server.leaseValid') ∗
    "HcommittedNextIndex" ∷ l ↦s[replica.Server :: "committedNextIndex"]{dq} v.(Server.committedNextIndex') ∗
    "HcommittedNextIndex_cond" ∷ l ↦s[replica.Server :: "committedNextIndex_cond"]{dq} v.(Server.committedNextIndex_cond') ∗
    "HconfCk" ∷ l ↦s[replica.Server :: "confCk"]{dq} v.(Server.confCk')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Server.mu' v)) (replica.Server) "mu"%go.
  simpl_one_flatten_struct (# (Server.epoch' v)) (replica.Server) "epoch"%go.
  simpl_one_flatten_struct (# (Server.sealed' v)) (replica.Server) "sealed"%go.
  simpl_one_flatten_struct (# (Server.sm' v)) (replica.Server) "sm"%go.
  simpl_one_flatten_struct (# (Server.nextIndex' v)) (replica.Server) "nextIndex"%go.
  simpl_one_flatten_struct (# (Server.canBecomePrimary' v)) (replica.Server) "canBecomePrimary"%go.
  simpl_one_flatten_struct (# (Server.isPrimary' v)) (replica.Server) "isPrimary"%go.
  simpl_one_flatten_struct (# (Server.clerks' v)) (replica.Server) "clerks"%go.
  simpl_one_flatten_struct (# (Server.isPrimary_cond' v)) (replica.Server) "isPrimary_cond"%go.
  simpl_one_flatten_struct (# (Server.opAppliedConds' v)) (replica.Server) "opAppliedConds"%go.
  simpl_one_flatten_struct (# (Server.leaseExpiration' v)) (replica.Server) "leaseExpiration"%go.
  simpl_one_flatten_struct (# (Server.leaseValid' v)) (replica.Server) "leaseValid"%go.
  simpl_one_flatten_struct (# (Server.committedNextIndex' v)) (replica.Server) "committedNextIndex"%go.
  simpl_one_flatten_struct (# (Server.committedNextIndex_cond' v)) (replica.Server) "committedNextIndex_cond"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{!heapGS Σ}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_replica : IsPkgDefinedPure replica :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single replica ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.grove_ffi.grove_ffi ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.reconfig.replica.becomeprimaryargs_gk.becomeprimaryargs_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.reconnectclient.reconnectclient ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.replica.applyasbackupargs_gk.applyasbackupargs_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.replica.applyreply_gk.applyreply_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.replica.err_gk.err_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.replica.getstateargs_gk.getstateargs_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.replica.getstatereply_gk.getstatereply_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.replica.increasecommitargs_gk.increasecommitargs_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.replica.setstateargs_gk.setstateargs_gk ∧
      is_pkg_defined_pure code.log.log ∧
      is_pkg_defined_pure code.sync.sync ∧
      is_pkg_defined_pure code.github_com.goose_lang.primitive.primitive ∧
      is_pkg_defined_pure code.github_com.goose_lang.std.std ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.urpc.urpc ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.configservice.configservice ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.replica.becomeprimaryargs_gk.becomeprimaryargs_gk;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_replica : IsPkgDefined replica :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single replica ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.grove_ffi.grove_ffi ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.reconfig.replica.becomeprimaryargs_gk.becomeprimaryargs_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.reconnectclient.reconnectclient ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.replica.applyasbackupargs_gk.applyasbackupargs_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.replica.applyreply_gk.applyreply_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.replica.err_gk.err_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.replica.getstateargs_gk.getstateargs_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.replica.getstatereply_gk.getstatereply_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.replica.increasecommitargs_gk.increasecommitargs_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.replica.setstateargs_gk.setstateargs_gk ∗
       is_pkg_defined code.log.log ∗
       is_pkg_defined code.sync.sync ∗
       is_pkg_defined code.github_com.goose_lang.primitive.primitive ∗
       is_pkg_defined code.github_com.goose_lang.std.std ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.urpc.urpc ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.configservice.configservice ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.replica.becomeprimaryargs_gk.becomeprimaryargs_gk)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_MakeClerk :
  WpFuncCall replica.MakeClerk _ (is_pkg_defined replica) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_MakeServer :
  WpFuncCall replica.MakeServer _ (is_pkg_defined replica) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Clerk'ptr_Apply :
  WpMethodCall (ptrT.id replica.Clerk.id) "Apply" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Clerk'ptr_ApplyAsBackup :
  WpMethodCall (ptrT.id replica.Clerk.id) "ApplyAsBackup" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Clerk'ptr_ApplyRo :
  WpMethodCall (ptrT.id replica.Clerk.id) "ApplyRo" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Clerk'ptr_BecomePrimary :
  WpMethodCall (ptrT.id replica.Clerk.id) "BecomePrimary" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Clerk'ptr_GetState :
  WpMethodCall (ptrT.id replica.Clerk.id) "GetState" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Clerk'ptr_IncreaseCommitIndex :
  WpMethodCall (ptrT.id replica.Clerk.id) "IncreaseCommitIndex" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Clerk'ptr_SetState :
  WpMethodCall (ptrT.id replica.Clerk.id) "SetState" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_Apply :
  WpMethodCall (ptrT.id replica.Server.id) "Apply" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_ApplyAsBackup :
  WpMethodCall (ptrT.id replica.Server.id) "ApplyAsBackup" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_ApplyRoWaitForCommit :
  WpMethodCall (ptrT.id replica.Server.id) "ApplyRoWaitForCommit" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_BecomePrimary :
  WpMethodCall (ptrT.id replica.Server.id) "BecomePrimary" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_GetState :
  WpMethodCall (ptrT.id replica.Server.id) "GetState" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_IncreaseCommitIndex :
  WpMethodCall (ptrT.id replica.Server.id) "IncreaseCommitIndex" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_Serve :
  WpMethodCall (ptrT.id replica.Server.id) "Serve" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_SetState :
  WpMethodCall (ptrT.id replica.Server.id) "SetState" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_isEpochStale :
  WpMethodCall (ptrT.id replica.Server.id) "isEpochStale" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_leaseRenewalThread :
  WpMethodCall (ptrT.id replica.Server.id) "leaseRenewalThread" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_sendIncreaseCommitThread :
  WpMethodCall (ptrT.id replica.Server.id) "sendIncreaseCommitThread" _ (is_pkg_defined replica) :=
  ltac:(solve_wp_method_call).

End names.
End replica.
