(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.mit_pdos.gokv.trusted_proph.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.configservice.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.e.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.replica.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.vrsm.clerk.

Set Default Proof Using "Type".

Module clerk.

Module Clerk.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  confCk' : loc;
  replicaClerks' : slice.t;
  preferredReplica' : w64;
  lastPreferenceRefresh' : w64;
}.
End def.
End Clerk.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Clerk : Settable _ :=
  settable! Clerk.mk < Clerk.confCk'; Clerk.replicaClerks'; Clerk.preferredReplica'; Clerk.lastPreferenceRefresh' >.
Global Instance into_val_Clerk : IntoVal Clerk.t :=
  {| to_val_def v :=
    struct.val_aux clerk.Clerk [
    "confCk" ::= #(Clerk.confCk' v);
    "replicaClerks" ::= #(Clerk.replicaClerks' v);
    "preferredReplica" ::= #(Clerk.preferredReplica' v);
    "lastPreferenceRefresh" ::= #(Clerk.lastPreferenceRefresh' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Clerk : IntoValTyped Clerk.t clerk.Clerk :=
{|
  default_val := Clerk.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Clerk_confCk : IntoValStructField "confCk" clerk.Clerk Clerk.confCk'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Clerk_replicaClerks : IntoValStructField "replicaClerks" clerk.Clerk Clerk.replicaClerks'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Clerk_preferredReplica : IntoValStructField "preferredReplica" clerk.Clerk Clerk.preferredReplica'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Clerk_lastPreferenceRefresh : IntoValStructField "lastPreferenceRefresh" clerk.Clerk Clerk.lastPreferenceRefresh'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Clerk confCk' replicaClerks' preferredReplica' lastPreferenceRefresh':
  PureWp True
    (struct.make #clerk.Clerk (alist_val [
      "confCk" ::= #confCk';
      "replicaClerks" ::= #replicaClerks';
      "preferredReplica" ::= #preferredReplica';
      "lastPreferenceRefresh" ::= #lastPreferenceRefresh'
    ]))%struct
    #(Clerk.mk confCk' replicaClerks' preferredReplica' lastPreferenceRefresh').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Clerk_struct_fields_split dq l (v : Clerk.t) :
  StructFieldsSplit dq l v (
    "HconfCk" ∷ l ↦s[clerk.Clerk :: "confCk"]{dq} v.(Clerk.confCk') ∗
    "HreplicaClerks" ∷ l ↦s[clerk.Clerk :: "replicaClerks"]{dq} v.(Clerk.replicaClerks') ∗
    "HpreferredReplica" ∷ l ↦s[clerk.Clerk :: "preferredReplica"]{dq} v.(Clerk.preferredReplica') ∗
    "HlastPreferenceRefresh" ∷ l ↦s[clerk.Clerk :: "lastPreferenceRefresh"]{dq} v.(Clerk.lastPreferenceRefresh')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Clerk.confCk' v)) clerk.Clerk "confCk"%go.
  simpl_one_flatten_struct (# (Clerk.replicaClerks' v)) clerk.Clerk "replicaClerks"%go.
  simpl_one_flatten_struct (# (Clerk.preferredReplica' v)) clerk.Clerk "preferredReplica"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined clerk :=
{|
  is_pkg_defined := is_global_definitions clerk var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_makeClerks :
  WpFuncCall clerk "makeClerks" _ (is_pkg_defined clerk) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Make :
  WpFuncCall clerk "Make" _ (is_pkg_defined clerk) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_Apply :
  WpMethodCall clerk "Clerk'ptr" "Apply" _ (is_pkg_defined clerk) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_ApplyRo :
  WpMethodCall clerk "Clerk'ptr" "ApplyRo" _ (is_pkg_defined clerk) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_ApplyRo2 :
  WpMethodCall clerk "Clerk'ptr" "ApplyRo2" _ (is_pkg_defined clerk) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_maybeRefreshPreference :
  WpMethodCall clerk "Clerk'ptr" "maybeRefreshPreference" _ (is_pkg_defined clerk) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End clerk.
