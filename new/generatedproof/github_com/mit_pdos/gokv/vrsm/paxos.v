(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.mit_pdos.gokv.reconnectclient.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.paxos.applyasfollowerargs_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.paxos.applyasfollowerreply_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.paxos.enternewepochargs_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.paxos.enternewepochreply_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.paxos.error_gk.
Require Export New.generatedproof.log.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.mit_pdos.gokv.asyncfile.
Require Export New.generatedproof.github_com.mit_pdos.gokv.urpc.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.paxos.paxosstate_gk.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.vrsm.paxos.

Set Default Proof Using "Type".

Module paxos.

(* type paxos.singleClerk *)
Module singleClerk.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  cl' : loc;
}.
End def.
End singleClerk.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent paxos.singleClerk.
#[local] Typeclasses Transparent paxos.singleClerk.

Global Instance singleClerk_wf : struct.Wf paxos.singleClerk.
Proof. apply _. Qed.

Global Instance settable_singleClerk : Settable singleClerk.t :=
  settable! singleClerk.mk < singleClerk.cl' >.
Global Instance into_val_singleClerk : IntoVal singleClerk.t :=
  {| to_val_def v :=
    struct.val_aux paxos.singleClerk [
    "cl" ::= #(singleClerk.cl' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_singleClerk : IntoValTyped singleClerk.t paxos.singleClerk :=
{|
  default_val := singleClerk.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_singleClerk_cl : IntoValStructField "cl" paxos.singleClerk singleClerk.cl'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_singleClerk cl':
  PureWp True
    (struct.make #paxos.singleClerk (alist_val [
      "cl" ::= #cl'
    ]))%struct
    #(singleClerk.mk cl').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance singleClerk_struct_fields_split dq l (v : singleClerk.t) :
  StructFieldsSplit dq l v (
    "Hcl" ∷ l ↦s[paxos.singleClerk :: "cl"]{dq} v.(singleClerk.cl')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

(* type paxos.Server *)
Module Server.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  ps' : loc;
  storage' : loc;
  clerks' : slice.t;
}.
End def.
End Server.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent paxos.Server.
#[local] Typeclasses Transparent paxos.Server.

Global Instance Server_wf : struct.Wf paxos.Server.
Proof. apply _. Qed.

Global Instance settable_Server : Settable Server.t :=
  settable! Server.mk < Server.mu'; Server.ps'; Server.storage'; Server.clerks' >.
Global Instance into_val_Server : IntoVal Server.t :=
  {| to_val_def v :=
    struct.val_aux paxos.Server [
    "mu" ::= #(Server.mu' v);
    "ps" ::= #(Server.ps' v);
    "storage" ::= #(Server.storage' v);
    "clerks" ::= #(Server.clerks' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Server : IntoValTyped Server.t paxos.Server :=
{|
  default_val := Server.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Server_mu : IntoValStructField "mu" paxos.Server Server.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_ps : IntoValStructField "ps" paxos.Server Server.ps'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_storage : IntoValStructField "storage" paxos.Server Server.storage'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_clerks : IntoValStructField "clerks" paxos.Server Server.clerks'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Server mu' ps' storage' clerks':
  PureWp True
    (struct.make #paxos.Server (alist_val [
      "mu" ::= #mu';
      "ps" ::= #ps';
      "storage" ::= #storage';
      "clerks" ::= #clerks'
    ]))%struct
    #(Server.mk mu' ps' storage' clerks').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Server_struct_fields_split dq l (v : Server.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[paxos.Server :: "mu"]{dq} v.(Server.mu') ∗
    "Hps" ∷ l ↦s[paxos.Server :: "ps"]{dq} v.(Server.ps') ∗
    "Hstorage" ∷ l ↦s[paxos.Server :: "storage"]{dq} v.(Server.storage') ∗
    "Hclerks" ∷ l ↦s[paxos.Server :: "clerks"]{dq} v.(Server.clerks')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Server.mu' v)) (paxos.Server) "mu"%go.
  simpl_one_flatten_struct (# (Server.ps' v)) (paxos.Server) "ps"%go.
  simpl_one_flatten_struct (# (Server.storage' v)) (paxos.Server) "storage"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{!heapGS Σ}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_paxos : IsPkgDefinedPure paxos :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single paxos ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.grove_ffi.grove_ffi ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.reconnectclient.reconnectclient ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.paxos.applyasfollowerargs_gk.applyasfollowerargs_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.paxos.applyasfollowerreply_gk.applyasfollowerreply_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.paxos.enternewepochargs_gk.enternewepochargs_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.paxos.enternewepochreply_gk.enternewepochreply_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.paxos.error_gk.error_gk ∧
      is_pkg_defined_pure code.log.log ∧
      is_pkg_defined_pure code.sync.sync ∧
      is_pkg_defined_pure code.github_com.goose_lang.std.std ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.asyncfile.asyncfile ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.urpc.urpc ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.paxos.paxosstate_gk.paxosstate_gk;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_paxos : IsPkgDefined paxos :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single paxos ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.grove_ffi.grove_ffi ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.reconnectclient.reconnectclient ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.paxos.applyasfollowerargs_gk.applyasfollowerargs_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.paxos.applyasfollowerreply_gk.applyasfollowerreply_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.paxos.enternewepochargs_gk.enternewepochargs_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.paxos.enternewepochreply_gk.enternewepochreply_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.paxos.error_gk.error_gk ∗
       is_pkg_defined code.log.log ∗
       is_pkg_defined code.sync.sync ∗
       is_pkg_defined code.github_com.goose_lang.std.std ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.asyncfile.asyncfile ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.urpc.urpc ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.paxos.paxosstate_gk.paxosstate_gk)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_MakeSingleClerk :
  WpFuncCall paxos.MakeSingleClerk _ (is_pkg_defined paxos) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_makeServer :
  WpFuncCall paxos.makeServer _ (is_pkg_defined paxos) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_StartServer :
  WpFuncCall paxos.StartServer _ (is_pkg_defined paxos) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_singleClerk'ptr_TryBecomeLeader :
  WpMethodCall (ptrT.id paxos.singleClerk.id) "TryBecomeLeader" _ (is_pkg_defined paxos) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_singleClerk'ptr_applyAsFollower :
  WpMethodCall (ptrT.id paxos.singleClerk.id) "applyAsFollower" _ (is_pkg_defined paxos) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_singleClerk'ptr_enterNewEpoch :
  WpMethodCall (ptrT.id paxos.singleClerk.id) "enterNewEpoch" _ (is_pkg_defined paxos) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_TryAcquire :
  WpMethodCall (ptrT.id paxos.Server.id) "TryAcquire" _ (is_pkg_defined paxos) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_TryBecomeLeader :
  WpMethodCall (ptrT.id paxos.Server.id) "TryBecomeLeader" _ (is_pkg_defined paxos) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_WeakRead :
  WpMethodCall (ptrT.id paxos.Server.id) "WeakRead" _ (is_pkg_defined paxos) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_applyAsFollower :
  WpMethodCall (ptrT.id paxos.Server.id) "applyAsFollower" _ (is_pkg_defined paxos) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_enterNewEpoch :
  WpMethodCall (ptrT.id paxos.Server.id) "enterNewEpoch" _ (is_pkg_defined paxos) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_withLock :
  WpMethodCall (ptrT.id paxos.Server.id) "withLock" _ (is_pkg_defined paxos) :=
  ltac:(solve_wp_method_call).

End names.
End paxos.
