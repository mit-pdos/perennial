(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.mit_pdos.gokv.reconnectclient.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.generatedproof.log.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.mit_pdos.gokv.asyncfile.
Require Export New.generatedproof.github_com.mit_pdos.gokv.urpc.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.vrsm.paxos.

Set Default Proof Using "Type".

Module paxos.

Module singleClerk.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  cl' : loc;
}.
End def.
End singleClerk.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_singleClerk : Settable _ :=
  settable! singleClerk.mk < singleClerk.cl' >.
Global Instance into_val_singleClerk : IntoVal singleClerk.t :=
  {| to_val_def v :=
    struct.val_aux paxos.singleClerk [
    "cl" ::= #(singleClerk.cl' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_singleClerk : IntoValTyped singleClerk.t paxos.singleClerk :=
{|
  default_val := singleClerk.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_singleClerk_cl : IntoValStructField "cl" paxos.singleClerk singleClerk.cl'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_singleClerk cl':
  PureWp True
    (struct.make #paxos.singleClerk (alist_val [
      "cl" ::= #cl'
    ]))%struct
    #(singleClerk.mk cl').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance singleClerk_struct_fields_split dq l (v : singleClerk.t) :
  StructFieldsSplit dq l v (
    "Hcl" ∷ l ↦s[paxos.singleClerk :: "cl"]{dq} v.(singleClerk.cl')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

Module Error.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End Error.

Module applyAsFollowerArgs.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  epoch' : w64;
  nextIndex' : w64;
  state' : slice.t;
}.
End def.
End applyAsFollowerArgs.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_applyAsFollowerArgs : Settable _ :=
  settable! applyAsFollowerArgs.mk < applyAsFollowerArgs.epoch'; applyAsFollowerArgs.nextIndex'; applyAsFollowerArgs.state' >.
Global Instance into_val_applyAsFollowerArgs : IntoVal applyAsFollowerArgs.t :=
  {| to_val_def v :=
    struct.val_aux paxos.applyAsFollowerArgs [
    "epoch" ::= #(applyAsFollowerArgs.epoch' v);
    "nextIndex" ::= #(applyAsFollowerArgs.nextIndex' v);
    "state" ::= #(applyAsFollowerArgs.state' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_applyAsFollowerArgs : IntoValTyped applyAsFollowerArgs.t paxos.applyAsFollowerArgs :=
{|
  default_val := applyAsFollowerArgs.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_applyAsFollowerArgs_epoch : IntoValStructField "epoch" paxos.applyAsFollowerArgs applyAsFollowerArgs.epoch'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_applyAsFollowerArgs_nextIndex : IntoValStructField "nextIndex" paxos.applyAsFollowerArgs applyAsFollowerArgs.nextIndex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_applyAsFollowerArgs_state : IntoValStructField "state" paxos.applyAsFollowerArgs applyAsFollowerArgs.state'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_applyAsFollowerArgs epoch' nextIndex' state':
  PureWp True
    (struct.make #paxos.applyAsFollowerArgs (alist_val [
      "epoch" ::= #epoch';
      "nextIndex" ::= #nextIndex';
      "state" ::= #state'
    ]))%struct
    #(applyAsFollowerArgs.mk epoch' nextIndex' state').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance applyAsFollowerArgs_struct_fields_split dq l (v : applyAsFollowerArgs.t) :
  StructFieldsSplit dq l v (
    "Hepoch" ∷ l ↦s[paxos.applyAsFollowerArgs :: "epoch"]{dq} v.(applyAsFollowerArgs.epoch') ∗
    "HnextIndex" ∷ l ↦s[paxos.applyAsFollowerArgs :: "nextIndex"]{dq} v.(applyAsFollowerArgs.nextIndex') ∗
    "Hstate" ∷ l ↦s[paxos.applyAsFollowerArgs :: "state"]{dq} v.(applyAsFollowerArgs.state')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (applyAsFollowerArgs.epoch' v)) paxos.applyAsFollowerArgs "epoch"%go.
  simpl_one_flatten_struct (# (applyAsFollowerArgs.nextIndex' v)) paxos.applyAsFollowerArgs "nextIndex"%go.

  solve_field_ref_f.
Qed.

End instances.

Module applyAsFollowerReply.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  err' : Error.t;
}.
End def.
End applyAsFollowerReply.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_applyAsFollowerReply : Settable _ :=
  settable! applyAsFollowerReply.mk < applyAsFollowerReply.err' >.
Global Instance into_val_applyAsFollowerReply : IntoVal applyAsFollowerReply.t :=
  {| to_val_def v :=
    struct.val_aux paxos.applyAsFollowerReply [
    "err" ::= #(applyAsFollowerReply.err' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_applyAsFollowerReply : IntoValTyped applyAsFollowerReply.t paxos.applyAsFollowerReply :=
{|
  default_val := applyAsFollowerReply.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_applyAsFollowerReply_err : IntoValStructField "err" paxos.applyAsFollowerReply applyAsFollowerReply.err'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_applyAsFollowerReply err':
  PureWp True
    (struct.make #paxos.applyAsFollowerReply (alist_val [
      "err" ::= #err'
    ]))%struct
    #(applyAsFollowerReply.mk err').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance applyAsFollowerReply_struct_fields_split dq l (v : applyAsFollowerReply.t) :
  StructFieldsSplit dq l v (
    "Herr" ∷ l ↦s[paxos.applyAsFollowerReply :: "err"]{dq} v.(applyAsFollowerReply.err')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

Module enterNewEpochArgs.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  epoch' : w64;
}.
End def.
End enterNewEpochArgs.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_enterNewEpochArgs : Settable _ :=
  settable! enterNewEpochArgs.mk < enterNewEpochArgs.epoch' >.
Global Instance into_val_enterNewEpochArgs : IntoVal enterNewEpochArgs.t :=
  {| to_val_def v :=
    struct.val_aux paxos.enterNewEpochArgs [
    "epoch" ::= #(enterNewEpochArgs.epoch' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_enterNewEpochArgs : IntoValTyped enterNewEpochArgs.t paxos.enterNewEpochArgs :=
{|
  default_val := enterNewEpochArgs.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_enterNewEpochArgs_epoch : IntoValStructField "epoch" paxos.enterNewEpochArgs enterNewEpochArgs.epoch'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_enterNewEpochArgs epoch':
  PureWp True
    (struct.make #paxos.enterNewEpochArgs (alist_val [
      "epoch" ::= #epoch'
    ]))%struct
    #(enterNewEpochArgs.mk epoch').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance enterNewEpochArgs_struct_fields_split dq l (v : enterNewEpochArgs.t) :
  StructFieldsSplit dq l v (
    "Hepoch" ∷ l ↦s[paxos.enterNewEpochArgs :: "epoch"]{dq} v.(enterNewEpochArgs.epoch')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

Module enterNewEpochReply.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  err' : Error.t;
  acceptedEpoch' : w64;
  nextIndex' : w64;
  state' : slice.t;
}.
End def.
End enterNewEpochReply.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_enterNewEpochReply : Settable _ :=
  settable! enterNewEpochReply.mk < enterNewEpochReply.err'; enterNewEpochReply.acceptedEpoch'; enterNewEpochReply.nextIndex'; enterNewEpochReply.state' >.
Global Instance into_val_enterNewEpochReply : IntoVal enterNewEpochReply.t :=
  {| to_val_def v :=
    struct.val_aux paxos.enterNewEpochReply [
    "err" ::= #(enterNewEpochReply.err' v);
    "acceptedEpoch" ::= #(enterNewEpochReply.acceptedEpoch' v);
    "nextIndex" ::= #(enterNewEpochReply.nextIndex' v);
    "state" ::= #(enterNewEpochReply.state' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_enterNewEpochReply : IntoValTyped enterNewEpochReply.t paxos.enterNewEpochReply :=
{|
  default_val := enterNewEpochReply.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_enterNewEpochReply_err : IntoValStructField "err" paxos.enterNewEpochReply enterNewEpochReply.err'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_enterNewEpochReply_acceptedEpoch : IntoValStructField "acceptedEpoch" paxos.enterNewEpochReply enterNewEpochReply.acceptedEpoch'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_enterNewEpochReply_nextIndex : IntoValStructField "nextIndex" paxos.enterNewEpochReply enterNewEpochReply.nextIndex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_enterNewEpochReply_state : IntoValStructField "state" paxos.enterNewEpochReply enterNewEpochReply.state'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_enterNewEpochReply err' acceptedEpoch' nextIndex' state':
  PureWp True
    (struct.make #paxos.enterNewEpochReply (alist_val [
      "err" ::= #err';
      "acceptedEpoch" ::= #acceptedEpoch';
      "nextIndex" ::= #nextIndex';
      "state" ::= #state'
    ]))%struct
    #(enterNewEpochReply.mk err' acceptedEpoch' nextIndex' state').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance enterNewEpochReply_struct_fields_split dq l (v : enterNewEpochReply.t) :
  StructFieldsSplit dq l v (
    "Herr" ∷ l ↦s[paxos.enterNewEpochReply :: "err"]{dq} v.(enterNewEpochReply.err') ∗
    "HacceptedEpoch" ∷ l ↦s[paxos.enterNewEpochReply :: "acceptedEpoch"]{dq} v.(enterNewEpochReply.acceptedEpoch') ∗
    "HnextIndex" ∷ l ↦s[paxos.enterNewEpochReply :: "nextIndex"]{dq} v.(enterNewEpochReply.nextIndex') ∗
    "Hstate" ∷ l ↦s[paxos.enterNewEpochReply :: "state"]{dq} v.(enterNewEpochReply.state')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (enterNewEpochReply.err' v)) paxos.enterNewEpochReply "err"%go.
  simpl_one_flatten_struct (# (enterNewEpochReply.acceptedEpoch' v)) paxos.enterNewEpochReply "acceptedEpoch"%go.
  simpl_one_flatten_struct (# (enterNewEpochReply.nextIndex' v)) paxos.enterNewEpochReply "nextIndex"%go.

  solve_field_ref_f.
Qed.

End instances.

Module applyReply.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  err' : Error.t;
  ret' : slice.t;
}.
End def.
End applyReply.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_applyReply : Settable _ :=
  settable! applyReply.mk < applyReply.err'; applyReply.ret' >.
Global Instance into_val_applyReply : IntoVal applyReply.t :=
  {| to_val_def v :=
    struct.val_aux paxos.applyReply [
    "err" ::= #(applyReply.err' v);
    "ret" ::= #(applyReply.ret' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_applyReply : IntoValTyped applyReply.t paxos.applyReply :=
{|
  default_val := applyReply.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_applyReply_err : IntoValStructField "err" paxos.applyReply applyReply.err'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_applyReply_ret : IntoValStructField "ret" paxos.applyReply applyReply.ret'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_applyReply err' ret':
  PureWp True
    (struct.make #paxos.applyReply (alist_val [
      "err" ::= #err';
      "ret" ::= #ret'
    ]))%struct
    #(applyReply.mk err' ret').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance applyReply_struct_fields_split dq l (v : applyReply.t) :
  StructFieldsSplit dq l v (
    "Herr" ∷ l ↦s[paxos.applyReply :: "err"]{dq} v.(applyReply.err') ∗
    "Hret" ∷ l ↦s[paxos.applyReply :: "ret"]{dq} v.(applyReply.ret')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (applyReply.err' v)) paxos.applyReply "err"%go.

  solve_field_ref_f.
Qed.

End instances.

Module paxosState.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  epoch' : w64;
  acceptedEpoch' : w64;
  nextIndex' : w64;
  state' : slice.t;
  isLeader' : bool;
}.
End def.
End paxosState.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_paxosState : Settable _ :=
  settable! paxosState.mk < paxosState.epoch'; paxosState.acceptedEpoch'; paxosState.nextIndex'; paxosState.state'; paxosState.isLeader' >.
Global Instance into_val_paxosState : IntoVal paxosState.t :=
  {| to_val_def v :=
    struct.val_aux paxos.paxosState [
    "epoch" ::= #(paxosState.epoch' v);
    "acceptedEpoch" ::= #(paxosState.acceptedEpoch' v);
    "nextIndex" ::= #(paxosState.nextIndex' v);
    "state" ::= #(paxosState.state' v);
    "isLeader" ::= #(paxosState.isLeader' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_paxosState : IntoValTyped paxosState.t paxos.paxosState :=
{|
  default_val := paxosState.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_paxosState_epoch : IntoValStructField "epoch" paxos.paxosState paxosState.epoch'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_paxosState_acceptedEpoch : IntoValStructField "acceptedEpoch" paxos.paxosState paxosState.acceptedEpoch'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_paxosState_nextIndex : IntoValStructField "nextIndex" paxos.paxosState paxosState.nextIndex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_paxosState_state : IntoValStructField "state" paxos.paxosState paxosState.state'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_paxosState_isLeader : IntoValStructField "isLeader" paxos.paxosState paxosState.isLeader'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_paxosState epoch' acceptedEpoch' nextIndex' state' isLeader':
  PureWp True
    (struct.make #paxos.paxosState (alist_val [
      "epoch" ::= #epoch';
      "acceptedEpoch" ::= #acceptedEpoch';
      "nextIndex" ::= #nextIndex';
      "state" ::= #state';
      "isLeader" ::= #isLeader'
    ]))%struct
    #(paxosState.mk epoch' acceptedEpoch' nextIndex' state' isLeader').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance paxosState_struct_fields_split dq l (v : paxosState.t) :
  StructFieldsSplit dq l v (
    "Hepoch" ∷ l ↦s[paxos.paxosState :: "epoch"]{dq} v.(paxosState.epoch') ∗
    "HacceptedEpoch" ∷ l ↦s[paxos.paxosState :: "acceptedEpoch"]{dq} v.(paxosState.acceptedEpoch') ∗
    "HnextIndex" ∷ l ↦s[paxos.paxosState :: "nextIndex"]{dq} v.(paxosState.nextIndex') ∗
    "Hstate" ∷ l ↦s[paxos.paxosState :: "state"]{dq} v.(paxosState.state') ∗
    "HisLeader" ∷ l ↦s[paxos.paxosState :: "isLeader"]{dq} v.(paxosState.isLeader')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (paxosState.epoch' v)) paxos.paxosState "epoch"%go.
  simpl_one_flatten_struct (# (paxosState.acceptedEpoch' v)) paxos.paxosState "acceptedEpoch"%go.
  simpl_one_flatten_struct (# (paxosState.nextIndex' v)) paxos.paxosState "nextIndex"%go.
  simpl_one_flatten_struct (# (paxosState.state' v)) paxos.paxosState "state"%go.

  solve_field_ref_f.
Qed.

End instances.

Module Server.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  ps' : loc;
  storage' : loc;
  clerks' : slice.t;
}.
End def.
End Server.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Server : Settable _ :=
  settable! Server.mk < Server.mu'; Server.ps'; Server.storage'; Server.clerks' >.
Global Instance into_val_Server : IntoVal Server.t :=
  {| to_val_def v :=
    struct.val_aux paxos.Server [
    "mu" ::= #(Server.mu' v);
    "ps" ::= #(Server.ps' v);
    "storage" ::= #(Server.storage' v);
    "clerks" ::= #(Server.clerks' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Server : IntoValTyped Server.t paxos.Server :=
{|
  default_val := Server.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Server_mu : IntoValStructField "mu" paxos.Server Server.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_ps : IntoValStructField "ps" paxos.Server Server.ps'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_storage : IntoValStructField "storage" paxos.Server Server.storage'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Server_clerks : IntoValStructField "clerks" paxos.Server Server.clerks'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Server mu' ps' storage' clerks':
  PureWp True
    (struct.make #paxos.Server (alist_val [
      "mu" ::= #mu';
      "ps" ::= #ps';
      "storage" ::= #storage';
      "clerks" ::= #clerks'
    ]))%struct
    #(Server.mk mu' ps' storage' clerks').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Server_struct_fields_split dq l (v : Server.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[paxos.Server :: "mu"]{dq} v.(Server.mu') ∗
    "Hps" ∷ l ↦s[paxos.Server :: "ps"]{dq} v.(Server.ps') ∗
    "Hstorage" ∷ l ↦s[paxos.Server :: "storage"]{dq} v.(Server.storage') ∗
    "Hclerks" ∷ l ↦s[paxos.Server :: "clerks"]{dq} v.(Server.clerks')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Server.mu' v)) paxos.Server "mu"%go.
  simpl_one_flatten_struct (# (Server.ps' v)) paxos.Server "ps"%go.
  simpl_one_flatten_struct (# (Server.storage' v)) paxos.Server "storage"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined paxos :=
{|
  is_pkg_defined := is_global_definitions paxos var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_MakeSingleClerk :
  WpFuncCall paxos "MakeSingleClerk" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_encodeApplyAsFollowerArgs :
  WpFuncCall paxos "encodeApplyAsFollowerArgs" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_decodeApplyAsFollowerArgs :
  WpFuncCall paxos "decodeApplyAsFollowerArgs" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_decodeApplyAsFollowerReply :
  WpFuncCall paxos "decodeApplyAsFollowerReply" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_encodeApplyAsFollowerReply :
  WpFuncCall paxos "encodeApplyAsFollowerReply" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_encodeEnterNewEpochArgs :
  WpFuncCall paxos "encodeEnterNewEpochArgs" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_decodeEnterNewEpochArgs :
  WpFuncCall paxos "decodeEnterNewEpochArgs" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_decodeEnterNewEpochReply :
  WpFuncCall paxos "decodeEnterNewEpochReply" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_encodeEnterNewEpochReply :
  WpFuncCall paxos "encodeEnterNewEpochReply" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_encodeApplyReply :
  WpFuncCall paxos "encodeApplyReply" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_decodeApplyReply :
  WpFuncCall paxos "decodeApplyReply" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_boolToU64 :
  WpFuncCall paxos "boolToU64" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_encodePaxosState :
  WpFuncCall paxos "encodePaxosState" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_decodePaxosState :
  WpFuncCall paxos "decodePaxosState" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_makeServer :
  WpFuncCall paxos "makeServer" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_StartServer :
  WpFuncCall paxos "StartServer" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_singleClerk'ptr_TryBecomeLeader :
  WpMethodCall paxos "singleClerk'ptr" "TryBecomeLeader" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_singleClerk'ptr_applyAsFollower :
  WpMethodCall paxos "singleClerk'ptr" "applyAsFollower" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_singleClerk'ptr_enterNewEpoch :
  WpMethodCall paxos "singleClerk'ptr" "enterNewEpoch" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_TryAcquire :
  WpMethodCall paxos "Server'ptr" "TryAcquire" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_TryBecomeLeader :
  WpMethodCall paxos "Server'ptr" "TryBecomeLeader" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_WeakRead :
  WpMethodCall paxos "Server'ptr" "WeakRead" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_applyAsFollower :
  WpMethodCall paxos "Server'ptr" "applyAsFollower" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_enterNewEpoch :
  WpMethodCall paxos "Server'ptr" "enterNewEpoch" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_withLock :
  WpMethodCall paxos "Server'ptr" "withLock" _ (is_pkg_defined paxos) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End paxos.
