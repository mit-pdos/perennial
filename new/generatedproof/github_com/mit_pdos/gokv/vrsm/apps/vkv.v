(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.apps.exactlyonce.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.apps.vkv.condputargs_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.apps.vkv.getargs_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.apps.vkv.putargs_gk.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.mit_pdos.gokv.kv.
Require Export New.generatedproof.github_com.mit_pdos.gokv.map_string_marshal.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.storage.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.vrsm.apps.vkv.

Set Default Proof Using "Type".

Module vkv.

(* type vkv.Clerk *)
Module Clerk.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  cl' : loc;
}.
End def.
End Clerk.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent vkv.Clerk.
#[local] Typeclasses Transparent vkv.Clerk.

Global Instance Clerk_wf : struct.Wf vkv.Clerk.
Proof. apply _. Qed.

Global Instance settable_Clerk : Settable Clerk.t :=
  settable! Clerk.mk < Clerk.cl' >.
Global Instance into_val_Clerk : IntoVal Clerk.t :=
  {| to_val_def v :=
    struct.val_aux vkv.Clerk [
    "cl" ::= #(Clerk.cl' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Clerk : IntoValTyped Clerk.t vkv.Clerk :=
{|
  default_val := Clerk.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Clerk_cl : IntoValStructField "cl" vkv.Clerk Clerk.cl'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Clerk cl':
  PureWp True
    (struct.make #vkv.Clerk (alist_val [
      "cl" ::= #cl'
    ]))%struct
    #(Clerk.mk cl').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Clerk_struct_fields_split dq l (v : Clerk.t) :
  StructFieldsSplit dq l v (
    "Hcl" ∷ l ↦s[vkv.Clerk :: "cl"]{dq} v.(Clerk.cl')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

(* type vkv.ClerkPool *)
Module ClerkPool.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  cls' : slice.t;
  confHosts' : slice.t;
}.
End def.
End ClerkPool.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent vkv.ClerkPool.
#[local] Typeclasses Transparent vkv.ClerkPool.

Global Instance ClerkPool_wf : struct.Wf vkv.ClerkPool.
Proof. apply _. Qed.

Global Instance settable_ClerkPool : Settable ClerkPool.t :=
  settable! ClerkPool.mk < ClerkPool.mu'; ClerkPool.cls'; ClerkPool.confHosts' >.
Global Instance into_val_ClerkPool : IntoVal ClerkPool.t :=
  {| to_val_def v :=
    struct.val_aux vkv.ClerkPool [
    "mu" ::= #(ClerkPool.mu' v);
    "cls" ::= #(ClerkPool.cls' v);
    "confHosts" ::= #(ClerkPool.confHosts' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_ClerkPool : IntoValTyped ClerkPool.t vkv.ClerkPool :=
{|
  default_val := ClerkPool.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_ClerkPool_mu : IntoValStructField "mu" vkv.ClerkPool ClerkPool.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_ClerkPool_cls : IntoValStructField "cls" vkv.ClerkPool ClerkPool.cls'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_ClerkPool_confHosts : IntoValStructField "confHosts" vkv.ClerkPool ClerkPool.confHosts'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_ClerkPool mu' cls' confHosts':
  PureWp True
    (struct.make #vkv.ClerkPool (alist_val [
      "mu" ::= #mu';
      "cls" ::= #cls';
      "confHosts" ::= #confHosts'
    ]))%struct
    #(ClerkPool.mk mu' cls' confHosts').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance ClerkPool_struct_fields_split dq l (v : ClerkPool.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[vkv.ClerkPool :: "mu"]{dq} v.(ClerkPool.mu') ∗
    "Hcls" ∷ l ↦s[vkv.ClerkPool :: "cls"]{dq} v.(ClerkPool.cls') ∗
    "HconfHosts" ∷ l ↦s[vkv.ClerkPool :: "confHosts"]{dq} v.(ClerkPool.confHosts')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (ClerkPool.mu' v)) (vkv.ClerkPool) "mu"%go.
  simpl_one_flatten_struct (# (ClerkPool.cls' v)) (vkv.ClerkPool) "cls"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type vkv.KVState *)
Module KVState.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  kvs' : loc;
  vnums' : loc;
  minVnum' : w64;
}.
End def.
End KVState.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent vkv.KVState.
#[local] Typeclasses Transparent vkv.KVState.

Global Instance KVState_wf : struct.Wf vkv.KVState.
Proof. apply _. Qed.

Global Instance settable_KVState : Settable KVState.t :=
  settable! KVState.mk < KVState.kvs'; KVState.vnums'; KVState.minVnum' >.
Global Instance into_val_KVState : IntoVal KVState.t :=
  {| to_val_def v :=
    struct.val_aux vkv.KVState [
    "kvs" ::= #(KVState.kvs' v);
    "vnums" ::= #(KVState.vnums' v);
    "minVnum" ::= #(KVState.minVnum' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_KVState : IntoValTyped KVState.t vkv.KVState :=
{|
  default_val := KVState.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_KVState_kvs : IntoValStructField "kvs" vkv.KVState KVState.kvs'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_KVState_vnums : IntoValStructField "vnums" vkv.KVState KVState.vnums'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_KVState_minVnum : IntoValStructField "minVnum" vkv.KVState KVState.minVnum'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_KVState kvs' vnums' minVnum':
  PureWp True
    (struct.make #vkv.KVState (alist_val [
      "kvs" ::= #kvs';
      "vnums" ::= #vnums';
      "minVnum" ::= #minVnum'
    ]))%struct
    #(KVState.mk kvs' vnums' minVnum').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance KVState_struct_fields_split dq l (v : KVState.t) :
  StructFieldsSplit dq l v (
    "Hkvs" ∷ l ↦s[vkv.KVState :: "kvs"]{dq} v.(KVState.kvs') ∗
    "Hvnums" ∷ l ↦s[vkv.KVState :: "vnums"]{dq} v.(KVState.vnums') ∗
    "HminVnum" ∷ l ↦s[vkv.KVState :: "minVnum"]{dq} v.(KVState.minVnum')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (KVState.kvs' v)) (vkv.KVState) "kvs"%go.
  simpl_one_flatten_struct (# (KVState.vnums' v)) (vkv.KVState) "vnums"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{!heapGS Σ}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_vkv : IsPkgDefinedPure vkv :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single vkv ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.grove_ffi.grove_ffi ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.apps.exactlyonce.exactlyonce ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.apps.vkv.condputargs_gk.condputargs_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.apps.vkv.getargs_gk.getargs_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.apps.vkv.putargs_gk.putargs_gk ∧
      is_pkg_defined_pure code.sync.sync ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.kv.kv ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.map_string_marshal.map_string_marshal ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.vrsm.storage.storage;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_vkv : IsPkgDefined vkv :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single vkv ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.grove_ffi.grove_ffi ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.apps.exactlyonce.exactlyonce ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.apps.vkv.condputargs_gk.condputargs_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.apps.vkv.getargs_gk.getargs_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.apps.vkv.putargs_gk.putargs_gk ∗
       is_pkg_defined code.sync.sync ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.kv.kv ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.map_string_marshal.map_string_marshal ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.vrsm.storage.storage)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_MakeClerk :
  WpFuncCall vkv.MakeClerk _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_MakeClerkPool :
  WpFuncCall vkv.MakeClerkPool _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_MakeKv :
  WpFuncCall vkv.MakeKv _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_makeVersionedStateMachine :
  WpFuncCall vkv.makeVersionedStateMachine _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Start :
  WpFuncCall vkv.Start _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Clerk'ptr_CondPut :
  WpMethodCall (ptrT.id vkv.Clerk.id) "CondPut" _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Clerk'ptr_Get :
  WpMethodCall (ptrT.id vkv.Clerk.id) "Get" _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Clerk'ptr_Put :
  WpMethodCall (ptrT.id vkv.Clerk.id) "Put" _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_ClerkPool'ptr_ConditionalPut :
  WpMethodCall (ptrT.id vkv.ClerkPool.id) "ConditionalPut" _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_ClerkPool'ptr_Get :
  WpMethodCall (ptrT.id vkv.ClerkPool.id) "Get" _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_ClerkPool'ptr_Put :
  WpMethodCall (ptrT.id vkv.ClerkPool.id) "Put" _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_ClerkPool'ptr_doWithClerk :
  WpMethodCall (ptrT.id vkv.ClerkPool.id) "doWithClerk" _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_KVState'ptr_apply :
  WpMethodCall (ptrT.id vkv.KVState.id) "apply" _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_KVState'ptr_applyReadonly :
  WpMethodCall (ptrT.id vkv.KVState.id) "applyReadonly" _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_KVState'ptr_get :
  WpMethodCall (ptrT.id vkv.KVState.id) "get" _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_KVState'ptr_getState :
  WpMethodCall (ptrT.id vkv.KVState.id) "getState" _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_KVState'ptr_put :
  WpMethodCall (ptrT.id vkv.KVState.id) "put" _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_KVState'ptr_setState :
  WpMethodCall (ptrT.id vkv.KVState.id) "setState" _ (is_pkg_defined vkv) :=
  ltac:(solve_wp_method_call).

End names.
End vkv.
