(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.mit_pdos.gokv.map_marshal.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.clerk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.storage.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.vrsm.apps.exactlyonce.

Set Default Proof Using "Type".

Module exactlyonce.

(* type exactlyonce.eStateMachine *)
Module eStateMachine.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  lastSeq' : loc;
  lastReply' : loc;
  nextCID' : w64;
  sm' : loc;
  esmNextIndex' : w64;
}.
End def.
End eStateMachine.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_eStateMachine : Settable eStateMachine.t :=
  settable! eStateMachine.mk < eStateMachine.lastSeq'; eStateMachine.lastReply'; eStateMachine.nextCID'; eStateMachine.sm'; eStateMachine.esmNextIndex' >.
Global Instance into_val_eStateMachine : IntoVal eStateMachine.t :=
  {| to_val_def v :=
    struct.val_aux exactlyonce.eStateMachine [
    "lastSeq" ::= #(eStateMachine.lastSeq' v);
    "lastReply" ::= #(eStateMachine.lastReply' v);
    "nextCID" ::= #(eStateMachine.nextCID' v);
    "sm" ::= #(eStateMachine.sm' v);
    "esmNextIndex" ::= #(eStateMachine.esmNextIndex' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_eStateMachine : IntoValTyped eStateMachine.t exactlyonce.eStateMachine :=
{|
  default_val := eStateMachine.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_eStateMachine_lastSeq : IntoValStructField "lastSeq" exactlyonce.eStateMachine eStateMachine.lastSeq'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_eStateMachine_lastReply : IntoValStructField "lastReply" exactlyonce.eStateMachine eStateMachine.lastReply'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_eStateMachine_nextCID : IntoValStructField "nextCID" exactlyonce.eStateMachine eStateMachine.nextCID'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_eStateMachine_sm : IntoValStructField "sm" exactlyonce.eStateMachine eStateMachine.sm'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_eStateMachine_esmNextIndex : IntoValStructField "esmNextIndex" exactlyonce.eStateMachine eStateMachine.esmNextIndex'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_eStateMachine lastSeq' lastReply' nextCID' sm' esmNextIndex':
  PureWp True
    (struct.make #exactlyonce.eStateMachine (alist_val [
      "lastSeq" ::= #lastSeq';
      "lastReply" ::= #lastReply';
      "nextCID" ::= #nextCID';
      "sm" ::= #sm';
      "esmNextIndex" ::= #esmNextIndex'
    ]))%struct
    #(eStateMachine.mk lastSeq' lastReply' nextCID' sm' esmNextIndex').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance eStateMachine_struct_fields_split dq l (v : eStateMachine.t) :
  StructFieldsSplit dq l v (
    "HlastSeq" ∷ l ↦s[exactlyonce.eStateMachine :: "lastSeq"]{dq} v.(eStateMachine.lastSeq') ∗
    "HlastReply" ∷ l ↦s[exactlyonce.eStateMachine :: "lastReply"]{dq} v.(eStateMachine.lastReply') ∗
    "HnextCID" ∷ l ↦s[exactlyonce.eStateMachine :: "nextCID"]{dq} v.(eStateMachine.nextCID') ∗
    "Hsm" ∷ l ↦s[exactlyonce.eStateMachine :: "sm"]{dq} v.(eStateMachine.sm') ∗
    "HesmNextIndex" ∷ l ↦s[exactlyonce.eStateMachine :: "esmNextIndex"]{dq} v.(eStateMachine.esmNextIndex')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (eStateMachine.lastSeq' v)) exactlyonce.eStateMachine "lastSeq"%go.
  simpl_one_flatten_struct (# (eStateMachine.lastReply' v)) exactlyonce.eStateMachine "lastReply"%go.
  simpl_one_flatten_struct (# (eStateMachine.nextCID' v)) exactlyonce.eStateMachine "nextCID"%go.
  simpl_one_flatten_struct (# (eStateMachine.sm' v)) exactlyonce.eStateMachine "sm"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type exactlyonce.Clerk *)
Module Clerk.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ck' : loc;
  cid' : w64;
  seq' : w64;
}.
End def.
End Clerk.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Clerk : Settable Clerk.t :=
  settable! Clerk.mk < Clerk.ck'; Clerk.cid'; Clerk.seq' >.
Global Instance into_val_Clerk : IntoVal Clerk.t :=
  {| to_val_def v :=
    struct.val_aux exactlyonce.Clerk [
    "ck" ::= #(Clerk.ck' v);
    "cid" ::= #(Clerk.cid' v);
    "seq" ::= #(Clerk.seq' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Clerk : IntoValTyped Clerk.t exactlyonce.Clerk :=
{|
  default_val := Clerk.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Clerk_ck : IntoValStructField "ck" exactlyonce.Clerk Clerk.ck'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Clerk_cid : IntoValStructField "cid" exactlyonce.Clerk Clerk.cid'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Clerk_seq : IntoValStructField "seq" exactlyonce.Clerk Clerk.seq'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Clerk ck' cid' seq':
  PureWp True
    (struct.make #exactlyonce.Clerk (alist_val [
      "ck" ::= #ck';
      "cid" ::= #cid';
      "seq" ::= #seq'
    ]))%struct
    #(Clerk.mk ck' cid' seq').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Clerk_struct_fields_split dq l (v : Clerk.t) :
  StructFieldsSplit dq l v (
    "Hck" ∷ l ↦s[exactlyonce.Clerk :: "ck"]{dq} v.(Clerk.ck') ∗
    "Hcid" ∷ l ↦s[exactlyonce.Clerk :: "cid"]{dq} v.(Clerk.cid') ∗
    "Hseq" ∷ l ↦s[exactlyonce.Clerk :: "seq"]{dq} v.(Clerk.seq')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Clerk.ck' v)) exactlyonce.Clerk "ck"%go.
  simpl_one_flatten_struct (# (Clerk.cid' v)) exactlyonce.Clerk "cid"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type exactlyonce.VersionedStateMachine *)
Module VersionedStateMachine.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ApplyVolatile' : func.t;
  ApplyReadonly' : func.t;
  SetState' : func.t;
  GetState' : func.t;
}.
End def.
End VersionedStateMachine.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_VersionedStateMachine : Settable VersionedStateMachine.t :=
  settable! VersionedStateMachine.mk < VersionedStateMachine.ApplyVolatile'; VersionedStateMachine.ApplyReadonly'; VersionedStateMachine.SetState'; VersionedStateMachine.GetState' >.
Global Instance into_val_VersionedStateMachine : IntoVal VersionedStateMachine.t :=
  {| to_val_def v :=
    struct.val_aux exactlyonce.VersionedStateMachine [
    "ApplyVolatile" ::= #(VersionedStateMachine.ApplyVolatile' v);
    "ApplyReadonly" ::= #(VersionedStateMachine.ApplyReadonly' v);
    "SetState" ::= #(VersionedStateMachine.SetState' v);
    "GetState" ::= #(VersionedStateMachine.GetState' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_VersionedStateMachine : IntoValTyped VersionedStateMachine.t exactlyonce.VersionedStateMachine :=
{|
  default_val := VersionedStateMachine.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_VersionedStateMachine_ApplyVolatile : IntoValStructField "ApplyVolatile" exactlyonce.VersionedStateMachine VersionedStateMachine.ApplyVolatile'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_VersionedStateMachine_ApplyReadonly : IntoValStructField "ApplyReadonly" exactlyonce.VersionedStateMachine VersionedStateMachine.ApplyReadonly'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_VersionedStateMachine_SetState : IntoValStructField "SetState" exactlyonce.VersionedStateMachine VersionedStateMachine.SetState'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_VersionedStateMachine_GetState : IntoValStructField "GetState" exactlyonce.VersionedStateMachine VersionedStateMachine.GetState'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_VersionedStateMachine ApplyVolatile' ApplyReadonly' SetState' GetState':
  PureWp True
    (struct.make #exactlyonce.VersionedStateMachine (alist_val [
      "ApplyVolatile" ::= #ApplyVolatile';
      "ApplyReadonly" ::= #ApplyReadonly';
      "SetState" ::= #SetState';
      "GetState" ::= #GetState'
    ]))%struct
    #(VersionedStateMachine.mk ApplyVolatile' ApplyReadonly' SetState' GetState').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance VersionedStateMachine_struct_fields_split dq l (v : VersionedStateMachine.t) :
  StructFieldsSplit dq l v (
    "HApplyVolatile" ∷ l ↦s[exactlyonce.VersionedStateMachine :: "ApplyVolatile"]{dq} v.(VersionedStateMachine.ApplyVolatile') ∗
    "HApplyReadonly" ∷ l ↦s[exactlyonce.VersionedStateMachine :: "ApplyReadonly"]{dq} v.(VersionedStateMachine.ApplyReadonly') ∗
    "HSetState" ∷ l ↦s[exactlyonce.VersionedStateMachine :: "SetState"]{dq} v.(VersionedStateMachine.SetState') ∗
    "HGetState" ∷ l ↦s[exactlyonce.VersionedStateMachine :: "GetState"]{dq} v.(VersionedStateMachine.GetState')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (VersionedStateMachine.ApplyVolatile' v)) exactlyonce.VersionedStateMachine "ApplyVolatile"%go.
  simpl_one_flatten_struct (# (VersionedStateMachine.ApplyReadonly' v)) exactlyonce.VersionedStateMachine "ApplyReadonly"%go.
  simpl_one_flatten_struct (# (VersionedStateMachine.SetState' v)) exactlyonce.VersionedStateMachine "SetState"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined exactlyonce :=
{|
  is_pkg_defined := is_global_definitions exactlyonce var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_MakeExactlyOnceStateMachine :
  WpFuncCall exactlyonce "MakeExactlyOnceStateMachine" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MakeClerk :
  WpFuncCall exactlyonce "MakeClerk" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_eStateMachine'ptr_applyReadonly :
  WpMethodCall exactlyonce "eStateMachine'ptr" "applyReadonly" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_eStateMachine'ptr_applyVolatile :
  WpMethodCall exactlyonce "eStateMachine'ptr" "applyVolatile" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_eStateMachine'ptr_getState :
  WpMethodCall exactlyonce "eStateMachine'ptr" "getState" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_eStateMachine'ptr_setState :
  WpMethodCall exactlyonce "eStateMachine'ptr" "setState" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_ApplyExactlyOnce :
  WpMethodCall exactlyonce "Clerk'ptr" "ApplyExactlyOnce" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_ApplyReadonly :
  WpMethodCall exactlyonce "Clerk'ptr" "ApplyReadonly" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End exactlyonce.
