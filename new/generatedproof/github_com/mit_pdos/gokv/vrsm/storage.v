(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.mit_pdos.gokv.aof.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.replica.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.vrsm.storage.

Set Default Proof Using "Type".

Module storage.

(* type storage.InMemoryStateMachine *)
Module InMemoryStateMachine.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ApplyReadonly' : func.t;
  ApplyVolatile' : func.t;
  GetState' : func.t;
  SetState' : func.t;
}.
End def.
End InMemoryStateMachine.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_InMemoryStateMachine : Settable InMemoryStateMachine.t :=
  settable! InMemoryStateMachine.mk < InMemoryStateMachine.ApplyReadonly'; InMemoryStateMachine.ApplyVolatile'; InMemoryStateMachine.GetState'; InMemoryStateMachine.SetState' >.
Global Instance into_val_InMemoryStateMachine : IntoVal InMemoryStateMachine.t :=
  {| to_val_def v :=
    struct.val_aux storage.InMemoryStateMachine [
    "ApplyReadonly" ::= #(InMemoryStateMachine.ApplyReadonly' v);
    "ApplyVolatile" ::= #(InMemoryStateMachine.ApplyVolatile' v);
    "GetState" ::= #(InMemoryStateMachine.GetState' v);
    "SetState" ::= #(InMemoryStateMachine.SetState' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_InMemoryStateMachine : IntoValTyped InMemoryStateMachine.t storage.InMemoryStateMachine :=
{|
  default_val := InMemoryStateMachine.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_InMemoryStateMachine_ApplyReadonly : IntoValStructField "ApplyReadonly" storage.InMemoryStateMachine InMemoryStateMachine.ApplyReadonly'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_InMemoryStateMachine_ApplyVolatile : IntoValStructField "ApplyVolatile" storage.InMemoryStateMachine InMemoryStateMachine.ApplyVolatile'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_InMemoryStateMachine_GetState : IntoValStructField "GetState" storage.InMemoryStateMachine InMemoryStateMachine.GetState'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_InMemoryStateMachine_SetState : IntoValStructField "SetState" storage.InMemoryStateMachine InMemoryStateMachine.SetState'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_InMemoryStateMachine ApplyReadonly' ApplyVolatile' GetState' SetState':
  PureWp True
    (struct.make #storage.InMemoryStateMachine (alist_val [
      "ApplyReadonly" ::= #ApplyReadonly';
      "ApplyVolatile" ::= #ApplyVolatile';
      "GetState" ::= #GetState';
      "SetState" ::= #SetState'
    ]))%struct
    #(InMemoryStateMachine.mk ApplyReadonly' ApplyVolatile' GetState' SetState').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance InMemoryStateMachine_struct_fields_split dq l (v : InMemoryStateMachine.t) :
  StructFieldsSplit dq l v (
    "HApplyReadonly" ∷ l ↦s[storage.InMemoryStateMachine :: "ApplyReadonly"]{dq} v.(InMemoryStateMachine.ApplyReadonly') ∗
    "HApplyVolatile" ∷ l ↦s[storage.InMemoryStateMachine :: "ApplyVolatile"]{dq} v.(InMemoryStateMachine.ApplyVolatile') ∗
    "HGetState" ∷ l ↦s[storage.InMemoryStateMachine :: "GetState"]{dq} v.(InMemoryStateMachine.GetState') ∗
    "HSetState" ∷ l ↦s[storage.InMemoryStateMachine :: "SetState"]{dq} v.(InMemoryStateMachine.SetState')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (InMemoryStateMachine.ApplyReadonly' v)) storage.InMemoryStateMachine "ApplyReadonly"%go.
  simpl_one_flatten_struct (# (InMemoryStateMachine.ApplyVolatile' v)) storage.InMemoryStateMachine "ApplyVolatile"%go.
  simpl_one_flatten_struct (# (InMemoryStateMachine.GetState' v)) storage.InMemoryStateMachine "GetState"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type storage.StateMachine *)
Module StateMachine.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  fname' : go_string;
  logFile' : loc;
  logsize' : w64;
  sealed' : bool;
  epoch' : w64;
  nextIndex' : w64;
  smMem' : loc;
}.
End def.
End StateMachine.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_StateMachine : Settable StateMachine.t :=
  settable! StateMachine.mk < StateMachine.fname'; StateMachine.logFile'; StateMachine.logsize'; StateMachine.sealed'; StateMachine.epoch'; StateMachine.nextIndex'; StateMachine.smMem' >.
Global Instance into_val_StateMachine : IntoVal StateMachine.t :=
  {| to_val_def v :=
    struct.val_aux storage.StateMachine [
    "fname" ::= #(StateMachine.fname' v);
    "logFile" ::= #(StateMachine.logFile' v);
    "logsize" ::= #(StateMachine.logsize' v);
    "sealed" ::= #(StateMachine.sealed' v);
    "epoch" ::= #(StateMachine.epoch' v);
    "nextIndex" ::= #(StateMachine.nextIndex' v);
    "smMem" ::= #(StateMachine.smMem' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_StateMachine : IntoValTyped StateMachine.t storage.StateMachine :=
{|
  default_val := StateMachine.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_StateMachine_fname : IntoValStructField "fname" storage.StateMachine StateMachine.fname'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_StateMachine_logFile : IntoValStructField "logFile" storage.StateMachine StateMachine.logFile'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_StateMachine_logsize : IntoValStructField "logsize" storage.StateMachine StateMachine.logsize'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_StateMachine_sealed : IntoValStructField "sealed" storage.StateMachine StateMachine.sealed'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_StateMachine_epoch : IntoValStructField "epoch" storage.StateMachine StateMachine.epoch'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_StateMachine_nextIndex : IntoValStructField "nextIndex" storage.StateMachine StateMachine.nextIndex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_StateMachine_smMem : IntoValStructField "smMem" storage.StateMachine StateMachine.smMem'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_StateMachine fname' logFile' logsize' sealed' epoch' nextIndex' smMem':
  PureWp True
    (struct.make #storage.StateMachine (alist_val [
      "fname" ::= #fname';
      "logFile" ::= #logFile';
      "logsize" ::= #logsize';
      "sealed" ::= #sealed';
      "epoch" ::= #epoch';
      "nextIndex" ::= #nextIndex';
      "smMem" ::= #smMem'
    ]))%struct
    #(StateMachine.mk fname' logFile' logsize' sealed' epoch' nextIndex' smMem').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance StateMachine_struct_fields_split dq l (v : StateMachine.t) :
  StructFieldsSplit dq l v (
    "Hfname" ∷ l ↦s[storage.StateMachine :: "fname"]{dq} v.(StateMachine.fname') ∗
    "HlogFile" ∷ l ↦s[storage.StateMachine :: "logFile"]{dq} v.(StateMachine.logFile') ∗
    "Hlogsize" ∷ l ↦s[storage.StateMachine :: "logsize"]{dq} v.(StateMachine.logsize') ∗
    "Hsealed" ∷ l ↦s[storage.StateMachine :: "sealed"]{dq} v.(StateMachine.sealed') ∗
    "Hepoch" ∷ l ↦s[storage.StateMachine :: "epoch"]{dq} v.(StateMachine.epoch') ∗
    "HnextIndex" ∷ l ↦s[storage.StateMachine :: "nextIndex"]{dq} v.(StateMachine.nextIndex') ∗
    "HsmMem" ∷ l ↦s[storage.StateMachine :: "smMem"]{dq} v.(StateMachine.smMem')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (StateMachine.fname' v)) storage.StateMachine "fname"%go.
  simpl_one_flatten_struct (# (StateMachine.logFile' v)) storage.StateMachine "logFile"%go.
  simpl_one_flatten_struct (# (StateMachine.logsize' v)) storage.StateMachine "logsize"%go.
  simpl_one_flatten_struct (# (StateMachine.sealed' v)) storage.StateMachine "sealed"%go.
  simpl_one_flatten_struct (# (StateMachine.epoch' v)) storage.StateMachine "epoch"%go.
  simpl_one_flatten_struct (# (StateMachine.nextIndex' v)) storage.StateMachine "nextIndex"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined storage :=
{|
  is_pkg_defined := is_global_definitions storage var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_recoverStateMachine :
  WpFuncCall storage "recoverStateMachine" _ (is_pkg_defined storage) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MakePbServer :
  WpFuncCall storage "MakePbServer" _ (is_pkg_defined storage) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_StateMachine'ptr_apply :
  WpMethodCall storage "StateMachine'ptr" "apply" _ (is_pkg_defined storage) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_StateMachine'ptr_applyReadonly :
  WpMethodCall storage "StateMachine'ptr" "applyReadonly" _ (is_pkg_defined storage) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_StateMachine'ptr_getStateAndSeal :
  WpMethodCall storage "StateMachine'ptr" "getStateAndSeal" _ (is_pkg_defined storage) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_StateMachine'ptr_makeDurableWithSnap :
  WpMethodCall storage "StateMachine'ptr" "makeDurableWithSnap" _ (is_pkg_defined storage) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_StateMachine'ptr_setStateAndUnseal :
  WpMethodCall storage "StateMachine'ptr" "setStateAndUnseal" _ (is_pkg_defined storage) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_StateMachine'ptr_truncateAndMakeDurable :
  WpMethodCall storage "StateMachine'ptr" "truncateAndMakeDurable" _ (is_pkg_defined storage) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End storage.
