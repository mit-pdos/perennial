(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.partialapp.

Set Default Proof Using "Type".

Module main.

Module Foo.
Section def.
Context `{ffi_syntax}.
Definition t := go_string.
End def.
End Foo.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined main :=
{|
  is_pkg_defined := is_global_definitions main var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_partiallyApplyMe :
  WpFuncCall main "partiallyApplyMe" _ (is_pkg_defined main) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_main :
  WpFuncCall main "main" _ (is_pkg_defined main) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Foo_someMethod :
  WpMethodCall main "Foo" "someMethod" _ (is_pkg_defined main) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Foo_someMethodWithArgs :
  WpMethodCall main "Foo" "someMethodWithArgs" _ (is_pkg_defined main) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Foo'ptr_someMethod :
  WpMethodCall main "Foo'ptr" "someMethod" _ (is_pkg_defined main) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Foo'ptr_someMethodWithArgs :
  WpMethodCall main "Foo'ptr" "someMethodWithArgs" _ (is_pkg_defined main) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End main.
