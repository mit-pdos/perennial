(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.partialapp.

Set Default Proof Using "Type".

Module main.

(* type main.Foo *)
Module Foo.
Section def.
Context `{ffi_syntax}.
Definition t := go_string.
End def.
End Foo.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_main : IsPkgDefined main :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single main;
    is_pkg_defined_def go_ctx :=
        (is_pkg_defined_single main)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_partiallyApplyMe :
  WpFuncCall main.partiallyApplyMe _ (is_pkg_defined main) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_main :
  WpFuncCall main.main _ (is_pkg_defined main) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Foo_someMethod :
  WpMethodCall main.Foo.id "someMethod" _ (is_pkg_defined main) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Foo_someMethodWithArgs :
  WpMethodCall main.Foo.id "someMethodWithArgs" _ (is_pkg_defined main) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Foo'ptr_someMethod :
  WpMethodCall (ptrT.id main.Foo.id) "someMethod" _ (is_pkg_defined main) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Foo'ptr_someMethodWithArgs :
  WpMethodCall (ptrT.id main.Foo.id) "someMethodWithArgs" _ (is_pkg_defined main) :=
  ltac:(solve_wp_method_call).

End names.
End main.
