(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.mit_pdos.gokv.cachekv.cachevalue_gk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.mit_pdos.gokv.kv.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.cachekv.

Set Default Proof Using "Type".

Module cachekv.

(* type cachekv.CacheKv *)
Module CacheKv.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  kv' : kv.KvCput.t;
  mu' : loc;
  cache' : loc;
}.
End def.
End CacheKv.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_CacheKv : Settable CacheKv.t :=
  settable! CacheKv.mk < CacheKv.kv'; CacheKv.mu'; CacheKv.cache' >.
Global Instance into_val_CacheKv : IntoVal CacheKv.t :=
  {| to_val_def v :=
    struct.val_aux cachekv.CacheKv [
    "kv" ::= #(CacheKv.kv' v);
    "mu" ::= #(CacheKv.mu' v);
    "cache" ::= #(CacheKv.cache' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_CacheKv : IntoValTyped CacheKv.t cachekv.CacheKv :=
{|
  default_val := CacheKv.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_CacheKv_kv : IntoValStructField "kv" cachekv.CacheKv CacheKv.kv'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_CacheKv_mu : IntoValStructField "mu" cachekv.CacheKv CacheKv.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_CacheKv_cache : IntoValStructField "cache" cachekv.CacheKv CacheKv.cache'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_CacheKv kv' mu' cache':
  PureWp True
    (struct.make #cachekv.CacheKv (alist_val [
      "kv" ::= #kv';
      "mu" ::= #mu';
      "cache" ::= #cache'
    ]))%struct
    #(CacheKv.mk kv' mu' cache').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance CacheKv_struct_fields_split dq l (v : CacheKv.t) :
  StructFieldsSplit dq l v (
    "Hkv" ∷ l ↦s[cachekv.CacheKv :: "kv"]{dq} v.(CacheKv.kv') ∗
    "Hmu" ∷ l ↦s[cachekv.CacheKv :: "mu"]{dq} v.(CacheKv.mu') ∗
    "Hcache" ∷ l ↦s[cachekv.CacheKv :: "cache"]{dq} v.(CacheKv.cache')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (CacheKv.kv' v)) (cachekv.CacheKv) "kv"%go.
  simpl_one_flatten_struct (# (CacheKv.mu' v)) (cachekv.CacheKv) "mu"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{!heapGS Σ}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_cachekv : IsPkgDefinedPure cachekv :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single cachekv ∧
      is_pkg_defined_pure code.sync.sync ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.cachekv.cachevalue_gk.cachevalue_gk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.grove_ffi.grove_ffi ∧
      is_pkg_defined_pure code.github_com.mit_pdos.gokv.kv.kv;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_cachekv : IsPkgDefined cachekv :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single cachekv ∗
       is_pkg_defined code.sync.sync ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.cachekv.cachevalue_gk.cachevalue_gk ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.grove_ffi.grove_ffi ∗
       is_pkg_defined code.github_com.mit_pdos.gokv.kv.kv)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_max :
  WpFuncCall cachekv.max _ (is_pkg_defined cachekv) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Make :
  WpFuncCall cachekv.Make _ (is_pkg_defined cachekv) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_CacheKv'ptr_Get :
  WpMethodCall (ptrT.id cachekv.CacheKv.id) "Get" _ (is_pkg_defined cachekv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_CacheKv'ptr_GetAndCache :
  WpMethodCall (ptrT.id cachekv.CacheKv.id) "GetAndCache" _ (is_pkg_defined cachekv) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_CacheKv'ptr_Put :
  WpMethodCall (ptrT.id cachekv.CacheKv.id) "Put" _ (is_pkg_defined cachekv) :=
  ltac:(solve_wp_method_call).

End names.
End cachekv.
