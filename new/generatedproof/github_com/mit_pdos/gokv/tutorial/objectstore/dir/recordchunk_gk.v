(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.tutorial.objectstore.dir.recordchunk_gk.

Set Default Proof Using "Type".

Module recordchunk_gk.

(* type recordchunk_gk.S *)
Module S.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  WriteId' : w64;
  Server' : w64;
  ContentHash' : go_string;
  Index' : w64;
}.
End def.
End S.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent recordchunk_gk.S.
#[local] Typeclasses Transparent recordchunk_gk.S.

Global Instance S_wf : struct.Wf recordchunk_gk.S.
Proof. apply _. Qed.

Global Instance settable_S : Settable S.t :=
  settable! S.mk < S.WriteId'; S.Server'; S.ContentHash'; S.Index' >.
Global Instance into_val_S : IntoVal S.t :=
  {| to_val_def v :=
    struct.val_aux recordchunk_gk.S [
    "WriteId" ::= #(S.WriteId' v);
    "Server" ::= #(S.Server' v);
    "ContentHash" ::= #(S.ContentHash' v);
    "Index" ::= #(S.Index' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_S : IntoValTyped S.t recordchunk_gk.S :=
{|
  default_val := S.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_S_WriteId : IntoValStructField "WriteId" recordchunk_gk.S S.WriteId'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_S_Server : IntoValStructField "Server" recordchunk_gk.S S.Server'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_S_ContentHash : IntoValStructField "ContentHash" recordchunk_gk.S S.ContentHash'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_S_Index : IntoValStructField "Index" recordchunk_gk.S S.Index'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_S WriteId' Server' ContentHash' Index':
  PureWp True
    (struct.make #recordchunk_gk.S (alist_val [
      "WriteId" ::= #WriteId';
      "Server" ::= #Server';
      "ContentHash" ::= #ContentHash';
      "Index" ::= #Index'
    ]))%struct
    #(S.mk WriteId' Server' ContentHash' Index').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance S_struct_fields_split dq l (v : S.t) :
  StructFieldsSplit dq l v (
    "HWriteId" ∷ l ↦s[recordchunk_gk.S :: "WriteId"]{dq} v.(S.WriteId') ∗
    "HServer" ∷ l ↦s[recordchunk_gk.S :: "Server"]{dq} v.(S.Server') ∗
    "HContentHash" ∷ l ↦s[recordchunk_gk.S :: "ContentHash"]{dq} v.(S.ContentHash') ∗
    "HIndex" ∷ l ↦s[recordchunk_gk.S :: "Index"]{dq} v.(S.Index')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (S.WriteId' v)) (recordchunk_gk.S) "WriteId"%go.
  simpl_one_flatten_struct (# (S.Server' v)) (recordchunk_gk.S) "Server"%go.
  simpl_one_flatten_struct (# (S.ContentHash' v)) (recordchunk_gk.S) "ContentHash"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_recordchunk_gk : IsPkgDefinedPure recordchunk_gk :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single recordchunk_gk ∧
      is_pkg_defined_pure code.github_com.goose_lang.primitive.primitive ∧
      is_pkg_defined_pure code.github_com.goose_lang.std.std ∧
      is_pkg_defined_pure code.github_com.tchajed.marshal.marshal;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_recordchunk_gk : IsPkgDefined recordchunk_gk :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single recordchunk_gk ∗
       is_pkg_defined code.github_com.goose_lang.primitive.primitive ∗
       is_pkg_defined code.github_com.goose_lang.std.std ∗
       is_pkg_defined code.github_com.tchajed.marshal.marshal)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_Marshal :
  WpFuncCall recordchunk_gk.Marshal _ (is_pkg_defined recordchunk_gk) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Unmarshal :
  WpFuncCall recordchunk_gk.Unmarshal _ (is_pkg_defined recordchunk_gk) :=
  ltac:(solve_wp_func_call).

End names.
End recordchunk_gk.
