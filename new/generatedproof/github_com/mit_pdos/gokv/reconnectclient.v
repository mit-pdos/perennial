(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.mit_pdos.gokv.urpc.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.reconnectclient.
Module reconnectclient.
Axiom falso : False.
Module ReconnectingClient.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  valid' : bool;
  urpcCl' : loc;
  addr' : w64;
}.
End def.
End ReconnectingClient.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_ReconnectingClient `{ffi_syntax}: Settable _ :=
  settable! ReconnectingClient.mk < ReconnectingClient.mu'; ReconnectingClient.valid'; ReconnectingClient.urpcCl'; ReconnectingClient.addr' >.
Global Instance into_val_ReconnectingClient `{ffi_syntax} : IntoVal ReconnectingClient.t.
Admitted.

Global Instance into_val_typed_ReconnectingClient `{ffi_syntax} : IntoValTyped ReconnectingClient.t reconnectclient.ReconnectingClient :=
{|
  default_val := ReconnectingClient.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_ReconnectingClient_mu `{ffi_syntax} : IntoValStructField "mu" reconnectclient.ReconnectingClient ReconnectingClient.mu'.
Admitted.

Global Instance into_val_struct_field_ReconnectingClient_valid `{ffi_syntax} : IntoValStructField "valid" reconnectclient.ReconnectingClient ReconnectingClient.valid'.
Admitted.

Global Instance into_val_struct_field_ReconnectingClient_urpcCl `{ffi_syntax} : IntoValStructField "urpcCl" reconnectclient.ReconnectingClient ReconnectingClient.urpcCl'.
Admitted.

Global Instance into_val_struct_field_ReconnectingClient_addr `{ffi_syntax} : IntoValStructField "addr" reconnectclient.ReconnectingClient ReconnectingClient.addr'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_ReconnectingClient `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} mu' valid' urpcCl' addr':
  PureWp True
    (struct.make reconnectclient.ReconnectingClient (alist_val [
      "mu" ::= #mu';
      "valid" ::= #valid';
      "urpcCl" ::= #urpcCl';
      "addr" ::= #addr'
    ]))%struct
    #(ReconnectingClient.mk mu' valid' urpcCl' addr').
Admitted.


Global Instance ReconnectingClient_struct_fields_split dq l (v : ReconnectingClient.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[reconnectclient.ReconnectingClient :: "mu"]{dq} v.(ReconnectingClient.mu') ∗
    "Hvalid" ∷ l ↦s[reconnectclient.ReconnectingClient :: "valid"]{dq} v.(ReconnectingClient.valid') ∗
    "HurpcCl" ∷ l ↦s[reconnectclient.ReconnectingClient :: "urpcCl"]{dq} v.(ReconnectingClient.urpcCl') ∗
    "Haddr" ∷ l ↦s[reconnectclient.ReconnectingClient :: "addr"]{dq} v.(ReconnectingClient.addr')
  ).
Admitted.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined reconnectclient :=
{|
  is_pkg_defined := is_global_definitions reconnectclient var_addrs;
|}.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_MakeReconnectingClient :
  WpFuncCall reconnectclient "MakeReconnectingClient" _ (is_pkg_defined reconnectclient) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_ReconnectingClient'ptr_Call :
  WpMethodCall reconnectclient "ReconnectingClient'ptr" "Call" _ (is_pkg_defined reconnectclient) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ReconnectingClient'ptr_getClient :
  WpMethodCall reconnectclient "ReconnectingClient'ptr" "getClient" _ (is_pkg_defined reconnectclient) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End reconnectclient.
