(* autogenerated by goose proofgen (types); do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.code.github_com.mit_pdos.gokv.globals_test.
Require Export New.golang.theory.

Module main.
Axiom falso : False.

Section names.

Class GlobalAddrs :=
{
  GlobalX : loc;
  globalY : loc;
  globalA : loc;
  globalB : loc;
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
    ("GlobalX"%go, GlobalX);
    ("globalY"%go, globalY);
    ("globalA"%go, globalA);
    ("globalB"%go, globalB)
  ].

Definition is_defined := is_global_definitions main.pkg_name' var_addrs main.functions' main.msets'.

Global Instance is_pkg_defined : PkgIsDefined main.pkg_name' is_defined :=
  ltac:(prove_pkg_is_defined).

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
  "HGlobalX" ∷ GlobalX ↦ (default_val w64) ∗
  "HglobalY" ∷ globalY ↦ (default_val go_string) ∗
  "HglobalA" ∷ globalA ↦ (default_val go_string) ∗
  "HglobalB" ∷ globalB ↦ (default_val go_string).

Global Instance wp_globals_get_GlobalX : 
  WpGlobalsGet main.pkg_name' "GlobalX" GlobalX is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_globalY : 
  WpGlobalsGet main.pkg_name' "globalY" globalY is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_globalA : 
  WpGlobalsGet main.pkg_name' "globalA" globalA is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_globalB : 
  WpGlobalsGet main.pkg_name' "globalB" globalB is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_func_call_foo :
  WpFuncCall main.pkg_name' "foo" _ (pkg_defined main.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_other :
  WpFuncCall main.pkg_name' "other" _ (pkg_defined main.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_bar :
  WpFuncCall main.pkg_name' "bar" _ (pkg_defined main.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_main :
  WpFuncCall main.pkg_name' "main" _ (pkg_defined main.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

End names.
End main.
