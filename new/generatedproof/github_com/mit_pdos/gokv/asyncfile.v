(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.asyncfile.
Module asyncfile.
Axiom falso : False.
Module AsyncFile.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  data' : slice.t;
  filename' : go_string;
  index' : w64;
  indexCond' : loc;
  durableIndex' : w64;
  durableIndexCond' : loc;
  closeRequested' : bool;
  closed' : bool;
  closedCond' : loc;
}.
End def.
End AsyncFile.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_AsyncFile `{ffi_syntax}: Settable _ :=
  settable! AsyncFile.mk < AsyncFile.mu'; AsyncFile.data'; AsyncFile.filename'; AsyncFile.index'; AsyncFile.indexCond'; AsyncFile.durableIndex'; AsyncFile.durableIndexCond'; AsyncFile.closeRequested'; AsyncFile.closed'; AsyncFile.closedCond' >.
Global Instance into_val_AsyncFile `{ffi_syntax} : IntoVal AsyncFile.t.
Admitted.

Global Instance into_val_typed_AsyncFile `{ffi_syntax} : IntoValTyped AsyncFile.t asyncfile.AsyncFile :=
{|
  default_val := AsyncFile.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_AsyncFile_mu `{ffi_syntax} : IntoValStructField "mu" asyncfile.AsyncFile AsyncFile.mu'.
Admitted.

Global Instance into_val_struct_field_AsyncFile_data `{ffi_syntax} : IntoValStructField "data" asyncfile.AsyncFile AsyncFile.data'.
Admitted.

Global Instance into_val_struct_field_AsyncFile_filename `{ffi_syntax} : IntoValStructField "filename" asyncfile.AsyncFile AsyncFile.filename'.
Admitted.

Global Instance into_val_struct_field_AsyncFile_index `{ffi_syntax} : IntoValStructField "index" asyncfile.AsyncFile AsyncFile.index'.
Admitted.

Global Instance into_val_struct_field_AsyncFile_indexCond `{ffi_syntax} : IntoValStructField "indexCond" asyncfile.AsyncFile AsyncFile.indexCond'.
Admitted.

Global Instance into_val_struct_field_AsyncFile_durableIndex `{ffi_syntax} : IntoValStructField "durableIndex" asyncfile.AsyncFile AsyncFile.durableIndex'.
Admitted.

Global Instance into_val_struct_field_AsyncFile_durableIndexCond `{ffi_syntax} : IntoValStructField "durableIndexCond" asyncfile.AsyncFile AsyncFile.durableIndexCond'.
Admitted.

Global Instance into_val_struct_field_AsyncFile_closeRequested `{ffi_syntax} : IntoValStructField "closeRequested" asyncfile.AsyncFile AsyncFile.closeRequested'.
Admitted.

Global Instance into_val_struct_field_AsyncFile_closed `{ffi_syntax} : IntoValStructField "closed" asyncfile.AsyncFile AsyncFile.closed'.
Admitted.

Global Instance into_val_struct_field_AsyncFile_closedCond `{ffi_syntax} : IntoValStructField "closedCond" asyncfile.AsyncFile AsyncFile.closedCond'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_AsyncFile `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} mu' data' filename' index' indexCond' durableIndex' durableIndexCond' closeRequested' closed' closedCond':
  PureWp True
    (struct.make #asyncfile.AsyncFile (alist_val [
      "mu" ::= #mu';
      "data" ::= #data';
      "filename" ::= #filename';
      "index" ::= #index';
      "indexCond" ::= #indexCond';
      "durableIndex" ::= #durableIndex';
      "durableIndexCond" ::= #durableIndexCond';
      "closeRequested" ::= #closeRequested';
      "closed" ::= #closed';
      "closedCond" ::= #closedCond'
    ]))%struct
    #(AsyncFile.mk mu' data' filename' index' indexCond' durableIndex' durableIndexCond' closeRequested' closed' closedCond').
Admitted.


Global Instance AsyncFile_struct_fields_split dq l (v : AsyncFile.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[asyncfile.AsyncFile :: "mu"]{dq} v.(AsyncFile.mu') ∗
    "Hdata" ∷ l ↦s[asyncfile.AsyncFile :: "data"]{dq} v.(AsyncFile.data') ∗
    "Hfilename" ∷ l ↦s[asyncfile.AsyncFile :: "filename"]{dq} v.(AsyncFile.filename') ∗
    "Hindex" ∷ l ↦s[asyncfile.AsyncFile :: "index"]{dq} v.(AsyncFile.index') ∗
    "HindexCond" ∷ l ↦s[asyncfile.AsyncFile :: "indexCond"]{dq} v.(AsyncFile.indexCond') ∗
    "HdurableIndex" ∷ l ↦s[asyncfile.AsyncFile :: "durableIndex"]{dq} v.(AsyncFile.durableIndex') ∗
    "HdurableIndexCond" ∷ l ↦s[asyncfile.AsyncFile :: "durableIndexCond"]{dq} v.(AsyncFile.durableIndexCond') ∗
    "HcloseRequested" ∷ l ↦s[asyncfile.AsyncFile :: "closeRequested"]{dq} v.(AsyncFile.closeRequested') ∗
    "Hclosed" ∷ l ↦s[asyncfile.AsyncFile :: "closed"]{dq} v.(AsyncFile.closed') ∗
    "HclosedCond" ∷ l ↦s[asyncfile.AsyncFile :: "closedCond"]{dq} v.(AsyncFile.closedCond')
  ).
Admitted.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined asyncfile :=
{|
  is_pkg_defined := is_global_definitions asyncfile var_addrs;
|}.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_MakeAsyncFile :
  WpFuncCall asyncfile "MakeAsyncFile" _ (is_pkg_defined asyncfile) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_AsyncFile'ptr_Close :
  WpMethodCall asyncfile "AsyncFile'ptr" "Close" _ (is_pkg_defined asyncfile) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_AsyncFile'ptr_Write :
  WpMethodCall asyncfile "AsyncFile'ptr" "Write" _ (is_pkg_defined asyncfile) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_AsyncFile'ptr_flushThread :
  WpMethodCall asyncfile "AsyncFile'ptr" "flushThread" _ (is_pkg_defined asyncfile) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_AsyncFile'ptr_wait :
  WpMethodCall asyncfile "AsyncFile'ptr" "wait" _ (is_pkg_defined asyncfile) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End asyncfile.
