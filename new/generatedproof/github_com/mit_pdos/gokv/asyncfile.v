(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.asyncfile.

Set Default Proof Using "Type".

Module asyncfile.

Module AsyncFile.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  data' : slice.t;
  filename' : go_string;
  index' : w64;
  indexCond' : loc;
  durableIndex' : w64;
  durableIndexCond' : loc;
  closeRequested' : bool;
  closed' : bool;
  closedCond' : loc;
}.
End def.
End AsyncFile.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_AsyncFile : Settable _ :=
  settable! AsyncFile.mk < AsyncFile.mu'; AsyncFile.data'; AsyncFile.filename'; AsyncFile.index'; AsyncFile.indexCond'; AsyncFile.durableIndex'; AsyncFile.durableIndexCond'; AsyncFile.closeRequested'; AsyncFile.closed'; AsyncFile.closedCond' >.
Global Instance into_val_AsyncFile : IntoVal AsyncFile.t :=
  {| to_val_def v :=
    struct.val_aux asyncfile.AsyncFile [
    "mu" ::= #(AsyncFile.mu' v);
    "data" ::= #(AsyncFile.data' v);
    "filename" ::= #(AsyncFile.filename' v);
    "index" ::= #(AsyncFile.index' v);
    "indexCond" ::= #(AsyncFile.indexCond' v);
    "durableIndex" ::= #(AsyncFile.durableIndex' v);
    "durableIndexCond" ::= #(AsyncFile.durableIndexCond' v);
    "closeRequested" ::= #(AsyncFile.closeRequested' v);
    "closed" ::= #(AsyncFile.closed' v);
    "closedCond" ::= #(AsyncFile.closedCond' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_AsyncFile : IntoValTyped AsyncFile.t asyncfile.AsyncFile :=
{|
  default_val := AsyncFile.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_AsyncFile_mu : IntoValStructField "mu" asyncfile.AsyncFile AsyncFile.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AsyncFile_data : IntoValStructField "data" asyncfile.AsyncFile AsyncFile.data'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AsyncFile_filename : IntoValStructField "filename" asyncfile.AsyncFile AsyncFile.filename'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AsyncFile_index : IntoValStructField "index" asyncfile.AsyncFile AsyncFile.index'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AsyncFile_indexCond : IntoValStructField "indexCond" asyncfile.AsyncFile AsyncFile.indexCond'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AsyncFile_durableIndex : IntoValStructField "durableIndex" asyncfile.AsyncFile AsyncFile.durableIndex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AsyncFile_durableIndexCond : IntoValStructField "durableIndexCond" asyncfile.AsyncFile AsyncFile.durableIndexCond'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AsyncFile_closeRequested : IntoValStructField "closeRequested" asyncfile.AsyncFile AsyncFile.closeRequested'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AsyncFile_closed : IntoValStructField "closed" asyncfile.AsyncFile AsyncFile.closed'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AsyncFile_closedCond : IntoValStructField "closedCond" asyncfile.AsyncFile AsyncFile.closedCond'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_AsyncFile mu' data' filename' index' indexCond' durableIndex' durableIndexCond' closeRequested' closed' closedCond':
  PureWp True
    (struct.make #asyncfile.AsyncFile (alist_val [
      "mu" ::= #mu';
      "data" ::= #data';
      "filename" ::= #filename';
      "index" ::= #index';
      "indexCond" ::= #indexCond';
      "durableIndex" ::= #durableIndex';
      "durableIndexCond" ::= #durableIndexCond';
      "closeRequested" ::= #closeRequested';
      "closed" ::= #closed';
      "closedCond" ::= #closedCond'
    ]))%struct
    #(AsyncFile.mk mu' data' filename' index' indexCond' durableIndex' durableIndexCond' closeRequested' closed' closedCond').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance AsyncFile_struct_fields_split dq l (v : AsyncFile.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[asyncfile.AsyncFile :: "mu"]{dq} v.(AsyncFile.mu') ∗
    "Hdata" ∷ l ↦s[asyncfile.AsyncFile :: "data"]{dq} v.(AsyncFile.data') ∗
    "Hfilename" ∷ l ↦s[asyncfile.AsyncFile :: "filename"]{dq} v.(AsyncFile.filename') ∗
    "Hindex" ∷ l ↦s[asyncfile.AsyncFile :: "index"]{dq} v.(AsyncFile.index') ∗
    "HindexCond" ∷ l ↦s[asyncfile.AsyncFile :: "indexCond"]{dq} v.(AsyncFile.indexCond') ∗
    "HdurableIndex" ∷ l ↦s[asyncfile.AsyncFile :: "durableIndex"]{dq} v.(AsyncFile.durableIndex') ∗
    "HdurableIndexCond" ∷ l ↦s[asyncfile.AsyncFile :: "durableIndexCond"]{dq} v.(AsyncFile.durableIndexCond') ∗
    "HcloseRequested" ∷ l ↦s[asyncfile.AsyncFile :: "closeRequested"]{dq} v.(AsyncFile.closeRequested') ∗
    "Hclosed" ∷ l ↦s[asyncfile.AsyncFile :: "closed"]{dq} v.(AsyncFile.closed') ∗
    "HclosedCond" ∷ l ↦s[asyncfile.AsyncFile :: "closedCond"]{dq} v.(AsyncFile.closedCond')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (AsyncFile.mu' v)) asyncfile.AsyncFile "mu"%go.
  simpl_one_flatten_struct (# (AsyncFile.data' v)) asyncfile.AsyncFile "data"%go.
  simpl_one_flatten_struct (# (AsyncFile.filename' v)) asyncfile.AsyncFile "filename"%go.
  simpl_one_flatten_struct (# (AsyncFile.index' v)) asyncfile.AsyncFile "index"%go.
  simpl_one_flatten_struct (# (AsyncFile.indexCond' v)) asyncfile.AsyncFile "indexCond"%go.
  simpl_one_flatten_struct (# (AsyncFile.durableIndex' v)) asyncfile.AsyncFile "durableIndex"%go.
  simpl_one_flatten_struct (# (AsyncFile.durableIndexCond' v)) asyncfile.AsyncFile "durableIndexCond"%go.
  simpl_one_flatten_struct (# (AsyncFile.closeRequested' v)) asyncfile.AsyncFile "closeRequested"%go.
  simpl_one_flatten_struct (# (AsyncFile.closed' v)) asyncfile.AsyncFile "closed"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined asyncfile :=
{|
  is_pkg_defined := is_global_definitions asyncfile var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_MakeAsyncFile :
  WpFuncCall asyncfile "MakeAsyncFile" _ (is_pkg_defined asyncfile) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_AsyncFile'ptr_Close :
  WpMethodCall asyncfile "AsyncFile'ptr" "Close" _ (is_pkg_defined asyncfile) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_AsyncFile'ptr_Write :
  WpMethodCall asyncfile "AsyncFile'ptr" "Write" _ (is_pkg_defined asyncfile) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_AsyncFile'ptr_flushThread :
  WpMethodCall asyncfile "AsyncFile'ptr" "flushThread" _ (is_pkg_defined asyncfile) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_AsyncFile'ptr_wait :
  WpMethodCall asyncfile "AsyncFile'ptr" "wait" _ (is_pkg_defined asyncfile) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End asyncfile.
