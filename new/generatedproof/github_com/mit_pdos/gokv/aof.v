(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.aof.

Set Default Proof Using "Type".

Module aof.

Module AppendOnlyFile.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  oldDurableCond' : loc;
  durableCond' : loc;
  lengthCond' : loc;
  membuf' : slice.t;
  length' : w64;
  durableLength' : w64;
  closeRequested' : bool;
  closed' : bool;
  closedCond' : loc;
}.
End def.
End AppendOnlyFile.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_AppendOnlyFile : Settable _ :=
  settable! AppendOnlyFile.mk < AppendOnlyFile.mu'; AppendOnlyFile.oldDurableCond'; AppendOnlyFile.durableCond'; AppendOnlyFile.lengthCond'; AppendOnlyFile.membuf'; AppendOnlyFile.length'; AppendOnlyFile.durableLength'; AppendOnlyFile.closeRequested'; AppendOnlyFile.closed'; AppendOnlyFile.closedCond' >.
Global Instance into_val_AppendOnlyFile : IntoVal AppendOnlyFile.t :=
  {| to_val_def v :=
    struct.val_aux aof.AppendOnlyFile [
    "mu" ::= #(AppendOnlyFile.mu' v);
    "oldDurableCond" ::= #(AppendOnlyFile.oldDurableCond' v);
    "durableCond" ::= #(AppendOnlyFile.durableCond' v);
    "lengthCond" ::= #(AppendOnlyFile.lengthCond' v);
    "membuf" ::= #(AppendOnlyFile.membuf' v);
    "length" ::= #(AppendOnlyFile.length' v);
    "durableLength" ::= #(AppendOnlyFile.durableLength' v);
    "closeRequested" ::= #(AppendOnlyFile.closeRequested' v);
    "closed" ::= #(AppendOnlyFile.closed' v);
    "closedCond" ::= #(AppendOnlyFile.closedCond' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_AppendOnlyFile : IntoValTyped AppendOnlyFile.t aof.AppendOnlyFile :=
{|
  default_val := AppendOnlyFile.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_AppendOnlyFile_mu : IntoValStructField "mu" aof.AppendOnlyFile AppendOnlyFile.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AppendOnlyFile_oldDurableCond : IntoValStructField "oldDurableCond" aof.AppendOnlyFile AppendOnlyFile.oldDurableCond'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AppendOnlyFile_durableCond : IntoValStructField "durableCond" aof.AppendOnlyFile AppendOnlyFile.durableCond'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AppendOnlyFile_lengthCond : IntoValStructField "lengthCond" aof.AppendOnlyFile AppendOnlyFile.lengthCond'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AppendOnlyFile_membuf : IntoValStructField "membuf" aof.AppendOnlyFile AppendOnlyFile.membuf'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AppendOnlyFile_length : IntoValStructField "length" aof.AppendOnlyFile AppendOnlyFile.length'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AppendOnlyFile_durableLength : IntoValStructField "durableLength" aof.AppendOnlyFile AppendOnlyFile.durableLength'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AppendOnlyFile_closeRequested : IntoValStructField "closeRequested" aof.AppendOnlyFile AppendOnlyFile.closeRequested'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AppendOnlyFile_closed : IntoValStructField "closed" aof.AppendOnlyFile AppendOnlyFile.closed'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AppendOnlyFile_closedCond : IntoValStructField "closedCond" aof.AppendOnlyFile AppendOnlyFile.closedCond'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_AppendOnlyFile mu' oldDurableCond' durableCond' lengthCond' membuf' length' durableLength' closeRequested' closed' closedCond':
  PureWp True
    (struct.make #aof.AppendOnlyFile (alist_val [
      "mu" ::= #mu';
      "oldDurableCond" ::= #oldDurableCond';
      "durableCond" ::= #durableCond';
      "lengthCond" ::= #lengthCond';
      "membuf" ::= #membuf';
      "length" ::= #length';
      "durableLength" ::= #durableLength';
      "closeRequested" ::= #closeRequested';
      "closed" ::= #closed';
      "closedCond" ::= #closedCond'
    ]))%struct
    #(AppendOnlyFile.mk mu' oldDurableCond' durableCond' lengthCond' membuf' length' durableLength' closeRequested' closed' closedCond').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance AppendOnlyFile_struct_fields_split dq l (v : AppendOnlyFile.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[aof.AppendOnlyFile :: "mu"]{dq} v.(AppendOnlyFile.mu') ∗
    "HoldDurableCond" ∷ l ↦s[aof.AppendOnlyFile :: "oldDurableCond"]{dq} v.(AppendOnlyFile.oldDurableCond') ∗
    "HdurableCond" ∷ l ↦s[aof.AppendOnlyFile :: "durableCond"]{dq} v.(AppendOnlyFile.durableCond') ∗
    "HlengthCond" ∷ l ↦s[aof.AppendOnlyFile :: "lengthCond"]{dq} v.(AppendOnlyFile.lengthCond') ∗
    "Hmembuf" ∷ l ↦s[aof.AppendOnlyFile :: "membuf"]{dq} v.(AppendOnlyFile.membuf') ∗
    "Hlength" ∷ l ↦s[aof.AppendOnlyFile :: "length"]{dq} v.(AppendOnlyFile.length') ∗
    "HdurableLength" ∷ l ↦s[aof.AppendOnlyFile :: "durableLength"]{dq} v.(AppendOnlyFile.durableLength') ∗
    "HcloseRequested" ∷ l ↦s[aof.AppendOnlyFile :: "closeRequested"]{dq} v.(AppendOnlyFile.closeRequested') ∗
    "Hclosed" ∷ l ↦s[aof.AppendOnlyFile :: "closed"]{dq} v.(AppendOnlyFile.closed') ∗
    "HclosedCond" ∷ l ↦s[aof.AppendOnlyFile :: "closedCond"]{dq} v.(AppendOnlyFile.closedCond')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (AppendOnlyFile.mu' v)) aof.AppendOnlyFile "mu"%go.
  simpl_one_flatten_struct (# (AppendOnlyFile.oldDurableCond' v)) aof.AppendOnlyFile "oldDurableCond"%go.
  simpl_one_flatten_struct (# (AppendOnlyFile.durableCond' v)) aof.AppendOnlyFile "durableCond"%go.
  simpl_one_flatten_struct (# (AppendOnlyFile.lengthCond' v)) aof.AppendOnlyFile "lengthCond"%go.
  simpl_one_flatten_struct (# (AppendOnlyFile.membuf' v)) aof.AppendOnlyFile "membuf"%go.
  simpl_one_flatten_struct (# (AppendOnlyFile.length' v)) aof.AppendOnlyFile "length"%go.
  simpl_one_flatten_struct (# (AppendOnlyFile.durableLength' v)) aof.AppendOnlyFile "durableLength"%go.
  simpl_one_flatten_struct (# (AppendOnlyFile.closeRequested' v)) aof.AppendOnlyFile "closeRequested"%go.
  simpl_one_flatten_struct (# (AppendOnlyFile.closed' v)) aof.AppendOnlyFile "closed"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined aof :=
{|
  is_pkg_defined := is_global_definitions aof var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_CreateAppendOnlyFile :
  WpFuncCall aof "CreateAppendOnlyFile" _ (is_pkg_defined aof) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_AppendOnlyFile'ptr_Append :
  WpMethodCall aof "AppendOnlyFile'ptr" "Append" _ (is_pkg_defined aof) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_AppendOnlyFile'ptr_Close :
  WpMethodCall aof "AppendOnlyFile'ptr" "Close" _ (is_pkg_defined aof) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_AppendOnlyFile'ptr_WaitAppend :
  WpMethodCall aof "AppendOnlyFile'ptr" "WaitAppend" _ (is_pkg_defined aof) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End aof.
