(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.disk_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.primitive.disk.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.addr.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.common.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.jrnl.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.obj.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.util.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.go_journal.jrnl_replication.

Set Default Proof Using "Type".

Module replicated_block.

Module RepBlock.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  txn' : loc;
  m' : loc;
  a0' : addr.Addr.t;
  a1' : addr.Addr.t;
}.
End def.
End RepBlock.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_RepBlock : Settable _ :=
  settable! RepBlock.mk < RepBlock.txn'; RepBlock.m'; RepBlock.a0'; RepBlock.a1' >.
Global Instance into_val_RepBlock : IntoVal RepBlock.t :=
  {| to_val_def v :=
    struct.val_aux replicated_block.RepBlock [
    "txn" ::= #(RepBlock.txn' v);
    "m" ::= #(RepBlock.m' v);
    "a0" ::= #(RepBlock.a0' v);
    "a1" ::= #(RepBlock.a1' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_RepBlock : IntoValTyped RepBlock.t replicated_block.RepBlock :=
{|
  default_val := RepBlock.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_RepBlock_txn : IntoValStructField "txn" replicated_block.RepBlock RepBlock.txn'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_RepBlock_m : IntoValStructField "m" replicated_block.RepBlock RepBlock.m'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_RepBlock_a0 : IntoValStructField "a0" replicated_block.RepBlock RepBlock.a0'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_RepBlock_a1 : IntoValStructField "a1" replicated_block.RepBlock RepBlock.a1'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_RepBlock txn' m' a0' a1':
  PureWp True
    (struct.make #replicated_block.RepBlock (alist_val [
      "txn" ::= #txn';
      "m" ::= #m';
      "a0" ::= #a0';
      "a1" ::= #a1'
    ]))%struct
    #(RepBlock.mk txn' m' a0' a1').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance RepBlock_struct_fields_split dq l (v : RepBlock.t) :
  StructFieldsSplit dq l v (
    "Htxn" ∷ l ↦s[replicated_block.RepBlock :: "txn"]{dq} v.(RepBlock.txn') ∗
    "Hm" ∷ l ↦s[replicated_block.RepBlock :: "m"]{dq} v.(RepBlock.m') ∗
    "Ha0" ∷ l ↦s[replicated_block.RepBlock :: "a0"]{dq} v.(RepBlock.a0') ∗
    "Ha1" ∷ l ↦s[replicated_block.RepBlock :: "a1"]{dq} v.(RepBlock.a1')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (RepBlock.txn' v)) replicated_block.RepBlock "txn"%go.
  simpl_one_flatten_struct (# (RepBlock.m' v)) replicated_block.RepBlock "m"%go.
  simpl_one_flatten_struct (# (RepBlock.a0' v)) replicated_block.RepBlock "a0"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined replicated_block :=
{|
  is_pkg_defined := is_global_definitions replicated_block var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_Open :
  WpFuncCall replicated_block "Open" _ (is_pkg_defined replicated_block) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_RepBlock'ptr_Read :
  WpMethodCall replicated_block "RepBlock'ptr" "Read" _ (is_pkg_defined replicated_block) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RepBlock'ptr_Write :
  WpMethodCall replicated_block "RepBlock'ptr" "Write" _ (is_pkg_defined replicated_block) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End replicated_block.
