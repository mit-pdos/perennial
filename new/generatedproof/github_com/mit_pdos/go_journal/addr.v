(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.disk_prelude.
Require Export New.generatedproof.github_com.goose_lang.primitive.disk.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.common.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.go_journal.addr.

Set Default Proof Using "Type".

Module addr.

(* type addr.Addr *)
Module Addr.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Blkno' : w64;
  Off' : w64;
}.
End def.
End Addr.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Addr : Settable Addr.t :=
  settable! Addr.mk < Addr.Blkno'; Addr.Off' >.
#[local] Transparent addr.Addr.
#[local] Typeclasses Transparent addr.Addr.
Global Instance into_val_Addr : IntoVal Addr.t :=
  {| to_val_def v :=
    struct.val_aux addr.Addr [
    "Blkno" ::= #(Addr.Blkno' v);
    "Off" ::= #(Addr.Off' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Addr : IntoValTyped Addr.t addr.Addr :=
{|
  default_val := Addr.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Addr_Blkno : IntoValStructField "Blkno" addr.Addr Addr.Blkno'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Addr_Off : IntoValStructField "Off" addr.Addr Addr.Off'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Addr Blkno' Off':
  PureWp True
    (struct.make #addr.Addr (alist_val [
      "Blkno" ::= #Blkno';
      "Off" ::= #Off'
    ]))%struct
    #(Addr.mk Blkno' Off').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Addr_struct_fields_split dq l (v : Addr.t) :
  StructFieldsSplit dq l v (
    "HBlkno" ∷ l ↦s[addr.Addr :: "Blkno"]{dq} v.(Addr.Blkno') ∗
    "HOff" ∷ l ↦s[addr.Addr :: "Off"]{dq} v.(Addr.Off')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Addr.Blkno' v)) (addr.Addr) "Blkno"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{!heapGS Σ}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_addr : IsPkgDefinedPure addr :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single addr ∧
      is_pkg_defined_pure code.github_com.goose_lang.primitive.disk.disk ∧
      is_pkg_defined_pure code.github_com.mit_pdos.go_journal.common.common;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_addr : IsPkgDefined addr :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single addr ∗
       is_pkg_defined code.github_com.goose_lang.primitive.disk.disk ∗
       is_pkg_defined code.github_com.mit_pdos.go_journal.common.common)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_MkAddr :
  WpFuncCall addr.MkAddr _ (is_pkg_defined addr) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_MkBitAddr :
  WpFuncCall addr.MkBitAddr _ (is_pkg_defined addr) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Addr_Flatid :
  WpMethodCall addr.Addr.id "Flatid" _ (is_pkg_defined addr) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Addr'ptr_Flatid :
  WpMethodCall (ptrT.id addr.Addr.id) "Flatid" _ (is_pkg_defined addr) :=
  ltac:(solve_wp_method_call).

End names.
End addr.
