(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.disk_prelude.
Require Export New.generatedproof.github_com.goose_lang.primitive.disk.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.addr.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.buf.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.common.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.util.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.wal.
Require Export New.generatedproof.sync.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.go_journal.obj.

Set Default Proof Using "Type".

Module obj.

Module Log.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  log' : loc;
  pos' : wal.LogPosition.t;
}.
End def.
End Log.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Log : Settable _ :=
  settable! Log.mk < Log.mu'; Log.log'; Log.pos' >.
Global Instance into_val_Log : IntoVal Log.t :=
  {| to_val_def v :=
    struct.val_aux obj.Log [
    "mu" ::= #(Log.mu' v);
    "log" ::= #(Log.log' v);
    "pos" ::= #(Log.pos' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Log : IntoValTyped Log.t obj.Log :=
{|
  default_val := Log.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Log_mu : IntoValStructField "mu" obj.Log Log.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Log_log : IntoValStructField "log" obj.Log Log.log'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Log_pos : IntoValStructField "pos" obj.Log Log.pos'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Log mu' log' pos':
  PureWp True
    (struct.make #obj.Log (alist_val [
      "mu" ::= #mu';
      "log" ::= #log';
      "pos" ::= #pos'
    ]))%struct
    #(Log.mk mu' log' pos').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Log_struct_fields_split dq l (v : Log.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[obj.Log :: "mu"]{dq} v.(Log.mu') ∗
    "Hlog" ∷ l ↦s[obj.Log :: "log"]{dq} v.(Log.log') ∗
    "Hpos" ∷ l ↦s[obj.Log :: "pos"]{dq} v.(Log.pos')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Log.mu' v)) obj.Log "mu"%go.
  simpl_one_flatten_struct (# (Log.log' v)) obj.Log "log"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined obj :=
{|
  is_pkg_defined := is_global_definitions obj var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_MkLog :
  WpFuncCall obj "MkLog" _ (is_pkg_defined obj) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_CommitWait :
  WpMethodCall obj "Log'ptr" "CommitWait" _ (is_pkg_defined obj) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Flush :
  WpMethodCall obj "Log'ptr" "Flush" _ (is_pkg_defined obj) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Load :
  WpMethodCall obj "Log'ptr" "Load" _ (is_pkg_defined obj) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_LogSz :
  WpMethodCall obj "Log'ptr" "LogSz" _ (is_pkg_defined obj) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Shutdown :
  WpMethodCall obj "Log'ptr" "Shutdown" _ (is_pkg_defined obj) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_doCommit :
  WpMethodCall obj "Log'ptr" "doCommit" _ (is_pkg_defined obj) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_installBufs :
  WpMethodCall obj "Log'ptr" "installBufs" _ (is_pkg_defined obj) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_installBufsMap :
  WpMethodCall obj "Log'ptr" "installBufsMap" _ (is_pkg_defined obj) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End obj.
