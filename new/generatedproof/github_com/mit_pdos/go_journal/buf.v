(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.disk_prelude.
Require Export New.generatedproof.github_com.goose_lang.primitive.disk.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.addr.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.common.
Require Export New.generatedproof.github_com.mit_pdos.go_journal.util.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.go_journal.buf.

Set Default Proof Using "Type".

Module buf.

(* type buf.Buf *)
Module Buf.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Addr' : addr.Addr.t;
  Sz' : w64;
  Data' : slice.t;
  dirty' : bool;
}.
End def.
End Buf.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Buf : Settable Buf.t :=
  settable! Buf.mk < Buf.Addr'; Buf.Sz'; Buf.Data'; Buf.dirty' >.
Global Instance into_val_Buf : IntoVal Buf.t :=
  {| to_val_def v :=
    struct.val_aux buf.Buf [
    "Addr" ::= #(Buf.Addr' v);
    "Sz" ::= #(Buf.Sz' v);
    "Data" ::= #(Buf.Data' v);
    "dirty" ::= #(Buf.dirty' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Buf : IntoValTyped Buf.t buf.Buf :=
{|
  default_val := Buf.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Buf_Addr : IntoValStructField "Addr" buf.Buf Buf.Addr'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Buf_Sz : IntoValStructField "Sz" buf.Buf Buf.Sz'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Buf_Data : IntoValStructField "Data" buf.Buf Buf.Data'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Buf_dirty : IntoValStructField "dirty" buf.Buf Buf.dirty'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Buf Addr' Sz' Data' dirty':
  PureWp True
    (struct.make #buf.Buf (alist_val [
      "Addr" ::= #Addr';
      "Sz" ::= #Sz';
      "Data" ::= #Data';
      "dirty" ::= #dirty'
    ]))%struct
    #(Buf.mk Addr' Sz' Data' dirty').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Buf_struct_fields_split dq l (v : Buf.t) :
  StructFieldsSplit dq l v (
    "HAddr" ∷ l ↦s[buf.Buf :: "Addr"]{dq} v.(Buf.Addr') ∗
    "HSz" ∷ l ↦s[buf.Buf :: "Sz"]{dq} v.(Buf.Sz') ∗
    "HData" ∷ l ↦s[buf.Buf :: "Data"]{dq} v.(Buf.Data') ∗
    "Hdirty" ∷ l ↦s[buf.Buf :: "dirty"]{dq} v.(Buf.dirty')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Buf.Addr' v)) buf.Buf "Addr"%go.
  simpl_one_flatten_struct (# (Buf.Sz' v)) buf.Buf "Sz"%go.
  simpl_one_flatten_struct (# (Buf.Data' v)) buf.Buf "Data"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type buf.BufMap *)
Module BufMap.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  addrs' : loc;
}.
End def.
End BufMap.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_BufMap : Settable BufMap.t :=
  settable! BufMap.mk < BufMap.addrs' >.
Global Instance into_val_BufMap : IntoVal BufMap.t :=
  {| to_val_def v :=
    struct.val_aux buf.BufMap [
    "addrs" ::= #(BufMap.addrs' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_BufMap : IntoValTyped BufMap.t buf.BufMap :=
{|
  default_val := BufMap.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_BufMap_addrs : IntoValStructField "addrs" buf.BufMap BufMap.addrs'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_BufMap addrs':
  PureWp True
    (struct.make #buf.BufMap (alist_val [
      "addrs" ::= #addrs'
    ]))%struct
    #(BufMap.mk addrs').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance BufMap_struct_fields_split dq l (v : BufMap.t) :
  StructFieldsSplit dq l v (
    "Haddrs" ∷ l ↦s[buf.BufMap :: "addrs"]{dq} v.(BufMap.addrs')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined buf :=
{|
  is_pkg_defined := is_global_definitions buf var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_MkBuf :
  WpFuncCall buf "MkBuf" _ (is_pkg_defined buf) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MkBufLoad :
  WpFuncCall buf "MkBufLoad" _ (is_pkg_defined buf) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_installOneBit :
  WpFuncCall buf "installOneBit" _ (is_pkg_defined buf) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_installBit :
  WpFuncCall buf "installBit" _ (is_pkg_defined buf) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_installBytes :
  WpFuncCall buf "installBytes" _ (is_pkg_defined buf) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MkBufMap :
  WpFuncCall buf "MkBufMap" _ (is_pkg_defined buf) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Buf'ptr_BnumGet :
  WpMethodCall buf "Buf'ptr" "BnumGet" _ (is_pkg_defined buf) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Buf'ptr_BnumPut :
  WpMethodCall buf "Buf'ptr" "BnumPut" _ (is_pkg_defined buf) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Buf'ptr_Install :
  WpMethodCall buf "Buf'ptr" "Install" _ (is_pkg_defined buf) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Buf'ptr_IsDirty :
  WpMethodCall buf "Buf'ptr" "IsDirty" _ (is_pkg_defined buf) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Buf'ptr_SetDirty :
  WpMethodCall buf "Buf'ptr" "SetDirty" _ (is_pkg_defined buf) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Buf'ptr_WriteDirect :
  WpMethodCall buf "Buf'ptr" "WriteDirect" _ (is_pkg_defined buf) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BufMap'ptr_Del :
  WpMethodCall buf "BufMap'ptr" "Del" _ (is_pkg_defined buf) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BufMap'ptr_DirtyBufs :
  WpMethodCall buf "BufMap'ptr" "DirtyBufs" _ (is_pkg_defined buf) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BufMap'ptr_Insert :
  WpMethodCall buf "BufMap'ptr" "Insert" _ (is_pkg_defined buf) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BufMap'ptr_Lookup :
  WpMethodCall buf "BufMap'ptr" "Lookup" _ (is_pkg_defined buf) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BufMap'ptr_Ndirty :
  WpMethodCall buf "BufMap'ptr" "Ndirty" _ (is_pkg_defined buf) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End buf.
