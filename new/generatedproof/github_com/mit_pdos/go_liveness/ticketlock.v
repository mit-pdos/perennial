(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.runtime.
Require Export New.generatedproof.sync.atomic.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.go_liveness.ticketlock.

Set Default Proof Using "Type".

Module ticketlock.

(* type ticketlock.TicketLock *)
Module TicketLock.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  cur' : atomic.Uint64.t;
  next' : atomic.Uint64.t;
}.
End def.
End TicketLock.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_TicketLock : Settable TicketLock.t :=
  settable! TicketLock.mk < TicketLock.cur'; TicketLock.next' >.
Global Instance into_val_TicketLock : IntoVal TicketLock.t :=
  {| to_val_def v :=
    struct.val_aux ticketlock.TicketLock [
    "cur" ::= #(TicketLock.cur' v);
    "next" ::= #(TicketLock.next' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_TicketLock : IntoValTyped TicketLock.t ticketlock.TicketLock :=
{|
  default_val := TicketLock.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_TicketLock_cur : IntoValStructField "cur" ticketlock.TicketLock TicketLock.cur'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_TicketLock_next : IntoValStructField "next" ticketlock.TicketLock TicketLock.next'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_TicketLock cur' next':
  PureWp True
    (struct.make #ticketlock.TicketLock (alist_val [
      "cur" ::= #cur';
      "next" ::= #next'
    ]))%struct
    #(TicketLock.mk cur' next').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance TicketLock_struct_fields_split dq l (v : TicketLock.t) :
  StructFieldsSplit dq l v (
    "Hcur" ∷ l ↦s[ticketlock.TicketLock :: "cur"]{dq} v.(TicketLock.cur') ∗
    "Hnext" ∷ l ↦s[ticketlock.TicketLock :: "next"]{dq} v.(TicketLock.next')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (TicketLock.cur' v)) (ticketlock.TicketLock) "cur"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_ticketlock : IsPkgDefinedPure ticketlock :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single ticketlock ∧
      is_pkg_defined_pure code.runtime.runtime ∧
      is_pkg_defined_pure code.sync.atomic.atomic;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_ticketlock : IsPkgDefined ticketlock :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single ticketlock ∗
       is_pkg_defined code.runtime.runtime ∗
       is_pkg_defined code.sync.atomic.atomic)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_New :
  WpFuncCall ticketlock.New _ (is_pkg_defined ticketlock) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_TicketLock'ptr_Acquire :
  WpMethodCall (ptrT.id ticketlock.TicketLock.id) "Acquire" _ (is_pkg_defined ticketlock) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_TicketLock'ptr_Release :
  WpMethodCall (ptrT.id ticketlock.TicketLock.id) "Release" _ (is_pkg_defined ticketlock) :=
  ltac:(solve_wp_method_call).

End names.
End ticketlock.
