(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.mit_pdos.tulip.tulip.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.tulip.tuple.

Set Default Proof Using "Type".

Module tuple.

(* type tuple.Tuple *)
Module Tuple.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  tssafe' : w64;
  vers' : slice.t;
}.
End def.
End Tuple.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Tuple : Settable Tuple.t :=
  settable! Tuple.mk < Tuple.mu'; Tuple.tssafe'; Tuple.vers' >.
Global Instance into_val_Tuple : IntoVal Tuple.t :=
  {| to_val_def v :=
    struct.val_aux tuple.Tuple [
    "mu" ::= #(Tuple.mu' v);
    "tssafe" ::= #(Tuple.tssafe' v);
    "vers" ::= #(Tuple.vers' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Tuple : IntoValTyped Tuple.t tuple.Tuple :=
{|
  default_val := Tuple.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Tuple_mu : IntoValStructField "mu" tuple.Tuple Tuple.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Tuple_tssafe : IntoValStructField "tssafe" tuple.Tuple Tuple.tssafe'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Tuple_vers : IntoValStructField "vers" tuple.Tuple Tuple.vers'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Tuple mu' tssafe' vers':
  PureWp True
    (struct.make #tuple.Tuple (alist_val [
      "mu" ::= #mu';
      "tssafe" ::= #tssafe';
      "vers" ::= #vers'
    ]))%struct
    #(Tuple.mk mu' tssafe' vers').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Tuple_struct_fields_split dq l (v : Tuple.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[tuple.Tuple :: "mu"]{dq} v.(Tuple.mu') ∗
    "Htssafe" ∷ l ↦s[tuple.Tuple :: "tssafe"]{dq} v.(Tuple.tssafe') ∗
    "Hvers" ∷ l ↦s[tuple.Tuple :: "vers"]{dq} v.(Tuple.vers')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Tuple.mu' v)) tuple.Tuple "mu"%go.
  simpl_one_flatten_struct (# (Tuple.tssafe' v)) tuple.Tuple "tssafe"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined tuple :=
{|
  is_pkg_defined := is_global_definitions tuple var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_findVersion :
  WpFuncCall tuple "findVersion" _ (is_pkg_defined tuple) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MkTuple :
  WpFuncCall tuple "MkTuple" _ (is_pkg_defined tuple) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Tuple'ptr_AppendVersion :
  WpMethodCall tuple "Tuple'ptr" "AppendVersion" _ (is_pkg_defined tuple) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Tuple'ptr_KillVersion :
  WpMethodCall tuple "Tuple'ptr" "KillVersion" _ (is_pkg_defined tuple) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Tuple'ptr_ReadVersion :
  WpMethodCall tuple "Tuple'ptr" "ReadVersion" _ (is_pkg_defined tuple) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End tuple.
