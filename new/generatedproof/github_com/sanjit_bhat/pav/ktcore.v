(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.cryptoffi.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.cryptoutil.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.safemarshal.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.golang.theory.

Require Export New.code.github_com.sanjit_bhat.pav.ktcore.

Set Default Proof Using "Type".

Module ktcore.

(* type ktcore.Blame *)
Module Blame.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End Blame.

(* type ktcore.VrfSig *)
Module VrfSig.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  SigTag' : w8;
  VrfPk' : slice.t;
}.
End def.
End VrfSig.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_VrfSig : Settable VrfSig.t :=
  settable! VrfSig.mk < VrfSig.SigTag'; VrfSig.VrfPk' >.
Global Instance into_val_VrfSig : IntoVal VrfSig.t :=
  {| to_val_def v :=
    struct.val_aux ktcore.VrfSig [
    "SigTag" ::= #(VrfSig.SigTag' v);
    "VrfPk" ::= #(VrfSig.VrfPk' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_VrfSig : IntoValTyped VrfSig.t ktcore.VrfSig :=
{|
  default_val := VrfSig.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_VrfSig_SigTag : IntoValStructField "SigTag" ktcore.VrfSig VrfSig.SigTag'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_VrfSig_VrfPk : IntoValStructField "VrfPk" ktcore.VrfSig VrfSig.VrfPk'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_VrfSig SigTag' VrfPk':
  PureWp True
    (struct.make #ktcore.VrfSig (alist_val [
      "SigTag" ::= #SigTag';
      "VrfPk" ::= #VrfPk'
    ]))%struct
    #(VrfSig.mk SigTag' VrfPk').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance VrfSig_struct_fields_split dq l (v : VrfSig.t) :
  StructFieldsSplit dq l v (
    "HSigTag" ∷ l ↦s[ktcore.VrfSig :: "SigTag"]{dq} v.(VrfSig.SigTag') ∗
    "HVrfPk" ∷ l ↦s[ktcore.VrfSig :: "VrfPk"]{dq} v.(VrfSig.VrfPk')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (VrfSig.SigTag' v)) (ktcore.VrfSig) "SigTag"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type ktcore.LinkSig *)
Module LinkSig.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  SigTag' : w8;
  Epoch' : w64;
  Link' : slice.t;
}.
End def.
End LinkSig.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_LinkSig : Settable LinkSig.t :=
  settable! LinkSig.mk < LinkSig.SigTag'; LinkSig.Epoch'; LinkSig.Link' >.
Global Instance into_val_LinkSig : IntoVal LinkSig.t :=
  {| to_val_def v :=
    struct.val_aux ktcore.LinkSig [
    "SigTag" ::= #(LinkSig.SigTag' v);
    "Epoch" ::= #(LinkSig.Epoch' v);
    "Link" ::= #(LinkSig.Link' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_LinkSig : IntoValTyped LinkSig.t ktcore.LinkSig :=
{|
  default_val := LinkSig.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_LinkSig_SigTag : IntoValStructField "SigTag" ktcore.LinkSig LinkSig.SigTag'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_LinkSig_Epoch : IntoValStructField "Epoch" ktcore.LinkSig LinkSig.Epoch'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_LinkSig_Link : IntoValStructField "Link" ktcore.LinkSig LinkSig.Link'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_LinkSig SigTag' Epoch' Link':
  PureWp True
    (struct.make #ktcore.LinkSig (alist_val [
      "SigTag" ::= #SigTag';
      "Epoch" ::= #Epoch';
      "Link" ::= #Link'
    ]))%struct
    #(LinkSig.mk SigTag' Epoch' Link').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance LinkSig_struct_fields_split dq l (v : LinkSig.t) :
  StructFieldsSplit dq l v (
    "HSigTag" ∷ l ↦s[ktcore.LinkSig :: "SigTag"]{dq} v.(LinkSig.SigTag') ∗
    "HEpoch" ∷ l ↦s[ktcore.LinkSig :: "Epoch"]{dq} v.(LinkSig.Epoch') ∗
    "HLink" ∷ l ↦s[ktcore.LinkSig :: "Link"]{dq} v.(LinkSig.Link')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (LinkSig.SigTag' v)) (ktcore.LinkSig) "SigTag"%go.
  simpl_one_flatten_struct (# (LinkSig.Epoch' v)) (ktcore.LinkSig) "Epoch"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type ktcore.MapLabel *)
Module MapLabel.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Uid' : w64;
  Ver' : w64;
}.
End def.
End MapLabel.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_MapLabel : Settable MapLabel.t :=
  settable! MapLabel.mk < MapLabel.Uid'; MapLabel.Ver' >.
Global Instance into_val_MapLabel : IntoVal MapLabel.t :=
  {| to_val_def v :=
    struct.val_aux ktcore.MapLabel [
    "Uid" ::= #(MapLabel.Uid' v);
    "Ver" ::= #(MapLabel.Ver' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_MapLabel : IntoValTyped MapLabel.t ktcore.MapLabel :=
{|
  default_val := MapLabel.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_MapLabel_Uid : IntoValStructField "Uid" ktcore.MapLabel MapLabel.Uid'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_MapLabel_Ver : IntoValStructField "Ver" ktcore.MapLabel MapLabel.Ver'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_MapLabel Uid' Ver':
  PureWp True
    (struct.make #ktcore.MapLabel (alist_val [
      "Uid" ::= #Uid';
      "Ver" ::= #Ver'
    ]))%struct
    #(MapLabel.mk Uid' Ver').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance MapLabel_struct_fields_split dq l (v : MapLabel.t) :
  StructFieldsSplit dq l v (
    "HUid" ∷ l ↦s[ktcore.MapLabel :: "Uid"]{dq} v.(MapLabel.Uid') ∗
    "HVer" ∷ l ↦s[ktcore.MapLabel :: "Ver"]{dq} v.(MapLabel.Ver')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (MapLabel.Uid' v)) (ktcore.MapLabel) "Uid"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type ktcore.CommitOpen *)
Module CommitOpen.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Val' : slice.t;
  Rand' : slice.t;
}.
End def.
End CommitOpen.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_CommitOpen : Settable CommitOpen.t :=
  settable! CommitOpen.mk < CommitOpen.Val'; CommitOpen.Rand' >.
Global Instance into_val_CommitOpen : IntoVal CommitOpen.t :=
  {| to_val_def v :=
    struct.val_aux ktcore.CommitOpen [
    "Val" ::= #(CommitOpen.Val' v);
    "Rand" ::= #(CommitOpen.Rand' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_CommitOpen : IntoValTyped CommitOpen.t ktcore.CommitOpen :=
{|
  default_val := CommitOpen.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_CommitOpen_Val : IntoValStructField "Val" ktcore.CommitOpen CommitOpen.Val'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_CommitOpen_Rand : IntoValStructField "Rand" ktcore.CommitOpen CommitOpen.Rand'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_CommitOpen Val' Rand':
  PureWp True
    (struct.make #ktcore.CommitOpen (alist_val [
      "Val" ::= #Val';
      "Rand" ::= #Rand'
    ]))%struct
    #(CommitOpen.mk Val' Rand').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance CommitOpen_struct_fields_split dq l (v : CommitOpen.t) :
  StructFieldsSplit dq l v (
    "HVal" ∷ l ↦s[ktcore.CommitOpen :: "Val"]{dq} v.(CommitOpen.Val') ∗
    "HRand" ∷ l ↦s[ktcore.CommitOpen :: "Rand"]{dq} v.(CommitOpen.Rand')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (CommitOpen.Val' v)) (ktcore.CommitOpen) "Val"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type ktcore.Memb *)
Module Memb.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  LabelProof' : slice.t;
  PkOpen' : loc;
  MerkleProof' : slice.t;
}.
End def.
End Memb.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Memb : Settable Memb.t :=
  settable! Memb.mk < Memb.LabelProof'; Memb.PkOpen'; Memb.MerkleProof' >.
Global Instance into_val_Memb : IntoVal Memb.t :=
  {| to_val_def v :=
    struct.val_aux ktcore.Memb [
    "LabelProof" ::= #(Memb.LabelProof' v);
    "PkOpen" ::= #(Memb.PkOpen' v);
    "MerkleProof" ::= #(Memb.MerkleProof' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Memb : IntoValTyped Memb.t ktcore.Memb :=
{|
  default_val := Memb.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Memb_LabelProof : IntoValStructField "LabelProof" ktcore.Memb Memb.LabelProof'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Memb_PkOpen : IntoValStructField "PkOpen" ktcore.Memb Memb.PkOpen'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Memb_MerkleProof : IntoValStructField "MerkleProof" ktcore.Memb Memb.MerkleProof'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Memb LabelProof' PkOpen' MerkleProof':
  PureWp True
    (struct.make #ktcore.Memb (alist_val [
      "LabelProof" ::= #LabelProof';
      "PkOpen" ::= #PkOpen';
      "MerkleProof" ::= #MerkleProof'
    ]))%struct
    #(Memb.mk LabelProof' PkOpen' MerkleProof').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Memb_struct_fields_split dq l (v : Memb.t) :
  StructFieldsSplit dq l v (
    "HLabelProof" ∷ l ↦s[ktcore.Memb :: "LabelProof"]{dq} v.(Memb.LabelProof') ∗
    "HPkOpen" ∷ l ↦s[ktcore.Memb :: "PkOpen"]{dq} v.(Memb.PkOpen') ∗
    "HMerkleProof" ∷ l ↦s[ktcore.Memb :: "MerkleProof"]{dq} v.(Memb.MerkleProof')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Memb.LabelProof' v)) (ktcore.Memb) "LabelProof"%go.
  simpl_one_flatten_struct (# (Memb.PkOpen' v)) (ktcore.Memb) "PkOpen"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type ktcore.NonMemb *)
Module NonMemb.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  LabelProof' : slice.t;
  MerkleProof' : slice.t;
}.
End def.
End NonMemb.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_NonMemb : Settable NonMemb.t :=
  settable! NonMemb.mk < NonMemb.LabelProof'; NonMemb.MerkleProof' >.
Global Instance into_val_NonMemb : IntoVal NonMemb.t :=
  {| to_val_def v :=
    struct.val_aux ktcore.NonMemb [
    "LabelProof" ::= #(NonMemb.LabelProof' v);
    "MerkleProof" ::= #(NonMemb.MerkleProof' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_NonMemb : IntoValTyped NonMemb.t ktcore.NonMemb :=
{|
  default_val := NonMemb.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_NonMemb_LabelProof : IntoValStructField "LabelProof" ktcore.NonMemb NonMemb.LabelProof'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_NonMemb_MerkleProof : IntoValStructField "MerkleProof" ktcore.NonMemb NonMemb.MerkleProof'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_NonMemb LabelProof' MerkleProof':
  PureWp True
    (struct.make #ktcore.NonMemb (alist_val [
      "LabelProof" ::= #LabelProof';
      "MerkleProof" ::= #MerkleProof'
    ]))%struct
    #(NonMemb.mk LabelProof' MerkleProof').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance NonMemb_struct_fields_split dq l (v : NonMemb.t) :
  StructFieldsSplit dq l v (
    "HLabelProof" ∷ l ↦s[ktcore.NonMemb :: "LabelProof"]{dq} v.(NonMemb.LabelProof') ∗
    "HMerkleProof" ∷ l ↦s[ktcore.NonMemb :: "MerkleProof"]{dq} v.(NonMemb.MerkleProof')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (NonMemb.LabelProof' v)) (ktcore.NonMemb) "LabelProof"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type ktcore.AuditProof *)
Module AuditProof.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Updates' : slice.t;
  LinkSig' : slice.t;
}.
End def.
End AuditProof.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_AuditProof : Settable AuditProof.t :=
  settable! AuditProof.mk < AuditProof.Updates'; AuditProof.LinkSig' >.
Global Instance into_val_AuditProof : IntoVal AuditProof.t :=
  {| to_val_def v :=
    struct.val_aux ktcore.AuditProof [
    "Updates" ::= #(AuditProof.Updates' v);
    "LinkSig" ::= #(AuditProof.LinkSig' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_AuditProof : IntoValTyped AuditProof.t ktcore.AuditProof :=
{|
  default_val := AuditProof.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_AuditProof_Updates : IntoValStructField "Updates" ktcore.AuditProof AuditProof.Updates'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_AuditProof_LinkSig : IntoValStructField "LinkSig" ktcore.AuditProof AuditProof.LinkSig'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_AuditProof Updates' LinkSig':
  PureWp True
    (struct.make #ktcore.AuditProof (alist_val [
      "Updates" ::= #Updates';
      "LinkSig" ::= #LinkSig'
    ]))%struct
    #(AuditProof.mk Updates' LinkSig').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance AuditProof_struct_fields_split dq l (v : AuditProof.t) :
  StructFieldsSplit dq l v (
    "HUpdates" ∷ l ↦s[ktcore.AuditProof :: "Updates"]{dq} v.(AuditProof.Updates') ∗
    "HLinkSig" ∷ l ↦s[ktcore.AuditProof :: "LinkSig"]{dq} v.(AuditProof.LinkSig')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (AuditProof.Updates' v)) (ktcore.AuditProof) "Updates"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type ktcore.UpdateProof *)
Module UpdateProof.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  MapLabel' : slice.t;
  MapVal' : slice.t;
  NonMembProof' : slice.t;
}.
End def.
End UpdateProof.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_UpdateProof : Settable UpdateProof.t :=
  settable! UpdateProof.mk < UpdateProof.MapLabel'; UpdateProof.MapVal'; UpdateProof.NonMembProof' >.
Global Instance into_val_UpdateProof : IntoVal UpdateProof.t :=
  {| to_val_def v :=
    struct.val_aux ktcore.UpdateProof [
    "MapLabel" ::= #(UpdateProof.MapLabel' v);
    "MapVal" ::= #(UpdateProof.MapVal' v);
    "NonMembProof" ::= #(UpdateProof.NonMembProof' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_UpdateProof : IntoValTyped UpdateProof.t ktcore.UpdateProof :=
{|
  default_val := UpdateProof.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_UpdateProof_MapLabel : IntoValStructField "MapLabel" ktcore.UpdateProof UpdateProof.MapLabel'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_UpdateProof_MapVal : IntoValStructField "MapVal" ktcore.UpdateProof UpdateProof.MapVal'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_UpdateProof_NonMembProof : IntoValStructField "NonMembProof" ktcore.UpdateProof UpdateProof.NonMembProof'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_UpdateProof MapLabel' MapVal' NonMembProof':
  PureWp True
    (struct.make #ktcore.UpdateProof (alist_val [
      "MapLabel" ::= #MapLabel';
      "MapVal" ::= #MapVal';
      "NonMembProof" ::= #NonMembProof'
    ]))%struct
    #(UpdateProof.mk MapLabel' MapVal' NonMembProof').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance UpdateProof_struct_fields_split dq l (v : UpdateProof.t) :
  StructFieldsSplit dq l v (
    "HMapLabel" ∷ l ↦s[ktcore.UpdateProof :: "MapLabel"]{dq} v.(UpdateProof.MapLabel') ∗
    "HMapVal" ∷ l ↦s[ktcore.UpdateProof :: "MapVal"]{dq} v.(UpdateProof.MapVal') ∗
    "HNonMembProof" ∷ l ↦s[ktcore.UpdateProof :: "NonMembProof"]{dq} v.(UpdateProof.NonMembProof')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (UpdateProof.MapLabel' v)) (ktcore.UpdateProof) "MapLabel"%go.
  simpl_one_flatten_struct (# (UpdateProof.MapVal' v)) (ktcore.UpdateProof) "MapVal"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_ktcore : IsPkgDefinedPure ktcore :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single ktcore ∧
      is_pkg_defined_pure code.github_com.sanjit_bhat.pav.cryptoffi.cryptoffi ∧
      is_pkg_defined_pure code.github_com.sanjit_bhat.pav.cryptoutil.cryptoutil ∧
      is_pkg_defined_pure code.github_com.sanjit_bhat.pav.safemarshal.safemarshal ∧
      is_pkg_defined_pure code.github_com.tchajed.marshal.marshal;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_ktcore : IsPkgDefined ktcore :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single ktcore ∗
       is_pkg_defined code.github_com.sanjit_bhat.pav.cryptoffi.cryptoffi ∗
       is_pkg_defined code.github_com.sanjit_bhat.pav.cryptoutil.cryptoutil ∗
       is_pkg_defined code.github_com.sanjit_bhat.pav.safemarshal.safemarshal ∗
       is_pkg_defined code.github_com.tchajed.marshal.marshal)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_CheckBlame :
  WpFuncCall ktcore.CheckBlame _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_SignVrf :
  WpFuncCall ktcore.SignVrf _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_VerifyVrfSig :
  WpFuncCall ktcore.VerifyVrfSig _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_SignLink :
  WpFuncCall ktcore.SignLink _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_VerifyLinkSig :
  WpFuncCall ktcore.VerifyLinkSig _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_ProveMapLabel :
  WpFuncCall ktcore.ProveMapLabel _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_EvalMapLabel :
  WpFuncCall ktcore.EvalMapLabel _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_CheckMapLabel :
  WpFuncCall ktcore.CheckMapLabel _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_GetMapVal :
  WpFuncCall ktcore.GetMapVal _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_GetCommitRand :
  WpFuncCall ktcore.GetCommitRand _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_VrfSigEncode :
  WpFuncCall ktcore.VrfSigEncode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_VrfSigDecode :
  WpFuncCall ktcore.VrfSigDecode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_LinkSigEncode :
  WpFuncCall ktcore.LinkSigEncode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_LinkSigDecode :
  WpFuncCall ktcore.LinkSigDecode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_MapLabelEncode :
  WpFuncCall ktcore.MapLabelEncode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_MapLabelDecode :
  WpFuncCall ktcore.MapLabelDecode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_CommitOpenEncode :
  WpFuncCall ktcore.CommitOpenEncode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_CommitOpenDecode :
  WpFuncCall ktcore.CommitOpenDecode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_MembEncode :
  WpFuncCall ktcore.MembEncode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_MembDecode :
  WpFuncCall ktcore.MembDecode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_NonMembEncode :
  WpFuncCall ktcore.NonMembEncode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_NonMembDecode :
  WpFuncCall ktcore.NonMembDecode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_AuditProofEncode :
  WpFuncCall ktcore.AuditProofEncode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_AuditProofDecode :
  WpFuncCall ktcore.AuditProofDecode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_UpdateProofEncode :
  WpFuncCall ktcore.UpdateProofEncode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_UpdateProofDecode :
  WpFuncCall ktcore.UpdateProofDecode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_UpdateProofSlice1DEncode :
  WpFuncCall ktcore.UpdateProofSlice1DEncode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_UpdateProofSlice1DDecode :
  WpFuncCall ktcore.UpdateProofSlice1DDecode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_MembSlice1DEncode :
  WpFuncCall ktcore.MembSlice1DEncode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_MembSlice1DDecode :
  WpFuncCall ktcore.MembSlice1DDecode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_AuditProofSlice1DEncode :
  WpFuncCall ktcore.AuditProofSlice1DEncode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_AuditProofSlice1DDecode :
  WpFuncCall ktcore.AuditProofSlice1DDecode _ (is_pkg_defined ktcore) :=
  ltac:(solve_wp_func_call).

End names.
End ktcore.
