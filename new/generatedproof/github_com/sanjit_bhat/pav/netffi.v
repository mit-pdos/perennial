(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.github_com.sanjit_bhat.pav.netffi.

Set Default Proof Using "Type".

Module netffi.

(* type netffi.Conn *)
Module Conn.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Conn.

Global Instance bounded_size_Conn : BoundedTypeSize netffi.Conn.
Admitted.

Global Instance into_val_Conn `{ffi_syntax} : IntoVal Conn.t.
Admitted.

Global Instance into_val_typed_Conn `{ffi_syntax} : IntoValTyped Conn.t netffi.Conn.
Admitted.

(* type netffi.Listener *)
Module Listener.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Listener.

Global Instance bounded_size_Listener : BoundedTypeSize netffi.Listener.
Admitted.

Global Instance into_val_Listener `{ffi_syntax} : IntoVal Listener.t.
Admitted.

Global Instance into_val_typed_Listener `{ffi_syntax} : IntoValTyped Listener.t netffi.Listener.
Admitted.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context `{!GoContext}.

Global Instance wp_func_call_Dial :
  WpFuncCall netffi.Dial _ (is_pkg_defined netffi) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Listen :
  WpFuncCall netffi.Listen _ (is_pkg_defined netffi) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Conn'ptr_Receive :
  WpMethodCall (ptrT.id netffi.Conn.id) "Receive" _ (is_pkg_defined netffi) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Conn'ptr_Send :
  WpMethodCall (ptrT.id netffi.Conn.id) "Send" _ (is_pkg_defined netffi) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Listener'ptr_Accept :
  WpMethodCall (ptrT.id netffi.Listener.id) "Accept" _ (is_pkg_defined netffi) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End netffi.
