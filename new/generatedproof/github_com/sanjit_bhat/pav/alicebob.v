(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.bytes.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.advrpc.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.auditor.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.client.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.cryptoffi.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.ktcore.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.server.
Require Export New.golang.theory.

Require Export New.code.github_com.sanjit_bhat.pav.alicebob.

Set Default Proof Using "Type".

Module alicebob.

(* type alicebob.histEntry *)
Module histEntry.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  isReg' : bool;
  pk' : slice.t;
}.
End def.
End histEntry.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_histEntry : Settable histEntry.t :=
  settable! histEntry.mk < histEntry.isReg'; histEntry.pk' >.
Global Instance into_val_histEntry : IntoVal histEntry.t :=
  {| to_val_def v :=
    struct.val_aux alicebob.histEntry [
    "isReg" ::= #(histEntry.isReg' v);
    "pk" ::= #(histEntry.pk' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_histEntry : IntoValTyped histEntry.t alicebob.histEntry :=
{|
  default_val := histEntry.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_histEntry_isReg : IntoValStructField "isReg" alicebob.histEntry histEntry.isReg'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_histEntry_pk : IntoValStructField "pk" alicebob.histEntry histEntry.pk'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_histEntry isReg' pk':
  PureWp True
    (struct.make #alicebob.histEntry (alist_val [
      "isReg" ::= #isReg';
      "pk" ::= #pk'
    ]))%struct
    #(histEntry.mk isReg' pk').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance histEntry_struct_fields_split dq l (v : histEntry.t) :
  StructFieldsSplit dq l v (
    "HisReg" ∷ l ↦s[alicebob.histEntry :: "isReg"]{dq} v.(histEntry.isReg') ∗
    "Hpk" ∷ l ↦s[alicebob.histEntry :: "pk"]{dq} v.(histEntry.pk')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (histEntry.isReg' v)) alicebob.histEntry "isReg"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined alicebob :=
{|
  is_pkg_defined := is_global_definitions alicebob var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_testAliceBob :
  WpFuncCall alicebob "testAliceBob" _ (is_pkg_defined alicebob) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_equal :
  WpFuncCall alicebob "equal" _ (is_pkg_defined alicebob) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runAlice :
  WpFuncCall alicebob "runAlice" _ (is_pkg_defined alicebob) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_loopPending :
  WpFuncCall alicebob "loopPending" _ (is_pkg_defined alicebob) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runBob :
  WpFuncCall alicebob "runBob" _ (is_pkg_defined alicebob) :=
  ltac:(apply wp_func_call'; reflexivity).

End names.
End alicebob.
