(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.netffi.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.safemarshal.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.golang.theory.

Require Export New.code.github_com.sanjit_bhat.pav.advrpc.

Set Default Proof Using "Type".

Module advrpc.

(* type advrpc.Server *)
Module Server.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  handlers' : loc;
}.
End def.
End Server.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Server : Settable Server.t :=
  settable! Server.mk < Server.handlers' >.
#[local] Transparent advrpc.Server.
#[local] Typeclasses Transparent advrpc.Server.
Global Instance into_val_Server : IntoVal Server.t :=
  {| to_val_def v :=
    struct.val_aux advrpc.Server [
    "handlers" ::= #(Server.handlers' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Server : IntoValTyped Server.t advrpc.Server :=
{|
  default_val := Server.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Server_handlers : IntoValStructField "handlers" advrpc.Server Server.handlers'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Server handlers':
  PureWp True
    (struct.make #advrpc.Server (alist_val [
      "handlers" ::= #handlers'
    ]))%struct
    #(Server.mk handlers').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Server_struct_fields_split dq l (v : Server.t) :
  StructFieldsSplit dq l v (
    "Hhandlers" ∷ l ↦s[advrpc.Server :: "handlers"]{dq} v.(Server.handlers')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

(* type advrpc.Client *)
Module Client.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  conn' : loc;
}.
End def.
End Client.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Client : Settable Client.t :=
  settable! Client.mk < Client.conn' >.
#[local] Transparent advrpc.Client.
#[local] Typeclasses Transparent advrpc.Client.
Global Instance into_val_Client : IntoVal Client.t :=
  {| to_val_def v :=
    struct.val_aux advrpc.Client [
    "conn" ::= #(Client.conn' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Client : IntoValTyped Client.t advrpc.Client :=
{|
  default_val := Client.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Client_conn : IntoValStructField "conn" advrpc.Client Client.conn'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Client conn':
  PureWp True
    (struct.make #advrpc.Client (alist_val [
      "conn" ::= #conn'
    ]))%struct
    #(Client.mk conn').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Client_struct_fields_split dq l (v : Client.t) :
  StructFieldsSplit dq l v (
    "Hconn" ∷ l ↦s[advrpc.Client :: "conn"]{dq} v.(Client.conn')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_advrpc : IsPkgDefinedPure advrpc :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single advrpc ∧
      is_pkg_defined_pure code.github_com.sanjit_bhat.pav.netffi.netffi ∧
      is_pkg_defined_pure code.github_com.sanjit_bhat.pav.safemarshal.safemarshal ∧
      is_pkg_defined_pure code.github_com.tchajed.marshal.marshal;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_advrpc : IsPkgDefined advrpc :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single advrpc ∗
       is_pkg_defined code.github_com.sanjit_bhat.pav.netffi.netffi ∗
       is_pkg_defined code.github_com.sanjit_bhat.pav.safemarshal.safemarshal ∗
       is_pkg_defined code.github_com.tchajed.marshal.marshal)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_NewServer :
  WpFuncCall advrpc.NewServer _ (is_pkg_defined advrpc) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Dial :
  WpFuncCall advrpc.Dial _ (is_pkg_defined advrpc) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Server'ptr_Serve :
  WpMethodCall (ptrT.id advrpc.Server.id) "Serve" _ (is_pkg_defined advrpc) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_handle :
  WpMethodCall (ptrT.id advrpc.Server.id) "handle" _ (is_pkg_defined advrpc) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Server'ptr_read :
  WpMethodCall (ptrT.id advrpc.Server.id) "read" _ (is_pkg_defined advrpc) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Client'ptr_Call :
  WpMethodCall (ptrT.id advrpc.Client.id) "Call" _ (is_pkg_defined advrpc) :=
  ltac:(solve_wp_method_call).

End names.
End advrpc.
