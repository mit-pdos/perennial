(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.bytes.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.advrpc.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.cryptoffi.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.hashchain.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.ktcore.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.merkle.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.server.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.safemarshal.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.golang.theory.

Require Export New.code.github_com.sanjit_bhat.pav.auditor.

Set Default Proof Using "Type".

Module auditor.

(* type auditor.Auditor *)
Module Auditor.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  sk' : loc;
  lastDig' : slice.t;
  hist' : slice.t;
  serv' : loc;
}.
End def.
End Auditor.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Auditor : Settable Auditor.t :=
  settable! Auditor.mk < Auditor.mu'; Auditor.sk'; Auditor.lastDig'; Auditor.hist'; Auditor.serv' >.
Global Instance into_val_Auditor : IntoVal Auditor.t :=
  {| to_val_def v :=
    struct.val_aux auditor.Auditor [
    "mu" ::= #(Auditor.mu' v);
    "sk" ::= #(Auditor.sk' v);
    "lastDig" ::= #(Auditor.lastDig' v);
    "hist" ::= #(Auditor.hist' v);
    "serv" ::= #(Auditor.serv' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Auditor : IntoValTyped Auditor.t auditor.Auditor :=
{|
  default_val := Auditor.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Auditor_mu : IntoValStructField "mu" auditor.Auditor Auditor.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Auditor_sk : IntoValStructField "sk" auditor.Auditor Auditor.sk'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Auditor_lastDig : IntoValStructField "lastDig" auditor.Auditor Auditor.lastDig'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Auditor_hist : IntoValStructField "hist" auditor.Auditor Auditor.hist'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Auditor_serv : IntoValStructField "serv" auditor.Auditor Auditor.serv'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Auditor mu' sk' lastDig' hist' serv':
  PureWp True
    (struct.make #auditor.Auditor (alist_val [
      "mu" ::= #mu';
      "sk" ::= #sk';
      "lastDig" ::= #lastDig';
      "hist" ::= #hist';
      "serv" ::= #serv'
    ]))%struct
    #(Auditor.mk mu' sk' lastDig' hist' serv').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Auditor_struct_fields_split dq l (v : Auditor.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[auditor.Auditor :: "mu"]{dq} v.(Auditor.mu') ∗
    "Hsk" ∷ l ↦s[auditor.Auditor :: "sk"]{dq} v.(Auditor.sk') ∗
    "HlastDig" ∷ l ↦s[auditor.Auditor :: "lastDig"]{dq} v.(Auditor.lastDig') ∗
    "Hhist" ∷ l ↦s[auditor.Auditor :: "hist"]{dq} v.(Auditor.hist') ∗
    "Hserv" ∷ l ↦s[auditor.Auditor :: "serv"]{dq} v.(Auditor.serv')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Auditor.mu' v)) auditor.Auditor "mu"%go.
  simpl_one_flatten_struct (# (Auditor.sk' v)) auditor.Auditor "sk"%go.
  simpl_one_flatten_struct (# (Auditor.lastDig' v)) auditor.Auditor "lastDig"%go.
  simpl_one_flatten_struct (# (Auditor.hist' v)) auditor.Auditor "hist"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type auditor.history *)
Module history.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  link' : slice.t;
  servSig' : slice.t;
  adtrSig' : slice.t;
}.
End def.
End history.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_history : Settable history.t :=
  settable! history.mk < history.link'; history.servSig'; history.adtrSig' >.
Global Instance into_val_history : IntoVal history.t :=
  {| to_val_def v :=
    struct.val_aux auditor.history [
    "link" ::= #(history.link' v);
    "servSig" ::= #(history.servSig' v);
    "adtrSig" ::= #(history.adtrSig' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_history : IntoValTyped history.t auditor.history :=
{|
  default_val := history.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_history_link : IntoValStructField "link" auditor.history history.link'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_history_servSig : IntoValStructField "servSig" auditor.history history.servSig'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_history_adtrSig : IntoValStructField "adtrSig" auditor.history history.adtrSig'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_history link' servSig' adtrSig':
  PureWp True
    (struct.make #auditor.history (alist_val [
      "link" ::= #link';
      "servSig" ::= #servSig';
      "adtrSig" ::= #adtrSig'
    ]))%struct
    #(history.mk link' servSig' adtrSig').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance history_struct_fields_split dq l (v : history.t) :
  StructFieldsSplit dq l v (
    "Hlink" ∷ l ↦s[auditor.history :: "link"]{dq} v.(history.link') ∗
    "HservSig" ∷ l ↦s[auditor.history :: "servSig"]{dq} v.(history.servSig') ∗
    "HadtrSig" ∷ l ↦s[auditor.history :: "adtrSig"]{dq} v.(history.adtrSig')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (history.link' v)) auditor.history "link"%go.
  simpl_one_flatten_struct (# (history.servSig' v)) auditor.history "servSig"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type auditor.serv *)
Module serv.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  cli' : loc;
  sigPk' : cryptoffi.SigPublicKey.t;
  vrfPk' : slice.t;
  servVrfSig' : slice.t;
  adtrVrfSig' : slice.t;
}.
End def.
End serv.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_serv : Settable serv.t :=
  settable! serv.mk < serv.cli'; serv.sigPk'; serv.vrfPk'; serv.servVrfSig'; serv.adtrVrfSig' >.
Global Instance into_val_serv : IntoVal serv.t :=
  {| to_val_def v :=
    struct.val_aux auditor.serv [
    "cli" ::= #(serv.cli' v);
    "sigPk" ::= #(serv.sigPk' v);
    "vrfPk" ::= #(serv.vrfPk' v);
    "servVrfSig" ::= #(serv.servVrfSig' v);
    "adtrVrfSig" ::= #(serv.adtrVrfSig' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_serv : IntoValTyped serv.t auditor.serv :=
{|
  default_val := serv.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_serv_cli : IntoValStructField "cli" auditor.serv serv.cli'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_serv_sigPk : IntoValStructField "sigPk" auditor.serv serv.sigPk'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_serv_vrfPk : IntoValStructField "vrfPk" auditor.serv serv.vrfPk'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_serv_servVrfSig : IntoValStructField "servVrfSig" auditor.serv serv.servVrfSig'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_serv_adtrVrfSig : IntoValStructField "adtrVrfSig" auditor.serv serv.adtrVrfSig'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_serv cli' sigPk' vrfPk' servVrfSig' adtrVrfSig':
  PureWp True
    (struct.make #auditor.serv (alist_val [
      "cli" ::= #cli';
      "sigPk" ::= #sigPk';
      "vrfPk" ::= #vrfPk';
      "servVrfSig" ::= #servVrfSig';
      "adtrVrfSig" ::= #adtrVrfSig'
    ]))%struct
    #(serv.mk cli' sigPk' vrfPk' servVrfSig' adtrVrfSig').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance serv_struct_fields_split dq l (v : serv.t) :
  StructFieldsSplit dq l v (
    "Hcli" ∷ l ↦s[auditor.serv :: "cli"]{dq} v.(serv.cli') ∗
    "HsigPk" ∷ l ↦s[auditor.serv :: "sigPk"]{dq} v.(serv.sigPk') ∗
    "HvrfPk" ∷ l ↦s[auditor.serv :: "vrfPk"]{dq} v.(serv.vrfPk') ∗
    "HservVrfSig" ∷ l ↦s[auditor.serv :: "servVrfSig"]{dq} v.(serv.servVrfSig') ∗
    "HadtrVrfSig" ∷ l ↦s[auditor.serv :: "adtrVrfSig"]{dq} v.(serv.adtrVrfSig')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (serv.cli' v)) auditor.serv "cli"%go.
  simpl_one_flatten_struct (# (serv.sigPk' v)) auditor.serv "sigPk"%go.
  simpl_one_flatten_struct (# (serv.vrfPk' v)) auditor.serv "vrfPk"%go.
  simpl_one_flatten_struct (# (serv.servVrfSig' v)) auditor.serv "servVrfSig"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type auditor.UpdateReply *)
Module UpdateReply.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Err' : ktcore.Blame.t;
}.
End def.
End UpdateReply.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_UpdateReply : Settable UpdateReply.t :=
  settable! UpdateReply.mk < UpdateReply.Err' >.
Global Instance into_val_UpdateReply : IntoVal UpdateReply.t :=
  {| to_val_def v :=
    struct.val_aux auditor.UpdateReply [
    "Err" ::= #(UpdateReply.Err' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_UpdateReply : IntoValTyped UpdateReply.t auditor.UpdateReply :=
{|
  default_val := UpdateReply.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_UpdateReply_Err : IntoValStructField "Err" auditor.UpdateReply UpdateReply.Err'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_UpdateReply Err':
  PureWp True
    (struct.make #auditor.UpdateReply (alist_val [
      "Err" ::= #Err'
    ]))%struct
    #(UpdateReply.mk Err').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance UpdateReply_struct_fields_split dq l (v : UpdateReply.t) :
  StructFieldsSplit dq l v (
    "HErr" ∷ l ↦s[auditor.UpdateReply :: "Err"]{dq} v.(UpdateReply.Err')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

(* type auditor.GetArg *)
Module GetArg.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Epoch' : w64;
}.
End def.
End GetArg.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_GetArg : Settable GetArg.t :=
  settable! GetArg.mk < GetArg.Epoch' >.
Global Instance into_val_GetArg : IntoVal GetArg.t :=
  {| to_val_def v :=
    struct.val_aux auditor.GetArg [
    "Epoch" ::= #(GetArg.Epoch' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_GetArg : IntoValTyped GetArg.t auditor.GetArg :=
{|
  default_val := GetArg.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_GetArg_Epoch : IntoValStructField "Epoch" auditor.GetArg GetArg.Epoch'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_GetArg Epoch':
  PureWp True
    (struct.make #auditor.GetArg (alist_val [
      "Epoch" ::= #Epoch'
    ]))%struct
    #(GetArg.mk Epoch').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance GetArg_struct_fields_split dq l (v : GetArg.t) :
  StructFieldsSplit dq l v (
    "HEpoch" ∷ l ↦s[auditor.GetArg :: "Epoch"]{dq} v.(GetArg.Epoch')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

(* type auditor.GetReply *)
Module GetReply.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Link' : slice.t;
  ServLinkSig' : slice.t;
  AdtrLinkSig' : slice.t;
  VrfPk' : slice.t;
  ServVrfSig' : slice.t;
  AdtrVrfSig' : slice.t;
  Err' : ktcore.Blame.t;
}.
End def.
End GetReply.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_GetReply : Settable GetReply.t :=
  settable! GetReply.mk < GetReply.Link'; GetReply.ServLinkSig'; GetReply.AdtrLinkSig'; GetReply.VrfPk'; GetReply.ServVrfSig'; GetReply.AdtrVrfSig'; GetReply.Err' >.
Global Instance into_val_GetReply : IntoVal GetReply.t :=
  {| to_val_def v :=
    struct.val_aux auditor.GetReply [
    "Link" ::= #(GetReply.Link' v);
    "ServLinkSig" ::= #(GetReply.ServLinkSig' v);
    "AdtrLinkSig" ::= #(GetReply.AdtrLinkSig' v);
    "VrfPk" ::= #(GetReply.VrfPk' v);
    "ServVrfSig" ::= #(GetReply.ServVrfSig' v);
    "AdtrVrfSig" ::= #(GetReply.AdtrVrfSig' v);
    "Err" ::= #(GetReply.Err' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_GetReply : IntoValTyped GetReply.t auditor.GetReply :=
{|
  default_val := GetReply.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_GetReply_Link : IntoValStructField "Link" auditor.GetReply GetReply.Link'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_GetReply_ServLinkSig : IntoValStructField "ServLinkSig" auditor.GetReply GetReply.ServLinkSig'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_GetReply_AdtrLinkSig : IntoValStructField "AdtrLinkSig" auditor.GetReply GetReply.AdtrLinkSig'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_GetReply_VrfPk : IntoValStructField "VrfPk" auditor.GetReply GetReply.VrfPk'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_GetReply_ServVrfSig : IntoValStructField "ServVrfSig" auditor.GetReply GetReply.ServVrfSig'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_GetReply_AdtrVrfSig : IntoValStructField "AdtrVrfSig" auditor.GetReply GetReply.AdtrVrfSig'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_GetReply_Err : IntoValStructField "Err" auditor.GetReply GetReply.Err'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_GetReply Link' ServLinkSig' AdtrLinkSig' VrfPk' ServVrfSig' AdtrVrfSig' Err':
  PureWp True
    (struct.make #auditor.GetReply (alist_val [
      "Link" ::= #Link';
      "ServLinkSig" ::= #ServLinkSig';
      "AdtrLinkSig" ::= #AdtrLinkSig';
      "VrfPk" ::= #VrfPk';
      "ServVrfSig" ::= #ServVrfSig';
      "AdtrVrfSig" ::= #AdtrVrfSig';
      "Err" ::= #Err'
    ]))%struct
    #(GetReply.mk Link' ServLinkSig' AdtrLinkSig' VrfPk' ServVrfSig' AdtrVrfSig' Err').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance GetReply_struct_fields_split dq l (v : GetReply.t) :
  StructFieldsSplit dq l v (
    "HLink" ∷ l ↦s[auditor.GetReply :: "Link"]{dq} v.(GetReply.Link') ∗
    "HServLinkSig" ∷ l ↦s[auditor.GetReply :: "ServLinkSig"]{dq} v.(GetReply.ServLinkSig') ∗
    "HAdtrLinkSig" ∷ l ↦s[auditor.GetReply :: "AdtrLinkSig"]{dq} v.(GetReply.AdtrLinkSig') ∗
    "HVrfPk" ∷ l ↦s[auditor.GetReply :: "VrfPk"]{dq} v.(GetReply.VrfPk') ∗
    "HServVrfSig" ∷ l ↦s[auditor.GetReply :: "ServVrfSig"]{dq} v.(GetReply.ServVrfSig') ∗
    "HAdtrVrfSig" ∷ l ↦s[auditor.GetReply :: "AdtrVrfSig"]{dq} v.(GetReply.AdtrVrfSig') ∗
    "HErr" ∷ l ↦s[auditor.GetReply :: "Err"]{dq} v.(GetReply.Err')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (GetReply.Link' v)) auditor.GetReply "Link"%go.
  simpl_one_flatten_struct (# (GetReply.ServLinkSig' v)) auditor.GetReply "ServLinkSig"%go.
  simpl_one_flatten_struct (# (GetReply.AdtrLinkSig' v)) auditor.GetReply "AdtrLinkSig"%go.
  simpl_one_flatten_struct (# (GetReply.VrfPk' v)) auditor.GetReply "VrfPk"%go.
  simpl_one_flatten_struct (# (GetReply.ServVrfSig' v)) auditor.GetReply "ServVrfSig"%go.
  simpl_one_flatten_struct (# (GetReply.AdtrVrfSig' v)) auditor.GetReply "AdtrVrfSig"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined auditor :=
{|
  is_pkg_defined := is_global_definitions auditor var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_New :
  WpFuncCall auditor "New" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_getNextDig :
  WpFuncCall auditor "getNextDig" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewRpcAuditor :
  WpFuncCall auditor "NewRpcAuditor" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_CallUpdate :
  WpFuncCall auditor "CallUpdate" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_CallGet :
  WpFuncCall auditor "CallGet" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_UpdateReplyEncode :
  WpFuncCall auditor "UpdateReplyEncode" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_UpdateReplyDecode :
  WpFuncCall auditor "UpdateReplyDecode" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_GetArgEncode :
  WpFuncCall auditor "GetArgEncode" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_GetArgDecode :
  WpFuncCall auditor "GetArgDecode" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_GetReplyEncode :
  WpFuncCall auditor "GetReplyEncode" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_GetReplyDecode :
  WpFuncCall auditor "GetReplyDecode" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Auditor'ptr_Get :
  WpMethodCall auditor "Auditor'ptr" "Get" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Auditor'ptr_Update :
  WpMethodCall auditor "Auditor'ptr" "Update" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Auditor'ptr_updOnce :
  WpMethodCall auditor "Auditor'ptr" "updOnce" _ (is_pkg_defined auditor) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End auditor.
