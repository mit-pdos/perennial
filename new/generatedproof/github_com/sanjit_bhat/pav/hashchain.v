(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.bytes.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.cryptoffi.
Require Export New.generatedproof.github_com.sanjit_bhat.pav.cryptoutil.
Require Export New.golang.theory.

Require Export New.code.github_com.sanjit_bhat.pav.hashchain.

Set Default Proof Using "Type".

Module hashchain.

(* type hashchain.HashChain *)
Module HashChain.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  predLastLink' : slice.t;
  lastLink' : slice.t;
  vals' : slice.t;
}.
End def.
End HashChain.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_HashChain : Settable HashChain.t :=
  settable! HashChain.mk < HashChain.predLastLink'; HashChain.lastLink'; HashChain.vals' >.
Global Instance into_val_HashChain : IntoVal HashChain.t :=
  {| to_val_def v :=
    struct.val_aux hashchain.HashChain [
    "predLastLink" ::= #(HashChain.predLastLink' v);
    "lastLink" ::= #(HashChain.lastLink' v);
    "vals" ::= #(HashChain.vals' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_HashChain : IntoValTyped HashChain.t hashchain.HashChain :=
{|
  default_val := HashChain.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_HashChain_predLastLink : IntoValStructField "predLastLink" hashchain.HashChain HashChain.predLastLink'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_HashChain_lastLink : IntoValStructField "lastLink" hashchain.HashChain HashChain.lastLink'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_HashChain_vals : IntoValStructField "vals" hashchain.HashChain HashChain.vals'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_HashChain predLastLink' lastLink' vals':
  PureWp True
    (struct.make #hashchain.HashChain (alist_val [
      "predLastLink" ::= #predLastLink';
      "lastLink" ::= #lastLink';
      "vals" ::= #vals'
    ]))%struct
    #(HashChain.mk predLastLink' lastLink' vals').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance HashChain_struct_fields_split dq l (v : HashChain.t) :
  StructFieldsSplit dq l v (
    "HpredLastLink" ∷ l ↦s[hashchain.HashChain :: "predLastLink"]{dq} v.(HashChain.predLastLink') ∗
    "HlastLink" ∷ l ↦s[hashchain.HashChain :: "lastLink"]{dq} v.(HashChain.lastLink') ∗
    "Hvals" ∷ l ↦s[hashchain.HashChain :: "vals"]{dq} v.(HashChain.vals')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (HashChain.predLastLink' v)) hashchain.HashChain "predLastLink"%go.
  simpl_one_flatten_struct (# (HashChain.lastLink' v)) hashchain.HashChain "lastLink"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined hashchain :=
{|
  is_pkg_defined := is_global_definitions hashchain var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_Verify :
  WpFuncCall hashchain "Verify" _ (is_pkg_defined hashchain) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_New :
  WpFuncCall hashchain "New" _ (is_pkg_defined hashchain) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_GetEmptyLink :
  WpFuncCall hashchain "GetEmptyLink" _ (is_pkg_defined hashchain) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_GetNextLink :
  WpFuncCall hashchain "GetNextLink" _ (is_pkg_defined hashchain) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_HashChain'ptr_Append :
  WpMethodCall hashchain "HashChain'ptr" "Append" _ (is_pkg_defined hashchain) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_HashChain'ptr_Bootstrap :
  WpMethodCall hashchain "HashChain'ptr" "Bootstrap" _ (is_pkg_defined hashchain) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_HashChain'ptr_Prove :
  WpMethodCall hashchain "HashChain'ptr" "Prove" _ (is_pkg_defined hashchain) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End hashchain.
