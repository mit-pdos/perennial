(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.golang.theory.

Require Export New.code.github_com.goose_lang.goose.model.channel.

Set Default Proof Using "Type".

Module channel.

(* type channel.OfferState *)
Module OfferState.

#[global] Transparent channel.OfferState.
#[global] Typeclasses Transparent channel.OfferState.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End OfferState.

(* type channel.Channel *)
Module Channel.
Section def.
Context `{ffi_syntax}.

Record t `{!IntoVal T'} `{!IntoValTyped T' T} := mk {
  lock' : loc;
  state' : OfferState.t;
  buffer' : slice.t;
  cap' : w64;
  v' : T';
}.
End def.
End Channel.

Arguments Channel.mk {_} { T' } {_ T _} .
Arguments Channel.t {_} T' {_ T _} .

Section instances.
Context `{ffi_syntax}.
Context`{!IntoVal T'} `{!IntoValTyped T' T} .
#[local] Transparent channel.Channel.
#[local] Typeclasses Transparent channel.Channel.

Global Instance Channel_wf : struct.Wf channel.Channel.
Proof. apply _. Qed.

Global Instance settable_Channel : Settable Channel.t :=
  settable! (Channel.mk (T:=T)) < Channel.lock'; Channel.state'; Channel.buffer'; Channel.cap'; Channel.v' >.
Global Instance into_val_Channel : IntoVal Channel.t :=
  {| to_val_def v :=
    struct.val_aux channel.Channel [
    "lock" ::= #(Channel.lock' v);
    "state" ::= #(Channel.state' v);
    "buffer" ::= #(Channel.buffer' v);
    "cap" ::= #(Channel.cap' v);
    "v" ::= #(Channel.v' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Channel : IntoValTyped Channel.t channel.Channel :=
{|
  default_val := Channel.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Channel_lock : IntoValStructField "lock" channel.Channel Channel.lock'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Channel_state : IntoValStructField "state" channel.Channel Channel.state'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Channel_buffer : IntoValStructField "buffer" channel.Channel Channel.buffer'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Channel_cap : IntoValStructField "cap" channel.Channel Channel.cap'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Channel_v : IntoValStructField "v" channel.Channel Channel.v'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.


Global Instance Channel_struct_fields_split `{!BoundedTypeSize T} dq l (v : Channel.t) :
  StructFieldsSplit dq l v (
    "Hlock" ∷ l ↦s[channel.Channel :: "lock"]{dq} v.(Channel.lock') ∗
    "Hstate" ∷ l ↦s[channel.Channel :: "state"]{dq} v.(Channel.state') ∗
    "Hbuffer" ∷ l ↦s[channel.Channel :: "buffer"]{dq} v.(Channel.buffer') ∗
    "Hcap" ∷ l ↦s[channel.Channel :: "cap"]{dq} v.(Channel.cap') ∗
    "Hv" ∷ l ↦s[channel.Channel :: "v"]{dq} v.(Channel.v')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Channel.lock' v)) (channel.Channel) "lock"%go.
  simpl_one_flatten_struct (# (Channel.state' v)) (channel.Channel) "state"%go.
  simpl_one_flatten_struct (# (Channel.buffer' v)) (channel.Channel) "buffer"%go.
  simpl_one_flatten_struct (# (Channel.cap' v)) (channel.Channel) "cap"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type channel.SelectDir *)
Module SelectDir.

#[global] Transparent channel.SelectDir.
#[global] Typeclasses Transparent channel.SelectDir.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End SelectDir.

(* type channel.SelectCase *)
Module SelectCase.
Section def.
Context `{ffi_syntax}.

Record t `{!IntoVal T'} `{!IntoValTyped T' T} := mk {
  channel' : loc;
  dir' : SelectDir.t;
  Value' : T';
  Ok' : bool;
}.
End def.
End SelectCase.

Arguments SelectCase.mk {_} { T' } {_ T _} .
Arguments SelectCase.t {_} T' {_ T _} .

Section instances.
Context `{ffi_syntax}.
Context`{!IntoVal T'} `{!IntoValTyped T' T} .
#[local] Transparent channel.SelectCase.
#[local] Typeclasses Transparent channel.SelectCase.

Global Instance SelectCase_wf : struct.Wf channel.SelectCase.
Proof. apply _. Qed.

Global Instance settable_SelectCase : Settable SelectCase.t :=
  settable! (SelectCase.mk (T:=T)) < SelectCase.channel'; SelectCase.dir'; SelectCase.Value'; SelectCase.Ok' >.
Global Instance into_val_SelectCase : IntoVal SelectCase.t :=
  {| to_val_def v :=
    struct.val_aux channel.SelectCase [
    "channel" ::= #(SelectCase.channel' v);
    "dir" ::= #(SelectCase.dir' v);
    "Value" ::= #(SelectCase.Value' v);
    "Ok" ::= #(SelectCase.Ok' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_SelectCase : IntoValTyped SelectCase.t channel.SelectCase :=
{|
  default_val := SelectCase.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_SelectCase_channel : IntoValStructField "channel" channel.SelectCase SelectCase.channel'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_SelectCase_dir : IntoValStructField "dir" channel.SelectCase SelectCase.dir'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_SelectCase_Value : IntoValStructField "Value" channel.SelectCase SelectCase.Value'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_SelectCase_Ok : IntoValStructField "Ok" channel.SelectCase SelectCase.Ok'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.


Global Instance SelectCase_struct_fields_split `{!BoundedTypeSize T} dq l (v : SelectCase.t) :
  StructFieldsSplit dq l v (
    "Hchannel" ∷ l ↦s[channel.SelectCase :: "channel"]{dq} v.(SelectCase.channel') ∗
    "Hdir" ∷ l ↦s[channel.SelectCase :: "dir"]{dq} v.(SelectCase.dir') ∗
    "HValue" ∷ l ↦s[channel.SelectCase :: "Value"]{dq} v.(SelectCase.Value') ∗
    "HOk" ∷ l ↦s[channel.SelectCase :: "Ok"]{dq} v.(SelectCase.Ok')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (SelectCase.channel' v)) (channel.SelectCase) "channel"%go.
  simpl_one_flatten_struct (# (SelectCase.dir' v)) (channel.SelectCase) "dir"%go.
  simpl_one_flatten_struct (# (SelectCase.Value' v)) (channel.SelectCase) "Value"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_channel : IsPkgDefinedPure channel :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single channel ∧
      is_pkg_defined_pure code.sync.sync ∧
      is_pkg_defined_pure code.github_com.goose_lang.primitive.primitive;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_channel : IsPkgDefined channel :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single channel ∗
       is_pkg_defined code.sync.sync ∗
       is_pkg_defined code.github_com.goose_lang.primitive.primitive)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_NewChannelRef :
  WpFuncCall channel.NewChannelRef _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_NewSendCase :
  WpFuncCall channel.NewSendCase _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_NewRecvCase :
  WpFuncCall channel.NewRecvCase _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_TrySelect :
  WpFuncCall channel.TrySelect _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Select1 :
  WpFuncCall channel.Select1 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_TrySelectCase2 :
  WpFuncCall channel.TrySelectCase2 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Select2 :
  WpFuncCall channel.Select2 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_TrySelectCase3 :
  WpFuncCall channel.TrySelectCase3 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Select3 :
  WpFuncCall channel.Select3 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_TrySelectCase4 :
  WpFuncCall channel.TrySelectCase4 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Select4 :
  WpFuncCall channel.Select4 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_TrySelectCase5 :
  WpFuncCall channel.TrySelectCase5 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Select5 :
  WpFuncCall channel.Select5 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Channel'ptr_Cap :
  WpMethodCall (ptrT.id channel.Channel.id) "Cap" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Close :
  WpMethodCall (ptrT.id channel.Channel.id) "Close" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Len :
  WpMethodCall (ptrT.id channel.Channel.id) "Len" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Receive :
  WpMethodCall (ptrT.id channel.Channel.id) "Receive" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_ReceiveDiscardOk :
  WpMethodCall (ptrT.id channel.Channel.id) "ReceiveDiscardOk" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Send :
  WpMethodCall (ptrT.id channel.Channel.id) "Send" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_TryClose :
  WpMethodCall (ptrT.id channel.Channel.id) "TryClose" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_TryReceive :
  WpMethodCall (ptrT.id channel.Channel.id) "TryReceive" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_TrySend :
  WpMethodCall (ptrT.id channel.Channel.id) "TrySend" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

End names.
End channel.
