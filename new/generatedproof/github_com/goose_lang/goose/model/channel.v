(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.golang.theory.

Require Export New.code.github_com.goose_lang.goose.model.channel.

Set Default Proof Using "Type".

Module channel.

(* type channel.offerState *)
Module offerState.

#[global] Transparent channel.offerState.
#[global] Typeclasses Transparent channel.offerState.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End offerState.

(* type channel.Channel *)
Module Channel.
Section def.
Context `{ffi_syntax}.

Definition ty (T : go_type) : go_type := structT [
  "cap" :: intT;
  "mu" :: ptrT;
  "state" :: channel.offerState;
  "buffer" :: sliceT;
  "v" :: T
]%struct.
#[global] Typeclasses Opaque ty.
#[global] Opaque ty.
Record t `{!IntoVal T'} `{!IntoValTyped T' T} := mk {
  cap' : w64;
  mu' : loc;
  state' : offerState.t;
  buffer' : slice.t;
  v' : T';
}.
End def.
End Channel.

#[local] Transparent Channel.ty.
Arguments Channel.mk {_} { T' } {_ T _} .
Arguments Channel.t {_} T' {_ T _} .

Section instances.
Context `{ffi_syntax}.
Context`{!IntoVal T'} `{!IntoValTyped T' T} .
#[local] Transparent channel.Channel.
#[local] Typeclasses Transparent channel.Channel.

Global Instance Channel_wf : struct.Wf (Channel.ty T).
Proof. apply _. Qed.

Global Instance settable_Channel : Settable (Channel.t T') :=
  settable! (Channel.mk (T:=T)) < Channel.cap'; Channel.mu'; Channel.state'; Channel.buffer'; Channel.v' >.
Global Instance into_val_Channel : IntoVal (Channel.t T') :=
  {| to_val_def v :=
    struct.val_aux (Channel.ty T) [
    "cap" ::= #(Channel.cap' v);
    "mu" ::= #(Channel.mu' v);
    "state" ::= #(Channel.state' v);
    "buffer" ::= #(Channel.buffer' v);
    "v" ::= #(Channel.v' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Channel : IntoValTyped (Channel.t T') (Channel.ty T) :=
{|
  default_val := Channel.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Channel_cap : IntoValStructField "cap" (Channel.ty T) Channel.cap'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Channel_mu : IntoValStructField "mu" (Channel.ty T) Channel.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Channel_state : IntoValStructField "state" (Channel.ty T) Channel.state'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Channel_buffer : IntoValStructField "buffer" (Channel.ty T) Channel.buffer'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Channel_v : IntoValStructField "v" (Channel.ty T) Channel.v'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_type_Channel :
  PureWp True
    (channel.Channel #T)
    #(Channel.ty T).
Proof. solve_type_pure_wp. Qed.


Global Instance wp_struct_make_Channel cap' mu' state' buffer' v':
  PureWp True
    (struct.make #(Channel.ty T) (alist_val [
      "cap" ::= #cap';
      "mu" ::= #mu';
      "state" ::= #state';
      "buffer" ::= #buffer';
      "v" ::= #v'
    ]))%struct
    #(Channel.mk cap' mu' state' buffer' v').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Channel_struct_fields_split `{!BoundedTypeSize T} dq l (v : (Channel.t T')) :
  StructFieldsSplit dq l v (
    "Hcap" ∷ l ↦s[(Channel.ty T) :: "cap"]{dq} v.(Channel.cap') ∗
    "Hmu" ∷ l ↦s[(Channel.ty T) :: "mu"]{dq} v.(Channel.mu') ∗
    "Hstate" ∷ l ↦s[(Channel.ty T) :: "state"]{dq} v.(Channel.state') ∗
    "Hbuffer" ∷ l ↦s[(Channel.ty T) :: "buffer"]{dq} v.(Channel.buffer') ∗
    "Hv" ∷ l ↦s[(Channel.ty T) :: "v"]{dq} v.(Channel.v')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Channel.cap' v)) ((Channel.ty T)) "cap"%go.
  simpl_one_flatten_struct (# (Channel.mu' v)) ((Channel.ty T)) "mu"%go.
  simpl_one_flatten_struct (# (Channel.state' v)) ((Channel.ty T)) "state"%go.
  simpl_one_flatten_struct (# (Channel.buffer' v)) ((Channel.ty T)) "buffer"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type channel.SelectDir *)
Module SelectDir.

#[global] Transparent channel.SelectDir.
#[global] Typeclasses Transparent channel.SelectDir.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End SelectDir.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_channel : IsPkgDefinedPure channel :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single channel ∧
      is_pkg_defined_pure code.github_com.goose_lang.primitive.primitive;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_channel : IsPkgDefined channel :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single channel ∗
       is_pkg_defined code.github_com.goose_lang.primitive.primitive)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_NewChannelRef :
  WpFuncCall channel.NewChannelRef _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_NonBlockingSelect1 :
  WpFuncCall channel.NonBlockingSelect1 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_BlockingSelect2 :
  WpFuncCall channel.BlockingSelect2 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_NonBlockingSelect2 :
  WpFuncCall channel.NonBlockingSelect2 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_BlockingSelect3 :
  WpFuncCall channel.BlockingSelect3 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_NonBlockingSelect3 :
  WpFuncCall channel.NonBlockingSelect3 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Channel'ptr_Cap :
  WpMethodCall (ptrT.id channel.Channel.id) "Cap" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Close :
  WpMethodCall (ptrT.id channel.Channel.id) "Close" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Iter :
  WpMethodCall (ptrT.id channel.Channel.id) "Iter" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Len :
  WpMethodCall (ptrT.id channel.Channel.id) "Len" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Receive :
  WpMethodCall (ptrT.id channel.Channel.id) "Receive" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_ReceiveDiscardOk :
  WpMethodCall (ptrT.id channel.Channel.id) "ReceiveDiscardOk" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Send :
  WpMethodCall (ptrT.id channel.Channel.id) "Send" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_TryReceive :
  WpMethodCall (ptrT.id channel.Channel.id) "TryReceive" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_TrySend :
  WpMethodCall (ptrT.id channel.Channel.id) "TrySend" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_tryClose :
  WpMethodCall (ptrT.id channel.Channel.id) "tryClose" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

End names.
End channel.
