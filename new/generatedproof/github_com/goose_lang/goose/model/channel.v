(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.golang.theory.

Require Export New.code.github_com.goose_lang.goose.model.channel.

Set Default Proof Using "Type".

Module channel.

(* type channel.ChannelState *)
Module ChannelState.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End ChannelState.

(* type channel.Channel *)
Module Channel.
Section def.
Context `{ffi_syntax}.

Definition ty (T : go_type) : go_type := structT [
  "lock" :: ptrT;
  "state" :: channel.ChannelState;
  "buffer" :: sliceT;
  "first" :: uint64T;
  "count" :: uint64T;
  "v" :: T
]%struct.
Record t `{!IntoVal T'} `{!IntoValTyped T' T} := mk {
  lock' : loc;
  state' : ChannelState.t;
  buffer' : slice.t;
  first' : w64;
  count' : w64;
  v' : T';
}.
End def.
End Channel.

Arguments Channel.mk {_} { T' } {_ T _} .
Arguments Channel.t {_} T' {_ T _} .

Section instances.
Context `{ffi_syntax}.
Context`{!IntoVal T'} `{!IntoValTyped T' T} .

Global Instance Channel_ty_wf : struct.Wf (Channel.ty T).
Proof. apply _. Qed.

Global Instance settable_Channel : Settable (Channel.t T') :=
  settable! (Channel.mk (T:=T)) < Channel.lock'; Channel.state'; Channel.buffer'; Channel.first'; Channel.count'; Channel.v' >.
Global Instance into_val_Channel : IntoVal (Channel.t T') :=
  {| to_val_def v :=
    struct.val_aux (Channel.ty T) [
    "lock" ::= #(Channel.lock' v);
    "state" ::= #(Channel.state' v);
    "buffer" ::= #(Channel.buffer' v);
    "first" ::= #(Channel.first' v);
    "count" ::= #(Channel.count' v);
    "v" ::= #(Channel.v' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Channel : IntoValTyped (Channel.t T') (Channel.ty T) :=
{|
  default_val := Channel.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Channel_lock : IntoValStructField "lock" (Channel.ty T) Channel.lock'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Channel_state : IntoValStructField "state" (Channel.ty T) Channel.state'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Channel_buffer : IntoValStructField "buffer" (Channel.ty T) Channel.buffer'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Channel_first : IntoValStructField "first" (Channel.ty T) Channel.first'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Channel_count : IntoValStructField "count" (Channel.ty T) Channel.count'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Channel_v : IntoValStructField "v" (Channel.ty T) Channel.v'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_type_Channel :
  PureWp True
    (channel.Channel #T)
    #(Channel.ty T).
Proof. solve_type_pure_wp. Qed.


Global Instance wp_struct_make_Channel lock' state' buffer' first' count' v':
  PureWp True
    (struct.make #(Channel.ty T) (alist_val [
      "lock" ::= #lock';
      "state" ::= #state';
      "buffer" ::= #buffer';
      "first" ::= #first';
      "count" ::= #count';
      "v" ::= #v'
    ]))%struct
    #(Channel.mk lock' state' buffer' first' count' v').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Channel_struct_fields_split `{!BoundedTypeSize T} dq l (v : (Channel.t T')) :
  StructFieldsSplit dq l v (
    "Hlock" ∷ l ↦s[(Channel.ty T) :: "lock"]{dq} v.(Channel.lock') ∗
    "Hstate" ∷ l ↦s[(Channel.ty T) :: "state"]{dq} v.(Channel.state') ∗
    "Hbuffer" ∷ l ↦s[(Channel.ty T) :: "buffer"]{dq} v.(Channel.buffer') ∗
    "Hfirst" ∷ l ↦s[(Channel.ty T) :: "first"]{dq} v.(Channel.first') ∗
    "Hcount" ∷ l ↦s[(Channel.ty T) :: "count"]{dq} v.(Channel.count') ∗
    "Hv" ∷ l ↦s[(Channel.ty T) :: "v"]{dq} v.(Channel.v')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Channel.lock' v)) ((Channel.ty T)) "lock"%go.
  simpl_one_flatten_struct (# (Channel.state' v)) ((Channel.ty T)) "state"%go.
  simpl_one_flatten_struct (# (Channel.buffer' v)) ((Channel.ty T)) "buffer"%go.
  simpl_one_flatten_struct (# (Channel.first' v)) ((Channel.ty T)) "first"%go.
  simpl_one_flatten_struct (# (Channel.count' v)) ((Channel.ty T)) "count"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type channel.OfferResult *)
Module OfferResult.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End OfferResult.

(* type channel.SenderState *)
Module SenderState.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End SenderState.

(* type channel.SelectDir *)
Module SelectDir.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End SelectDir.

(* type channel.SelectCase *)
Module SelectCase.
Section def.
Context `{ffi_syntax}.

Definition ty (T : go_type) : go_type := structT [
  "channel" :: ptrT;
  "dir" :: channel.SelectDir;
  "Value" :: T;
  "Ok" :: boolT
]%struct.
Record t `{!IntoVal T'} `{!IntoValTyped T' T} := mk {
  channel' : loc;
  dir' : SelectDir.t;
  Value' : T';
  Ok' : bool;
}.
End def.
End SelectCase.

Arguments SelectCase.mk {_} { T' } {_ T _} .
Arguments SelectCase.t {_} T' {_ T _} .

Section instances.
Context `{ffi_syntax}.
Context`{!IntoVal T'} `{!IntoValTyped T' T} .

Global Instance SelectCase_ty_wf : struct.Wf (SelectCase.ty T).
Proof. apply _. Qed.

Global Instance settable_SelectCase : Settable (SelectCase.t T') :=
  settable! (SelectCase.mk (T:=T)) < SelectCase.channel'; SelectCase.dir'; SelectCase.Value'; SelectCase.Ok' >.
Global Instance into_val_SelectCase : IntoVal (SelectCase.t T') :=
  {| to_val_def v :=
    struct.val_aux (SelectCase.ty T) [
    "channel" ::= #(SelectCase.channel' v);
    "dir" ::= #(SelectCase.dir' v);
    "Value" ::= #(SelectCase.Value' v);
    "Ok" ::= #(SelectCase.Ok' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_SelectCase : IntoValTyped (SelectCase.t T') (SelectCase.ty T) :=
{|
  default_val := SelectCase.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_SelectCase_channel : IntoValStructField "channel" (SelectCase.ty T) SelectCase.channel'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_SelectCase_dir : IntoValStructField "dir" (SelectCase.ty T) SelectCase.dir'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_SelectCase_Value : IntoValStructField "Value" (SelectCase.ty T) SelectCase.Value'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_SelectCase_Ok : IntoValStructField "Ok" (SelectCase.ty T) SelectCase.Ok'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_type_SelectCase :
  PureWp True
    (channel.SelectCase #T)
    #(SelectCase.ty T).
Proof. solve_type_pure_wp. Qed.


Global Instance wp_struct_make_SelectCase channel' dir' Value' Ok':
  PureWp True
    (struct.make #(SelectCase.ty T) (alist_val [
      "channel" ::= #channel';
      "dir" ::= #dir';
      "Value" ::= #Value';
      "Ok" ::= #Ok'
    ]))%struct
    #(SelectCase.mk channel' dir' Value' Ok').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance SelectCase_struct_fields_split `{!BoundedTypeSize T} dq l (v : (SelectCase.t T')) :
  StructFieldsSplit dq l v (
    "Hchannel" ∷ l ↦s[(SelectCase.ty T) :: "channel"]{dq} v.(SelectCase.channel') ∗
    "Hdir" ∷ l ↦s[(SelectCase.ty T) :: "dir"]{dq} v.(SelectCase.dir') ∗
    "HValue" ∷ l ↦s[(SelectCase.ty T) :: "Value"]{dq} v.(SelectCase.Value') ∗
    "HOk" ∷ l ↦s[(SelectCase.ty T) :: "Ok"]{dq} v.(SelectCase.Ok')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (SelectCase.channel' v)) ((SelectCase.ty T)) "channel"%go.
  simpl_one_flatten_struct (# (SelectCase.dir' v)) ((SelectCase.ty T)) "dir"%go.
  simpl_one_flatten_struct (# (SelectCase.Value' v)) ((SelectCase.ty T)) "Value"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_channel : IsPkgDefinedPure channel :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single channel ∧
      is_pkg_defined_pure sync.sync ∧
      is_pkg_defined_pure github_com.goose_lang.primitive.primitive;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_channel : IsPkgDefined channel :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single channel ∗
       is_pkg_defined sync.sync ∗
       is_pkg_defined github_com.goose_lang.primitive.primitive)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_NewChannelRef :
  WpFuncCall channel.NewChannelRef _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_NewSendCase :
  WpFuncCall channel.NewSendCase _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_NewRecvCase :
  WpFuncCall channel.NewRecvCase _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_TrySelect :
  WpFuncCall channel.TrySelect _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Select1 :
  WpFuncCall channel.Select1 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_TrySelectCase2 :
  WpFuncCall channel.TrySelectCase2 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Select2 :
  WpFuncCall channel.Select2 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_TrySelectCase3 :
  WpFuncCall channel.TrySelectCase3 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Select3 :
  WpFuncCall channel.Select3 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_TrySelectCase4 :
  WpFuncCall channel.TrySelectCase4 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Select4 :
  WpFuncCall channel.Select4 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_TrySelectCase5 :
  WpFuncCall channel.TrySelectCase5 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Select5 :
  WpFuncCall channel.Select5 _ (is_pkg_defined channel) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Channel'ptr_BufferedTryReceive :
  WpMethodCall (ptrT.id channel.Channel.id) "BufferedTryReceive" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_BufferedTryReceiveLocked :
  WpMethodCall (ptrT.id channel.Channel.id) "BufferedTryReceiveLocked" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_BufferedTrySend :
  WpMethodCall (ptrT.id channel.Channel.id) "BufferedTrySend" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Cap :
  WpMethodCall (ptrT.id channel.Channel.id) "Cap" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Close :
  WpMethodCall (ptrT.id channel.Channel.id) "Close" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Len :
  WpMethodCall (ptrT.id channel.Channel.id) "Len" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Receive :
  WpMethodCall (ptrT.id channel.Channel.id) "Receive" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_ReceiveDiscardOk :
  WpMethodCall (ptrT.id channel.Channel.id) "ReceiveDiscardOk" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_Send :
  WpMethodCall (ptrT.id channel.Channel.id) "Send" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_SenderCheckOfferResult :
  WpMethodCall (ptrT.id channel.Channel.id) "SenderCheckOfferResult" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_SenderCompleteOrOffer :
  WpMethodCall (ptrT.id channel.Channel.id) "SenderCompleteOrOffer" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_TryClose :
  WpMethodCall (ptrT.id channel.Channel.id) "TryClose" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_TryReceive :
  WpMethodCall (ptrT.id channel.Channel.id) "TryReceive" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_TrySend :
  WpMethodCall (ptrT.id channel.Channel.id) "TrySend" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Channel'ptr_UnbufferedTryReceive :
  WpMethodCall (ptrT.id channel.Channel.id) "UnbufferedTryReceive" _ (is_pkg_defined channel) :=
  ltac:(solve_wp_method_call).

End names.
End channel.
