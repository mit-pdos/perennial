(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.github_com.goose_lang.goose.testdata.examples.comments.

Set Default Proof Using "Type".

Module comments.

(* type comments.Foo *)
Module Foo.
Section def.
Context `{ffi_syntax}.

Record t := mk {
  a' : bool;
}.
End def.
End Foo.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent comments.Foo.
#[local] Typeclasses Transparent comments.Foo.

Global Instance Foo_wf : struct.Wf comments.Foo.
Proof. apply _. Qed.

Global Instance settable_Foo : Settable Foo.t :=
  settable! Foo.mk < Foo.a' >.
Global Instance into_val_Foo : IntoVal Foo.t :=
  {| to_val_def v :=
    struct.val_aux comments.Foo [
    "a" ::= #(Foo.a' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Foo : IntoValTyped Foo.t comments.Foo :=
{|
  default_val := Foo.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Foo_a : IntoValStructField "a" comments.Foo Foo.a'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.


Global Instance Foo_struct_fields_split dq l (v : Foo.t) :
  StructFieldsSplit dq l v (
    "Ha" ∷ l ↦s[comments.Foo :: "a"]{dq} v.(Foo.a')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_comments : IsPkgDefinedPure comments :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single comments;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_comments : IsPkgDefined comments :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single comments)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

End names.
End comments.
