(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.disk_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.generatedproof.github_com.goose_lang.primitive.disk.
Require Export New.golang.theory.

Require Export New.code.github_com.goose_lang.goose.testdata.examples.append_log.

Set Default Proof Using "Type".

Module append_log.

(* type append_log.Log *)
Module Log.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  m' : loc;
  sz' : w64;
  diskSz' : w64;
}.
End def.
End Log.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Log : Settable Log.t :=
  settable! Log.mk < Log.m'; Log.sz'; Log.diskSz' >.
Global Instance into_val_Log : IntoVal Log.t :=
  {| to_val_def v :=
    struct.val_aux append_log.Log [
    "m" ::= #(Log.m' v);
    "sz" ::= #(Log.sz' v);
    "diskSz" ::= #(Log.diskSz' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Log : IntoValTyped Log.t append_log.Log :=
{|
  default_val := Log.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Log_m : IntoValStructField "m" append_log.Log Log.m'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Log_sz : IntoValStructField "sz" append_log.Log Log.sz'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Log_diskSz : IntoValStructField "diskSz" append_log.Log Log.diskSz'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Log m' sz' diskSz':
  PureWp True
    (struct.make #append_log.Log (alist_val [
      "m" ::= #m';
      "sz" ::= #sz';
      "diskSz" ::= #diskSz'
    ]))%struct
    #(Log.mk m' sz' diskSz').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Log_struct_fields_split dq l (v : Log.t) :
  StructFieldsSplit dq l v (
    "Hm" ∷ l ↦s[append_log.Log :: "m"]{dq} v.(Log.m') ∗
    "Hsz" ∷ l ↦s[append_log.Log :: "sz"]{dq} v.(Log.sz') ∗
    "HdiskSz" ∷ l ↦s[append_log.Log :: "diskSz"]{dq} v.(Log.diskSz')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Log.m' v)) append_log.Log "m"%go.
  simpl_one_flatten_struct (# (Log.sz' v)) append_log.Log "sz"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined append_log :=
{|
  is_pkg_defined := is_global_definitions append_log var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_Init :
  WpFuncCall append_log "Init" _ (is_pkg_defined append_log) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Open :
  WpFuncCall append_log "Open" _ (is_pkg_defined append_log) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_writeAll :
  WpFuncCall append_log "writeAll" _ (is_pkg_defined append_log) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Append :
  WpMethodCall append_log "Log'ptr" "Append" _ (is_pkg_defined append_log) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Get :
  WpMethodCall append_log "Log'ptr" "Get" _ (is_pkg_defined append_log) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Reset :
  WpMethodCall append_log "Log'ptr" "Reset" _ (is_pkg_defined append_log) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_append :
  WpMethodCall append_log "Log'ptr" "append" _ (is_pkg_defined append_log) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_get :
  WpMethodCall append_log "Log'ptr" "get" _ (is_pkg_defined append_log) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_mkHdr :
  WpMethodCall append_log "Log'ptr" "mkHdr" _ (is_pkg_defined append_log) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_reset :
  WpMethodCall append_log "Log'ptr" "reset" _ (is_pkg_defined append_log) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_writeHdr :
  WpMethodCall append_log "Log'ptr" "writeHdr" _ (is_pkg_defined append_log) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End append_log.
