(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.disk_prelude.
Require Export New.generatedproof.fmt.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.generatedproof.github_com.goose_lang.primitive.disk.
Require Export New.generatedproof.log.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.golang.theory.

Require Export New.code.github_com.goose_lang.goose.testdata.examples.unittest.
Module unittest.
Axiom falso : False.

Module Foo.
Section def.
Context `{ffi_syntax}.
Definition t := (vec w64 (uint.nat (W64 10))).
End def.
End Foo.
Module importantStruct.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End importantStruct.

Section instances.
Context `{ffi_syntax}.
Global Instance into_val_importantStruct `{ffi_syntax} : IntoVal importantStruct.t.
Admitted.

Global Instance into_val_typed_importantStruct `{ffi_syntax} : IntoValTyped importantStruct.t unittest.importantStruct :=
{|
  default_val := importantStruct.mk;
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.

Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_importantStruct `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ}:
  PureWp True
    (struct.make #unittest.importantStruct (alist_val [
    ]))%struct
    #(importantStruct.mk).
Admitted.


End instances.

Module stringWrapper.
Section def.
Context `{ffi_syntax}.
Definition t := go_string.
End def.
End stringWrapper.
Module diskWrapper.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  d' : disk.Disk.t;
}.
End def.
End diskWrapper.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_diskWrapper `{ffi_syntax}: Settable _ :=
  settable! diskWrapper.mk < diskWrapper.d' >.
Global Instance into_val_diskWrapper `{ffi_syntax} : IntoVal diskWrapper.t.
Admitted.

Global Instance into_val_typed_diskWrapper `{ffi_syntax} : IntoValTyped diskWrapper.t unittest.diskWrapper :=
{|
  default_val := diskWrapper.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_diskWrapper_d `{ffi_syntax} : IntoValStructField "d" unittest.diskWrapper diskWrapper.d'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_diskWrapper `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} d':
  PureWp True
    (struct.make #unittest.diskWrapper (alist_val [
      "d" ::= #d'
    ]))%struct
    #(diskWrapper.mk d').
Admitted.


Global Instance diskWrapper_struct_fields_split dq l (v : diskWrapper.t) :
  StructFieldsSplit dq l v (
    "Hd" ∷ l ↦s[unittest.diskWrapper :: "d"]{dq} v.(diskWrapper.d')
  ).
Admitted.

End instances.
Module embedA.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  a' : w64;
}.
End def.
End embedA.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_embedA `{ffi_syntax}: Settable _ :=
  settable! embedA.mk < embedA.a' >.
Global Instance into_val_embedA `{ffi_syntax} : IntoVal embedA.t.
Admitted.

Global Instance into_val_typed_embedA `{ffi_syntax} : IntoValTyped embedA.t unittest.embedA :=
{|
  default_val := embedA.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_embedA_a `{ffi_syntax} : IntoValStructField "a" unittest.embedA embedA.a'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_embedA `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} a':
  PureWp True
    (struct.make #unittest.embedA (alist_val [
      "a" ::= #a'
    ]))%struct
    #(embedA.mk a').
Admitted.


Global Instance embedA_struct_fields_split dq l (v : embedA.t) :
  StructFieldsSplit dq l v (
    "Ha" ∷ l ↦s[unittest.embedA :: "a"]{dq} v.(embedA.a')
  ).
Admitted.

End instances.
Module embedB.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  embedA' : embedA.t;
}.
End def.
End embedB.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_embedB `{ffi_syntax}: Settable _ :=
  settable! embedB.mk < embedB.embedA' >.
Global Instance into_val_embedB `{ffi_syntax} : IntoVal embedB.t.
Admitted.

Global Instance into_val_typed_embedB `{ffi_syntax} : IntoValTyped embedB.t unittest.embedB :=
{|
  default_val := embedB.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_embedB_embedA `{ffi_syntax} : IntoValStructField "embedA" unittest.embedB embedB.embedA'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_embedB `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} embedA':
  PureWp True
    (struct.make #unittest.embedB (alist_val [
      "embedA" ::= #embedA'
    ]))%struct
    #(embedB.mk embedA').
Admitted.


Global Instance embedB_struct_fields_split dq l (v : embedB.t) :
  StructFieldsSplit dq l v (
    "HembedA" ∷ l ↦s[unittest.embedB :: "embedA"]{dq} v.(embedB.embedA')
  ).
Admitted.

End instances.
Module embedC.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  embedB' : loc;
}.
End def.
End embedC.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_embedC `{ffi_syntax}: Settable _ :=
  settable! embedC.mk < embedC.embedB' >.
Global Instance into_val_embedC `{ffi_syntax} : IntoVal embedC.t.
Admitted.

Global Instance into_val_typed_embedC `{ffi_syntax} : IntoValTyped embedC.t unittest.embedC :=
{|
  default_val := embedC.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_embedC_embedB `{ffi_syntax} : IntoValStructField "embedB" unittest.embedC embedC.embedB'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_embedC `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} embedB':
  PureWp True
    (struct.make #unittest.embedC (alist_val [
      "embedB" ::= #embedB'
    ]))%struct
    #(embedC.mk embedB').
Admitted.


Global Instance embedC_struct_fields_split dq l (v : embedC.t) :
  StructFieldsSplit dq l v (
    "HembedB" ∷ l ↦s[unittest.embedC :: "embedB"]{dq} v.(embedC.embedB')
  ).
Admitted.

End instances.
Module embedD.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  embedC' : embedC.t;
}.
End def.
End embedD.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_embedD `{ffi_syntax}: Settable _ :=
  settable! embedD.mk < embedD.embedC' >.
Global Instance into_val_embedD `{ffi_syntax} : IntoVal embedD.t.
Admitted.

Global Instance into_val_typed_embedD `{ffi_syntax} : IntoValTyped embedD.t unittest.embedD :=
{|
  default_val := embedD.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_embedD_embedC `{ffi_syntax} : IntoValStructField "embedC" unittest.embedD embedD.embedC'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_embedD `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} embedC':
  PureWp True
    (struct.make #unittest.embedD (alist_val [
      "embedC" ::= #embedC'
    ]))%struct
    #(embedD.mk embedC').
Admitted.


Global Instance embedD_struct_fields_split dq l (v : embedD.t) :
  StructFieldsSplit dq l v (
    "HembedC" ∷ l ↦s[unittest.embedD :: "embedC"]{dq} v.(embedD.embedC')
  ).
Admitted.

End instances.
Module Enc.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  p' : slice.t;
}.
End def.
End Enc.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Enc `{ffi_syntax}: Settable _ :=
  settable! Enc.mk < Enc.p' >.
Global Instance into_val_Enc `{ffi_syntax} : IntoVal Enc.t.
Admitted.

Global Instance into_val_typed_Enc `{ffi_syntax} : IntoValTyped Enc.t unittest.Enc :=
{|
  default_val := Enc.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Enc_p `{ffi_syntax} : IntoValStructField "p" unittest.Enc Enc.p'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Enc `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} p':
  PureWp True
    (struct.make #unittest.Enc (alist_val [
      "p" ::= #p'
    ]))%struct
    #(Enc.mk p').
Admitted.


Global Instance Enc_struct_fields_split dq l (v : Enc.t) :
  StructFieldsSplit dq l v (
    "Hp" ∷ l ↦s[unittest.Enc :: "p"]{dq} v.(Enc.p')
  ).
Admitted.

End instances.
Module Dec.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  p' : slice.t;
}.
End def.
End Dec.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Dec `{ffi_syntax}: Settable _ :=
  settable! Dec.mk < Dec.p' >.
Global Instance into_val_Dec `{ffi_syntax} : IntoVal Dec.t.
Admitted.

Global Instance into_val_typed_Dec `{ffi_syntax} : IntoValTyped Dec.t unittest.Dec :=
{|
  default_val := Dec.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Dec_p `{ffi_syntax} : IntoValStructField "p" unittest.Dec Dec.p'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Dec `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} p':
  PureWp True
    (struct.make #unittest.Dec (alist_val [
      "p" ::= #p'
    ]))%struct
    #(Dec.mk p').
Admitted.


Global Instance Dec_struct_fields_split dq l (v : Dec.t) :
  StructFieldsSplit dq l v (
    "Hp" ∷ l ↦s[unittest.Dec :: "p"]{dq} v.(Dec.p')
  ).
Admitted.

End instances.

Module Fooer.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End Fooer.
Module concreteFooer.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  a' : w64;
}.
End def.
End concreteFooer.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_concreteFooer `{ffi_syntax}: Settable _ :=
  settable! concreteFooer.mk < concreteFooer.a' >.
Global Instance into_val_concreteFooer `{ffi_syntax} : IntoVal concreteFooer.t.
Admitted.

Global Instance into_val_typed_concreteFooer `{ffi_syntax} : IntoValTyped concreteFooer.t unittest.concreteFooer :=
{|
  default_val := concreteFooer.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_concreteFooer_a `{ffi_syntax} : IntoValStructField "a" unittest.concreteFooer concreteFooer.a'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_concreteFooer `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} a':
  PureWp True
    (struct.make #unittest.concreteFooer (alist_val [
      "a" ::= #a'
    ]))%struct
    #(concreteFooer.mk a').
Admitted.


Global Instance concreteFooer_struct_fields_split dq l (v : concreteFooer.t) :
  StructFieldsSplit dq l v (
    "Ha" ∷ l ↦s[unittest.concreteFooer :: "a"]{dq} v.(concreteFooer.a')
  ).
Admitted.

End instances.
Module FooerUser.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  f' : Fooer.t;
}.
End def.
End FooerUser.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_FooerUser `{ffi_syntax}: Settable _ :=
  settable! FooerUser.mk < FooerUser.f' >.
Global Instance into_val_FooerUser `{ffi_syntax} : IntoVal FooerUser.t.
Admitted.

Global Instance into_val_typed_FooerUser `{ffi_syntax} : IntoValTyped FooerUser.t unittest.FooerUser :=
{|
  default_val := FooerUser.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_FooerUser_f `{ffi_syntax} : IntoValStructField "f" unittest.FooerUser FooerUser.f'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_FooerUser `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} f':
  PureWp True
    (struct.make #unittest.FooerUser (alist_val [
      "f" ::= #f'
    ]))%struct
    #(FooerUser.mk f').
Admitted.


Global Instance FooerUser_struct_fields_split dq l (v : FooerUser.t) :
  StructFieldsSplit dq l v (
    "Hf" ∷ l ↦s[unittest.FooerUser :: "f"]{dq} v.(FooerUser.f')
  ).
Admitted.

End instances.

Module PointerInterface.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End PointerInterface.
Module concrete1.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End concrete1.

Section instances.
Context `{ffi_syntax}.
Global Instance into_val_concrete1 `{ffi_syntax} : IntoVal concrete1.t.
Admitted.

Global Instance into_val_typed_concrete1 `{ffi_syntax} : IntoValTyped concrete1.t unittest.concrete1 :=
{|
  default_val := concrete1.mk;
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.

Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_concrete1 `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ}:
  PureWp True
    (struct.make #unittest.concrete1 (alist_val [
    ]))%struct
    #(concrete1.mk).
Admitted.


End instances.

Module my_u32.
Section def.
Context `{ffi_syntax}.
Definition t := w32.
End def.
End my_u32.

Module also_u32.
Section def.
Context `{ffi_syntax}.
Definition t := my_u32.t.
End def.
End also_u32.
Module allTheLiterals.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  int' : w64;
  s' : go_string;
  b' : bool;
}.
End def.
End allTheLiterals.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_allTheLiterals `{ffi_syntax}: Settable _ :=
  settable! allTheLiterals.mk < allTheLiterals.int'; allTheLiterals.s'; allTheLiterals.b' >.
Global Instance into_val_allTheLiterals `{ffi_syntax} : IntoVal allTheLiterals.t.
Admitted.

Global Instance into_val_typed_allTheLiterals `{ffi_syntax} : IntoValTyped allTheLiterals.t unittest.allTheLiterals :=
{|
  default_val := allTheLiterals.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_allTheLiterals_int `{ffi_syntax} : IntoValStructField "int" unittest.allTheLiterals allTheLiterals.int'.
Admitted.

Global Instance into_val_struct_field_allTheLiterals_s `{ffi_syntax} : IntoValStructField "s" unittest.allTheLiterals allTheLiterals.s'.
Admitted.

Global Instance into_val_struct_field_allTheLiterals_b `{ffi_syntax} : IntoValStructField "b" unittest.allTheLiterals allTheLiterals.b'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_allTheLiterals `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} int' s' b':
  PureWp True
    (struct.make #unittest.allTheLiterals (alist_val [
      "int" ::= #int';
      "s" ::= #s';
      "b" ::= #b'
    ]))%struct
    #(allTheLiterals.mk int' s' b').
Admitted.


Global Instance allTheLiterals_struct_fields_split dq l (v : allTheLiterals.t) :
  StructFieldsSplit dq l v (
    "Hint" ∷ l ↦s[unittest.allTheLiterals :: "int"]{dq} v.(allTheLiterals.int') ∗
    "Hs" ∷ l ↦s[unittest.allTheLiterals :: "s"]{dq} v.(allTheLiterals.s') ∗
    "Hb" ∷ l ↦s[unittest.allTheLiterals :: "b"]{dq} v.(allTheLiterals.b')
  ).
Admitted.

End instances.
Module hasCondVar.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  cond' : loc;
}.
End def.
End hasCondVar.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_hasCondVar `{ffi_syntax}: Settable _ :=
  settable! hasCondVar.mk < hasCondVar.cond' >.
Global Instance into_val_hasCondVar `{ffi_syntax} : IntoVal hasCondVar.t.
Admitted.

Global Instance into_val_typed_hasCondVar `{ffi_syntax} : IntoValTyped hasCondVar.t unittest.hasCondVar :=
{|
  default_val := hasCondVar.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_hasCondVar_cond `{ffi_syntax} : IntoValStructField "cond" unittest.hasCondVar hasCondVar.cond'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_hasCondVar `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} cond':
  PureWp True
    (struct.make #unittest.hasCondVar (alist_val [
      "cond" ::= #cond'
    ]))%struct
    #(hasCondVar.mk cond').
Admitted.


Global Instance hasCondVar_struct_fields_split dq l (v : hasCondVar.t) :
  StructFieldsSplit dq l v (
    "Hcond" ∷ l ↦s[unittest.hasCondVar :: "cond"]{dq} v.(hasCondVar.cond')
  ).
Admitted.

End instances.

Module IntWrapper.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End IntWrapper.

Module MapWrapper.
Section def.
Context `{ffi_syntax}.
Definition t := loc.
End def.
End MapWrapper.
Module mapElem.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  a' : w64;
  b' : w64;
}.
End def.
End mapElem.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_mapElem `{ffi_syntax}: Settable _ :=
  settable! mapElem.mk < mapElem.a'; mapElem.b' >.
Global Instance into_val_mapElem `{ffi_syntax} : IntoVal mapElem.t.
Admitted.

Global Instance into_val_typed_mapElem `{ffi_syntax} : IntoValTyped mapElem.t unittest.mapElem :=
{|
  default_val := mapElem.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_mapElem_a `{ffi_syntax} : IntoValStructField "a" unittest.mapElem mapElem.a'.
Admitted.

Global Instance into_val_struct_field_mapElem_b `{ffi_syntax} : IntoValStructField "b" unittest.mapElem mapElem.b'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_mapElem `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} a' b':
  PureWp True
    (struct.make #unittest.mapElem (alist_val [
      "a" ::= #a';
      "b" ::= #b'
    ]))%struct
    #(mapElem.mk a' b').
Admitted.


Global Instance mapElem_struct_fields_split dq l (v : mapElem.t) :
  StructFieldsSplit dq l v (
    "Ha" ∷ l ↦s[unittest.mapElem :: "a"]{dq} v.(mapElem.a') ∗
    "Hb" ∷ l ↦s[unittest.mapElem :: "b"]{dq} v.(mapElem.b')
  ).
Admitted.

End instances.
Module wrapExternalStruct.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  j' : loc;
}.
End def.
End wrapExternalStruct.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_wrapExternalStruct `{ffi_syntax}: Settable _ :=
  settable! wrapExternalStruct.mk < wrapExternalStruct.j' >.
Global Instance into_val_wrapExternalStruct `{ffi_syntax} : IntoVal wrapExternalStruct.t.
Admitted.

Global Instance into_val_typed_wrapExternalStruct `{ffi_syntax} : IntoValTyped wrapExternalStruct.t unittest.wrapExternalStruct :=
{|
  default_val := wrapExternalStruct.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_wrapExternalStruct_j `{ffi_syntax} : IntoValStructField "j" unittest.wrapExternalStruct wrapExternalStruct.j'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_wrapExternalStruct `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} j':
  PureWp True
    (struct.make #unittest.wrapExternalStruct (alist_val [
      "j" ::= #j'
    ]))%struct
    #(wrapExternalStruct.mk j').
Admitted.


Global Instance wrapExternalStruct_struct_fields_split dq l (v : wrapExternalStruct.t) :
  StructFieldsSplit dq l v (
    "Hj" ∷ l ↦s[unittest.wrapExternalStruct :: "j"]{dq} v.(wrapExternalStruct.j')
  ).
Admitted.

End instances.
Module typing.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  proph' : loc;
}.
End def.
End typing.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_typing `{ffi_syntax}: Settable _ :=
  settable! typing.mk < typing.proph' >.
Global Instance into_val_typing `{ffi_syntax} : IntoVal typing.t.
Admitted.

Global Instance into_val_typed_typing `{ffi_syntax} : IntoValTyped typing.t unittest.typing :=
{|
  default_val := typing.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_typing_proph `{ffi_syntax} : IntoValStructField "proph" unittest.typing typing.proph'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_typing `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} proph':
  PureWp True
    (struct.make #unittest.typing (alist_val [
      "proph" ::= #proph'
    ]))%struct
    #(typing.mk proph').
Admitted.


Global Instance typing_struct_fields_split dq l (v : typing.t) :
  StructFieldsSplit dq l v (
    "Hproph" ∷ l ↦s[unittest.typing :: "proph"]{dq} v.(typing.proph')
  ).
Admitted.

End instances.
Module composite.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  a' : w64;
  b' : w64;
}.
End def.
End composite.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_composite `{ffi_syntax}: Settable _ :=
  settable! composite.mk < composite.a'; composite.b' >.
Global Instance into_val_composite `{ffi_syntax} : IntoVal composite.t.
Admitted.

Global Instance into_val_typed_composite `{ffi_syntax} : IntoValTyped composite.t unittest.composite :=
{|
  default_val := composite.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_composite_a `{ffi_syntax} : IntoValStructField "a" unittest.composite composite.a'.
Admitted.

Global Instance into_val_struct_field_composite_b `{ffi_syntax} : IntoValStructField "b" unittest.composite composite.b'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_composite `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} a' b':
  PureWp True
    (struct.make #unittest.composite (alist_val [
      "a" ::= #a';
      "b" ::= #b'
    ]))%struct
    #(composite.mk a' b').
Admitted.


Global Instance composite_struct_fields_split dq l (v : composite.t) :
  StructFieldsSplit dq l v (
    "Ha" ∷ l ↦s[unittest.composite :: "a"]{dq} v.(composite.a') ∗
    "Hb" ∷ l ↦s[unittest.composite :: "b"]{dq} v.(composite.b')
  ).
Admitted.

End instances.
Module R.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End R.

Section instances.
Context `{ffi_syntax}.
Global Instance into_val_R `{ffi_syntax} : IntoVal R.t.
Admitted.

Global Instance into_val_typed_R `{ffi_syntax} : IntoValTyped R.t unittest.R :=
{|
  default_val := R.mk;
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.

Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_R `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ}:
  PureWp True
    (struct.make #unittest.R (alist_val [
    ]))%struct
    #(R.mk).
Admitted.


End instances.
Module Other.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  RecursiveEmbedded' : loc;
}.
End def.
End Other.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Other `{ffi_syntax}: Settable _ :=
  settable! Other.mk < Other.RecursiveEmbedded' >.
Global Instance into_val_Other `{ffi_syntax} : IntoVal Other.t.
Admitted.

Global Instance into_val_typed_Other `{ffi_syntax} : IntoValTyped Other.t unittest.Other :=
{|
  default_val := Other.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Other_RecursiveEmbedded `{ffi_syntax} : IntoValStructField "RecursiveEmbedded" unittest.Other Other.RecursiveEmbedded'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Other `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} RecursiveEmbedded':
  PureWp True
    (struct.make #unittest.Other (alist_val [
      "RecursiveEmbedded" ::= #RecursiveEmbedded'
    ]))%struct
    #(Other.mk RecursiveEmbedded').
Admitted.


Global Instance Other_struct_fields_split dq l (v : Other.t) :
  StructFieldsSplit dq l v (
    "HRecursiveEmbedded" ∷ l ↦s[unittest.Other :: "RecursiveEmbedded"]{dq} v.(Other.RecursiveEmbedded')
  ).
Admitted.

End instances.
Module RecursiveEmbedded.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Other' : Other.t;
}.
End def.
End RecursiveEmbedded.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_RecursiveEmbedded `{ffi_syntax}: Settable _ :=
  settable! RecursiveEmbedded.mk < RecursiveEmbedded.Other' >.
Global Instance into_val_RecursiveEmbedded `{ffi_syntax} : IntoVal RecursiveEmbedded.t.
Admitted.

Global Instance into_val_typed_RecursiveEmbedded `{ffi_syntax} : IntoValTyped RecursiveEmbedded.t unittest.RecursiveEmbedded :=
{|
  default_val := RecursiveEmbedded.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_RecursiveEmbedded_Other `{ffi_syntax} : IntoValStructField "Other" unittest.RecursiveEmbedded RecursiveEmbedded.Other'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_RecursiveEmbedded `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Other':
  PureWp True
    (struct.make #unittest.RecursiveEmbedded (alist_val [
      "Other" ::= #Other'
    ]))%struct
    #(RecursiveEmbedded.mk Other').
Admitted.


Global Instance RecursiveEmbedded_struct_fields_split dq l (v : RecursiveEmbedded.t) :
  StructFieldsSplit dq l v (
    "HOther" ∷ l ↦s[unittest.RecursiveEmbedded :: "Other"]{dq} v.(RecursiveEmbedded.Other')
  ).
Admitted.

End instances.
Module Block.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Value' : w64;
}.
End def.
End Block.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Block `{ffi_syntax}: Settable _ :=
  settable! Block.mk < Block.Value' >.
Global Instance into_val_Block `{ffi_syntax} : IntoVal Block.t.
Admitted.

Global Instance into_val_typed_Block `{ffi_syntax} : IntoValTyped Block.t unittest.Block :=
{|
  default_val := Block.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Block_Value `{ffi_syntax} : IntoValStructField "Value" unittest.Block Block.Value'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Block `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Value':
  PureWp True
    (struct.make #unittest.Block (alist_val [
      "Value" ::= #Value'
    ]))%struct
    #(Block.mk Value').
Admitted.


Global Instance Block_struct_fields_split dq l (v : Block.t) :
  StructFieldsSplit dq l v (
    "HValue" ∷ l ↦s[unittest.Block :: "Value"]{dq} v.(Block.Value')
  ).
Admitted.

End instances.

Module SliceAlias.
Section def.
Context `{ffi_syntax}.
Definition t := slice.t.
End def.
End SliceAlias.
Module thing.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  x' : w64;
}.
End def.
End thing.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_thing `{ffi_syntax}: Settable _ :=
  settable! thing.mk < thing.x' >.
Global Instance into_val_thing `{ffi_syntax} : IntoVal thing.t.
Admitted.

Global Instance into_val_typed_thing `{ffi_syntax} : IntoValTyped thing.t unittest.thing :=
{|
  default_val := thing.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_thing_x `{ffi_syntax} : IntoValStructField "x" unittest.thing thing.x'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_thing `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} x':
  PureWp True
    (struct.make #unittest.thing (alist_val [
      "x" ::= #x'
    ]))%struct
    #(thing.mk x').
Admitted.


Global Instance thing_struct_fields_split dq l (v : thing.t) :
  StructFieldsSplit dq l v (
    "Hx" ∷ l ↦s[unittest.thing :: "x"]{dq} v.(thing.x')
  ).
Admitted.

End instances.
Module sliceOfThings.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  things' : slice.t;
}.
End def.
End sliceOfThings.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_sliceOfThings `{ffi_syntax}: Settable _ :=
  settable! sliceOfThings.mk < sliceOfThings.things' >.
Global Instance into_val_sliceOfThings `{ffi_syntax} : IntoVal sliceOfThings.t.
Admitted.

Global Instance into_val_typed_sliceOfThings `{ffi_syntax} : IntoValTyped sliceOfThings.t unittest.sliceOfThings :=
{|
  default_val := sliceOfThings.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_sliceOfThings_things `{ffi_syntax} : IntoValStructField "things" unittest.sliceOfThings sliceOfThings.things'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_sliceOfThings `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} things':
  PureWp True
    (struct.make #unittest.sliceOfThings (alist_val [
      "things" ::= #things'
    ]))%struct
    #(sliceOfThings.mk things').
Admitted.


Global Instance sliceOfThings_struct_fields_split dq l (v : sliceOfThings.t) :
  StructFieldsSplit dq l v (
    "Hthings" ∷ l ↦s[unittest.sliceOfThings :: "things"]{dq} v.(sliceOfThings.things')
  ).
Admitted.

End instances.
Module Point.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  x' : w64;
  y' : w64;
}.
End def.
End Point.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Point `{ffi_syntax}: Settable _ :=
  settable! Point.mk < Point.x'; Point.y' >.
Global Instance into_val_Point `{ffi_syntax} : IntoVal Point.t.
Admitted.

Global Instance into_val_typed_Point `{ffi_syntax} : IntoValTyped Point.t unittest.Point :=
{|
  default_val := Point.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Point_x `{ffi_syntax} : IntoValStructField "x" unittest.Point Point.x'.
Admitted.

Global Instance into_val_struct_field_Point_y `{ffi_syntax} : IntoValStructField "y" unittest.Point Point.y'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Point `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} x' y':
  PureWp True
    (struct.make #unittest.Point (alist_val [
      "x" ::= #x';
      "y" ::= #y'
    ]))%struct
    #(Point.mk x' y').
Admitted.


Global Instance Point_struct_fields_split dq l (v : Point.t) :
  StructFieldsSplit dq l v (
    "Hx" ∷ l ↦s[unittest.Point :: "x"]{dq} v.(Point.x') ∗
    "Hy" ∷ l ↦s[unittest.Point :: "y"]{dq} v.(Point.y')
  ).
Admitted.

End instances.
Module TwoInts.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  x' : w64;
  y' : w64;
}.
End def.
End TwoInts.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_TwoInts `{ffi_syntax}: Settable _ :=
  settable! TwoInts.mk < TwoInts.x'; TwoInts.y' >.
Global Instance into_val_TwoInts `{ffi_syntax} : IntoVal TwoInts.t.
Admitted.

Global Instance into_val_typed_TwoInts `{ffi_syntax} : IntoValTyped TwoInts.t unittest.TwoInts :=
{|
  default_val := TwoInts.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_TwoInts_x `{ffi_syntax} : IntoValStructField "x" unittest.TwoInts TwoInts.x'.
Admitted.

Global Instance into_val_struct_field_TwoInts_y `{ffi_syntax} : IntoValStructField "y" unittest.TwoInts TwoInts.y'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_TwoInts `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} x' y':
  PureWp True
    (struct.make #unittest.TwoInts (alist_val [
      "x" ::= #x';
      "y" ::= #y'
    ]))%struct
    #(TwoInts.mk x' y').
Admitted.


Global Instance TwoInts_struct_fields_split dq l (v : TwoInts.t) :
  StructFieldsSplit dq l v (
    "Hx" ∷ l ↦s[unittest.TwoInts :: "x"]{dq} v.(TwoInts.x') ∗
    "Hy" ∷ l ↦s[unittest.TwoInts :: "y"]{dq} v.(TwoInts.y')
  ).
Admitted.

End instances.
Module S.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  a' : w64;
  b' : TwoInts.t;
  c' : bool;
}.
End def.
End S.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_S `{ffi_syntax}: Settable _ :=
  settable! S.mk < S.a'; S.b'; S.c' >.
Global Instance into_val_S `{ffi_syntax} : IntoVal S.t.
Admitted.

Global Instance into_val_typed_S `{ffi_syntax} : IntoValTyped S.t unittest.S :=
{|
  default_val := S.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_S_a `{ffi_syntax} : IntoValStructField "a" unittest.S S.a'.
Admitted.

Global Instance into_val_struct_field_S_b `{ffi_syntax} : IntoValStructField "b" unittest.S S.b'.
Admitted.

Global Instance into_val_struct_field_S_c `{ffi_syntax} : IntoValStructField "c" unittest.S S.c'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_S `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} a' b' c':
  PureWp True
    (struct.make #unittest.S (alist_val [
      "a" ::= #a';
      "b" ::= #b';
      "c" ::= #c'
    ]))%struct
    #(S.mk a' b' c').
Admitted.


Global Instance S_struct_fields_split dq l (v : S.t) :
  StructFieldsSplit dq l v (
    "Ha" ∷ l ↦s[unittest.S :: "a"]{dq} v.(S.a') ∗
    "Hb" ∷ l ↦s[unittest.S :: "b"]{dq} v.(S.b') ∗
    "Hc" ∷ l ↦s[unittest.S :: "c"]{dq} v.(S.c')
  ).
Admitted.

End instances.
Module B.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  a' : slice.t;
}.
End def.
End B.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_B `{ffi_syntax}: Settable _ :=
  settable! B.mk < B.a' >.
Global Instance into_val_B `{ffi_syntax} : IntoVal B.t.
Admitted.

Global Instance into_val_typed_B `{ffi_syntax} : IntoValTyped B.t unittest.B :=
{|
  default_val := B.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_B_a `{ffi_syntax} : IntoValStructField "a" unittest.B B.a'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_B `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} a':
  PureWp True
    (struct.make #unittest.B (alist_val [
      "a" ::= #a'
    ]))%struct
    #(B.mk a').
Admitted.


Global Instance B_struct_fields_split dq l (v : B.t) :
  StructFieldsSplit dq l v (
    "Ha" ∷ l ↦s[unittest.B :: "a"]{dq} v.(B.a')
  ).
Admitted.

End instances.
Module A.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End A.

Section instances.
Context `{ffi_syntax}.
Global Instance into_val_A `{ffi_syntax} : IntoVal A.t.
Admitted.

Global Instance into_val_typed_A `{ffi_syntax} : IntoValTyped A.t unittest.A :=
{|
  default_val := A.mk;
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.

Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_A `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ}:
  PureWp True
    (struct.make #unittest.A (alist_val [
    ]))%struct
    #(A.mk).
Admitted.


End instances.

Module my_u64.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End my_u64.

Module Timestamp.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End Timestamp.

Module UseTypeAbbrev.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End UseTypeAbbrev.

Module UseNamedType.
Section def.
Context `{ffi_syntax}.
Definition t := Timestamp.t.
End def.
End UseNamedType.

Section names.

Class GlobalAddrs :=
{
  GlobalX : loc;
  globalY : loc;
  globalA : loc;
  globalB : loc;
  mapLiteral : loc;
  mapLiteralWithConversion : loc;
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
    ("GlobalX"%go, GlobalX);
    ("globalY"%go, globalY);
    ("globalA"%go, globalA);
    ("globalB"%go, globalB);
    ("mapLiteral"%go, mapLiteral);
    ("mapLiteralWithConversion"%go, mapLiteralWithConversion)
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined unittest :=
{|
  is_pkg_defined := is_global_definitions unittest var_addrs;
|}.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
  "HGlobalX" ∷ GlobalX ↦ (default_val w64) ∗
  "HglobalY" ∷ globalY ↦ (default_val go_string) ∗
  "HglobalA" ∷ globalA ↦ (default_val go_string) ∗
  "HglobalB" ∷ globalB ↦ (default_val go_string) ∗
  "HmapLiteral" ∷ mapLiteral ↦ (default_val loc) ∗
  "HmapLiteralWithConversion" ∷ mapLiteralWithConversion ↦ (default_val loc).

Global Instance wp_globals_get_GlobalX : 
  WpGlobalsGet unittest "GlobalX" GlobalX (is_pkg_defined unittest).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_globalY : 
  WpGlobalsGet unittest "globalY" globalY (is_pkg_defined unittest).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_globalA : 
  WpGlobalsGet unittest "globalA" globalA (is_pkg_defined unittest).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_globalB : 
  WpGlobalsGet unittest "globalB" globalB (is_pkg_defined unittest).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_mapLiteral : 
  WpGlobalsGet unittest "mapLiteral" mapLiteral (is_pkg_defined unittest).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_mapLiteralWithConversion : 
  WpGlobalsGet unittest "mapLiteralWithConversion" mapLiteralWithConversion (is_pkg_defined unittest).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_func_call_takesArray :
  WpFuncCall unittest "takesArray" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_takesPtr :
  WpFuncCall unittest "takesPtr" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_usesArrayElemRef :
  WpFuncCall unittest "usesArrayElemRef" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_sum :
  WpFuncCall unittest "sum" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_arrayToSlice :
  WpFuncCall unittest "arrayToSlice" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_arrayLiteralKeyed :
  WpFuncCall unittest "arrayLiteralKeyed" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_chanBasic :
  WpFuncCall unittest "chanBasic" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_f :
  WpFuncCall unittest "f" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_chanSelect :
  WpFuncCall unittest "chanSelect" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_chanDirectional :
  WpFuncCall unittest "chanDirectional" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_chanRange :
  WpFuncCall unittest "chanRange" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_doSubtleThings :
  WpFuncCall unittest "doSubtleThings" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_hasStartComment :
  WpFuncCall unittest "hasStartComment" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_hasEndComment :
  WpFuncCall unittest "hasEndComment" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_condvarWrapping :
  WpFuncCall unittest "condvarWrapping" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_useUntypedInt :
  WpFuncCall unittest "useUntypedInt" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_useUntypedString :
  WpFuncCall unittest "useUntypedString" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_conditionalReturn :
  WpFuncCall unittest "conditionalReturn" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_alwaysReturn :
  WpFuncCall unittest "alwaysReturn" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_alwaysReturnInNestedBranches :
  WpFuncCall unittest "alwaysReturnInNestedBranches" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_earlyReturn :
  WpFuncCall unittest "earlyReturn" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_conditionalAssign :
  WpFuncCall unittest "conditionalAssign" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_elseIf :
  WpFuncCall unittest "elseIf" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ifStmtInitialization :
  WpFuncCall unittest "ifStmtInitialization" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_typedLiteral :
  WpFuncCall unittest "typedLiteral" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_literalCast :
  WpFuncCall unittest "literalCast" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_castInt :
  WpFuncCall unittest "castInt" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_stringToByteSlice :
  WpFuncCall unittest "stringToByteSlice" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_byteSliceToString :
  WpFuncCall unittest "byteSliceToString" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_stringToStringWrapper :
  WpFuncCall unittest "stringToStringWrapper" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_stringWrapperToString :
  WpFuncCall unittest "stringWrapperToString" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCopySimple :
  WpFuncCall unittest "testCopySimple" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCopyDifferentLengths :
  WpFuncCall unittest "testCopyDifferentLengths" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_atomicCreateStub :
  WpFuncCall unittest "atomicCreateStub" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_useSlice :
  WpFuncCall unittest "useSlice" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_useSliceIndexing :
  WpFuncCall unittest "useSliceIndexing" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_useMap :
  WpFuncCall unittest "useMap" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_usePtr :
  WpFuncCall unittest "usePtr" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_iterMapKeysAndValues :
  WpFuncCall unittest "iterMapKeysAndValues" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_iterMapKeys :
  WpFuncCall unittest "iterMapKeys" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_getRandom :
  WpFuncCall unittest "getRandom" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_diskArgument :
  WpFuncCall unittest "diskArgument" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_returnEmbedVal :
  WpFuncCall unittest "returnEmbedVal" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_returnEmbedValWithPointer :
  WpFuncCall unittest "returnEmbedValWithPointer" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_useEmbeddedField :
  WpFuncCall unittest "useEmbeddedField" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_useEmbeddedValField :
  WpFuncCall unittest "useEmbeddedValField" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_useEmbeddedMethod :
  WpFuncCall unittest "useEmbeddedMethod" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_useEmbeddedMethod2 :
  WpFuncCall unittest "useEmbeddedMethod2" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_empty :
  WpFuncCall unittest "empty" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_emptyReturn :
  WpFuncCall unittest "emptyReturn" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_forRangeNoBinding :
  WpFuncCall unittest "forRangeNoBinding" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_forRangeOldVars :
  WpFuncCall unittest "forRangeOldVars" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_foo :
  WpFuncCall unittest "foo" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_other :
  WpFuncCall unittest "other" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_bar :
  WpFuncCall unittest "bar" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_TakesFunctionType :
  WpFuncCall unittest "TakesFunctionType" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_fooConsumer :
  WpFuncCall unittest "fooConsumer" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAssignConcreteToInterface :
  WpFuncCall unittest "testAssignConcreteToInterface" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testPassConcreteToInterfaceArg :
  WpFuncCall unittest "testPassConcreteToInterfaceArg" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testPassConcreteToInterfaceArgSpecial :
  WpFuncCall unittest "testPassConcreteToInterfaceArgSpecial" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_takesVarArgsInterface :
  WpFuncCall unittest "takesVarArgsInterface" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_test :
  WpFuncCall unittest "test" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_returnConcrete :
  WpFuncCall unittest "returnConcrete" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testMultiReturn :
  WpFuncCall unittest "testMultiReturn" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testReturnStatment :
  WpFuncCall unittest "testReturnStatment" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testConversionInEq :
  WpFuncCall unittest "testConversionInEq" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_takeMultiple :
  WpFuncCall unittest "takeMultiple" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_giveMultiple :
  WpFuncCall unittest "giveMultiple" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testConversionInMultipleReturnPassThrough :
  WpFuncCall unittest "testConversionInMultipleReturnPassThrough" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testConversionInMultiplePassThrough :
  WpFuncCall unittest "testConversionInMultiplePassThrough" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testPtrMset :
  WpFuncCall unittest "testPtrMset" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_useInts :
  WpFuncCall unittest "useInts" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_normalLiterals :
  WpFuncCall unittest "normalLiterals" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_outOfOrderLiteral :
  WpFuncCall unittest "outOfOrderLiteral" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_specialLiterals :
  WpFuncCall unittest "specialLiterals" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_oddLiterals :
  WpFuncCall unittest "oddLiterals" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_unKeyedLiteral :
  WpFuncCall unittest "unKeyedLiteral" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_useLocks :
  WpFuncCall unittest "useLocks" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_useCondVar :
  WpFuncCall unittest "useCondVar" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ToBeDebugged :
  WpFuncCall unittest "ToBeDebugged" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DoNothing :
  WpFuncCall unittest "DoNothing" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DoSomething :
  WpFuncCall unittest "DoSomething" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_standardForLoop :
  WpFuncCall unittest "standardForLoop" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_conditionalInLoop :
  WpFuncCall unittest "conditionalInLoop" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_conditionalInLoopElse :
  WpFuncCall unittest "conditionalInLoopElse" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_nestedConditionalInLoopImplicitContinue :
  WpFuncCall unittest "nestedConditionalInLoopImplicitContinue" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ImplicitLoopContinue :
  WpFuncCall unittest "ImplicitLoopContinue" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ImplicitLoopContinue2 :
  WpFuncCall unittest "ImplicitLoopContinue2" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ImplicitLoopContinueAfterIfBreak :
  WpFuncCall unittest "ImplicitLoopContinueAfterIfBreak" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_nestedLoops :
  WpFuncCall unittest "nestedLoops" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_nestedGoStyleLoops :
  WpFuncCall unittest "nestedGoStyleLoops" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_sumSlice :
  WpFuncCall unittest "sumSlice" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_breakFromLoop :
  WpFuncCall unittest "breakFromLoop" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IterateMapKeys :
  WpFuncCall unittest "IterateMapKeys" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MapSize :
  WpFuncCall unittest "MapSize" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MapTypeAliases :
  WpFuncCall unittest "MapTypeAliases" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_StringMap :
  WpFuncCall unittest "StringMap" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_mapUpdateField :
  WpFuncCall unittest "mapUpdateField" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_returnTwo :
  WpFuncCall unittest "returnTwo" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_returnTwoWrapper :
  WpFuncCall unittest "returnTwoWrapper" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_multipleVar :
  WpFuncCall unittest "multipleVar" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_multiplePassThrough :
  WpFuncCall unittest "multiplePassThrough" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_multipleReturnPassThrough :
  WpFuncCall unittest "multipleReturnPassThrough" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AssignNilSlice :
  WpFuncCall unittest "AssignNilSlice" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AssignNilPointer :
  WpFuncCall unittest "AssignNilPointer" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_CompareSliceToNil :
  WpFuncCall unittest "CompareSliceToNil" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ComparePointerToNil :
  WpFuncCall unittest "ComparePointerToNil" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_LogicalOperators :
  WpFuncCall unittest "LogicalOperators" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_LogicalAndEqualityOperators :
  WpFuncCall unittest "LogicalAndEqualityOperators" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ArithmeticShifts :
  WpFuncCall unittest "ArithmeticShifts" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_BitwiseOps :
  WpFuncCall unittest "BitwiseOps" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Comparison :
  WpFuncCall unittest "Comparison" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AssignOps :
  WpFuncCall unittest "AssignOps" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Negative :
  WpFuncCall unittest "Negative" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_PanicAtTheDisco :
  WpFuncCall unittest "PanicAtTheDisco" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Oracle :
  WpFuncCall unittest "Oracle" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ReassignVars :
  WpFuncCall unittest "ReassignVars" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_recur :
  WpFuncCall unittest "recur" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_useRenamedImport :
  WpFuncCall unittest "useRenamedImport" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_TwoDiskWrite :
  WpFuncCall unittest "TwoDiskWrite" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_TwoDiskRead :
  WpFuncCall unittest "TwoDiskRead" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_TwoDiskLock :
  WpFuncCall unittest "TwoDiskLock" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_TwoDiskUnlock :
  WpFuncCall unittest "TwoDiskUnlock" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ReplicatedDiskRead :
  WpFuncCall unittest "ReplicatedDiskRead" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ReplicatedDiskWrite :
  WpFuncCall unittest "ReplicatedDiskWrite" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ReplicatedDiskRecover :
  WpFuncCall unittest "ReplicatedDiskRecover" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_BasicNamedReturn :
  WpFuncCall unittest "BasicNamedReturn" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NamedReturn :
  WpFuncCall unittest "NamedReturn" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_BasicNamedReturnMany :
  WpFuncCall unittest "BasicNamedReturnMany" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NamedReturnMany :
  WpFuncCall unittest "NamedReturnMany" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NamedReturnOverride :
  WpFuncCall unittest "NamedReturnOverride" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_sliceOps :
  WpFuncCall unittest "sliceOps" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_makeSingletonSlice :
  WpFuncCall unittest "makeSingletonSlice" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_makeAlias :
  WpFuncCall unittest "makeAlias" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Skip :
  WpFuncCall unittest "Skip" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_simpleSpawn :
  WpFuncCall unittest "simpleSpawn" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_threadCode :
  WpFuncCall unittest "threadCode" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_loopSpawn :
  WpFuncCall unittest "loopSpawn" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_stringAppend :
  WpFuncCall unittest "stringAppend" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_stringLength :
  WpFuncCall unittest "stringLength" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_x :
  WpFuncCall unittest "x" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_UseAdd :
  WpFuncCall unittest "UseAdd" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_UseAddWithLiteral :
  WpFuncCall unittest "UseAddWithLiteral" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewS :
  WpFuncCall unittest "NewS" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_localSRef :
  WpFuncCall unittest "localSRef" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_setField :
  WpFuncCall unittest "setField" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DoSomeLocking :
  WpFuncCall unittest "DoSomeLocking" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_makeLock :
  WpFuncCall unittest "makeLock" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_sleep :
  WpFuncCall unittest "sleep" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_mkInt :
  WpFuncCall unittest "mkInt" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_mkNothing :
  WpFuncCall unittest "mkNothing" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_convertToAlias :
  WpFuncCall unittest "convertToAlias" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_variadicFunc :
  WpFuncCall unittest "variadicFunc" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testVariadicCall :
  WpFuncCall unittest "testVariadicCall" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_returnMultiple :
  WpFuncCall unittest "returnMultiple" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testVariadicPassThrough :
  WpFuncCall unittest "testVariadicPassThrough" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_embedA_Foo :
  WpMethodCall unittest "embedA" "Foo" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedA'ptr_Bar :
  WpMethodCall unittest "embedA'ptr" "Bar" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedA'ptr_Foo :
  WpMethodCall unittest "embedA'ptr" "Foo" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedB_Foo :
  WpMethodCall unittest "embedB" "Foo" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedB'ptr_Bar :
  WpMethodCall unittest "embedB'ptr" "Bar" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedB'ptr_Car :
  WpMethodCall unittest "embedB'ptr" "Car" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedB'ptr_Foo :
  WpMethodCall unittest "embedB'ptr" "Foo" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedC_Bar :
  WpMethodCall unittest "embedC" "Bar" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedC_Car :
  WpMethodCall unittest "embedC" "Car" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedC_Foo :
  WpMethodCall unittest "embedC" "Foo" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedC'ptr_Bar :
  WpMethodCall unittest "embedC'ptr" "Bar" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedC'ptr_Car :
  WpMethodCall unittest "embedC'ptr" "Car" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedC'ptr_Foo :
  WpMethodCall unittest "embedC'ptr" "Foo" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedD_Bar :
  WpMethodCall unittest "embedD" "Bar" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedD_Car :
  WpMethodCall unittest "embedD" "Car" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedD_Foo :
  WpMethodCall unittest "embedD" "Foo" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedD'ptr_Bar :
  WpMethodCall unittest "embedD'ptr" "Bar" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedD'ptr_Car :
  WpMethodCall unittest "embedD'ptr" "Car" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_embedD'ptr_Foo :
  WpMethodCall unittest "embedD'ptr" "Foo" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Enc'ptr_UInt32 :
  WpMethodCall unittest "Enc'ptr" "UInt32" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Enc'ptr_UInt64 :
  WpMethodCall unittest "Enc'ptr" "UInt64" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Enc'ptr_consume :
  WpMethodCall unittest "Enc'ptr" "consume" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Dec'ptr_UInt32 :
  WpMethodCall unittest "Dec'ptr" "UInt32" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Dec'ptr_UInt64 :
  WpMethodCall unittest "Dec'ptr" "UInt64" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Dec'ptr_consume :
  WpMethodCall unittest "Dec'ptr" "consume" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_concreteFooer'ptr_Foo :
  WpMethodCall unittest "concreteFooer'ptr" "Foo" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_concrete1_Foo :
  WpMethodCall unittest "concrete1" "Foo" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_concrete1'ptr_B :
  WpMethodCall unittest "concrete1'ptr" "B" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_concrete1'ptr_Foo :
  WpMethodCall unittest "concrete1'ptr" "Foo" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_wrapExternalStruct_join :
  WpMethodCall unittest "wrapExternalStruct" "join" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_wrapExternalStruct'ptr_join :
  WpMethodCall unittest "wrapExternalStruct'ptr" "join" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_R'ptr_recurMethod :
  WpMethodCall unittest "R'ptr" "recurMethod" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Other_recurEmbeddedMethod :
  WpMethodCall unittest "Other" "recurEmbeddedMethod" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Other'ptr_recurEmbeddedMethod :
  WpMethodCall unittest "Other'ptr" "recurEmbeddedMethod" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RecursiveEmbedded'ptr_recurEmbeddedMethod :
  WpMethodCall unittest "RecursiveEmbedded'ptr" "recurEmbeddedMethod" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_sliceOfThings_getThingRef :
  WpMethodCall unittest "sliceOfThings" "getThingRef" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_sliceOfThings'ptr_getThingRef :
  WpMethodCall unittest "sliceOfThings'ptr" "getThingRef" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Point_Add :
  WpMethodCall unittest "Point" "Add" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Point_GetField :
  WpMethodCall unittest "Point" "GetField" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Point'ptr_Add :
  WpMethodCall unittest "Point'ptr" "Add" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Point'ptr_GetField :
  WpMethodCall unittest "Point'ptr" "GetField" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S_readBVal :
  WpMethodCall unittest "S" "readBVal" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_negateC :
  WpMethodCall unittest "S'ptr" "negateC" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_readA :
  WpMethodCall unittest "S'ptr" "readA" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_readB :
  WpMethodCall unittest "S'ptr" "readB" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_readBVal :
  WpMethodCall unittest "S'ptr" "readBVal" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_refC :
  WpMethodCall unittest "S'ptr" "refC" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_writeB :
  WpMethodCall unittest "S'ptr" "writeB" _ (is_pkg_defined unittest) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End unittest.
