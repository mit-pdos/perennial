(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.disk_prelude.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.generatedproof.github_com.goose_lang.primitive.disk.
Require Export New.generatedproof.sync.
Require Export New.golang.theory.

Require Export New.code.github_com.goose_lang.goose.testdata.examples.logging2.

Set Default Proof Using "Type".

Module logging2.

(* type logging2.Log *)
Module Log.
Section def.
Context `{ffi_syntax}.

Record t := mk {
  logLock' : loc;
  memLock' : loc;
  logSz' : w64;
  memLog' : loc;
  memLen' : loc;
  memTxnNxt' : loc;
  logTxnNxt' : loc;
}.
End def.
End Log.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent logging2.Log.
#[local] Typeclasses Transparent logging2.Log.

Global Instance Log_wf : struct.Wf logging2.Log.
Proof. apply _. Qed.

Global Instance settable_Log : Settable Log.t :=
  settable! Log.mk < Log.logLock'; Log.memLock'; Log.logSz'; Log.memLog'; Log.memLen'; Log.memTxnNxt'; Log.logTxnNxt' >.
Global Instance into_val_Log : IntoVal Log.t :=
  {| to_val_def v :=
    struct.val_aux logging2.Log [
    "logLock" ::= #(Log.logLock' v);
    "memLock" ::= #(Log.memLock' v);
    "logSz" ::= #(Log.logSz' v);
    "memLog" ::= #(Log.memLog' v);
    "memLen" ::= #(Log.memLen' v);
    "memTxnNxt" ::= #(Log.memTxnNxt' v);
    "logTxnNxt" ::= #(Log.logTxnNxt' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Log : IntoValTyped Log.t logging2.Log :=
{|
  default_val := Log.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Log_logLock : IntoValStructField "logLock" logging2.Log Log.logLock'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Log_memLock : IntoValStructField "memLock" logging2.Log Log.memLock'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Log_logSz : IntoValStructField "logSz" logging2.Log Log.logSz'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Log_memLog : IntoValStructField "memLog" logging2.Log Log.memLog'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Log_memLen : IntoValStructField "memLen" logging2.Log Log.memLen'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Log_memTxnNxt : IntoValStructField "memTxnNxt" logging2.Log Log.memTxnNxt'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Log_logTxnNxt : IntoValStructField "logTxnNxt" logging2.Log Log.logTxnNxt'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.


Global Instance Log_struct_fields_split dq l (v : Log.t) :
  StructFieldsSplit dq l v (
    "HlogLock" ∷ l ↦s[logging2.Log :: "logLock"]{dq} v.(Log.logLock') ∗
    "HmemLock" ∷ l ↦s[logging2.Log :: "memLock"]{dq} v.(Log.memLock') ∗
    "HlogSz" ∷ l ↦s[logging2.Log :: "logSz"]{dq} v.(Log.logSz') ∗
    "HmemLog" ∷ l ↦s[logging2.Log :: "memLog"]{dq} v.(Log.memLog') ∗
    "HmemLen" ∷ l ↦s[logging2.Log :: "memLen"]{dq} v.(Log.memLen') ∗
    "HmemTxnNxt" ∷ l ↦s[logging2.Log :: "memTxnNxt"]{dq} v.(Log.memTxnNxt') ∗
    "HlogTxnNxt" ∷ l ↦s[logging2.Log :: "logTxnNxt"]{dq} v.(Log.logTxnNxt')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Log.logLock' v)) (logging2.Log) "logLock"%go.
  simpl_one_flatten_struct (# (Log.memLock' v)) (logging2.Log) "memLock"%go.
  simpl_one_flatten_struct (# (Log.logSz' v)) (logging2.Log) "logSz"%go.
  simpl_one_flatten_struct (# (Log.memLog' v)) (logging2.Log) "memLog"%go.
  simpl_one_flatten_struct (# (Log.memLen' v)) (logging2.Log) "memLen"%go.
  simpl_one_flatten_struct (# (Log.memTxnNxt' v)) (logging2.Log) "memTxnNxt"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type logging2.Txn *)
Module Txn.
Section def.
Context `{ffi_syntax}.

Record t := mk {
  log' : loc;
  blks' : loc;
}.
End def.
End Txn.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent logging2.Txn.
#[local] Typeclasses Transparent logging2.Txn.

Global Instance Txn_wf : struct.Wf logging2.Txn.
Proof. apply _. Qed.

Global Instance settable_Txn : Settable Txn.t :=
  settable! Txn.mk < Txn.log'; Txn.blks' >.
Global Instance into_val_Txn : IntoVal Txn.t :=
  {| to_val_def v :=
    struct.val_aux logging2.Txn [
    "log" ::= #(Txn.log' v);
    "blks" ::= #(Txn.blks' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Txn : IntoValTyped Txn.t logging2.Txn :=
{|
  default_val := Txn.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Txn_log : IntoValStructField "log" logging2.Txn Txn.log'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Txn_blks : IntoValStructField "blks" logging2.Txn Txn.blks'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.


Global Instance Txn_struct_fields_split dq l (v : Txn.t) :
  StructFieldsSplit dq l v (
    "Hlog" ∷ l ↦s[logging2.Txn :: "log"]{dq} v.(Txn.log') ∗
    "Hblks" ∷ l ↦s[logging2.Txn :: "blks"]{dq} v.(Txn.blks')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Txn.log' v)) (logging2.Txn) "log"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{!heapGS Σ}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_logging2 : IsPkgDefinedPure logging2 :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single logging2 ∧
      is_pkg_defined_pure code.github_com.goose_lang.primitive.primitive ∧
      is_pkg_defined_pure code.github_com.goose_lang.primitive.disk.disk ∧
      is_pkg_defined_pure code.sync.sync;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_logging2 : IsPkgDefined logging2 :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single logging2 ∗
       is_pkg_defined code.github_com.goose_lang.primitive.primitive ∗
       is_pkg_defined code.github_com.goose_lang.primitive.disk.disk ∗
       is_pkg_defined code.sync.sync)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_Init :
  WpFuncCall logging2.Init _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Begin :
  WpFuncCall logging2.Begin _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Log_Append :
  WpMethodCall logging2.Log.id "Append" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_Logger :
  WpMethodCall logging2.Log.id "Logger" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_Read :
  WpMethodCall logging2.Log.id "Read" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_diskAppend :
  WpMethodCall logging2.Log.id "diskAppend" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_diskAppendWait :
  WpMethodCall logging2.Log.id "diskAppendWait" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_memAppend :
  WpMethodCall logging2.Log.id "memAppend" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_memWrite :
  WpMethodCall logging2.Log.id "memWrite" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_readBlocks :
  WpMethodCall logging2.Log.id "readBlocks" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_readHdr :
  WpMethodCall logging2.Log.id "readHdr" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_readLogTxnNxt :
  WpMethodCall logging2.Log.id "readLogTxnNxt" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_writeBlocks :
  WpMethodCall logging2.Log.id "writeBlocks" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_writeHdr :
  WpMethodCall logging2.Log.id "writeHdr" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_Append :
  WpMethodCall (ptrT.id logging2.Log.id) "Append" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_Logger :
  WpMethodCall (ptrT.id logging2.Log.id) "Logger" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_Read :
  WpMethodCall (ptrT.id logging2.Log.id) "Read" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_diskAppend :
  WpMethodCall (ptrT.id logging2.Log.id) "diskAppend" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_diskAppendWait :
  WpMethodCall (ptrT.id logging2.Log.id) "diskAppendWait" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_memAppend :
  WpMethodCall (ptrT.id logging2.Log.id) "memAppend" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_memWrite :
  WpMethodCall (ptrT.id logging2.Log.id) "memWrite" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_readBlocks :
  WpMethodCall (ptrT.id logging2.Log.id) "readBlocks" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_readHdr :
  WpMethodCall (ptrT.id logging2.Log.id) "readHdr" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_readLogTxnNxt :
  WpMethodCall (ptrT.id logging2.Log.id) "readLogTxnNxt" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_writeBlocks :
  WpMethodCall (ptrT.id logging2.Log.id) "writeBlocks" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_writeHdr :
  WpMethodCall (ptrT.id logging2.Log.id) "writeHdr" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Txn_Commit :
  WpMethodCall logging2.Txn.id "Commit" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Txn_Read :
  WpMethodCall logging2.Txn.id "Read" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Txn_Write :
  WpMethodCall logging2.Txn.id "Write" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Txn'ptr_Commit :
  WpMethodCall (ptrT.id logging2.Txn.id) "Commit" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Txn'ptr_Read :
  WpMethodCall (ptrT.id logging2.Txn.id) "Read" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Txn'ptr_Write :
  WpMethodCall (ptrT.id logging2.Txn.id) "Write" _ (is_pkg_defined logging2) :=
  ltac:(solve_wp_method_call).

End names.
End logging2.
