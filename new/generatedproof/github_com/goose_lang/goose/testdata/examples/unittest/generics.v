(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.github_com.goose_lang.goose.testdata.examples.unittest.generics.helpers.
Require Export New.golang.theory.

Require Export New.code.github_com.goose_lang.goose.testdata.examples.unittest.generics.

Set Default Proof Using "Type".

Module generics.

(* type generics.Box *)
Module Box.
Section def.
Context `{ffi_syntax}.

Record t `{!IntoVal T'} `{!IntoValTyped T' T} := mk {
  Value' : T';
}.
End def.
End Box.

Arguments Box.mk {_} { T' } {_ T _} .
Arguments Box.t {_} T' {_ T _} .

Section instances.
Context `{ffi_syntax}.
Context`{!IntoVal T'} `{!IntoValTyped T' T} .
#[local] Transparent generics.Box.
#[local] Typeclasses Transparent generics.Box.

Global Instance Box_wf : struct.Wf generics.Box.
Proof. apply _. Qed.

Global Instance settable_Box : Settable Box.t :=
  settable! (Box.mk (T:=T)) < Box.Value' >.
Global Instance into_val_Box : IntoVal Box.t :=
  {| to_val_def v :=
    struct.val_aux generics.Box [
    "Value" ::= #(Box.Value' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Box : IntoValTyped Box.t generics.Box :=
{|
  default_val := Box.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Box_Value : IntoValStructField "Value" generics.Box Box.Value'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.


Global Instance Box_struct_fields_split `{!BoundedTypeSize T} dq l (v : Box.t) :
  StructFieldsSplit dq l v (
    "HValue" ∷ l ↦s[generics.Box :: "Value"]{dq} v.(Box.Value')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

(* type generics.Container *)
Module Container.
Section def.
Context `{ffi_syntax}.

Record t `{!IntoVal T'} `{!IntoValTyped T' T} := mk {
  X' : T';
  Y' : loc;
  Z' : loc;
  W' : w64;
}.
End def.
End Container.

Arguments Container.mk {_} { T' } {_ T _} .
Arguments Container.t {_} T' {_ T _} .

Section instances.
Context `{ffi_syntax}.
Context`{!IntoVal T'} `{!IntoValTyped T' T} .
#[local] Transparent generics.Container.
#[local] Typeclasses Transparent generics.Container.

Global Instance Container_wf : struct.Wf generics.Container.
Proof. apply _. Qed.

Global Instance settable_Container : Settable Container.t :=
  settable! (Container.mk (T:=T)) < Container.X'; Container.Y'; Container.Z'; Container.W' >.
Global Instance into_val_Container : IntoVal Container.t :=
  {| to_val_def v :=
    struct.val_aux generics.Container [
    "X" ::= #(Container.X' v);
    "Y" ::= #(Container.Y' v);
    "Z" ::= #(Container.Z' v);
    "W" ::= #(Container.W' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Container : IntoValTyped Container.t generics.Container :=
{|
  default_val := Container.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Container_X : IntoValStructField "X" generics.Container Container.X'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Container_Y : IntoValStructField "Y" generics.Container Container.Y'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Container_Z : IntoValStructField "Z" generics.Container Container.Z'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Container_W : IntoValStructField "W" generics.Container Container.W'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.


Global Instance Container_struct_fields_split `{!BoundedTypeSize T} dq l (v : Container.t) :
  StructFieldsSplit dq l v (
    "HX" ∷ l ↦s[generics.Container :: "X"]{dq} v.(Container.X') ∗
    "HY" ∷ l ↦s[generics.Container :: "Y"]{dq} v.(Container.Y') ∗
    "HZ" ∷ l ↦s[generics.Container :: "Z"]{dq} v.(Container.Z') ∗
    "HW" ∷ l ↦s[generics.Container :: "W"]{dq} v.(Container.W')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Container.X' v)) (generics.Container) "X"%go.
  simpl_one_flatten_struct (# (Container.Y' v)) (generics.Container) "Y"%go.
  simpl_one_flatten_struct (# (Container.Z' v)) (generics.Container) "Z"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type generics.UseContainer *)
Module UseContainer.
Section def.
Context `{ffi_syntax}.

Record t := mk {
  X' : (Container.t w64);
}.
End def.
End UseContainer.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent generics.UseContainer.
#[local] Typeclasses Transparent generics.UseContainer.

Global Instance UseContainer_wf : struct.Wf generics.UseContainer.
Proof. apply _. Qed.

Global Instance settable_UseContainer : Settable UseContainer.t :=
  settable! UseContainer.mk < UseContainer.X' >.
Global Instance into_val_UseContainer : IntoVal UseContainer.t :=
  {| to_val_def v :=
    struct.val_aux generics.UseContainer [
    "X" ::= #(UseContainer.X' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_UseContainer : IntoValTyped UseContainer.t generics.UseContainer :=
{|
  default_val := UseContainer.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_UseContainer_X : IntoValStructField "X" generics.UseContainer UseContainer.X'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.


Global Instance UseContainer_struct_fields_split dq l (v : UseContainer.t) :
  StructFieldsSplit dq l v (
    "HX" ∷ l ↦s[generics.UseContainer :: "X"]{dq} v.(UseContainer.X')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

(* type generics.OnlyIndirect *)
Module OnlyIndirect.
Section def.
Context `{ffi_syntax}.

Record t `{!IntoVal T'} `{!IntoValTyped T' T} := mk {
  X' : slice.t;
  Y' : loc;
}.
End def.
End OnlyIndirect.

Arguments OnlyIndirect.mk {_} { T' } {_ T _} .
Arguments OnlyIndirect.t {_} T' {_ T _} .

Section instances.
Context `{ffi_syntax}.
Context`{!IntoVal T'} `{!IntoValTyped T' T} .
#[local] Transparent generics.OnlyIndirect.
#[local] Typeclasses Transparent generics.OnlyIndirect.

Global Instance OnlyIndirect_wf : struct.Wf generics.OnlyIndirect.
Proof. apply _. Qed.

Global Instance settable_OnlyIndirect : Settable OnlyIndirect.t :=
  settable! (OnlyIndirect.mk (T:=T)) < OnlyIndirect.X'; OnlyIndirect.Y' >.
Global Instance into_val_OnlyIndirect : IntoVal OnlyIndirect.t :=
  {| to_val_def v :=
    struct.val_aux generics.OnlyIndirect [
    "X" ::= #(OnlyIndirect.X' v);
    "Y" ::= #(OnlyIndirect.Y' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_OnlyIndirect : IntoValTyped OnlyIndirect.t generics.OnlyIndirect :=
{|
  default_val := OnlyIndirect.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_OnlyIndirect_X : IntoValStructField "X" generics.OnlyIndirect OnlyIndirect.X'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_OnlyIndirect_Y : IntoValStructField "Y" generics.OnlyIndirect OnlyIndirect.Y'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.


Global Instance OnlyIndirect_struct_fields_split `{!BoundedTypeSize T} dq l (v : OnlyIndirect.t) :
  StructFieldsSplit dq l v (
    "HX" ∷ l ↦s[generics.OnlyIndirect :: "X"]{dq} v.(OnlyIndirect.X') ∗
    "HY" ∷ l ↦s[generics.OnlyIndirect :: "Y"]{dq} v.(OnlyIndirect.Y')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (OnlyIndirect.X' v)) (generics.OnlyIndirect) "X"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type generics.MultiParam *)
Module MultiParam.
Section def.
Context `{ffi_syntax}.

Record t `{!IntoVal A'} `{!IntoValTyped A' A} `{!IntoVal B'} `{!IntoValTyped B' B} := mk {
  Y' : B';
  X' : A';
}.
End def.
End MultiParam.

Arguments MultiParam.mk {_} { A' } {_ A _} { B' } {_ B _} .
Arguments MultiParam.t {_} A' {_ A _} B' {_ B _} .

Section instances.
Context `{ffi_syntax}.
Context`{!IntoVal A'} `{!IntoValTyped A' A} `{!IntoVal B'} `{!IntoValTyped B' B} .
#[local] Transparent generics.MultiParam.
#[local] Typeclasses Transparent generics.MultiParam.

Global Instance MultiParam_wf : struct.Wf generics.MultiParam.
Proof. apply _. Qed.

Global Instance settable_MultiParam : Settable MultiParam.t :=
  settable! (MultiParam.mk (A:=A) (B:=B)) < MultiParam.Y'; MultiParam.X' >.
Global Instance into_val_MultiParam : IntoVal MultiParam.t :=
  {| to_val_def v :=
    struct.val_aux generics.MultiParam [
    "Y" ::= #(MultiParam.Y' v);
    "X" ::= #(MultiParam.X' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_MultiParam : IntoValTyped MultiParam.t generics.MultiParam :=
{|
  default_val := MultiParam.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_MultiParam_Y : IntoValStructField "Y" generics.MultiParam MultiParam.Y'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_MultiParam_X : IntoValStructField "X" generics.MultiParam MultiParam.X'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.


Global Instance MultiParam_struct_fields_split `{!BoundedTypeSize A} `{!BoundedTypeSize B} dq l (v : MultiParam.t) :
  StructFieldsSplit dq l v (
    "HY" ∷ l ↦s[generics.MultiParam :: "Y"]{dq} v.(MultiParam.Y') ∗
    "HX" ∷ l ↦s[generics.MultiParam :: "X"]{dq} v.(MultiParam.X')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (MultiParam.Y' v)) (generics.MultiParam) "Y"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_generics : IsPkgDefinedPure generics :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single generics ∧
      is_pkg_defined_pure code.github_com.goose_lang.goose.testdata.examples.unittest.generics.helpers.helpers;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_generics : IsPkgDefined generics :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single generics ∗
       is_pkg_defined code.github_com.goose_lang.goose.testdata.examples.unittest.generics.helpers.helpers)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_UnderlyingSlice :
  WpFuncCall generics.UnderlyingSlice _ (is_pkg_defined generics) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Clone :
  WpFuncCall generics.Clone _ (is_pkg_defined generics) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_BoxGet :
  WpFuncCall generics.BoxGet _ (is_pkg_defined generics) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_BoxGet2 :
  WpFuncCall generics.BoxGet2 _ (is_pkg_defined generics) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_makeGenericBox :
  WpFuncCall generics.makeGenericBox _ (is_pkg_defined generics) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_makeBox :
  WpFuncCall generics.makeBox _ (is_pkg_defined generics) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_useBoxGet :
  WpFuncCall generics.useBoxGet _ (is_pkg_defined generics) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_useContainer :
  WpFuncCall generics.useContainer _ (is_pkg_defined generics) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_useMultiParam :
  WpFuncCall generics.useMultiParam _ (is_pkg_defined generics) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_swapMultiParam :
  WpFuncCall generics.swapMultiParam _ (is_pkg_defined generics) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_multiParamFunc :
  WpFuncCall generics.multiParamFunc _ (is_pkg_defined generics) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_useMultiParamFunc :
  WpFuncCall generics.useMultiParamFunc _ (is_pkg_defined generics) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_useAnyPointer :
  WpFuncCall generics.useAnyPointer _ (is_pkg_defined generics) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Box_Get :
  WpMethodCall generics.Box.id "Get" _ (is_pkg_defined generics) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Box'ptr_Get :
  WpMethodCall (ptrT.id generics.Box.id) "Get" _ (is_pkg_defined generics) :=
  ltac:(solve_wp_method_call).

End names.
End generics.
