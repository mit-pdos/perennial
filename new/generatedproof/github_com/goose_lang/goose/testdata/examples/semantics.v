(* autogenerated by goose proofgen (types); do not modify *)
Require Export New.proof.disk_prelude.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.primitive.disk.
Require Export New.code.github_com.goose_lang.goose.testdata.examples.semantics.
Require Export New.golang.theory.

Module semantics.
Axiom falso : False.
Module unit.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End unit.

Section instances.
Context `{ffi_syntax}.
Global Instance into_val_unit `{ffi_syntax} : IntoVal unit.t.
Admitted.

Global Instance into_val_typed_unit `{ffi_syntax} : IntoValTyped unit.t semantics.unit :=
{|
  default_val := unit.mk;
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.

Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_unit `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ}:
  PureWp True
    (struct.make semantics.unit (alist_val [
    ]))%V
    #(unit.mk).
Admitted.


End instances.

Module AdderType.
Section def.
Context `{ffi_syntax}.
Definition t := func.t.
End def.
End AdderType.

Module MultipleArgsType.
Section def.
Context `{ffi_syntax}.
Definition t := func.t.
End def.
End MultipleArgsType.
Module Enc.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  p' : slice.t;
}.
End def.
End Enc.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Enc `{ffi_syntax}: Settable _ :=
  settable! Enc.mk < Enc.p' >.
Global Instance into_val_Enc `{ffi_syntax} : IntoVal Enc.t.
Admitted.

Global Instance into_val_typed_Enc `{ffi_syntax} : IntoValTyped Enc.t semantics.Enc :=
{|
  default_val := Enc.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Enc_p `{ffi_syntax} : IntoValStructField "p" semantics.Enc Enc.p'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Enc `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} p':
  PureWp True
    (struct.make semantics.Enc (alist_val [
      "p" ::= #p'
    ]))%V
    #(Enc.mk p').
Admitted.


Global Instance Enc_struct_fields_split dq l (v : Enc.t) :
  StructFieldsSplit dq l v (
    "Hp" ∷ l ↦s[semantics.Enc :: "p"]{dq} v.(Enc.p')
  ).
Admitted.

End instances.
Module Dec.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  p' : slice.t;
}.
End def.
End Dec.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Dec `{ffi_syntax}: Settable _ :=
  settable! Dec.mk < Dec.p' >.
Global Instance into_val_Dec `{ffi_syntax} : IntoVal Dec.t.
Admitted.

Global Instance into_val_typed_Dec `{ffi_syntax} : IntoValTyped Dec.t semantics.Dec :=
{|
  default_val := Dec.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Dec_p `{ffi_syntax} : IntoValStructField "p" semantics.Dec Dec.p'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Dec `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} p':
  PureWp True
    (struct.make semantics.Dec (alist_val [
      "p" ::= #p'
    ]))%V
    #(Dec.mk p').
Admitted.


Global Instance Dec_struct_fields_split dq l (v : Dec.t) :
  StructFieldsSplit dq l v (
    "Hp" ∷ l ↦s[semantics.Dec :: "p"]{dq} v.(Dec.p')
  ).
Admitted.

End instances.
Module Editor.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  s' : slice.t;
  next_val' : w64;
}.
End def.
End Editor.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Editor `{ffi_syntax}: Settable _ :=
  settable! Editor.mk < Editor.s'; Editor.next_val' >.
Global Instance into_val_Editor `{ffi_syntax} : IntoVal Editor.t.
Admitted.

Global Instance into_val_typed_Editor `{ffi_syntax} : IntoValTyped Editor.t semantics.Editor :=
{|
  default_val := Editor.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Editor_s `{ffi_syntax} : IntoValStructField "s" semantics.Editor Editor.s'.
Admitted.

Global Instance into_val_struct_field_Editor_next_val `{ffi_syntax} : IntoValStructField "next_val" semantics.Editor Editor.next_val'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Editor `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} s' next_val':
  PureWp True
    (struct.make semantics.Editor (alist_val [
      "s" ::= #s';
      "next_val" ::= #next_val'
    ]))%V
    #(Editor.mk s' next_val').
Admitted.


Global Instance Editor_struct_fields_split dq l (v : Editor.t) :
  StructFieldsSplit dq l v (
    "Hs" ∷ l ↦s[semantics.Editor :: "s"]{dq} v.(Editor.s') ∗
    "Hnext_val" ∷ l ↦s[semantics.Editor :: "next_val"]{dq} v.(Editor.next_val')
  ).
Admitted.

End instances.
Module Pair.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  x' : w64;
  y' : w64;
}.
End def.
End Pair.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Pair `{ffi_syntax}: Settable _ :=
  settable! Pair.mk < Pair.x'; Pair.y' >.
Global Instance into_val_Pair `{ffi_syntax} : IntoVal Pair.t.
Admitted.

Global Instance into_val_typed_Pair `{ffi_syntax} : IntoValTyped Pair.t semantics.Pair :=
{|
  default_val := Pair.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Pair_x `{ffi_syntax} : IntoValStructField "x" semantics.Pair Pair.x'.
Admitted.

Global Instance into_val_struct_field_Pair_y `{ffi_syntax} : IntoValStructField "y" semantics.Pair Pair.y'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Pair `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} x' y':
  PureWp True
    (struct.make semantics.Pair (alist_val [
      "x" ::= #x';
      "y" ::= #y'
    ]))%V
    #(Pair.mk x' y').
Admitted.


Global Instance Pair_struct_fields_split dq l (v : Pair.t) :
  StructFieldsSplit dq l v (
    "Hx" ∷ l ↦s[semantics.Pair :: "x"]{dq} v.(Pair.x') ∗
    "Hy" ∷ l ↦s[semantics.Pair :: "y"]{dq} v.(Pair.y')
  ).
Admitted.

End instances.

Module Uint32.
Section def.
Context `{ffi_syntax}.
Definition t := w32.
End def.
End Uint32.

Module geometryInterface.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End geometryInterface.
Module SquareStruct.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Side' : w64;
}.
End def.
End SquareStruct.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_SquareStruct `{ffi_syntax}: Settable _ :=
  settable! SquareStruct.mk < SquareStruct.Side' >.
Global Instance into_val_SquareStruct `{ffi_syntax} : IntoVal SquareStruct.t.
Admitted.

Global Instance into_val_typed_SquareStruct `{ffi_syntax} : IntoValTyped SquareStruct.t semantics.SquareStruct :=
{|
  default_val := SquareStruct.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_SquareStruct_Side `{ffi_syntax} : IntoValStructField "Side" semantics.SquareStruct SquareStruct.Side'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_SquareStruct `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Side':
  PureWp True
    (struct.make semantics.SquareStruct (alist_val [
      "Side" ::= #Side'
    ]))%V
    #(SquareStruct.mk Side').
Admitted.


Global Instance SquareStruct_struct_fields_split dq l (v : SquareStruct.t) :
  StructFieldsSplit dq l v (
    "HSide" ∷ l ↦s[semantics.SquareStruct :: "Side"]{dq} v.(SquareStruct.Side')
  ).
Admitted.

End instances.
Module LoopStruct.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  loopNext' : loc;
}.
End def.
End LoopStruct.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_LoopStruct `{ffi_syntax}: Settable _ :=
  settable! LoopStruct.mk < LoopStruct.loopNext' >.
Global Instance into_val_LoopStruct `{ffi_syntax} : IntoVal LoopStruct.t.
Admitted.

Global Instance into_val_typed_LoopStruct `{ffi_syntax} : IntoValTyped LoopStruct.t semantics.LoopStruct :=
{|
  default_val := LoopStruct.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_LoopStruct_loopNext `{ffi_syntax} : IntoValStructField "loopNext" semantics.LoopStruct LoopStruct.loopNext'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_LoopStruct `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} loopNext':
  PureWp True
    (struct.make semantics.LoopStruct (alist_val [
      "loopNext" ::= #loopNext'
    ]))%V
    #(LoopStruct.mk loopNext').
Admitted.


Global Instance LoopStruct_struct_fields_split dq l (v : LoopStruct.t) :
  StructFieldsSplit dq l v (
    "HloopNext" ∷ l ↦s[semantics.LoopStruct :: "loopNext"]{dq} v.(LoopStruct.loopNext')
  ).
Admitted.

End instances.
Module BoolTest.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  t' : bool;
  f' : bool;
  tc' : w64;
  fc' : w64;
}.
End def.
End BoolTest.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_BoolTest `{ffi_syntax}: Settable _ :=
  settable! BoolTest.mk < BoolTest.t'; BoolTest.f'; BoolTest.tc'; BoolTest.fc' >.
Global Instance into_val_BoolTest `{ffi_syntax} : IntoVal BoolTest.t.
Admitted.

Global Instance into_val_typed_BoolTest `{ffi_syntax} : IntoValTyped BoolTest.t semantics.BoolTest :=
{|
  default_val := BoolTest.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_BoolTest_t `{ffi_syntax} : IntoValStructField "t" semantics.BoolTest BoolTest.t'.
Admitted.

Global Instance into_val_struct_field_BoolTest_f `{ffi_syntax} : IntoValStructField "f" semantics.BoolTest BoolTest.f'.
Admitted.

Global Instance into_val_struct_field_BoolTest_tc `{ffi_syntax} : IntoValStructField "tc" semantics.BoolTest BoolTest.tc'.
Admitted.

Global Instance into_val_struct_field_BoolTest_fc `{ffi_syntax} : IntoValStructField "fc" semantics.BoolTest BoolTest.fc'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_BoolTest `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} t' f' tc' fc':
  PureWp True
    (struct.make semantics.BoolTest (alist_val [
      "t" ::= #t';
      "f" ::= #f';
      "tc" ::= #tc';
      "fc" ::= #fc'
    ]))%V
    #(BoolTest.mk t' f' tc' fc').
Admitted.


Global Instance BoolTest_struct_fields_split dq l (v : BoolTest.t) :
  StructFieldsSplit dq l v (
    "Ht" ∷ l ↦s[semantics.BoolTest :: "t"]{dq} v.(BoolTest.t') ∗
    "Hf" ∷ l ↦s[semantics.BoolTest :: "f"]{dq} v.(BoolTest.f') ∗
    "Htc" ∷ l ↦s[semantics.BoolTest :: "tc"]{dq} v.(BoolTest.tc') ∗
    "Hfc" ∷ l ↦s[semantics.BoolTest :: "fc"]{dq} v.(BoolTest.fc')
  ).
Admitted.

End instances.
Module ArrayEditor.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  s' : slice.t;
  next_val' : w64;
}.
End def.
End ArrayEditor.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_ArrayEditor `{ffi_syntax}: Settable _ :=
  settable! ArrayEditor.mk < ArrayEditor.s'; ArrayEditor.next_val' >.
Global Instance into_val_ArrayEditor `{ffi_syntax} : IntoVal ArrayEditor.t.
Admitted.

Global Instance into_val_typed_ArrayEditor `{ffi_syntax} : IntoValTyped ArrayEditor.t semantics.ArrayEditor :=
{|
  default_val := ArrayEditor.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_ArrayEditor_s `{ffi_syntax} : IntoValStructField "s" semantics.ArrayEditor ArrayEditor.s'.
Admitted.

Global Instance into_val_struct_field_ArrayEditor_next_val `{ffi_syntax} : IntoValStructField "next_val" semantics.ArrayEditor ArrayEditor.next_val'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_ArrayEditor `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} s' next_val':
  PureWp True
    (struct.make semantics.ArrayEditor (alist_val [
      "s" ::= #s';
      "next_val" ::= #next_val'
    ]))%V
    #(ArrayEditor.mk s' next_val').
Admitted.


Global Instance ArrayEditor_struct_fields_split dq l (v : ArrayEditor.t) :
  StructFieldsSplit dq l v (
    "Hs" ∷ l ↦s[semantics.ArrayEditor :: "s"]{dq} v.(ArrayEditor.s') ∗
    "Hnext_val" ∷ l ↦s[semantics.ArrayEditor :: "next_val"]{dq} v.(ArrayEditor.next_val')
  ).
Admitted.

End instances.
Module Bar.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  a' : w64;
  b' : w64;
}.
End def.
End Bar.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Bar `{ffi_syntax}: Settable _ :=
  settable! Bar.mk < Bar.a'; Bar.b' >.
Global Instance into_val_Bar `{ffi_syntax} : IntoVal Bar.t.
Admitted.

Global Instance into_val_typed_Bar `{ffi_syntax} : IntoValTyped Bar.t semantics.Bar :=
{|
  default_val := Bar.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Bar_a `{ffi_syntax} : IntoValStructField "a" semantics.Bar Bar.a'.
Admitted.

Global Instance into_val_struct_field_Bar_b `{ffi_syntax} : IntoValStructField "b" semantics.Bar Bar.b'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Bar `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} a' b':
  PureWp True
    (struct.make semantics.Bar (alist_val [
      "a" ::= #a';
      "b" ::= #b'
    ]))%V
    #(Bar.mk a' b').
Admitted.


Global Instance Bar_struct_fields_split dq l (v : Bar.t) :
  StructFieldsSplit dq l v (
    "Ha" ∷ l ↦s[semantics.Bar :: "a"]{dq} v.(Bar.a') ∗
    "Hb" ∷ l ↦s[semantics.Bar :: "b"]{dq} v.(Bar.b')
  ).
Admitted.

End instances.
Module Foo.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  bar' : Bar.t;
}.
End def.
End Foo.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Foo `{ffi_syntax}: Settable _ :=
  settable! Foo.mk < Foo.bar' >.
Global Instance into_val_Foo `{ffi_syntax} : IntoVal Foo.t.
Admitted.

Global Instance into_val_typed_Foo `{ffi_syntax} : IntoValTyped Foo.t semantics.Foo :=
{|
  default_val := Foo.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Foo_bar `{ffi_syntax} : IntoValStructField "bar" semantics.Foo Foo.bar'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Foo `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} bar':
  PureWp True
    (struct.make semantics.Foo (alist_val [
      "bar" ::= #bar'
    ]))%V
    #(Foo.mk bar').
Admitted.


Global Instance Foo_struct_fields_split dq l (v : Foo.t) :
  StructFieldsSplit dq l v (
    "Hbar" ∷ l ↦s[semantics.Foo :: "bar"]{dq} v.(Foo.bar')
  ).
Admitted.

End instances.
Module TwoInts.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  x' : w64;
  y' : w64;
}.
End def.
End TwoInts.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_TwoInts `{ffi_syntax}: Settable _ :=
  settable! TwoInts.mk < TwoInts.x'; TwoInts.y' >.
Global Instance into_val_TwoInts `{ffi_syntax} : IntoVal TwoInts.t.
Admitted.

Global Instance into_val_typed_TwoInts `{ffi_syntax} : IntoValTyped TwoInts.t semantics.TwoInts :=
{|
  default_val := TwoInts.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_TwoInts_x `{ffi_syntax} : IntoValStructField "x" semantics.TwoInts TwoInts.x'.
Admitted.

Global Instance into_val_struct_field_TwoInts_y `{ffi_syntax} : IntoValStructField "y" semantics.TwoInts TwoInts.y'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_TwoInts `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} x' y':
  PureWp True
    (struct.make semantics.TwoInts (alist_val [
      "x" ::= #x';
      "y" ::= #y'
    ]))%V
    #(TwoInts.mk x' y').
Admitted.


Global Instance TwoInts_struct_fields_split dq l (v : TwoInts.t) :
  StructFieldsSplit dq l v (
    "Hx" ∷ l ↦s[semantics.TwoInts :: "x"]{dq} v.(TwoInts.x') ∗
    "Hy" ∷ l ↦s[semantics.TwoInts :: "y"]{dq} v.(TwoInts.y')
  ).
Admitted.

End instances.
Module S.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  a' : w64;
  b' : TwoInts.t;
  c' : bool;
}.
End def.
End S.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_S `{ffi_syntax}: Settable _ :=
  settable! S.mk < S.a'; S.b'; S.c' >.
Global Instance into_val_S `{ffi_syntax} : IntoVal S.t.
Admitted.

Global Instance into_val_typed_S `{ffi_syntax} : IntoValTyped S.t semantics.S :=
{|
  default_val := S.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_S_a `{ffi_syntax} : IntoValStructField "a" semantics.S S.a'.
Admitted.

Global Instance into_val_struct_field_S_b `{ffi_syntax} : IntoValStructField "b" semantics.S S.b'.
Admitted.

Global Instance into_val_struct_field_S_c `{ffi_syntax} : IntoValStructField "c" semantics.S S.c'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_S `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} a' b' c':
  PureWp True
    (struct.make semantics.S (alist_val [
      "a" ::= #a';
      "b" ::= #b';
      "c" ::= #c'
    ]))%V
    #(S.mk a' b' c').
Admitted.


Global Instance S_struct_fields_split dq l (v : S.t) :
  StructFieldsSplit dq l v (
    "Ha" ∷ l ↦s[semantics.S :: "a"]{dq} v.(S.a') ∗
    "Hb" ∷ l ↦s[semantics.S :: "b"]{dq} v.(S.b') ∗
    "Hc" ∷ l ↦s[semantics.S :: "c"]{dq} v.(S.c')
  ).
Admitted.

End instances.
Module StructWrap.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  i' : w64;
}.
End def.
End StructWrap.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_StructWrap `{ffi_syntax}: Settable _ :=
  settable! StructWrap.mk < StructWrap.i' >.
Global Instance into_val_StructWrap `{ffi_syntax} : IntoVal StructWrap.t.
Admitted.

Global Instance into_val_typed_StructWrap `{ffi_syntax} : IntoValTyped StructWrap.t semantics.StructWrap :=
{|
  default_val := StructWrap.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_StructWrap_i `{ffi_syntax} : IntoValStructField "i" semantics.StructWrap StructWrap.i'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_StructWrap `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} i':
  PureWp True
    (struct.make semantics.StructWrap (alist_val [
      "i" ::= #i'
    ]))%V
    #(StructWrap.mk i').
Admitted.


Global Instance StructWrap_struct_fields_split dq l (v : StructWrap.t) :
  StructFieldsSplit dq l v (
    "Hi" ∷ l ↦s[semantics.StructWrap :: "i"]{dq} v.(StructWrap.i')
  ).
Admitted.

End instances.
Module StructWithFunc.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  fn' : func.t;
}.
End def.
End StructWithFunc.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_StructWithFunc `{ffi_syntax}: Settable _ :=
  settable! StructWithFunc.mk < StructWithFunc.fn' >.
Global Instance into_val_StructWithFunc `{ffi_syntax} : IntoVal StructWithFunc.t.
Admitted.

Global Instance into_val_typed_StructWithFunc `{ffi_syntax} : IntoValTyped StructWithFunc.t semantics.StructWithFunc :=
{|
  default_val := StructWithFunc.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_StructWithFunc_fn `{ffi_syntax} : IntoValStructField "fn" semantics.StructWithFunc StructWithFunc.fn'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_StructWithFunc `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} fn':
  PureWp True
    (struct.make semantics.StructWithFunc (alist_val [
      "fn" ::= #fn'
    ]))%V
    #(StructWithFunc.mk fn').
Admitted.


Global Instance StructWithFunc_struct_fields_split dq l (v : StructWithFunc.t) :
  StructFieldsSplit dq l v (
    "Hfn" ∷ l ↦s[semantics.StructWithFunc :: "fn"]{dq} v.(StructWithFunc.fn')
  ).
Admitted.

End instances.
Module switchConcrete.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End switchConcrete.

Section instances.
Context `{ffi_syntax}.
Global Instance into_val_switchConcrete `{ffi_syntax} : IntoVal switchConcrete.t.
Admitted.

Global Instance into_val_typed_switchConcrete `{ffi_syntax} : IntoValTyped switchConcrete.t semantics.switchConcrete :=
{|
  default_val := switchConcrete.mk;
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.

Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_switchConcrete `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ}:
  PureWp True
    (struct.make semantics.switchConcrete (alist_val [
    ]))%V
    #(switchConcrete.mk).
Admitted.


End instances.

Module switchInterface.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End switchInterface.
Module Log.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  d' : disk.Disk.t;
  l' : loc;
  cache' : loc;
  length' : loc;
}.
End def.
End Log.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Log `{ffi_syntax}: Settable _ :=
  settable! Log.mk < Log.d'; Log.l'; Log.cache'; Log.length' >.
Global Instance into_val_Log `{ffi_syntax} : IntoVal Log.t.
Admitted.

Global Instance into_val_typed_Log `{ffi_syntax} : IntoValTyped Log.t semantics.Log :=
{|
  default_val := Log.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Log_d `{ffi_syntax} : IntoValStructField "d" semantics.Log Log.d'.
Admitted.

Global Instance into_val_struct_field_Log_l `{ffi_syntax} : IntoValStructField "l" semantics.Log Log.l'.
Admitted.

Global Instance into_val_struct_field_Log_cache `{ffi_syntax} : IntoValStructField "cache" semantics.Log Log.cache'.
Admitted.

Global Instance into_val_struct_field_Log_length `{ffi_syntax} : IntoValStructField "length" semantics.Log Log.length'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Log `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} d' l' cache' length':
  PureWp True
    (struct.make semantics.Log (alist_val [
      "d" ::= #d';
      "l" ::= #l';
      "cache" ::= #cache';
      "length" ::= #length'
    ]))%V
    #(Log.mk d' l' cache' length').
Admitted.


Global Instance Log_struct_fields_split dq l (v : Log.t) :
  StructFieldsSplit dq l v (
    "Hd" ∷ l ↦s[semantics.Log :: "d"]{dq} v.(Log.d') ∗
    "Hl" ∷ l ↦s[semantics.Log :: "l"]{dq} v.(Log.l') ∗
    "Hcache" ∷ l ↦s[semantics.Log :: "cache"]{dq} v.(Log.cache') ∗
    "Hlength" ∷ l ↦s[semantics.Log :: "length"]{dq} v.(Log.length')
  ).
Admitted.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Definition is_defined := is_global_definitions semantics.pkg_name' var_addrs semantics.functions' semantics.msets'.

Global Instance : PkgIsDefined semantics.pkg_name' is_defined :=
  ltac:(prove_pkg_is_defined).

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_findKey :
  WpFuncCall semantics.pkg_name' "findKey" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_allocate :
  WpFuncCall semantics.pkg_name' "allocate" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_freeRange :
  WpFuncCall semantics.pkg_name' "freeRange" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAllocateDistinct :
  WpFuncCall semantics.pkg_name' "testAllocateDistinct" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAllocateFull :
  WpFuncCall semantics.pkg_name' "testAllocateFull" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testExplicitBlockStmt :
  WpFuncCall semantics.pkg_name' "testExplicitBlockStmt" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testMinUint64 :
  WpFuncCall semantics.pkg_name' "testMinUint64" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testMaxUint64 :
  WpFuncCall semantics.pkg_name' "testMaxUint64" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_adder :
  WpFuncCall semantics.pkg_name' "adder" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testClosureBasic :
  WpFuncCall semantics.pkg_name' "testClosureBasic" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCompareAll :
  WpFuncCall semantics.pkg_name' "testCompareAll" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCompareGT :
  WpFuncCall semantics.pkg_name' "testCompareGT" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCompareGE :
  WpFuncCall semantics.pkg_name' "testCompareGE" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCompareLT :
  WpFuncCall semantics.pkg_name' "testCompareLT" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCompareLE :
  WpFuncCall semantics.pkg_name' "testCompareLE" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_literalCast :
  WpFuncCall semantics.pkg_name' "literalCast" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_stringToByteSlice :
  WpFuncCall semantics.pkg_name' "stringToByteSlice" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_byteSliceToString :
  WpFuncCall semantics.pkg_name' "byteSliceToString" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testByteSliceToString :
  WpFuncCall semantics.pkg_name' "testByteSliceToString" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCopySimple :
  WpFuncCall semantics.pkg_name' "testCopySimple" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCopyShorterDst :
  WpFuncCall semantics.pkg_name' "testCopyShorterDst" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCopyShorterSrc :
  WpFuncCall semantics.pkg_name' "testCopyShorterSrc" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_deferSimple :
  WpFuncCall semantics.pkg_name' "deferSimple" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testDefer :
  WpFuncCall semantics.pkg_name' "testDefer" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testDeferFuncLit :
  WpFuncCall semantics.pkg_name' "testDeferFuncLit" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_roundtripEncDec32 :
  WpFuncCall semantics.pkg_name' "roundtripEncDec32" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_roundtripEncDec64 :
  WpFuncCall semantics.pkg_name' "roundtripEncDec64" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testEncDec32Simple :
  WpFuncCall semantics.pkg_name' "testEncDec32Simple" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_failing_testEncDec32 :
  WpFuncCall semantics.pkg_name' "failing_testEncDec32" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testEncDec64Simple :
  WpFuncCall semantics.pkg_name' "testEncDec64Simple" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testEncDec64 :
  WpFuncCall semantics.pkg_name' "testEncDec64" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FirstClassFunction :
  WpFuncCall semantics.pkg_name' "FirstClassFunction" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ApplyF :
  WpFuncCall semantics.pkg_name' "ApplyF" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testFirstClassFunction :
  WpFuncCall semantics.pkg_name' "testFirstClassFunction" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_addFour64 :
  WpFuncCall semantics.pkg_name' "addFour64" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_failing_testFunctionOrdering :
  WpFuncCall semantics.pkg_name' "failing_testFunctionOrdering" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_storeAndReturn :
  WpFuncCall semantics.pkg_name' "storeAndReturn" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_failing_testArgumentOrder :
  WpFuncCall semantics.pkg_name' "failing_testArgumentOrder" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testU64ToU32 :
  WpFuncCall semantics.pkg_name' "testU64ToU32" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testU32Len :
  WpFuncCall semantics.pkg_name' "testU32Len" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_failing_testU32NewtypeLen :
  WpFuncCall semantics.pkg_name' "failing_testU32NewtypeLen" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_measureArea :
  WpFuncCall semantics.pkg_name' "measureArea" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_measureVolumePlusNM :
  WpFuncCall semantics.pkg_name' "measureVolumePlusNM" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_measureVolume :
  WpFuncCall semantics.pkg_name' "measureVolume" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBasicInterface :
  WpFuncCall semantics.pkg_name' "testBasicInterface" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAssignInterface :
  WpFuncCall semantics.pkg_name' "testAssignInterface" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testMultipleInterface :
  WpFuncCall semantics.pkg_name' "testMultipleInterface" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBinaryExprInterface :
  WpFuncCall semantics.pkg_name' "testBinaryExprInterface" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testIfStmtInterface :
  WpFuncCall semantics.pkg_name' "testIfStmtInterface" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testsUseLocks :
  WpFuncCall semantics.pkg_name' "testsUseLocks" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_standardForLoop :
  WpFuncCall semantics.pkg_name' "standardForLoop" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStandardForLoop :
  WpFuncCall semantics.pkg_name' "testStandardForLoop" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testForLoopWait :
  WpFuncCall semantics.pkg_name' "testForLoopWait" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBreakFromLoopWithContinue :
  WpFuncCall semantics.pkg_name' "testBreakFromLoopWithContinue" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBreakFromLoopNoContinue :
  WpFuncCall semantics.pkg_name' "testBreakFromLoopNoContinue" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBreakFromLoopNoContinueDouble :
  WpFuncCall semantics.pkg_name' "testBreakFromLoopNoContinueDouble" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBreakFromLoopForOnly :
  WpFuncCall semantics.pkg_name' "testBreakFromLoopForOnly" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBreakFromLoopAssignAndContinue :
  WpFuncCall semantics.pkg_name' "testBreakFromLoopAssignAndContinue" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testNestedLoops :
  WpFuncCall semantics.pkg_name' "testNestedLoops" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testNestedGoStyleLoops :
  WpFuncCall semantics.pkg_name' "testNestedGoStyleLoops" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testNestedGoStyleLoopsNoComparison :
  WpFuncCall semantics.pkg_name' "testNestedGoStyleLoopsNoComparison" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IterateMapKeys :
  WpFuncCall semantics.pkg_name' "IterateMapKeys" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IterateMapValues :
  WpFuncCall semantics.pkg_name' "IterateMapValues" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testIterateMap :
  WpFuncCall semantics.pkg_name' "testIterateMap" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testMapSize :
  WpFuncCall semantics.pkg_name' "testMapSize" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_multReturnTwo :
  WpFuncCall semantics.pkg_name' "multReturnTwo" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAssignTwo :
  WpFuncCall semantics.pkg_name' "testAssignTwo" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_multReturnThree :
  WpFuncCall semantics.pkg_name' "multReturnThree" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAssignThree :
  WpFuncCall semantics.pkg_name' "testAssignThree" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testMultipleAssignToMap :
  WpFuncCall semantics.pkg_name' "testMultipleAssignToMap" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_returnTwo :
  WpFuncCall semantics.pkg_name' "returnTwo" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testReturnTwo :
  WpFuncCall semantics.pkg_name' "testReturnTwo" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAnonymousBinding :
  WpFuncCall semantics.pkg_name' "testAnonymousBinding" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_returnThree :
  WpFuncCall semantics.pkg_name' "returnThree" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testReturnThree :
  WpFuncCall semantics.pkg_name' "testReturnThree" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_returnFour :
  WpFuncCall semantics.pkg_name' "returnFour" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testReturnFour :
  WpFuncCall semantics.pkg_name' "testReturnFour" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_failing_testCompareSliceToNil :
  WpFuncCall semantics.pkg_name' "failing_testCompareSliceToNil" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testComparePointerToNil :
  WpFuncCall semantics.pkg_name' "testComparePointerToNil" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCompareNilToNil :
  WpFuncCall semantics.pkg_name' "testCompareNilToNil" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testComparePointerWrappedToNil :
  WpFuncCall semantics.pkg_name' "testComparePointerWrappedToNil" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testComparePointerWrappedDefaultToNil :
  WpFuncCall semantics.pkg_name' "testComparePointerWrappedDefaultToNil" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_reverseAssignOps64 :
  WpFuncCall semantics.pkg_name' "reverseAssignOps64" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_reverseAssignOps32 :
  WpFuncCall semantics.pkg_name' "reverseAssignOps32" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_add64Equals :
  WpFuncCall semantics.pkg_name' "add64Equals" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_sub64Equals :
  WpFuncCall semantics.pkg_name' "sub64Equals" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testReverseAssignOps64 :
  WpFuncCall semantics.pkg_name' "testReverseAssignOps64" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_failing_testReverseAssignOps32 :
  WpFuncCall semantics.pkg_name' "failing_testReverseAssignOps32" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAdd64Equals :
  WpFuncCall semantics.pkg_name' "testAdd64Equals" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSub64Equals :
  WpFuncCall semantics.pkg_name' "testSub64Equals" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testDivisionPrecedence :
  WpFuncCall semantics.pkg_name' "testDivisionPrecedence" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testModPrecedence :
  WpFuncCall semantics.pkg_name' "testModPrecedence" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBitwiseOpsPrecedence :
  WpFuncCall semantics.pkg_name' "testBitwiseOpsPrecedence" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testArithmeticShifts :
  WpFuncCall semantics.pkg_name' "testArithmeticShifts" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBitAddAnd :
  WpFuncCall semantics.pkg_name' "testBitAddAnd" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testManyParentheses :
  WpFuncCall semantics.pkg_name' "testManyParentheses" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testPlusTimes :
  WpFuncCall semantics.pkg_name' "testPlusTimes" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testOrCompareSimple :
  WpFuncCall semantics.pkg_name' "testOrCompareSimple" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testOrCompare :
  WpFuncCall semantics.pkg_name' "testOrCompare" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAndCompare :
  WpFuncCall semantics.pkg_name' "testAndCompare" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testShiftMod :
  WpFuncCall semantics.pkg_name' "testShiftMod" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testLinearize :
  WpFuncCall semantics.pkg_name' "testLinearize" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_CheckTrue :
  WpFuncCall semantics.pkg_name' "CheckTrue" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_CheckFalse :
  WpFuncCall semantics.pkg_name' "CheckFalse" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testShortcircuitAndTF :
  WpFuncCall semantics.pkg_name' "testShortcircuitAndTF" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testShortcircuitAndFT :
  WpFuncCall semantics.pkg_name' "testShortcircuitAndFT" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testShortcircuitOrTF :
  WpFuncCall semantics.pkg_name' "testShortcircuitOrTF" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testShortcircuitOrFT :
  WpFuncCall semantics.pkg_name' "testShortcircuitOrFT" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSliceOps :
  WpFuncCall semantics.pkg_name' "testSliceOps" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSliceCapacityOps :
  WpFuncCall semantics.pkg_name' "testSliceCapacityOps" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testOverwriteArray :
  WpFuncCall semantics.pkg_name' "testOverwriteArray" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSliceLiteral :
  WpFuncCall semantics.pkg_name' "testSliceLiteral" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testFooBarMutation :
  WpFuncCall semantics.pkg_name' "testFooBarMutation" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewS :
  WpFuncCall semantics.pkg_name' "NewS" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStructUpdates :
  WpFuncCall semantics.pkg_name' "testStructUpdates" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testNestedStructUpdates :
  WpFuncCall semantics.pkg_name' "testNestedStructUpdates" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStructConstructions :
  WpFuncCall semantics.pkg_name' "testStructConstructions" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testIncompleteStruct :
  WpFuncCall semantics.pkg_name' "testIncompleteStruct" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStoreInStructVar :
  WpFuncCall semantics.pkg_name' "testStoreInStructVar" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStoreInStructPointerVar :
  WpFuncCall semantics.pkg_name' "testStoreInStructPointerVar" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStoreComposite :
  WpFuncCall semantics.pkg_name' "testStoreComposite" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStoreSlice :
  WpFuncCall semantics.pkg_name' "testStoreSlice" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStructFieldFunc :
  WpFuncCall semantics.pkg_name' "testStructFieldFunc" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSwitchVal :
  WpFuncCall semantics.pkg_name' "testSwitchVal" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSwitchMultiple :
  WpFuncCall semantics.pkg_name' "testSwitchMultiple" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSwitchDefaultTrue :
  WpFuncCall semantics.pkg_name' "testSwitchDefaultTrue" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSwitchConversion :
  WpFuncCall semantics.pkg_name' "testSwitchConversion" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testPointerAssignment :
  WpFuncCall semantics.pkg_name' "testPointerAssignment" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAddressOfLocal :
  WpFuncCall semantics.pkg_name' "testAddressOfLocal" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAnonymousAssign :
  WpFuncCall semantics.pkg_name' "testAnonymousAssign" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_intToBlock :
  WpFuncCall semantics.pkg_name' "intToBlock" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_blockToInt :
  WpFuncCall semantics.pkg_name' "blockToInt" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_New :
  WpFuncCall semantics.pkg_name' "New" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_getLogEntry :
  WpFuncCall semantics.pkg_name' "getLogEntry" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_applyLog :
  WpFuncCall semantics.pkg_name' "applyLog" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_clearLog :
  WpFuncCall semantics.pkg_name' "clearLog" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Open :
  WpFuncCall semantics.pkg_name' "Open" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_disabled_testWal :
  WpFuncCall semantics.pkg_name' "disabled_testWal" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Enc'ptr_consume :
  WpMethodCall semantics.pkg_name' "Enc'ptr" "consume" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Dec'ptr_consume :
  WpMethodCall semantics.pkg_name' "Dec'ptr" "consume" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Editor'ptr_AdvanceReturn :
  WpMethodCall semantics.pkg_name' "Editor'ptr" "AdvanceReturn" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_SquareStruct_Square :
  WpMethodCall semantics.pkg_name' "SquareStruct" "Square" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_SquareStruct_Volume :
  WpMethodCall semantics.pkg_name' "SquareStruct" "Volume" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_SquareStruct'ptr_Square :
  WpMethodCall semantics.pkg_name' "SquareStruct'ptr" "Square" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_SquareStruct'ptr_Volume :
  WpMethodCall semantics.pkg_name' "SquareStruct'ptr" "Volume" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_LoopStruct_forLoopWait :
  WpMethodCall semantics.pkg_name' "LoopStruct" "forLoopWait" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_LoopStruct'ptr_forLoopWait :
  WpMethodCall semantics.pkg_name' "LoopStruct'ptr" "forLoopWait" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ArrayEditor'ptr_Advance :
  WpMethodCall semantics.pkg_name' "ArrayEditor'ptr" "Advance" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Bar'ptr_mutate :
  WpMethodCall semantics.pkg_name' "Bar'ptr" "mutate" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Foo'ptr_mutateBar :
  WpMethodCall semantics.pkg_name' "Foo'ptr" "mutateBar" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S_readBVal :
  WpMethodCall semantics.pkg_name' "S" "readBVal" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_negateC :
  WpMethodCall semantics.pkg_name' "S'ptr" "negateC" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_readA :
  WpMethodCall semantics.pkg_name' "S'ptr" "readA" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_readB :
  WpMethodCall semantics.pkg_name' "S'ptr" "readB" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_readBVal :
  WpMethodCall semantics.pkg_name' "S'ptr" "readBVal" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_updateBValX :
  WpMethodCall semantics.pkg_name' "S'ptr" "updateBValX" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_switchConcrete'ptr_marker :
  WpMethodCall semantics.pkg_name' "switchConcrete'ptr" "marker" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_Apply :
  WpMethodCall semantics.pkg_name' "Log" "Apply" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_BeginTxn :
  WpMethodCall semantics.pkg_name' "Log" "BeginTxn" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_Commit :
  WpMethodCall semantics.pkg_name' "Log" "Commit" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_Read :
  WpMethodCall semantics.pkg_name' "Log" "Read" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_Size :
  WpMethodCall semantics.pkg_name' "Log" "Size" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_Write :
  WpMethodCall semantics.pkg_name' "Log" "Write" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_lock :
  WpMethodCall semantics.pkg_name' "Log" "lock" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_unlock :
  WpMethodCall semantics.pkg_name' "Log" "unlock" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Apply :
  WpMethodCall semantics.pkg_name' "Log'ptr" "Apply" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_BeginTxn :
  WpMethodCall semantics.pkg_name' "Log'ptr" "BeginTxn" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Commit :
  WpMethodCall semantics.pkg_name' "Log'ptr" "Commit" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Read :
  WpMethodCall semantics.pkg_name' "Log'ptr" "Read" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Size :
  WpMethodCall semantics.pkg_name' "Log'ptr" "Size" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Write :
  WpMethodCall semantics.pkg_name' "Log'ptr" "Write" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_lock :
  WpMethodCall semantics.pkg_name' "Log'ptr" "lock" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_unlock :
  WpMethodCall semantics.pkg_name' "Log'ptr" "unlock" _ (is_pkg_defined semantics.pkg_name') :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End semantics.
