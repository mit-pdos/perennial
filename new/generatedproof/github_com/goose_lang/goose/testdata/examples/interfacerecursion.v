(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.github_com.goose_lang.goose.testdata.examples.interfacerecursion.

Set Default Proof Using "Type".

Module interfacerecursion.

(* type interfacerecursion.A *)
Module A.

#[global] Transparent interfacerecursion.A.
#[global] Typeclasses Transparent interfacerecursion.A.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End A.

(* type interfacerecursion.B *)
Module B.

#[global] Transparent interfacerecursion.B.
#[global] Typeclasses Transparent interfacerecursion.B.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End B.

(* type interfacerecursion.c *)
Module c.
Section def.
Context `{ffi_syntax}.

Record t := mk {
}.
End def.
End c.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent interfacerecursion.c.
#[local] Typeclasses Transparent interfacerecursion.c.

Global Instance c_wf : struct.Wf interfacerecursion.c.
Proof. apply _. Qed.

Global Instance into_val_c : IntoVal c.t :=
  {| to_val_def v :=
    struct.val_aux interfacerecursion.c [
    ]%struct
  |}.

Global Program Instance into_val_typed_c : IntoValTyped c.t interfacerecursion.c :=
{|
  default_val := c.mk;
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_interfacerecursion : IsPkgDefinedPure interfacerecursion :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single interfacerecursion;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_interfacerecursion : IsPkgDefined interfacerecursion :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single interfacerecursion)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_method_call_c'ptr_Bar :
  WpMethodCall (ptrT.id interfacerecursion.c.id) "Bar" _ (is_pkg_defined interfacerecursion) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_c'ptr_Foo :
  WpMethodCall (ptrT.id interfacerecursion.c.id) "Foo" _ (is_pkg_defined interfacerecursion) :=
  ltac:(solve_wp_method_call).

End names.
End interfacerecursion.
