(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.disk_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.generatedproof.github_com.goose_lang.primitive.disk.
Require Export New.golang.theory.

Require Export New.code.github_com.goose_lang.goose.testdata.examples.wal.

Set Default Proof Using "Type".

Module awol.

(* type awol.Log *)
Module Log.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  d' : disk.Disk.t;
  l' : loc;
  cache' : loc;
  length' : loc;
}.
End def.
End Log.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent awol.Log.
#[local] Typeclasses Transparent awol.Log.

Global Instance Log_wf : struct.Wf awol.Log.
Proof. apply _. Qed.

Global Instance settable_Log : Settable Log.t :=
  settable! Log.mk < Log.d'; Log.l'; Log.cache'; Log.length' >.
Global Instance into_val_Log : IntoVal Log.t :=
  {| to_val_def v :=
    struct.val_aux awol.Log [
    "d" ::= #(Log.d' v);
    "l" ::= #(Log.l' v);
    "cache" ::= #(Log.cache' v);
    "length" ::= #(Log.length' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Log : IntoValTyped Log.t awol.Log :=
{|
  default_val := Log.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Log_d : IntoValStructField "d" awol.Log Log.d'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Log_l : IntoValStructField "l" awol.Log Log.l'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Log_cache : IntoValStructField "cache" awol.Log Log.cache'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Log_length : IntoValStructField "length" awol.Log Log.length'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Log d' l' cache' length':
  PureWp True
    (struct.make #awol.Log (alist_val [
      "d" ::= #d';
      "l" ::= #l';
      "cache" ::= #cache';
      "length" ::= #length'
    ]))%struct
    #(Log.mk d' l' cache' length').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Log_struct_fields_split dq l (v : Log.t) :
  StructFieldsSplit dq l v (
    "Hd" ∷ l ↦s[awol.Log :: "d"]{dq} v.(Log.d') ∗
    "Hl" ∷ l ↦s[awol.Log :: "l"]{dq} v.(Log.l') ∗
    "Hcache" ∷ l ↦s[awol.Log :: "cache"]{dq} v.(Log.cache') ∗
    "Hlength" ∷ l ↦s[awol.Log :: "length"]{dq} v.(Log.length')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Log.d' v)) (awol.Log) "d"%go.
  simpl_one_flatten_struct (# (Log.l' v)) (awol.Log) "l"%go.
  simpl_one_flatten_struct (# (Log.cache' v)) (awol.Log) "cache"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{!heapGS Σ}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_awol : IsPkgDefinedPure awol :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single awol ∧
      is_pkg_defined_pure code.sync.sync ∧
      is_pkg_defined_pure code.github_com.goose_lang.primitive.primitive ∧
      is_pkg_defined_pure code.github_com.goose_lang.primitive.disk.disk;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_awol : IsPkgDefined awol :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single awol ∗
       is_pkg_defined code.sync.sync ∗
       is_pkg_defined code.github_com.goose_lang.primitive.primitive ∗
       is_pkg_defined code.github_com.goose_lang.primitive.disk.disk)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_intToBlock :
  WpFuncCall awol.intToBlock _ (is_pkg_defined awol) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_blockToInt :
  WpFuncCall awol.blockToInt _ (is_pkg_defined awol) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_New :
  WpFuncCall awol.New _ (is_pkg_defined awol) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_getLogEntry :
  WpFuncCall awol.getLogEntry _ (is_pkg_defined awol) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_applyLog :
  WpFuncCall awol.applyLog _ (is_pkg_defined awol) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_clearLog :
  WpFuncCall awol.clearLog _ (is_pkg_defined awol) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Open :
  WpFuncCall awol.Open _ (is_pkg_defined awol) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Log_Apply :
  WpMethodCall awol.Log.id "Apply" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_BeginTxn :
  WpMethodCall awol.Log.id "BeginTxn" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_Commit :
  WpMethodCall awol.Log.id "Commit" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_Read :
  WpMethodCall awol.Log.id "Read" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_Size :
  WpMethodCall awol.Log.id "Size" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_Write :
  WpMethodCall awol.Log.id "Write" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_lock :
  WpMethodCall awol.Log.id "lock" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log_unlock :
  WpMethodCall awol.Log.id "unlock" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_Apply :
  WpMethodCall (ptrT.id awol.Log.id) "Apply" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_BeginTxn :
  WpMethodCall (ptrT.id awol.Log.id) "BeginTxn" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_Commit :
  WpMethodCall (ptrT.id awol.Log.id) "Commit" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_Read :
  WpMethodCall (ptrT.id awol.Log.id) "Read" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_Size :
  WpMethodCall (ptrT.id awol.Log.id) "Size" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_Write :
  WpMethodCall (ptrT.id awol.Log.id) "Write" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_lock :
  WpMethodCall (ptrT.id awol.Log.id) "lock" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Log'ptr_unlock :
  WpMethodCall (ptrT.id awol.Log.id) "unlock" _ (is_pkg_defined awol) :=
  ltac:(solve_wp_method_call).

End names.
End awol.
