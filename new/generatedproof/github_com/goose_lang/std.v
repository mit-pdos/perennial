(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.golang.theory.

Require Export New.code.github_com.goose_lang.std.

Set Default Proof Using "Type".

Module std.

(* type std.JoinHandle *)
Module JoinHandle.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  done' : bool;
  cond' : loc;
}.
End def.
End JoinHandle.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_JoinHandle : Settable JoinHandle.t :=
  settable! JoinHandle.mk < JoinHandle.mu'; JoinHandle.done'; JoinHandle.cond' >.
Global Instance into_val_JoinHandle : IntoVal JoinHandle.t :=
  {| to_val_def v :=
    struct.val_aux std.JoinHandle [
    "mu" ::= #(JoinHandle.mu' v);
    "done" ::= #(JoinHandle.done' v);
    "cond" ::= #(JoinHandle.cond' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_JoinHandle : IntoValTyped JoinHandle.t std.JoinHandle :=
{|
  default_val := JoinHandle.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_JoinHandle_mu : IntoValStructField "mu" std.JoinHandle JoinHandle.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_JoinHandle_done : IntoValStructField "done" std.JoinHandle JoinHandle.done'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_JoinHandle_cond : IntoValStructField "cond" std.JoinHandle JoinHandle.cond'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_JoinHandle mu' done' cond':
  PureWp True
    (struct.make #std.JoinHandle (alist_val [
      "mu" ::= #mu';
      "done" ::= #done';
      "cond" ::= #cond'
    ]))%struct
    #(JoinHandle.mk mu' done' cond').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance JoinHandle_struct_fields_split dq l (v : JoinHandle.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[std.JoinHandle :: "mu"]{dq} v.(JoinHandle.mu') ∗
    "Hdone" ∷ l ↦s[std.JoinHandle :: "done"]{dq} v.(JoinHandle.done') ∗
    "Hcond" ∷ l ↦s[std.JoinHandle :: "cond"]{dq} v.(JoinHandle.cond')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (JoinHandle.mu' v)) std.JoinHandle "mu"%go.
  simpl_one_flatten_struct (# (JoinHandle.done' v)) std.JoinHandle "done"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined std :=
{|
  is_pkg_defined := is_global_definitions std var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_Assert :
  WpFuncCall std "Assert" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_BytesEqual :
  WpFuncCall std "BytesEqual" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_BytesClone :
  WpFuncCall std "BytesClone" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_SliceSplit :
  WpFuncCall std "SliceSplit" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_SumNoOverflow :
  WpFuncCall std "SumNoOverflow" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_SumAssumeNoOverflow :
  WpFuncCall std "SumAssumeNoOverflow" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MulNoOverflow :
  WpFuncCall std "MulNoOverflow" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MulAssumeNoOverflow :
  WpFuncCall std "MulAssumeNoOverflow" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_newJoinHandle :
  WpFuncCall std "newJoinHandle" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Spawn :
  WpFuncCall std "Spawn" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Multipar :
  WpFuncCall std "Multipar" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Skip :
  WpFuncCall std "Skip" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Shuffle :
  WpFuncCall std "Shuffle" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Permutation :
  WpFuncCall std "Permutation" _ (is_pkg_defined std) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_JoinHandle'ptr_Join :
  WpMethodCall std "JoinHandle'ptr" "Join" _ (is_pkg_defined std) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_JoinHandle'ptr_finish :
  WpMethodCall std "JoinHandle'ptr" "finish" _ (is_pkg_defined std) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End std.
