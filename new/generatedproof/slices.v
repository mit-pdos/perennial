(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.slices.

Set Default Proof Using "Type".

Module slices.

(* type slices.sortedHint *)
Module sortedHint.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End sortedHint.

Global Instance bounded_size_sortedHint : BoundedTypeSize slices.sortedHint.
Admitted.

Global Instance into_val_sortedHint `{ffi_syntax} : IntoVal sortedHint.t.
Admitted.

Global Instance into_val_typed_sortedHint `{ffi_syntax} : IntoValTyped sortedHint.t slices.sortedHint.
Admitted.

(* type slices.xorshift *)
Module xorshift.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End xorshift.

Global Instance bounded_size_xorshift : BoundedTypeSize slices.xorshift.
Admitted.

Global Instance into_val_xorshift `{ffi_syntax} : IntoVal xorshift.t.
Admitted.

Global Instance into_val_typed_xorshift `{ffi_syntax} : IntoValTyped xorshift.t slices.xorshift.
Admitted.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_slices : IsPkgDefinedPure slices :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single slices;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_slices : IsPkgDefined slices :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single slices)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

End names.
End slices.
