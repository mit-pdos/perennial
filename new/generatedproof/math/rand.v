(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.math.rand.

Set Default Proof Using "Type".

Module rand.

(* type rand.Source *)
Module Source.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Source.

Global Instance bounded_size_Source : BoundedTypeSize rand.Source.
Admitted.

Global Instance into_val_Source `{ffi_syntax} : IntoVal Source.t.
Admitted.

Global Instance into_val_typed_Source `{ffi_syntax} : IntoValTyped Source.t rand.Source.
Admitted.

(* type rand.Source64 *)
Module Source64.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Source64.

Global Instance bounded_size_Source64 : BoundedTypeSize rand.Source64.
Admitted.

Global Instance into_val_Source64 `{ffi_syntax} : IntoVal Source64.t.
Admitted.

Global Instance into_val_typed_Source64 `{ffi_syntax} : IntoValTyped Source64.t rand.Source64.
Admitted.

(* type rand.Rand *)
Module Rand.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Rand.

Global Instance bounded_size_Rand : BoundedTypeSize rand.Rand.
Admitted.

Global Instance into_val_Rand `{ffi_syntax} : IntoVal Rand.t.
Admitted.

Global Instance into_val_typed_Rand `{ffi_syntax} : IntoValTyped Rand.t rand.Rand.
Admitted.

(* type rand.runtimeSource *)
Module runtimeSource.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End runtimeSource.

Global Instance bounded_size_runtimeSource : BoundedTypeSize rand.runtimeSource.
Admitted.

Global Instance into_val_runtimeSource `{ffi_syntax} : IntoVal runtimeSource.t.
Admitted.

Global Instance into_val_typed_runtimeSource `{ffi_syntax} : IntoValTyped runtimeSource.t rand.runtimeSource.
Admitted.

(* type rand.lockedSource *)
Module lockedSource.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End lockedSource.

Global Instance bounded_size_lockedSource : BoundedTypeSize rand.lockedSource.
Admitted.

Global Instance into_val_lockedSource `{ffi_syntax} : IntoVal lockedSource.t.
Admitted.

Global Instance into_val_typed_lockedSource `{ffi_syntax} : IntoValTyped lockedSource.t rand.lockedSource.
Admitted.

(* type rand.rngSource *)
Module rngSource.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End rngSource.

Global Instance bounded_size_rngSource : BoundedTypeSize rand.rngSource.
Admitted.

Global Instance into_val_rngSource `{ffi_syntax} : IntoVal rngSource.t.
Admitted.

Global Instance into_val_typed_rngSource `{ffi_syntax} : IntoValTyped rngSource.t rand.rngSource.
Admitted.

(* type rand.Zipf *)
Module Zipf.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Zipf.

Global Instance bounded_size_Zipf : BoundedTypeSize rand.Zipf.
Admitted.

Global Instance into_val_Zipf `{ffi_syntax} : IntoVal Zipf.t.
Admitted.

Global Instance into_val_typed_Zipf `{ffi_syntax} : IntoValTyped Zipf.t rand.Zipf.
Admitted.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_rand : IsPkgDefinedPure rand :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single rand;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_rand : IsPkgDefined rand :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single rand)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

End names.
End rand.
