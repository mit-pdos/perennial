(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.math.big.

Set Default Proof Using "Type".

Module big.

(* type big.Word *)
Module Word.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Word.

Global Instance bounded_size_Word : BoundedTypeSize big.Word.
Admitted.

Global Instance into_val_Word `{ffi_syntax} : IntoVal Word.t.
Admitted.

Global Instance into_val_typed_Word `{ffi_syntax} : IntoValTyped Word.t big.Word.
Admitted.

(* type big.decimal *)
Module decimal.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End decimal.

Global Instance bounded_size_decimal : BoundedTypeSize big.decimal.
Admitted.

Global Instance into_val_decimal `{ffi_syntax} : IntoVal decimal.t.
Admitted.

Global Instance into_val_typed_decimal `{ffi_syntax} : IntoValTyped decimal.t big.decimal.
Admitted.

(* type big.Float *)
Module Float.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Float.

Global Instance bounded_size_Float : BoundedTypeSize big.Float.
Admitted.

Global Instance into_val_Float `{ffi_syntax} : IntoVal Float.t.
Admitted.

Global Instance into_val_typed_Float `{ffi_syntax} : IntoValTyped Float.t big.Float.
Admitted.

(* type big.ErrNaN *)
Module ErrNaN.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End ErrNaN.

Global Instance bounded_size_ErrNaN : BoundedTypeSize big.ErrNaN.
Admitted.

Global Instance into_val_ErrNaN `{ffi_syntax} : IntoVal ErrNaN.t.
Admitted.

Global Instance into_val_typed_ErrNaN `{ffi_syntax} : IntoValTyped ErrNaN.t big.ErrNaN.
Admitted.

(* type big.form *)
Module form.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End form.

Global Instance bounded_size_form : BoundedTypeSize big.form.
Admitted.

Global Instance into_val_form `{ffi_syntax} : IntoVal form.t.
Admitted.

Global Instance into_val_typed_form `{ffi_syntax} : IntoValTyped form.t big.form.
Admitted.

(* type big.RoundingMode *)
Module RoundingMode.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End RoundingMode.

Global Instance bounded_size_RoundingMode : BoundedTypeSize big.RoundingMode.
Admitted.

Global Instance into_val_RoundingMode `{ffi_syntax} : IntoVal RoundingMode.t.
Admitted.

Global Instance into_val_typed_RoundingMode `{ffi_syntax} : IntoValTyped RoundingMode.t big.RoundingMode.
Admitted.

(* type big.Accuracy *)
Module Accuracy.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Accuracy.

Global Instance bounded_size_Accuracy : BoundedTypeSize big.Accuracy.
Admitted.

Global Instance into_val_Accuracy `{ffi_syntax} : IntoVal Accuracy.t.
Admitted.

Global Instance into_val_typed_Accuracy `{ffi_syntax} : IntoValTyped Accuracy.t big.Accuracy.
Admitted.

(* type big.Int *)
Module Int.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Int.

Global Instance bounded_size_Int : BoundedTypeSize big.Int.
Admitted.

Global Instance into_val_Int `{ffi_syntax} : IntoVal Int.t.
Admitted.

Global Instance into_val_typed_Int `{ffi_syntax} : IntoValTyped Int.t big.Int.
Admitted.

(* type big.byteReader *)
Module byteReader.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End byteReader.

Global Instance bounded_size_byteReader : BoundedTypeSize big.byteReader.
Admitted.

Global Instance into_val_byteReader `{ffi_syntax} : IntoVal byteReader.t.
Admitted.

Global Instance into_val_typed_byteReader `{ffi_syntax} : IntoValTyped byteReader.t big.byteReader.
Admitted.

(* type big.nat *)
Module nat.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End nat.

Global Instance bounded_size_nat : BoundedTypeSize big.nat.
Admitted.

Global Instance into_val_nat `{ffi_syntax} : IntoVal nat.t.
Admitted.

Global Instance into_val_typed_nat `{ffi_syntax} : IntoValTyped nat.t big.nat.
Admitted.

(* type big.stack *)
Module stack.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End stack.

Global Instance bounded_size_stack : BoundedTypeSize big.stack.
Admitted.

Global Instance into_val_stack `{ffi_syntax} : IntoVal stack.t.
Admitted.

Global Instance into_val_typed_stack `{ffi_syntax} : IntoValTyped stack.t big.stack.
Admitted.

(* type big.divisor *)
Module divisor.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End divisor.

Global Instance bounded_size_divisor : BoundedTypeSize big.divisor.
Admitted.

Global Instance into_val_divisor `{ffi_syntax} : IntoVal divisor.t.
Admitted.

Global Instance into_val_typed_divisor `{ffi_syntax} : IntoValTyped divisor.t big.divisor.
Admitted.

(* type big.Rat *)
Module Rat.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Rat.

Global Instance bounded_size_Rat : BoundedTypeSize big.Rat.
Admitted.

Global Instance into_val_Rat `{ffi_syntax} : IntoVal Rat.t.
Admitted.

Global Instance into_val_typed_Rat `{ffi_syntax} : IntoValTyped Rat.t big.Rat.
Admitted.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_big : IsPkgDefinedPure big :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single big;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_big : IsPkgDefined big :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single big)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

End names.
End big.
