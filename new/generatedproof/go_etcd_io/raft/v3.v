(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.errors.
Require Export New.generatedproof.go_etcd_io.raft.v3.raftpb.
Require Export New.generatedproof.fmt.
Require Export New.generatedproof.io.
Require Export New.generatedproof.log.
Require Export New.generatedproof.os.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.context.
Require Export New.generatedproof.bytes.
Require Export New.generatedproof.crypto.rand.
Require Export New.generatedproof.math.
Require Export New.generatedproof.math.big.
Require Export New.generatedproof.strings.
Require Export New.generatedproof.go_etcd_io.raft.v3.confchange.
Require Export New.generatedproof.go_etcd_io.raft.v3.quorum.
Require Export New.generatedproof.go_etcd_io.raft.v3.quorum.slices.
Require Export New.generatedproof.go_etcd_io.raft.v3.tracker.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.raft.v3.

Set Default Proof Using "Type".

Module raft.

Module Storage.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End Storage.

Module Logger.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End Logger.

Module unstable.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  snapshot' : loc;
  entries' : slice.t;
  offset' : w64;
  snapshotInProgress' : bool;
  offsetInProgress' : w64;
  logger' : Logger.t;
}.
End def.
End unstable.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_unstable : Settable _ :=
  settable! unstable.mk < unstable.snapshot'; unstable.entries'; unstable.offset'; unstable.snapshotInProgress'; unstable.offsetInProgress'; unstable.logger' >.
Global Instance into_val_unstable : IntoVal unstable.t :=
  {| to_val_def v :=
    struct.val_aux raft.unstable [
    "snapshot" ::= #(unstable.snapshot' v);
    "entries" ::= #(unstable.entries' v);
    "offset" ::= #(unstable.offset' v);
    "snapshotInProgress" ::= #(unstable.snapshotInProgress' v);
    "offsetInProgress" ::= #(unstable.offsetInProgress' v);
    "logger" ::= #(unstable.logger' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_unstable : IntoValTyped unstable.t raft.unstable :=
{|
  default_val := unstable.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_unstable_snapshot : IntoValStructField "snapshot" raft.unstable unstable.snapshot'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_unstable_entries : IntoValStructField "entries" raft.unstable unstable.entries'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_unstable_offset : IntoValStructField "offset" raft.unstable unstable.offset'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_unstable_snapshotInProgress : IntoValStructField "snapshotInProgress" raft.unstable unstable.snapshotInProgress'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_unstable_offsetInProgress : IntoValStructField "offsetInProgress" raft.unstable unstable.offsetInProgress'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_unstable_logger : IntoValStructField "logger" raft.unstable unstable.logger'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_unstable snapshot' entries' offset' snapshotInProgress' offsetInProgress' logger':
  PureWp True
    (struct.make #raft.unstable (alist_val [
      "snapshot" ::= #snapshot';
      "entries" ::= #entries';
      "offset" ::= #offset';
      "snapshotInProgress" ::= #snapshotInProgress';
      "offsetInProgress" ::= #offsetInProgress';
      "logger" ::= #logger'
    ]))%struct
    #(unstable.mk snapshot' entries' offset' snapshotInProgress' offsetInProgress' logger').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance unstable_struct_fields_split dq l (v : unstable.t) :
  StructFieldsSplit dq l v (
    "Hsnapshot" ∷ l ↦s[raft.unstable :: "snapshot"]{dq} v.(unstable.snapshot') ∗
    "Hentries" ∷ l ↦s[raft.unstable :: "entries"]{dq} v.(unstable.entries') ∗
    "Hoffset" ∷ l ↦s[raft.unstable :: "offset"]{dq} v.(unstable.offset') ∗
    "HsnapshotInProgress" ∷ l ↦s[raft.unstable :: "snapshotInProgress"]{dq} v.(unstable.snapshotInProgress') ∗
    "HoffsetInProgress" ∷ l ↦s[raft.unstable :: "offsetInProgress"]{dq} v.(unstable.offsetInProgress') ∗
    "Hlogger" ∷ l ↦s[raft.unstable :: "logger"]{dq} v.(unstable.logger')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (unstable.snapshot' v)) raft.unstable "snapshot"%go.
  simpl_one_flatten_struct (# (unstable.entries' v)) raft.unstable "entries"%go.
  simpl_one_flatten_struct (# (unstable.offset' v)) raft.unstable "offset"%go.
  simpl_one_flatten_struct (# (unstable.snapshotInProgress' v)) raft.unstable "snapshotInProgress"%go.
  simpl_one_flatten_struct (# (unstable.offsetInProgress' v)) raft.unstable "offsetInProgress"%go.

  solve_field_ref_f.
Qed.

End instances.

Module entryEncodingSize.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End entryEncodingSize.

Module raftLog.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  storage' : Storage.t;
  unstable' : unstable.t;
  committed' : w64;
  applying' : w64;
  applied' : w64;
  logger' : Logger.t;
  maxApplyingEntsSize' : entryEncodingSize.t;
  applyingEntsSize' : entryEncodingSize.t;
  applyingEntsPaused' : bool;
}.
End def.
End raftLog.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_raftLog : Settable _ :=
  settable! raftLog.mk < raftLog.storage'; raftLog.unstable'; raftLog.committed'; raftLog.applying'; raftLog.applied'; raftLog.logger'; raftLog.maxApplyingEntsSize'; raftLog.applyingEntsSize'; raftLog.applyingEntsPaused' >.
Global Instance into_val_raftLog : IntoVal raftLog.t :=
  {| to_val_def v :=
    struct.val_aux raft.raftLog [
    "storage" ::= #(raftLog.storage' v);
    "unstable" ::= #(raftLog.unstable' v);
    "committed" ::= #(raftLog.committed' v);
    "applying" ::= #(raftLog.applying' v);
    "applied" ::= #(raftLog.applied' v);
    "logger" ::= #(raftLog.logger' v);
    "maxApplyingEntsSize" ::= #(raftLog.maxApplyingEntsSize' v);
    "applyingEntsSize" ::= #(raftLog.applyingEntsSize' v);
    "applyingEntsPaused" ::= #(raftLog.applyingEntsPaused' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_raftLog : IntoValTyped raftLog.t raft.raftLog :=
{|
  default_val := raftLog.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_raftLog_storage : IntoValStructField "storage" raft.raftLog raftLog.storage'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raftLog_unstable : IntoValStructField "unstable" raft.raftLog raftLog.unstable'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raftLog_committed : IntoValStructField "committed" raft.raftLog raftLog.committed'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raftLog_applying : IntoValStructField "applying" raft.raftLog raftLog.applying'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raftLog_applied : IntoValStructField "applied" raft.raftLog raftLog.applied'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raftLog_logger : IntoValStructField "logger" raft.raftLog raftLog.logger'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raftLog_maxApplyingEntsSize : IntoValStructField "maxApplyingEntsSize" raft.raftLog raftLog.maxApplyingEntsSize'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raftLog_applyingEntsSize : IntoValStructField "applyingEntsSize" raft.raftLog raftLog.applyingEntsSize'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raftLog_applyingEntsPaused : IntoValStructField "applyingEntsPaused" raft.raftLog raftLog.applyingEntsPaused'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_raftLog storage' unstable' committed' applying' applied' logger' maxApplyingEntsSize' applyingEntsSize' applyingEntsPaused':
  PureWp True
    (struct.make #raft.raftLog (alist_val [
      "storage" ::= #storage';
      "unstable" ::= #unstable';
      "committed" ::= #committed';
      "applying" ::= #applying';
      "applied" ::= #applied';
      "logger" ::= #logger';
      "maxApplyingEntsSize" ::= #maxApplyingEntsSize';
      "applyingEntsSize" ::= #applyingEntsSize';
      "applyingEntsPaused" ::= #applyingEntsPaused'
    ]))%struct
    #(raftLog.mk storage' unstable' committed' applying' applied' logger' maxApplyingEntsSize' applyingEntsSize' applyingEntsPaused').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance raftLog_struct_fields_split dq l (v : raftLog.t) :
  StructFieldsSplit dq l v (
    "Hstorage" ∷ l ↦s[raft.raftLog :: "storage"]{dq} v.(raftLog.storage') ∗
    "Hunstable" ∷ l ↦s[raft.raftLog :: "unstable"]{dq} v.(raftLog.unstable') ∗
    "Hcommitted" ∷ l ↦s[raft.raftLog :: "committed"]{dq} v.(raftLog.committed') ∗
    "Happlying" ∷ l ↦s[raft.raftLog :: "applying"]{dq} v.(raftLog.applying') ∗
    "Happlied" ∷ l ↦s[raft.raftLog :: "applied"]{dq} v.(raftLog.applied') ∗
    "Hlogger" ∷ l ↦s[raft.raftLog :: "logger"]{dq} v.(raftLog.logger') ∗
    "HmaxApplyingEntsSize" ∷ l ↦s[raft.raftLog :: "maxApplyingEntsSize"]{dq} v.(raftLog.maxApplyingEntsSize') ∗
    "HapplyingEntsSize" ∷ l ↦s[raft.raftLog :: "applyingEntsSize"]{dq} v.(raftLog.applyingEntsSize') ∗
    "HapplyingEntsPaused" ∷ l ↦s[raft.raftLog :: "applyingEntsPaused"]{dq} v.(raftLog.applyingEntsPaused')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (raftLog.storage' v)) raft.raftLog "storage"%go.
  simpl_one_flatten_struct (# (raftLog.unstable' v)) raft.raftLog "unstable"%go.
  simpl_one_flatten_struct (# (raftLog.committed' v)) raft.raftLog "committed"%go.
  simpl_one_flatten_struct (# (raftLog.applying' v)) raft.raftLog "applying"%go.
  simpl_one_flatten_struct (# (raftLog.applied' v)) raft.raftLog "applied"%go.
  simpl_one_flatten_struct (# (raftLog.logger' v)) raft.raftLog "logger"%go.
  simpl_one_flatten_struct (# (raftLog.maxApplyingEntsSize' v)) raft.raftLog "maxApplyingEntsSize"%go.
  simpl_one_flatten_struct (# (raftLog.applyingEntsSize' v)) raft.raftLog "applyingEntsSize"%go.

  solve_field_ref_f.
Qed.

End instances.

Module DefaultLogger.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Logger' : loc;
  debug' : bool;
}.
End def.
End DefaultLogger.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_DefaultLogger : Settable _ :=
  settable! DefaultLogger.mk < DefaultLogger.Logger'; DefaultLogger.debug' >.
Global Instance into_val_DefaultLogger : IntoVal DefaultLogger.t :=
  {| to_val_def v :=
    struct.val_aux raft.DefaultLogger [
    "Logger" ::= #(DefaultLogger.Logger' v);
    "debug" ::= #(DefaultLogger.debug' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_DefaultLogger : IntoValTyped DefaultLogger.t raft.DefaultLogger :=
{|
  default_val := DefaultLogger.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_DefaultLogger_Logger : IntoValStructField "Logger" raft.DefaultLogger DefaultLogger.Logger'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_DefaultLogger_debug : IntoValStructField "debug" raft.DefaultLogger DefaultLogger.debug'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_DefaultLogger Logger' debug':
  PureWp True
    (struct.make #raft.DefaultLogger (alist_val [
      "Logger" ::= #Logger';
      "debug" ::= #debug'
    ]))%struct
    #(DefaultLogger.mk Logger' debug').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance DefaultLogger_struct_fields_split dq l (v : DefaultLogger.t) :
  StructFieldsSplit dq l v (
    "HLogger" ∷ l ↦s[raft.DefaultLogger :: "Logger"]{dq} v.(DefaultLogger.Logger') ∗
    "Hdebug" ∷ l ↦s[raft.DefaultLogger :: "debug"]{dq} v.(DefaultLogger.debug')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (DefaultLogger.Logger' v)) raft.DefaultLogger "Logger"%go.

  solve_field_ref_f.
Qed.

End instances.

Module SnapshotStatus.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End SnapshotStatus.

Module StateType.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End StateType.

Module SoftState.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Lead' : w64;
  RaftState' : StateType.t;
}.
End def.
End SoftState.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_SoftState : Settable _ :=
  settable! SoftState.mk < SoftState.Lead'; SoftState.RaftState' >.
Global Instance into_val_SoftState : IntoVal SoftState.t :=
  {| to_val_def v :=
    struct.val_aux raft.SoftState [
    "Lead" ::= #(SoftState.Lead' v);
    "RaftState" ::= #(SoftState.RaftState' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_SoftState : IntoValTyped SoftState.t raft.SoftState :=
{|
  default_val := SoftState.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_SoftState_Lead : IntoValStructField "Lead" raft.SoftState SoftState.Lead'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_SoftState_RaftState : IntoValStructField "RaftState" raft.SoftState SoftState.RaftState'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_SoftState Lead' RaftState':
  PureWp True
    (struct.make #raft.SoftState (alist_val [
      "Lead" ::= #Lead';
      "RaftState" ::= #RaftState'
    ]))%struct
    #(SoftState.mk Lead' RaftState').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance SoftState_struct_fields_split dq l (v : SoftState.t) :
  StructFieldsSplit dq l v (
    "HLead" ∷ l ↦s[raft.SoftState :: "Lead"]{dq} v.(SoftState.Lead') ∗
    "HRaftState" ∷ l ↦s[raft.SoftState :: "RaftState"]{dq} v.(SoftState.RaftState')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (SoftState.Lead' v)) raft.SoftState "Lead"%go.

  solve_field_ref_f.
Qed.

End instances.

Module Ready.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  SoftState' : loc;
  HardState' : raftpb.HardState.t;
  ReadStates' : slice.t;
  Entries' : slice.t;
  Snapshot' : raftpb.Snapshot.t;
  CommittedEntries' : slice.t;
  Messages' : slice.t;
  MustSync' : bool;
}.
End def.
End Ready.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Ready : Settable _ :=
  settable! Ready.mk < Ready.SoftState'; Ready.HardState'; Ready.ReadStates'; Ready.Entries'; Ready.Snapshot'; Ready.CommittedEntries'; Ready.Messages'; Ready.MustSync' >.
Global Instance into_val_Ready : IntoVal Ready.t :=
  {| to_val_def v :=
    struct.val_aux raft.Ready [
    "SoftState" ::= #(Ready.SoftState' v);
    "HardState" ::= #(Ready.HardState' v);
    "ReadStates" ::= #(Ready.ReadStates' v);
    "Entries" ::= #(Ready.Entries' v);
    "Snapshot" ::= #(Ready.Snapshot' v);
    "CommittedEntries" ::= #(Ready.CommittedEntries' v);
    "Messages" ::= #(Ready.Messages' v);
    "MustSync" ::= #(Ready.MustSync' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Ready : IntoValTyped Ready.t raft.Ready :=
{|
  default_val := Ready.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Ready_SoftState : IntoValStructField "SoftState" raft.Ready Ready.SoftState'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Ready_HardState : IntoValStructField "HardState" raft.Ready Ready.HardState'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Ready_ReadStates : IntoValStructField "ReadStates" raft.Ready Ready.ReadStates'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Ready_Entries : IntoValStructField "Entries" raft.Ready Ready.Entries'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Ready_Snapshot : IntoValStructField "Snapshot" raft.Ready Ready.Snapshot'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Ready_CommittedEntries : IntoValStructField "CommittedEntries" raft.Ready Ready.CommittedEntries'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Ready_Messages : IntoValStructField "Messages" raft.Ready Ready.Messages'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Ready_MustSync : IntoValStructField "MustSync" raft.Ready Ready.MustSync'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Ready SoftState' HardState' ReadStates' Entries' Snapshot' CommittedEntries' Messages' MustSync':
  PureWp True
    (struct.make #raft.Ready (alist_val [
      "SoftState" ::= #SoftState';
      "HardState" ::= #HardState';
      "ReadStates" ::= #ReadStates';
      "Entries" ::= #Entries';
      "Snapshot" ::= #Snapshot';
      "CommittedEntries" ::= #CommittedEntries';
      "Messages" ::= #Messages';
      "MustSync" ::= #MustSync'
    ]))%struct
    #(Ready.mk SoftState' HardState' ReadStates' Entries' Snapshot' CommittedEntries' Messages' MustSync').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Ready_struct_fields_split dq l (v : Ready.t) :
  StructFieldsSplit dq l v (
    "HSoftState" ∷ l ↦s[raft.Ready :: "SoftState"]{dq} v.(Ready.SoftState') ∗
    "HHardState" ∷ l ↦s[raft.Ready :: "HardState"]{dq} v.(Ready.HardState') ∗
    "HReadStates" ∷ l ↦s[raft.Ready :: "ReadStates"]{dq} v.(Ready.ReadStates') ∗
    "HEntries" ∷ l ↦s[raft.Ready :: "Entries"]{dq} v.(Ready.Entries') ∗
    "HSnapshot" ∷ l ↦s[raft.Ready :: "Snapshot"]{dq} v.(Ready.Snapshot') ∗
    "HCommittedEntries" ∷ l ↦s[raft.Ready :: "CommittedEntries"]{dq} v.(Ready.CommittedEntries') ∗
    "HMessages" ∷ l ↦s[raft.Ready :: "Messages"]{dq} v.(Ready.Messages') ∗
    "HMustSync" ∷ l ↦s[raft.Ready :: "MustSync"]{dq} v.(Ready.MustSync')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Ready.SoftState' v)) raft.Ready "SoftState"%go.
  simpl_one_flatten_struct (# (Ready.HardState' v)) raft.Ready "HardState"%go.
  simpl_one_flatten_struct (# (Ready.ReadStates' v)) raft.Ready "ReadStates"%go.
  simpl_one_flatten_struct (# (Ready.Entries' v)) raft.Ready "Entries"%go.
  simpl_one_flatten_struct (# (Ready.Snapshot' v)) raft.Ready "Snapshot"%go.
  simpl_one_flatten_struct (# (Ready.CommittedEntries' v)) raft.Ready "CommittedEntries"%go.
  simpl_one_flatten_struct (# (Ready.Messages' v)) raft.Ready "Messages"%go.

  solve_field_ref_f.
Qed.

End instances.

Module Node.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End Node.

Module Peer.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ID' : w64;
  Context' : slice.t;
}.
End def.
End Peer.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Peer : Settable _ :=
  settable! Peer.mk < Peer.ID'; Peer.Context' >.
Global Instance into_val_Peer : IntoVal Peer.t :=
  {| to_val_def v :=
    struct.val_aux raft.Peer [
    "ID" ::= #(Peer.ID' v);
    "Context" ::= #(Peer.Context' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Peer : IntoValTyped Peer.t raft.Peer :=
{|
  default_val := Peer.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Peer_ID : IntoValStructField "ID" raft.Peer Peer.ID'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Peer_Context : IntoValStructField "Context" raft.Peer Peer.Context'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Peer ID' Context':
  PureWp True
    (struct.make #raft.Peer (alist_val [
      "ID" ::= #ID';
      "Context" ::= #Context'
    ]))%struct
    #(Peer.mk ID' Context').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Peer_struct_fields_split dq l (v : Peer.t) :
  StructFieldsSplit dq l v (
    "HID" ∷ l ↦s[raft.Peer :: "ID"]{dq} v.(Peer.ID') ∗
    "HContext" ∷ l ↦s[raft.Peer :: "Context"]{dq} v.(Peer.Context')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Peer.ID' v)) raft.Peer "ID"%go.

  solve_field_ref_f.
Qed.

End instances.

Module msgWithResult.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  m' : raftpb.Message.t;
  result' : loc;
}.
End def.
End msgWithResult.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_msgWithResult : Settable _ :=
  settable! msgWithResult.mk < msgWithResult.m'; msgWithResult.result' >.
Global Instance into_val_msgWithResult : IntoVal msgWithResult.t :=
  {| to_val_def v :=
    struct.val_aux raft.msgWithResult [
    "m" ::= #(msgWithResult.m' v);
    "result" ::= #(msgWithResult.result' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_msgWithResult : IntoValTyped msgWithResult.t raft.msgWithResult :=
{|
  default_val := msgWithResult.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_msgWithResult_m : IntoValStructField "m" raft.msgWithResult msgWithResult.m'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_msgWithResult_result : IntoValStructField "result" raft.msgWithResult msgWithResult.result'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_msgWithResult m' result':
  PureWp True
    (struct.make #raft.msgWithResult (alist_val [
      "m" ::= #m';
      "result" ::= #result'
    ]))%struct
    #(msgWithResult.mk m' result').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance msgWithResult_struct_fields_split dq l (v : msgWithResult.t) :
  StructFieldsSplit dq l v (
    "Hm" ∷ l ↦s[raft.msgWithResult :: "m"]{dq} v.(msgWithResult.m') ∗
    "Hresult" ∷ l ↦s[raft.msgWithResult :: "result"]{dq} v.(msgWithResult.result')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (msgWithResult.m' v)) raft.msgWithResult "m"%go.

  solve_field_ref_f.
Qed.

End instances.

Module node.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  propc' : loc;
  recvc' : loc;
  confc' : loc;
  confstatec' : loc;
  readyc' : loc;
  advancec' : loc;
  tickc' : loc;
  done' : loc;
  stop' : loc;
  status' : loc;
  rn' : loc;
}.
End def.
End node.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_node : Settable _ :=
  settable! node.mk < node.propc'; node.recvc'; node.confc'; node.confstatec'; node.readyc'; node.advancec'; node.tickc'; node.done'; node.stop'; node.status'; node.rn' >.
Global Instance into_val_node : IntoVal node.t :=
  {| to_val_def v :=
    struct.val_aux raft.node [
    "propc" ::= #(node.propc' v);
    "recvc" ::= #(node.recvc' v);
    "confc" ::= #(node.confc' v);
    "confstatec" ::= #(node.confstatec' v);
    "readyc" ::= #(node.readyc' v);
    "advancec" ::= #(node.advancec' v);
    "tickc" ::= #(node.tickc' v);
    "done" ::= #(node.done' v);
    "stop" ::= #(node.stop' v);
    "status" ::= #(node.status' v);
    "rn" ::= #(node.rn' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_node : IntoValTyped node.t raft.node :=
{|
  default_val := node.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_node_propc : IntoValStructField "propc" raft.node node.propc'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_node_recvc : IntoValStructField "recvc" raft.node node.recvc'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_node_confc : IntoValStructField "confc" raft.node node.confc'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_node_confstatec : IntoValStructField "confstatec" raft.node node.confstatec'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_node_readyc : IntoValStructField "readyc" raft.node node.readyc'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_node_advancec : IntoValStructField "advancec" raft.node node.advancec'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_node_tickc : IntoValStructField "tickc" raft.node node.tickc'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_node_done : IntoValStructField "done" raft.node node.done'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_node_stop : IntoValStructField "stop" raft.node node.stop'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_node_status : IntoValStructField "status" raft.node node.status'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_node_rn : IntoValStructField "rn" raft.node node.rn'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_node propc' recvc' confc' confstatec' readyc' advancec' tickc' done' stop' status' rn':
  PureWp True
    (struct.make #raft.node (alist_val [
      "propc" ::= #propc';
      "recvc" ::= #recvc';
      "confc" ::= #confc';
      "confstatec" ::= #confstatec';
      "readyc" ::= #readyc';
      "advancec" ::= #advancec';
      "tickc" ::= #tickc';
      "done" ::= #done';
      "stop" ::= #stop';
      "status" ::= #status';
      "rn" ::= #rn'
    ]))%struct
    #(node.mk propc' recvc' confc' confstatec' readyc' advancec' tickc' done' stop' status' rn').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance node_struct_fields_split dq l (v : node.t) :
  StructFieldsSplit dq l v (
    "Hpropc" ∷ l ↦s[raft.node :: "propc"]{dq} v.(node.propc') ∗
    "Hrecvc" ∷ l ↦s[raft.node :: "recvc"]{dq} v.(node.recvc') ∗
    "Hconfc" ∷ l ↦s[raft.node :: "confc"]{dq} v.(node.confc') ∗
    "Hconfstatec" ∷ l ↦s[raft.node :: "confstatec"]{dq} v.(node.confstatec') ∗
    "Hreadyc" ∷ l ↦s[raft.node :: "readyc"]{dq} v.(node.readyc') ∗
    "Hadvancec" ∷ l ↦s[raft.node :: "advancec"]{dq} v.(node.advancec') ∗
    "Htickc" ∷ l ↦s[raft.node :: "tickc"]{dq} v.(node.tickc') ∗
    "Hdone" ∷ l ↦s[raft.node :: "done"]{dq} v.(node.done') ∗
    "Hstop" ∷ l ↦s[raft.node :: "stop"]{dq} v.(node.stop') ∗
    "Hstatus" ∷ l ↦s[raft.node :: "status"]{dq} v.(node.status') ∗
    "Hrn" ∷ l ↦s[raft.node :: "rn"]{dq} v.(node.rn')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (node.propc' v)) raft.node "propc"%go.
  simpl_one_flatten_struct (# (node.recvc' v)) raft.node "recvc"%go.
  simpl_one_flatten_struct (# (node.confc' v)) raft.node "confc"%go.
  simpl_one_flatten_struct (# (node.confstatec' v)) raft.node "confstatec"%go.
  simpl_one_flatten_struct (# (node.readyc' v)) raft.node "readyc"%go.
  simpl_one_flatten_struct (# (node.advancec' v)) raft.node "advancec"%go.
  simpl_one_flatten_struct (# (node.tickc' v)) raft.node "tickc"%go.
  simpl_one_flatten_struct (# (node.done' v)) raft.node "done"%go.
  simpl_one_flatten_struct (# (node.stop' v)) raft.node "stop"%go.
  simpl_one_flatten_struct (# (node.status' v)) raft.node "status"%go.

  solve_field_ref_f.
Qed.

End instances.

Module ReadOnlyOption.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End ReadOnlyOption.

Module lockedRand.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : sync.Mutex.t;
}.
End def.
End lockedRand.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_lockedRand : Settable _ :=
  settable! lockedRand.mk < lockedRand.mu' >.
Global Instance into_val_lockedRand : IntoVal lockedRand.t :=
  {| to_val_def v :=
    struct.val_aux raft.lockedRand [
    "mu" ::= #(lockedRand.mu' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_lockedRand : IntoValTyped lockedRand.t raft.lockedRand :=
{|
  default_val := lockedRand.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_lockedRand_mu : IntoValStructField "mu" raft.lockedRand lockedRand.mu'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_lockedRand mu':
  PureWp True
    (struct.make #raft.lockedRand (alist_val [
      "mu" ::= #mu'
    ]))%struct
    #(lockedRand.mk mu').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance lockedRand_struct_fields_split dq l (v : lockedRand.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[raft.lockedRand :: "mu"]{dq} v.(lockedRand.mu')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

Module CampaignType.
Section def.
Context `{ffi_syntax}.
Definition t := go_string.
End def.
End CampaignType.

Module TraceLogger.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End TraceLogger.

Module Config.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ID' : w64;
  ElectionTick' : w64;
  HeartbeatTick' : w64;
  Storage' : Storage.t;
  Applied' : w64;
  AsyncStorageWrites' : bool;
  MaxSizePerMsg' : w64;
  MaxCommittedSizePerReady' : w64;
  MaxUncommittedEntriesSize' : w64;
  MaxInflightMsgs' : w64;
  MaxInflightBytes' : w64;
  CheckQuorum' : bool;
  PreVote' : bool;
  ReadOnlyOption' : ReadOnlyOption.t;
  Logger' : Logger.t;
  DisableProposalForwarding' : bool;
  DisableConfChangeValidation' : bool;
  StepDownOnRemoval' : bool;
  TraceLogger' : TraceLogger.t;
}.
End def.
End Config.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Config : Settable _ :=
  settable! Config.mk < Config.ID'; Config.ElectionTick'; Config.HeartbeatTick'; Config.Storage'; Config.Applied'; Config.AsyncStorageWrites'; Config.MaxSizePerMsg'; Config.MaxCommittedSizePerReady'; Config.MaxUncommittedEntriesSize'; Config.MaxInflightMsgs'; Config.MaxInflightBytes'; Config.CheckQuorum'; Config.PreVote'; Config.ReadOnlyOption'; Config.Logger'; Config.DisableProposalForwarding'; Config.DisableConfChangeValidation'; Config.StepDownOnRemoval'; Config.TraceLogger' >.
Global Instance into_val_Config : IntoVal Config.t :=
  {| to_val_def v :=
    struct.val_aux raft.Config [
    "ID" ::= #(Config.ID' v);
    "ElectionTick" ::= #(Config.ElectionTick' v);
    "HeartbeatTick" ::= #(Config.HeartbeatTick' v);
    "Storage" ::= #(Config.Storage' v);
    "Applied" ::= #(Config.Applied' v);
    "AsyncStorageWrites" ::= #(Config.AsyncStorageWrites' v);
    "MaxSizePerMsg" ::= #(Config.MaxSizePerMsg' v);
    "MaxCommittedSizePerReady" ::= #(Config.MaxCommittedSizePerReady' v);
    "MaxUncommittedEntriesSize" ::= #(Config.MaxUncommittedEntriesSize' v);
    "MaxInflightMsgs" ::= #(Config.MaxInflightMsgs' v);
    "MaxInflightBytes" ::= #(Config.MaxInflightBytes' v);
    "CheckQuorum" ::= #(Config.CheckQuorum' v);
    "PreVote" ::= #(Config.PreVote' v);
    "ReadOnlyOption" ::= #(Config.ReadOnlyOption' v);
    "Logger" ::= #(Config.Logger' v);
    "DisableProposalForwarding" ::= #(Config.DisableProposalForwarding' v);
    "DisableConfChangeValidation" ::= #(Config.DisableConfChangeValidation' v);
    "StepDownOnRemoval" ::= #(Config.StepDownOnRemoval' v);
    "TraceLogger" ::= #(Config.TraceLogger' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Config : IntoValTyped Config.t raft.Config :=
{|
  default_val := Config.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Config_ID : IntoValStructField "ID" raft.Config Config.ID'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_ElectionTick : IntoValStructField "ElectionTick" raft.Config Config.ElectionTick'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_HeartbeatTick : IntoValStructField "HeartbeatTick" raft.Config Config.HeartbeatTick'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_Storage : IntoValStructField "Storage" raft.Config Config.Storage'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_Applied : IntoValStructField "Applied" raft.Config Config.Applied'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_AsyncStorageWrites : IntoValStructField "AsyncStorageWrites" raft.Config Config.AsyncStorageWrites'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_MaxSizePerMsg : IntoValStructField "MaxSizePerMsg" raft.Config Config.MaxSizePerMsg'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_MaxCommittedSizePerReady : IntoValStructField "MaxCommittedSizePerReady" raft.Config Config.MaxCommittedSizePerReady'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_MaxUncommittedEntriesSize : IntoValStructField "MaxUncommittedEntriesSize" raft.Config Config.MaxUncommittedEntriesSize'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_MaxInflightMsgs : IntoValStructField "MaxInflightMsgs" raft.Config Config.MaxInflightMsgs'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_MaxInflightBytes : IntoValStructField "MaxInflightBytes" raft.Config Config.MaxInflightBytes'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_CheckQuorum : IntoValStructField "CheckQuorum" raft.Config Config.CheckQuorum'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_PreVote : IntoValStructField "PreVote" raft.Config Config.PreVote'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_ReadOnlyOption : IntoValStructField "ReadOnlyOption" raft.Config Config.ReadOnlyOption'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_Logger : IntoValStructField "Logger" raft.Config Config.Logger'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_DisableProposalForwarding : IntoValStructField "DisableProposalForwarding" raft.Config Config.DisableProposalForwarding'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_DisableConfChangeValidation : IntoValStructField "DisableConfChangeValidation" raft.Config Config.DisableConfChangeValidation'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_StepDownOnRemoval : IntoValStructField "StepDownOnRemoval" raft.Config Config.StepDownOnRemoval'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_TraceLogger : IntoValStructField "TraceLogger" raft.Config Config.TraceLogger'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Config ID' ElectionTick' HeartbeatTick' Storage' Applied' AsyncStorageWrites' MaxSizePerMsg' MaxCommittedSizePerReady' MaxUncommittedEntriesSize' MaxInflightMsgs' MaxInflightBytes' CheckQuorum' PreVote' ReadOnlyOption' Logger' DisableProposalForwarding' DisableConfChangeValidation' StepDownOnRemoval' TraceLogger':
  PureWp True
    (struct.make #raft.Config (alist_val [
      "ID" ::= #ID';
      "ElectionTick" ::= #ElectionTick';
      "HeartbeatTick" ::= #HeartbeatTick';
      "Storage" ::= #Storage';
      "Applied" ::= #Applied';
      "AsyncStorageWrites" ::= #AsyncStorageWrites';
      "MaxSizePerMsg" ::= #MaxSizePerMsg';
      "MaxCommittedSizePerReady" ::= #MaxCommittedSizePerReady';
      "MaxUncommittedEntriesSize" ::= #MaxUncommittedEntriesSize';
      "MaxInflightMsgs" ::= #MaxInflightMsgs';
      "MaxInflightBytes" ::= #MaxInflightBytes';
      "CheckQuorum" ::= #CheckQuorum';
      "PreVote" ::= #PreVote';
      "ReadOnlyOption" ::= #ReadOnlyOption';
      "Logger" ::= #Logger';
      "DisableProposalForwarding" ::= #DisableProposalForwarding';
      "DisableConfChangeValidation" ::= #DisableConfChangeValidation';
      "StepDownOnRemoval" ::= #StepDownOnRemoval';
      "TraceLogger" ::= #TraceLogger'
    ]))%struct
    #(Config.mk ID' ElectionTick' HeartbeatTick' Storage' Applied' AsyncStorageWrites' MaxSizePerMsg' MaxCommittedSizePerReady' MaxUncommittedEntriesSize' MaxInflightMsgs' MaxInflightBytes' CheckQuorum' PreVote' ReadOnlyOption' Logger' DisableProposalForwarding' DisableConfChangeValidation' StepDownOnRemoval' TraceLogger').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Config_struct_fields_split dq l (v : Config.t) :
  StructFieldsSplit dq l v (
    "HID" ∷ l ↦s[raft.Config :: "ID"]{dq} v.(Config.ID') ∗
    "HElectionTick" ∷ l ↦s[raft.Config :: "ElectionTick"]{dq} v.(Config.ElectionTick') ∗
    "HHeartbeatTick" ∷ l ↦s[raft.Config :: "HeartbeatTick"]{dq} v.(Config.HeartbeatTick') ∗
    "HStorage" ∷ l ↦s[raft.Config :: "Storage"]{dq} v.(Config.Storage') ∗
    "HApplied" ∷ l ↦s[raft.Config :: "Applied"]{dq} v.(Config.Applied') ∗
    "HAsyncStorageWrites" ∷ l ↦s[raft.Config :: "AsyncStorageWrites"]{dq} v.(Config.AsyncStorageWrites') ∗
    "HMaxSizePerMsg" ∷ l ↦s[raft.Config :: "MaxSizePerMsg"]{dq} v.(Config.MaxSizePerMsg') ∗
    "HMaxCommittedSizePerReady" ∷ l ↦s[raft.Config :: "MaxCommittedSizePerReady"]{dq} v.(Config.MaxCommittedSizePerReady') ∗
    "HMaxUncommittedEntriesSize" ∷ l ↦s[raft.Config :: "MaxUncommittedEntriesSize"]{dq} v.(Config.MaxUncommittedEntriesSize') ∗
    "HMaxInflightMsgs" ∷ l ↦s[raft.Config :: "MaxInflightMsgs"]{dq} v.(Config.MaxInflightMsgs') ∗
    "HMaxInflightBytes" ∷ l ↦s[raft.Config :: "MaxInflightBytes"]{dq} v.(Config.MaxInflightBytes') ∗
    "HCheckQuorum" ∷ l ↦s[raft.Config :: "CheckQuorum"]{dq} v.(Config.CheckQuorum') ∗
    "HPreVote" ∷ l ↦s[raft.Config :: "PreVote"]{dq} v.(Config.PreVote') ∗
    "HReadOnlyOption" ∷ l ↦s[raft.Config :: "ReadOnlyOption"]{dq} v.(Config.ReadOnlyOption') ∗
    "HLogger" ∷ l ↦s[raft.Config :: "Logger"]{dq} v.(Config.Logger') ∗
    "HDisableProposalForwarding" ∷ l ↦s[raft.Config :: "DisableProposalForwarding"]{dq} v.(Config.DisableProposalForwarding') ∗
    "HDisableConfChangeValidation" ∷ l ↦s[raft.Config :: "DisableConfChangeValidation"]{dq} v.(Config.DisableConfChangeValidation') ∗
    "HStepDownOnRemoval" ∷ l ↦s[raft.Config :: "StepDownOnRemoval"]{dq} v.(Config.StepDownOnRemoval') ∗
    "HTraceLogger" ∷ l ↦s[raft.Config :: "TraceLogger"]{dq} v.(Config.TraceLogger')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Config.ID' v)) raft.Config "ID"%go.
  simpl_one_flatten_struct (# (Config.ElectionTick' v)) raft.Config "ElectionTick"%go.
  simpl_one_flatten_struct (# (Config.HeartbeatTick' v)) raft.Config "HeartbeatTick"%go.
  simpl_one_flatten_struct (# (Config.Storage' v)) raft.Config "Storage"%go.
  simpl_one_flatten_struct (# (Config.Applied' v)) raft.Config "Applied"%go.
  simpl_one_flatten_struct (# (Config.AsyncStorageWrites' v)) raft.Config "AsyncStorageWrites"%go.
  simpl_one_flatten_struct (# (Config.MaxSizePerMsg' v)) raft.Config "MaxSizePerMsg"%go.
  simpl_one_flatten_struct (# (Config.MaxCommittedSizePerReady' v)) raft.Config "MaxCommittedSizePerReady"%go.
  simpl_one_flatten_struct (# (Config.MaxUncommittedEntriesSize' v)) raft.Config "MaxUncommittedEntriesSize"%go.
  simpl_one_flatten_struct (# (Config.MaxInflightMsgs' v)) raft.Config "MaxInflightMsgs"%go.
  simpl_one_flatten_struct (# (Config.MaxInflightBytes' v)) raft.Config "MaxInflightBytes"%go.
  simpl_one_flatten_struct (# (Config.CheckQuorum' v)) raft.Config "CheckQuorum"%go.
  simpl_one_flatten_struct (# (Config.PreVote' v)) raft.Config "PreVote"%go.
  simpl_one_flatten_struct (# (Config.ReadOnlyOption' v)) raft.Config "ReadOnlyOption"%go.
  simpl_one_flatten_struct (# (Config.Logger' v)) raft.Config "Logger"%go.
  simpl_one_flatten_struct (# (Config.DisableProposalForwarding' v)) raft.Config "DisableProposalForwarding"%go.
  simpl_one_flatten_struct (# (Config.DisableConfChangeValidation' v)) raft.Config "DisableConfChangeValidation"%go.
  simpl_one_flatten_struct (# (Config.StepDownOnRemoval' v)) raft.Config "StepDownOnRemoval"%go.

  solve_field_ref_f.
Qed.

End instances.

Module entryPayloadSize.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End entryPayloadSize.

Module stepFunc.
Section def.
Context `{ffi_syntax}.
Definition t := func.t.
End def.
End stepFunc.

Module raft.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  id' : w64;
  Term' : w64;
  Vote' : w64;
  readStates' : slice.t;
  raftLog' : loc;
  maxMsgSize' : entryEncodingSize.t;
  maxUncommittedSize' : entryPayloadSize.t;
  trk' : tracker.ProgressTracker.t;
  state' : StateType.t;
  isLearner' : bool;
  msgs' : slice.t;
  msgsAfterAppend' : slice.t;
  lead' : w64;
  leadTransferee' : w64;
  pendingConfIndex' : w64;
  disableConfChangeValidation' : bool;
  uncommittedSize' : entryPayloadSize.t;
  readOnly' : loc;
  electionElapsed' : w64;
  heartbeatElapsed' : w64;
  checkQuorum' : bool;
  preVote' : bool;
  heartbeatTimeout' : w64;
  electionTimeout' : w64;
  randomizedElectionTimeout' : w64;
  disableProposalForwarding' : bool;
  stepDownOnRemoval' : bool;
  tick' : func.t;
  step' : stepFunc.t;
  logger' : Logger.t;
  pendingReadIndexMessages' : slice.t;
  traceLogger' : TraceLogger.t;
}.
End def.
End raft.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_raft : Settable _ :=
  settable! raft.mk < raft.id'; raft.Term'; raft.Vote'; raft.readStates'; raft.raftLog'; raft.maxMsgSize'; raft.maxUncommittedSize'; raft.trk'; raft.state'; raft.isLearner'; raft.msgs'; raft.msgsAfterAppend'; raft.lead'; raft.leadTransferee'; raft.pendingConfIndex'; raft.disableConfChangeValidation'; raft.uncommittedSize'; raft.readOnly'; raft.electionElapsed'; raft.heartbeatElapsed'; raft.checkQuorum'; raft.preVote'; raft.heartbeatTimeout'; raft.electionTimeout'; raft.randomizedElectionTimeout'; raft.disableProposalForwarding'; raft.stepDownOnRemoval'; raft.tick'; raft.step'; raft.logger'; raft.pendingReadIndexMessages'; raft.traceLogger' >.
Global Instance into_val_raft : IntoVal raft.t :=
  {| to_val_def v :=
    struct.val_aux raft.raft [
    "id" ::= #(raft.id' v);
    "Term" ::= #(raft.Term' v);
    "Vote" ::= #(raft.Vote' v);
    "readStates" ::= #(raft.readStates' v);
    "raftLog" ::= #(raft.raftLog' v);
    "maxMsgSize" ::= #(raft.maxMsgSize' v);
    "maxUncommittedSize" ::= #(raft.maxUncommittedSize' v);
    "trk" ::= #(raft.trk' v);
    "state" ::= #(raft.state' v);
    "isLearner" ::= #(raft.isLearner' v);
    "msgs" ::= #(raft.msgs' v);
    "msgsAfterAppend" ::= #(raft.msgsAfterAppend' v);
    "lead" ::= #(raft.lead' v);
    "leadTransferee" ::= #(raft.leadTransferee' v);
    "pendingConfIndex" ::= #(raft.pendingConfIndex' v);
    "disableConfChangeValidation" ::= #(raft.disableConfChangeValidation' v);
    "uncommittedSize" ::= #(raft.uncommittedSize' v);
    "readOnly" ::= #(raft.readOnly' v);
    "electionElapsed" ::= #(raft.electionElapsed' v);
    "heartbeatElapsed" ::= #(raft.heartbeatElapsed' v);
    "checkQuorum" ::= #(raft.checkQuorum' v);
    "preVote" ::= #(raft.preVote' v);
    "heartbeatTimeout" ::= #(raft.heartbeatTimeout' v);
    "electionTimeout" ::= #(raft.electionTimeout' v);
    "randomizedElectionTimeout" ::= #(raft.randomizedElectionTimeout' v);
    "disableProposalForwarding" ::= #(raft.disableProposalForwarding' v);
    "stepDownOnRemoval" ::= #(raft.stepDownOnRemoval' v);
    "tick" ::= #(raft.tick' v);
    "step" ::= #(raft.step' v);
    "logger" ::= #(raft.logger' v);
    "pendingReadIndexMessages" ::= #(raft.pendingReadIndexMessages' v);
    "traceLogger" ::= #(raft.traceLogger' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_raft : IntoValTyped raft.t raft.raft :=
{|
  default_val := raft.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_raft_id : IntoValStructField "id" raft.raft raft.id'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_Term : IntoValStructField "Term" raft.raft raft.Term'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_Vote : IntoValStructField "Vote" raft.raft raft.Vote'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_readStates : IntoValStructField "readStates" raft.raft raft.readStates'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_raftLog : IntoValStructField "raftLog" raft.raft raft.raftLog'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_maxMsgSize : IntoValStructField "maxMsgSize" raft.raft raft.maxMsgSize'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_maxUncommittedSize : IntoValStructField "maxUncommittedSize" raft.raft raft.maxUncommittedSize'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_trk : IntoValStructField "trk" raft.raft raft.trk'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_state : IntoValStructField "state" raft.raft raft.state'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_isLearner : IntoValStructField "isLearner" raft.raft raft.isLearner'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_msgs : IntoValStructField "msgs" raft.raft raft.msgs'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_msgsAfterAppend : IntoValStructField "msgsAfterAppend" raft.raft raft.msgsAfterAppend'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_lead : IntoValStructField "lead" raft.raft raft.lead'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_leadTransferee : IntoValStructField "leadTransferee" raft.raft raft.leadTransferee'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_pendingConfIndex : IntoValStructField "pendingConfIndex" raft.raft raft.pendingConfIndex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_disableConfChangeValidation : IntoValStructField "disableConfChangeValidation" raft.raft raft.disableConfChangeValidation'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_uncommittedSize : IntoValStructField "uncommittedSize" raft.raft raft.uncommittedSize'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_readOnly : IntoValStructField "readOnly" raft.raft raft.readOnly'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_electionElapsed : IntoValStructField "electionElapsed" raft.raft raft.electionElapsed'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_heartbeatElapsed : IntoValStructField "heartbeatElapsed" raft.raft raft.heartbeatElapsed'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_checkQuorum : IntoValStructField "checkQuorum" raft.raft raft.checkQuorum'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_preVote : IntoValStructField "preVote" raft.raft raft.preVote'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_heartbeatTimeout : IntoValStructField "heartbeatTimeout" raft.raft raft.heartbeatTimeout'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_electionTimeout : IntoValStructField "electionTimeout" raft.raft raft.electionTimeout'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_randomizedElectionTimeout : IntoValStructField "randomizedElectionTimeout" raft.raft raft.randomizedElectionTimeout'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_disableProposalForwarding : IntoValStructField "disableProposalForwarding" raft.raft raft.disableProposalForwarding'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_stepDownOnRemoval : IntoValStructField "stepDownOnRemoval" raft.raft raft.stepDownOnRemoval'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_tick : IntoValStructField "tick" raft.raft raft.tick'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_step : IntoValStructField "step" raft.raft raft.step'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_logger : IntoValStructField "logger" raft.raft raft.logger'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_pendingReadIndexMessages : IntoValStructField "pendingReadIndexMessages" raft.raft raft.pendingReadIndexMessages'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_raft_traceLogger : IntoValStructField "traceLogger" raft.raft raft.traceLogger'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_raft id' Term' Vote' readStates' raftLog' maxMsgSize' maxUncommittedSize' trk' state' isLearner' msgs' msgsAfterAppend' lead' leadTransferee' pendingConfIndex' disableConfChangeValidation' uncommittedSize' readOnly' electionElapsed' heartbeatElapsed' checkQuorum' preVote' heartbeatTimeout' electionTimeout' randomizedElectionTimeout' disableProposalForwarding' stepDownOnRemoval' tick' step' logger' pendingReadIndexMessages' traceLogger':
  PureWp True
    (struct.make #raft.raft (alist_val [
      "id" ::= #id';
      "Term" ::= #Term';
      "Vote" ::= #Vote';
      "readStates" ::= #readStates';
      "raftLog" ::= #raftLog';
      "maxMsgSize" ::= #maxMsgSize';
      "maxUncommittedSize" ::= #maxUncommittedSize';
      "trk" ::= #trk';
      "state" ::= #state';
      "isLearner" ::= #isLearner';
      "msgs" ::= #msgs';
      "msgsAfterAppend" ::= #msgsAfterAppend';
      "lead" ::= #lead';
      "leadTransferee" ::= #leadTransferee';
      "pendingConfIndex" ::= #pendingConfIndex';
      "disableConfChangeValidation" ::= #disableConfChangeValidation';
      "uncommittedSize" ::= #uncommittedSize';
      "readOnly" ::= #readOnly';
      "electionElapsed" ::= #electionElapsed';
      "heartbeatElapsed" ::= #heartbeatElapsed';
      "checkQuorum" ::= #checkQuorum';
      "preVote" ::= #preVote';
      "heartbeatTimeout" ::= #heartbeatTimeout';
      "electionTimeout" ::= #electionTimeout';
      "randomizedElectionTimeout" ::= #randomizedElectionTimeout';
      "disableProposalForwarding" ::= #disableProposalForwarding';
      "stepDownOnRemoval" ::= #stepDownOnRemoval';
      "tick" ::= #tick';
      "step" ::= #step';
      "logger" ::= #logger';
      "pendingReadIndexMessages" ::= #pendingReadIndexMessages';
      "traceLogger" ::= #traceLogger'
    ]))%struct
    #(raft.mk id' Term' Vote' readStates' raftLog' maxMsgSize' maxUncommittedSize' trk' state' isLearner' msgs' msgsAfterAppend' lead' leadTransferee' pendingConfIndex' disableConfChangeValidation' uncommittedSize' readOnly' electionElapsed' heartbeatElapsed' checkQuorum' preVote' heartbeatTimeout' electionTimeout' randomizedElectionTimeout' disableProposalForwarding' stepDownOnRemoval' tick' step' logger' pendingReadIndexMessages' traceLogger').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance raft_struct_fields_split dq l (v : raft.t) :
  StructFieldsSplit dq l v (
    "Hid" ∷ l ↦s[raft.raft :: "id"]{dq} v.(raft.id') ∗
    "HTerm" ∷ l ↦s[raft.raft :: "Term"]{dq} v.(raft.Term') ∗
    "HVote" ∷ l ↦s[raft.raft :: "Vote"]{dq} v.(raft.Vote') ∗
    "HreadStates" ∷ l ↦s[raft.raft :: "readStates"]{dq} v.(raft.readStates') ∗
    "HraftLog" ∷ l ↦s[raft.raft :: "raftLog"]{dq} v.(raft.raftLog') ∗
    "HmaxMsgSize" ∷ l ↦s[raft.raft :: "maxMsgSize"]{dq} v.(raft.maxMsgSize') ∗
    "HmaxUncommittedSize" ∷ l ↦s[raft.raft :: "maxUncommittedSize"]{dq} v.(raft.maxUncommittedSize') ∗
    "Htrk" ∷ l ↦s[raft.raft :: "trk"]{dq} v.(raft.trk') ∗
    "Hstate" ∷ l ↦s[raft.raft :: "state"]{dq} v.(raft.state') ∗
    "HisLearner" ∷ l ↦s[raft.raft :: "isLearner"]{dq} v.(raft.isLearner') ∗
    "Hmsgs" ∷ l ↦s[raft.raft :: "msgs"]{dq} v.(raft.msgs') ∗
    "HmsgsAfterAppend" ∷ l ↦s[raft.raft :: "msgsAfterAppend"]{dq} v.(raft.msgsAfterAppend') ∗
    "Hlead" ∷ l ↦s[raft.raft :: "lead"]{dq} v.(raft.lead') ∗
    "HleadTransferee" ∷ l ↦s[raft.raft :: "leadTransferee"]{dq} v.(raft.leadTransferee') ∗
    "HpendingConfIndex" ∷ l ↦s[raft.raft :: "pendingConfIndex"]{dq} v.(raft.pendingConfIndex') ∗
    "HdisableConfChangeValidation" ∷ l ↦s[raft.raft :: "disableConfChangeValidation"]{dq} v.(raft.disableConfChangeValidation') ∗
    "HuncommittedSize" ∷ l ↦s[raft.raft :: "uncommittedSize"]{dq} v.(raft.uncommittedSize') ∗
    "HreadOnly" ∷ l ↦s[raft.raft :: "readOnly"]{dq} v.(raft.readOnly') ∗
    "HelectionElapsed" ∷ l ↦s[raft.raft :: "electionElapsed"]{dq} v.(raft.electionElapsed') ∗
    "HheartbeatElapsed" ∷ l ↦s[raft.raft :: "heartbeatElapsed"]{dq} v.(raft.heartbeatElapsed') ∗
    "HcheckQuorum" ∷ l ↦s[raft.raft :: "checkQuorum"]{dq} v.(raft.checkQuorum') ∗
    "HpreVote" ∷ l ↦s[raft.raft :: "preVote"]{dq} v.(raft.preVote') ∗
    "HheartbeatTimeout" ∷ l ↦s[raft.raft :: "heartbeatTimeout"]{dq} v.(raft.heartbeatTimeout') ∗
    "HelectionTimeout" ∷ l ↦s[raft.raft :: "electionTimeout"]{dq} v.(raft.electionTimeout') ∗
    "HrandomizedElectionTimeout" ∷ l ↦s[raft.raft :: "randomizedElectionTimeout"]{dq} v.(raft.randomizedElectionTimeout') ∗
    "HdisableProposalForwarding" ∷ l ↦s[raft.raft :: "disableProposalForwarding"]{dq} v.(raft.disableProposalForwarding') ∗
    "HstepDownOnRemoval" ∷ l ↦s[raft.raft :: "stepDownOnRemoval"]{dq} v.(raft.stepDownOnRemoval') ∗
    "Htick" ∷ l ↦s[raft.raft :: "tick"]{dq} v.(raft.tick') ∗
    "Hstep" ∷ l ↦s[raft.raft :: "step"]{dq} v.(raft.step') ∗
    "Hlogger" ∷ l ↦s[raft.raft :: "logger"]{dq} v.(raft.logger') ∗
    "HpendingReadIndexMessages" ∷ l ↦s[raft.raft :: "pendingReadIndexMessages"]{dq} v.(raft.pendingReadIndexMessages') ∗
    "HtraceLogger" ∷ l ↦s[raft.raft :: "traceLogger"]{dq} v.(raft.traceLogger')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (raft.id' v)) raft.raft "id"%go.
  simpl_one_flatten_struct (# (raft.Term' v)) raft.raft "Term"%go.
  simpl_one_flatten_struct (# (raft.Vote' v)) raft.raft "Vote"%go.
  simpl_one_flatten_struct (# (raft.readStates' v)) raft.raft "readStates"%go.
  simpl_one_flatten_struct (# (raft.raftLog' v)) raft.raft "raftLog"%go.
  simpl_one_flatten_struct (# (raft.maxMsgSize' v)) raft.raft "maxMsgSize"%go.
  simpl_one_flatten_struct (# (raft.maxUncommittedSize' v)) raft.raft "maxUncommittedSize"%go.
  simpl_one_flatten_struct (# (raft.trk' v)) raft.raft "trk"%go.
  simpl_one_flatten_struct (# (raft.state' v)) raft.raft "state"%go.
  simpl_one_flatten_struct (# (raft.isLearner' v)) raft.raft "isLearner"%go.
  simpl_one_flatten_struct (# (raft.msgs' v)) raft.raft "msgs"%go.
  simpl_one_flatten_struct (# (raft.msgsAfterAppend' v)) raft.raft "msgsAfterAppend"%go.
  simpl_one_flatten_struct (# (raft.lead' v)) raft.raft "lead"%go.
  simpl_one_flatten_struct (# (raft.leadTransferee' v)) raft.raft "leadTransferee"%go.
  simpl_one_flatten_struct (# (raft.pendingConfIndex' v)) raft.raft "pendingConfIndex"%go.
  simpl_one_flatten_struct (# (raft.disableConfChangeValidation' v)) raft.raft "disableConfChangeValidation"%go.
  simpl_one_flatten_struct (# (raft.uncommittedSize' v)) raft.raft "uncommittedSize"%go.
  simpl_one_flatten_struct (# (raft.readOnly' v)) raft.raft "readOnly"%go.
  simpl_one_flatten_struct (# (raft.electionElapsed' v)) raft.raft "electionElapsed"%go.
  simpl_one_flatten_struct (# (raft.heartbeatElapsed' v)) raft.raft "heartbeatElapsed"%go.
  simpl_one_flatten_struct (# (raft.checkQuorum' v)) raft.raft "checkQuorum"%go.
  simpl_one_flatten_struct (# (raft.preVote' v)) raft.raft "preVote"%go.
  simpl_one_flatten_struct (# (raft.heartbeatTimeout' v)) raft.raft "heartbeatTimeout"%go.
  simpl_one_flatten_struct (# (raft.electionTimeout' v)) raft.raft "electionTimeout"%go.
  simpl_one_flatten_struct (# (raft.randomizedElectionTimeout' v)) raft.raft "randomizedElectionTimeout"%go.
  simpl_one_flatten_struct (# (raft.disableProposalForwarding' v)) raft.raft "disableProposalForwarding"%go.
  simpl_one_flatten_struct (# (raft.stepDownOnRemoval' v)) raft.raft "stepDownOnRemoval"%go.
  simpl_one_flatten_struct (# (raft.tick' v)) raft.raft "tick"%go.
  simpl_one_flatten_struct (# (raft.step' v)) raft.raft "step"%go.
  simpl_one_flatten_struct (# (raft.logger' v)) raft.raft "logger"%go.
  simpl_one_flatten_struct (# (raft.pendingReadIndexMessages' v)) raft.raft "pendingReadIndexMessages"%go.

  solve_field_ref_f.
Qed.

End instances.

Module RawNode.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  raft' : loc;
  asyncStorageWrites' : bool;
  prevSoftSt' : loc;
  prevHardSt' : raftpb.HardState.t;
  stepsOnAdvance' : slice.t;
}.
End def.
End RawNode.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_RawNode : Settable _ :=
  settable! RawNode.mk < RawNode.raft'; RawNode.asyncStorageWrites'; RawNode.prevSoftSt'; RawNode.prevHardSt'; RawNode.stepsOnAdvance' >.
Global Instance into_val_RawNode : IntoVal RawNode.t :=
  {| to_val_def v :=
    struct.val_aux raft.RawNode [
    "raft" ::= #(RawNode.raft' v);
    "asyncStorageWrites" ::= #(RawNode.asyncStorageWrites' v);
    "prevSoftSt" ::= #(RawNode.prevSoftSt' v);
    "prevHardSt" ::= #(RawNode.prevHardSt' v);
    "stepsOnAdvance" ::= #(RawNode.stepsOnAdvance' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_RawNode : IntoValTyped RawNode.t raft.RawNode :=
{|
  default_val := RawNode.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_RawNode_raft : IntoValStructField "raft" raft.RawNode RawNode.raft'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_RawNode_asyncStorageWrites : IntoValStructField "asyncStorageWrites" raft.RawNode RawNode.asyncStorageWrites'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_RawNode_prevSoftSt : IntoValStructField "prevSoftSt" raft.RawNode RawNode.prevSoftSt'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_RawNode_prevHardSt : IntoValStructField "prevHardSt" raft.RawNode RawNode.prevHardSt'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_RawNode_stepsOnAdvance : IntoValStructField "stepsOnAdvance" raft.RawNode RawNode.stepsOnAdvance'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_RawNode raft' asyncStorageWrites' prevSoftSt' prevHardSt' stepsOnAdvance':
  PureWp True
    (struct.make #raft.RawNode (alist_val [
      "raft" ::= #raft';
      "asyncStorageWrites" ::= #asyncStorageWrites';
      "prevSoftSt" ::= #prevSoftSt';
      "prevHardSt" ::= #prevHardSt';
      "stepsOnAdvance" ::= #stepsOnAdvance'
    ]))%struct
    #(RawNode.mk raft' asyncStorageWrites' prevSoftSt' prevHardSt' stepsOnAdvance').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance RawNode_struct_fields_split dq l (v : RawNode.t) :
  StructFieldsSplit dq l v (
    "Hraft" ∷ l ↦s[raft.RawNode :: "raft"]{dq} v.(RawNode.raft') ∗
    "HasyncStorageWrites" ∷ l ↦s[raft.RawNode :: "asyncStorageWrites"]{dq} v.(RawNode.asyncStorageWrites') ∗
    "HprevSoftSt" ∷ l ↦s[raft.RawNode :: "prevSoftSt"]{dq} v.(RawNode.prevSoftSt') ∗
    "HprevHardSt" ∷ l ↦s[raft.RawNode :: "prevHardSt"]{dq} v.(RawNode.prevHardSt') ∗
    "HstepsOnAdvance" ∷ l ↦s[raft.RawNode :: "stepsOnAdvance"]{dq} v.(RawNode.stepsOnAdvance')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (RawNode.raft' v)) raft.RawNode "raft"%go.
  simpl_one_flatten_struct (# (RawNode.asyncStorageWrites' v)) raft.RawNode "asyncStorageWrites"%go.
  simpl_one_flatten_struct (# (RawNode.prevSoftSt' v)) raft.RawNode "prevSoftSt"%go.
  simpl_one_flatten_struct (# (RawNode.prevHardSt' v)) raft.RawNode "prevHardSt"%go.

  solve_field_ref_f.
Qed.

End instances.

Module ProgressType.
Section def.
Context `{ffi_syntax}.
Definition t := w8.
End def.
End ProgressType.

Module ReadState.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Index' : w64;
  RequestCtx' : slice.t;
}.
End def.
End ReadState.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_ReadState : Settable _ :=
  settable! ReadState.mk < ReadState.Index'; ReadState.RequestCtx' >.
Global Instance into_val_ReadState : IntoVal ReadState.t :=
  {| to_val_def v :=
    struct.val_aux raft.ReadState [
    "Index" ::= #(ReadState.Index' v);
    "RequestCtx" ::= #(ReadState.RequestCtx' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_ReadState : IntoValTyped ReadState.t raft.ReadState :=
{|
  default_val := ReadState.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_ReadState_Index : IntoValStructField "Index" raft.ReadState ReadState.Index'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_ReadState_RequestCtx : IntoValStructField "RequestCtx" raft.ReadState ReadState.RequestCtx'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_ReadState Index' RequestCtx':
  PureWp True
    (struct.make #raft.ReadState (alist_val [
      "Index" ::= #Index';
      "RequestCtx" ::= #RequestCtx'
    ]))%struct
    #(ReadState.mk Index' RequestCtx').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance ReadState_struct_fields_split dq l (v : ReadState.t) :
  StructFieldsSplit dq l v (
    "HIndex" ∷ l ↦s[raft.ReadState :: "Index"]{dq} v.(ReadState.Index') ∗
    "HRequestCtx" ∷ l ↦s[raft.ReadState :: "RequestCtx"]{dq} v.(ReadState.RequestCtx')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (ReadState.Index' v)) raft.ReadState "Index"%go.

  solve_field_ref_f.
Qed.

End instances.

Module readIndexStatus.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  req' : raftpb.Message.t;
  index' : w64;
  acks' : loc;
}.
End def.
End readIndexStatus.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_readIndexStatus : Settable _ :=
  settable! readIndexStatus.mk < readIndexStatus.req'; readIndexStatus.index'; readIndexStatus.acks' >.
Global Instance into_val_readIndexStatus : IntoVal readIndexStatus.t :=
  {| to_val_def v :=
    struct.val_aux raft.readIndexStatus [
    "req" ::= #(readIndexStatus.req' v);
    "index" ::= #(readIndexStatus.index' v);
    "acks" ::= #(readIndexStatus.acks' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_readIndexStatus : IntoValTyped readIndexStatus.t raft.readIndexStatus :=
{|
  default_val := readIndexStatus.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_readIndexStatus_req : IntoValStructField "req" raft.readIndexStatus readIndexStatus.req'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_readIndexStatus_index : IntoValStructField "index" raft.readIndexStatus readIndexStatus.index'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_readIndexStatus_acks : IntoValStructField "acks" raft.readIndexStatus readIndexStatus.acks'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_readIndexStatus req' index' acks':
  PureWp True
    (struct.make #raft.readIndexStatus (alist_val [
      "req" ::= #req';
      "index" ::= #index';
      "acks" ::= #acks'
    ]))%struct
    #(readIndexStatus.mk req' index' acks').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance readIndexStatus_struct_fields_split dq l (v : readIndexStatus.t) :
  StructFieldsSplit dq l v (
    "Hreq" ∷ l ↦s[raft.readIndexStatus :: "req"]{dq} v.(readIndexStatus.req') ∗
    "Hindex" ∷ l ↦s[raft.readIndexStatus :: "index"]{dq} v.(readIndexStatus.index') ∗
    "Hacks" ∷ l ↦s[raft.readIndexStatus :: "acks"]{dq} v.(readIndexStatus.acks')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (readIndexStatus.req' v)) raft.readIndexStatus "req"%go.
  simpl_one_flatten_struct (# (readIndexStatus.index' v)) raft.readIndexStatus "index"%go.

  solve_field_ref_f.
Qed.

End instances.

Module readOnly.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  option' : ReadOnlyOption.t;
  pendingReadIndex' : loc;
  readIndexQueue' : slice.t;
}.
End def.
End readOnly.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_readOnly : Settable _ :=
  settable! readOnly.mk < readOnly.option'; readOnly.pendingReadIndex'; readOnly.readIndexQueue' >.
Global Instance into_val_readOnly : IntoVal readOnly.t :=
  {| to_val_def v :=
    struct.val_aux raft.readOnly [
    "option" ::= #(readOnly.option' v);
    "pendingReadIndex" ::= #(readOnly.pendingReadIndex' v);
    "readIndexQueue" ::= #(readOnly.readIndexQueue' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_readOnly : IntoValTyped readOnly.t raft.readOnly :=
{|
  default_val := readOnly.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_readOnly_option : IntoValStructField "option" raft.readOnly readOnly.option'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_readOnly_pendingReadIndex : IntoValStructField "pendingReadIndex" raft.readOnly readOnly.pendingReadIndex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_readOnly_readIndexQueue : IntoValStructField "readIndexQueue" raft.readOnly readOnly.readIndexQueue'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_readOnly option' pendingReadIndex' readIndexQueue':
  PureWp True
    (struct.make #raft.readOnly (alist_val [
      "option" ::= #option';
      "pendingReadIndex" ::= #pendingReadIndex';
      "readIndexQueue" ::= #readIndexQueue'
    ]))%struct
    #(readOnly.mk option' pendingReadIndex' readIndexQueue').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance readOnly_struct_fields_split dq l (v : readOnly.t) :
  StructFieldsSplit dq l v (
    "Hoption" ∷ l ↦s[raft.readOnly :: "option"]{dq} v.(readOnly.option') ∗
    "HpendingReadIndex" ∷ l ↦s[raft.readOnly :: "pendingReadIndex"]{dq} v.(readOnly.pendingReadIndex') ∗
    "HreadIndexQueue" ∷ l ↦s[raft.readOnly :: "readIndexQueue"]{dq} v.(readOnly.readIndexQueue')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (readOnly.option' v)) raft.readOnly "option"%go.
  simpl_one_flatten_struct (# (readOnly.pendingReadIndex' v)) raft.readOnly "pendingReadIndex"%go.

  solve_field_ref_f.
Qed.

End instances.

Module TracingEvent.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End TracingEvent.

Section instances.
Context `{ffi_syntax}.
Global Instance into_val_TracingEvent : IntoVal TracingEvent.t :=
  {| to_val_def v :=
    struct.val_aux raft.TracingEvent [
    ]%struct
  |}.

Global Program Instance into_val_typed_TracingEvent : IntoValTyped TracingEvent.t raft.TracingEvent :=
{|
  default_val := TracingEvent.mk;
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_TracingEvent:
  PureWp True
    (struct.make #raft.TracingEvent (alist_val [
    ]))%struct
    #(TracingEvent.mk).
Proof. solve_struct_make_pure_wp. Qed.

End instances.

Module BasicStatus.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ID' : w64;
  HardState' : raftpb.HardState.t;
  SoftState' : SoftState.t;
  Applied' : w64;
  LeadTransferee' : w64;
}.
End def.
End BasicStatus.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_BasicStatus : Settable _ :=
  settable! BasicStatus.mk < BasicStatus.ID'; BasicStatus.HardState'; BasicStatus.SoftState'; BasicStatus.Applied'; BasicStatus.LeadTransferee' >.
Global Instance into_val_BasicStatus : IntoVal BasicStatus.t :=
  {| to_val_def v :=
    struct.val_aux raft.BasicStatus [
    "ID" ::= #(BasicStatus.ID' v);
    "HardState" ::= #(BasicStatus.HardState' v);
    "SoftState" ::= #(BasicStatus.SoftState' v);
    "Applied" ::= #(BasicStatus.Applied' v);
    "LeadTransferee" ::= #(BasicStatus.LeadTransferee' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_BasicStatus : IntoValTyped BasicStatus.t raft.BasicStatus :=
{|
  default_val := BasicStatus.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_BasicStatus_ID : IntoValStructField "ID" raft.BasicStatus BasicStatus.ID'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_BasicStatus_HardState : IntoValStructField "HardState" raft.BasicStatus BasicStatus.HardState'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_BasicStatus_SoftState : IntoValStructField "SoftState" raft.BasicStatus BasicStatus.SoftState'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_BasicStatus_Applied : IntoValStructField "Applied" raft.BasicStatus BasicStatus.Applied'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_BasicStatus_LeadTransferee : IntoValStructField "LeadTransferee" raft.BasicStatus BasicStatus.LeadTransferee'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_BasicStatus ID' HardState' SoftState' Applied' LeadTransferee':
  PureWp True
    (struct.make #raft.BasicStatus (alist_val [
      "ID" ::= #ID';
      "HardState" ::= #HardState';
      "SoftState" ::= #SoftState';
      "Applied" ::= #Applied';
      "LeadTransferee" ::= #LeadTransferee'
    ]))%struct
    #(BasicStatus.mk ID' HardState' SoftState' Applied' LeadTransferee').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance BasicStatus_struct_fields_split dq l (v : BasicStatus.t) :
  StructFieldsSplit dq l v (
    "HID" ∷ l ↦s[raft.BasicStatus :: "ID"]{dq} v.(BasicStatus.ID') ∗
    "HHardState" ∷ l ↦s[raft.BasicStatus :: "HardState"]{dq} v.(BasicStatus.HardState') ∗
    "HSoftState" ∷ l ↦s[raft.BasicStatus :: "SoftState"]{dq} v.(BasicStatus.SoftState') ∗
    "HApplied" ∷ l ↦s[raft.BasicStatus :: "Applied"]{dq} v.(BasicStatus.Applied') ∗
    "HLeadTransferee" ∷ l ↦s[raft.BasicStatus :: "LeadTransferee"]{dq} v.(BasicStatus.LeadTransferee')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (BasicStatus.ID' v)) raft.BasicStatus "ID"%go.
  simpl_one_flatten_struct (# (BasicStatus.HardState' v)) raft.BasicStatus "HardState"%go.
  simpl_one_flatten_struct (# (BasicStatus.SoftState' v)) raft.BasicStatus "SoftState"%go.
  simpl_one_flatten_struct (# (BasicStatus.Applied' v)) raft.BasicStatus "Applied"%go.

  solve_field_ref_f.
Qed.

End instances.

Module Status.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  BasicStatus' : BasicStatus.t;
  Config' : tracker.Config.t;
  Progress' : loc;
}.
End def.
End Status.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Status : Settable _ :=
  settable! Status.mk < Status.BasicStatus'; Status.Config'; Status.Progress' >.
Global Instance into_val_Status : IntoVal Status.t :=
  {| to_val_def v :=
    struct.val_aux raft.Status [
    "BasicStatus" ::= #(Status.BasicStatus' v);
    "Config" ::= #(Status.Config' v);
    "Progress" ::= #(Status.Progress' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Status : IntoValTyped Status.t raft.Status :=
{|
  default_val := Status.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Status_BasicStatus : IntoValStructField "BasicStatus" raft.Status Status.BasicStatus'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Status_Config : IntoValStructField "Config" raft.Status Status.Config'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Status_Progress : IntoValStructField "Progress" raft.Status Status.Progress'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Status BasicStatus' Config' Progress':
  PureWp True
    (struct.make #raft.Status (alist_val [
      "BasicStatus" ::= #BasicStatus';
      "Config" ::= #Config';
      "Progress" ::= #Progress'
    ]))%struct
    #(Status.mk BasicStatus' Config' Progress').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Status_struct_fields_split dq l (v : Status.t) :
  StructFieldsSplit dq l v (
    "HBasicStatus" ∷ l ↦s[raft.Status :: "BasicStatus"]{dq} v.(Status.BasicStatus') ∗
    "HConfig" ∷ l ↦s[raft.Status :: "Config"]{dq} v.(Status.Config') ∗
    "HProgress" ∷ l ↦s[raft.Status :: "Progress"]{dq} v.(Status.Progress')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Status.BasicStatus' v)) raft.Status "BasicStatus"%go.
  simpl_one_flatten_struct (# (Status.Config' v)) raft.Status "Config"%go.

  solve_field_ref_f.
Qed.

End instances.

Module inMemStorageCallStats.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  initialState' : w64;
  firstIndex' : w64;
  lastIndex' : w64;
  entries' : w64;
  term' : w64;
  snapshot' : w64;
}.
End def.
End inMemStorageCallStats.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_inMemStorageCallStats : Settable _ :=
  settable! inMemStorageCallStats.mk < inMemStorageCallStats.initialState'; inMemStorageCallStats.firstIndex'; inMemStorageCallStats.lastIndex'; inMemStorageCallStats.entries'; inMemStorageCallStats.term'; inMemStorageCallStats.snapshot' >.
Global Instance into_val_inMemStorageCallStats : IntoVal inMemStorageCallStats.t :=
  {| to_val_def v :=
    struct.val_aux raft.inMemStorageCallStats [
    "initialState" ::= #(inMemStorageCallStats.initialState' v);
    "firstIndex" ::= #(inMemStorageCallStats.firstIndex' v);
    "lastIndex" ::= #(inMemStorageCallStats.lastIndex' v);
    "entries" ::= #(inMemStorageCallStats.entries' v);
    "term" ::= #(inMemStorageCallStats.term' v);
    "snapshot" ::= #(inMemStorageCallStats.snapshot' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_inMemStorageCallStats : IntoValTyped inMemStorageCallStats.t raft.inMemStorageCallStats :=
{|
  default_val := inMemStorageCallStats.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_inMemStorageCallStats_initialState : IntoValStructField "initialState" raft.inMemStorageCallStats inMemStorageCallStats.initialState'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_inMemStorageCallStats_firstIndex : IntoValStructField "firstIndex" raft.inMemStorageCallStats inMemStorageCallStats.firstIndex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_inMemStorageCallStats_lastIndex : IntoValStructField "lastIndex" raft.inMemStorageCallStats inMemStorageCallStats.lastIndex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_inMemStorageCallStats_entries : IntoValStructField "entries" raft.inMemStorageCallStats inMemStorageCallStats.entries'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_inMemStorageCallStats_term : IntoValStructField "term" raft.inMemStorageCallStats inMemStorageCallStats.term'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_inMemStorageCallStats_snapshot : IntoValStructField "snapshot" raft.inMemStorageCallStats inMemStorageCallStats.snapshot'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_inMemStorageCallStats initialState' firstIndex' lastIndex' entries' term' snapshot':
  PureWp True
    (struct.make #raft.inMemStorageCallStats (alist_val [
      "initialState" ::= #initialState';
      "firstIndex" ::= #firstIndex';
      "lastIndex" ::= #lastIndex';
      "entries" ::= #entries';
      "term" ::= #term';
      "snapshot" ::= #snapshot'
    ]))%struct
    #(inMemStorageCallStats.mk initialState' firstIndex' lastIndex' entries' term' snapshot').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance inMemStorageCallStats_struct_fields_split dq l (v : inMemStorageCallStats.t) :
  StructFieldsSplit dq l v (
    "HinitialState" ∷ l ↦s[raft.inMemStorageCallStats :: "initialState"]{dq} v.(inMemStorageCallStats.initialState') ∗
    "HfirstIndex" ∷ l ↦s[raft.inMemStorageCallStats :: "firstIndex"]{dq} v.(inMemStorageCallStats.firstIndex') ∗
    "HlastIndex" ∷ l ↦s[raft.inMemStorageCallStats :: "lastIndex"]{dq} v.(inMemStorageCallStats.lastIndex') ∗
    "Hentries" ∷ l ↦s[raft.inMemStorageCallStats :: "entries"]{dq} v.(inMemStorageCallStats.entries') ∗
    "Hterm" ∷ l ↦s[raft.inMemStorageCallStats :: "term"]{dq} v.(inMemStorageCallStats.term') ∗
    "Hsnapshot" ∷ l ↦s[raft.inMemStorageCallStats :: "snapshot"]{dq} v.(inMemStorageCallStats.snapshot')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (inMemStorageCallStats.initialState' v)) raft.inMemStorageCallStats "initialState"%go.
  simpl_one_flatten_struct (# (inMemStorageCallStats.firstIndex' v)) raft.inMemStorageCallStats "firstIndex"%go.
  simpl_one_flatten_struct (# (inMemStorageCallStats.lastIndex' v)) raft.inMemStorageCallStats "lastIndex"%go.
  simpl_one_flatten_struct (# (inMemStorageCallStats.entries' v)) raft.inMemStorageCallStats "entries"%go.
  simpl_one_flatten_struct (# (inMemStorageCallStats.term' v)) raft.inMemStorageCallStats "term"%go.

  solve_field_ref_f.
Qed.

End instances.

Module MemoryStorage.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Mutex' : sync.Mutex.t;
  hardState' : raftpb.HardState.t;
  snapshot' : raftpb.Snapshot.t;
  ents' : slice.t;
  callStats' : inMemStorageCallStats.t;
}.
End def.
End MemoryStorage.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_MemoryStorage : Settable _ :=
  settable! MemoryStorage.mk < MemoryStorage.Mutex'; MemoryStorage.hardState'; MemoryStorage.snapshot'; MemoryStorage.ents'; MemoryStorage.callStats' >.
Global Instance into_val_MemoryStorage : IntoVal MemoryStorage.t :=
  {| to_val_def v :=
    struct.val_aux raft.MemoryStorage [
    "Mutex" ::= #(MemoryStorage.Mutex' v);
    "hardState" ::= #(MemoryStorage.hardState' v);
    "snapshot" ::= #(MemoryStorage.snapshot' v);
    "ents" ::= #(MemoryStorage.ents' v);
    "callStats" ::= #(MemoryStorage.callStats' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_MemoryStorage : IntoValTyped MemoryStorage.t raft.MemoryStorage :=
{|
  default_val := MemoryStorage.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_MemoryStorage_Mutex : IntoValStructField "Mutex" raft.MemoryStorage MemoryStorage.Mutex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_MemoryStorage_hardState : IntoValStructField "hardState" raft.MemoryStorage MemoryStorage.hardState'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_MemoryStorage_snapshot : IntoValStructField "snapshot" raft.MemoryStorage MemoryStorage.snapshot'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_MemoryStorage_ents : IntoValStructField "ents" raft.MemoryStorage MemoryStorage.ents'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_MemoryStorage_callStats : IntoValStructField "callStats" raft.MemoryStorage MemoryStorage.callStats'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_MemoryStorage Mutex' hardState' snapshot' ents' callStats':
  PureWp True
    (struct.make #raft.MemoryStorage (alist_val [
      "Mutex" ::= #Mutex';
      "hardState" ::= #hardState';
      "snapshot" ::= #snapshot';
      "ents" ::= #ents';
      "callStats" ::= #callStats'
    ]))%struct
    #(MemoryStorage.mk Mutex' hardState' snapshot' ents' callStats').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance MemoryStorage_struct_fields_split dq l (v : MemoryStorage.t) :
  StructFieldsSplit dq l v (
    "HMutex" ∷ l ↦s[raft.MemoryStorage :: "Mutex"]{dq} v.(MemoryStorage.Mutex') ∗
    "HhardState" ∷ l ↦s[raft.MemoryStorage :: "hardState"]{dq} v.(MemoryStorage.hardState') ∗
    "Hsnapshot" ∷ l ↦s[raft.MemoryStorage :: "snapshot"]{dq} v.(MemoryStorage.snapshot') ∗
    "Hents" ∷ l ↦s[raft.MemoryStorage :: "ents"]{dq} v.(MemoryStorage.ents') ∗
    "HcallStats" ∷ l ↦s[raft.MemoryStorage :: "callStats"]{dq} v.(MemoryStorage.callStats')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (MemoryStorage.Mutex' v)) raft.MemoryStorage "Mutex"%go.
  simpl_one_flatten_struct (# (MemoryStorage.hardState' v)) raft.MemoryStorage "hardState"%go.
  simpl_one_flatten_struct (# (MemoryStorage.snapshot' v)) raft.MemoryStorage "snapshot"%go.
  simpl_one_flatten_struct (# (MemoryStorage.ents' v)) raft.MemoryStorage "ents"%go.

  solve_field_ref_f.
Qed.

End instances.

Module entryID.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  term' : w64;
  index' : w64;
}.
End def.
End entryID.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_entryID : Settable _ :=
  settable! entryID.mk < entryID.term'; entryID.index' >.
Global Instance into_val_entryID : IntoVal entryID.t :=
  {| to_val_def v :=
    struct.val_aux raft.entryID [
    "term" ::= #(entryID.term' v);
    "index" ::= #(entryID.index' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_entryID : IntoValTyped entryID.t raft.entryID :=
{|
  default_val := entryID.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_entryID_term : IntoValStructField "term" raft.entryID entryID.term'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_entryID_index : IntoValStructField "index" raft.entryID entryID.index'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_entryID term' index':
  PureWp True
    (struct.make #raft.entryID (alist_val [
      "term" ::= #term';
      "index" ::= #index'
    ]))%struct
    #(entryID.mk term' index').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance entryID_struct_fields_split dq l (v : entryID.t) :
  StructFieldsSplit dq l v (
    "Hterm" ∷ l ↦s[raft.entryID :: "term"]{dq} v.(entryID.term') ∗
    "Hindex" ∷ l ↦s[raft.entryID :: "index"]{dq} v.(entryID.index')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (entryID.term' v)) raft.entryID "term"%go.

  solve_field_ref_f.
Qed.

End instances.

Module logSlice.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  term' : w64;
  prev' : entryID.t;
  entries' : slice.t;
}.
End def.
End logSlice.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_logSlice : Settable _ :=
  settable! logSlice.mk < logSlice.term'; logSlice.prev'; logSlice.entries' >.
Global Instance into_val_logSlice : IntoVal logSlice.t :=
  {| to_val_def v :=
    struct.val_aux raft.logSlice [
    "term" ::= #(logSlice.term' v);
    "prev" ::= #(logSlice.prev' v);
    "entries" ::= #(logSlice.entries' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_logSlice : IntoValTyped logSlice.t raft.logSlice :=
{|
  default_val := logSlice.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_logSlice_term : IntoValStructField "term" raft.logSlice logSlice.term'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_logSlice_prev : IntoValStructField "prev" raft.logSlice logSlice.prev'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_logSlice_entries : IntoValStructField "entries" raft.logSlice logSlice.entries'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_logSlice term' prev' entries':
  PureWp True
    (struct.make #raft.logSlice (alist_val [
      "term" ::= #term';
      "prev" ::= #prev';
      "entries" ::= #entries'
    ]))%struct
    #(logSlice.mk term' prev' entries').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance logSlice_struct_fields_split dq l (v : logSlice.t) :
  StructFieldsSplit dq l v (
    "Hterm" ∷ l ↦s[raft.logSlice :: "term"]{dq} v.(logSlice.term') ∗
    "Hprev" ∷ l ↦s[raft.logSlice :: "prev"]{dq} v.(logSlice.prev') ∗
    "Hentries" ∷ l ↦s[raft.logSlice :: "entries"]{dq} v.(logSlice.entries')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (logSlice.term' v)) raft.logSlice "term"%go.
  simpl_one_flatten_struct (# (logSlice.prev' v)) raft.logSlice "prev"%go.

  solve_field_ref_f.
Qed.

End instances.

Module EntryFormatter.
Section def.
Context `{ffi_syntax}.
Definition t := func.t.
End def.
End EntryFormatter.

Section names.

Class GlobalAddrs :=
{
  defaultLogger : loc;
  discardLogger : loc;
  raftLoggerMu : loc;
  raftLogger : loc;
  emptyState : loc;
  ErrStopped : loc;
  ErrProposalDropped : loc;
  globalRand : loc;
  stmap : loc;
  errBreak : loc;
  ErrStepLocalMsg : loc;
  ErrStepPeerNotFound : loc;
  ErrCompacted : loc;
  ErrSnapOutOfDate : loc;
  ErrUnavailable : loc;
  ErrSnapshotTemporarilyUnavailable : loc;
  isLocalMsg : loc;
  isResponseMsg : loc;
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
    ("defaultLogger"%go, defaultLogger);
    ("discardLogger"%go, discardLogger);
    ("raftLoggerMu"%go, raftLoggerMu);
    ("raftLogger"%go, raftLogger);
    ("emptyState"%go, emptyState);
    ("ErrStopped"%go, ErrStopped);
    ("ErrProposalDropped"%go, ErrProposalDropped);
    ("globalRand"%go, globalRand);
    ("stmap"%go, stmap);
    ("errBreak"%go, errBreak);
    ("ErrStepLocalMsg"%go, ErrStepLocalMsg);
    ("ErrStepPeerNotFound"%go, ErrStepPeerNotFound);
    ("ErrCompacted"%go, ErrCompacted);
    ("ErrSnapOutOfDate"%go, ErrSnapOutOfDate);
    ("ErrUnavailable"%go, ErrUnavailable);
    ("ErrSnapshotTemporarilyUnavailable"%go, ErrSnapshotTemporarilyUnavailable);
    ("isLocalMsg"%go, isLocalMsg);
    ("isResponseMsg"%go, isResponseMsg)
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined raft :=
{|
  is_pkg_defined := is_global_definitions raft var_addrs;
|}.

Definition own_allocated : iProp Σ :=
  "HdefaultLogger" ∷ defaultLogger ↦ (default_val loc) ∗
  "HdiscardLogger" ∷ discardLogger ↦ (default_val loc) ∗
  "HraftLoggerMu" ∷ raftLoggerMu ↦ (default_val sync.Mutex.t) ∗
  "HraftLogger" ∷ raftLogger ↦ (default_val Logger.t) ∗
  "HemptyState" ∷ emptyState ↦ (default_val raftpb.HardState.t) ∗
  "HErrStopped" ∷ ErrStopped ↦ (default_val error.t) ∗
  "HErrProposalDropped" ∷ ErrProposalDropped ↦ (default_val error.t) ∗
  "HglobalRand" ∷ globalRand ↦ (default_val loc) ∗
  "Hstmap" ∷ stmap ↦ (default_val (vec go_string (uint.nat (W64 4)))) ∗
  "HerrBreak" ∷ errBreak ↦ (default_val error.t) ∗
  "HErrStepLocalMsg" ∷ ErrStepLocalMsg ↦ (default_val error.t) ∗
  "HErrStepPeerNotFound" ∷ ErrStepPeerNotFound ↦ (default_val error.t) ∗
  "HErrCompacted" ∷ ErrCompacted ↦ (default_val error.t) ∗
  "HErrSnapOutOfDate" ∷ ErrSnapOutOfDate ↦ (default_val error.t) ∗
  "HErrUnavailable" ∷ ErrUnavailable ↦ (default_val error.t) ∗
  "HErrSnapshotTemporarilyUnavailable" ∷ ErrSnapshotTemporarilyUnavailable ↦ (default_val error.t) ∗
  "HisLocalMsg" ∷ isLocalMsg ↦ (default_val (vec bool (uint.nat (W64 23)))) ∗
  "HisResponseMsg" ∷ isResponseMsg ↦ (default_val (vec bool (uint.nat (W64 23)))).

Global Instance wp_globals_get_defaultLogger : 
  WpGlobalsGet raft "defaultLogger" defaultLogger (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_discardLogger : 
  WpGlobalsGet raft "discardLogger" discardLogger (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_raftLoggerMu : 
  WpGlobalsGet raft "raftLoggerMu" raftLoggerMu (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_raftLogger : 
  WpGlobalsGet raft "raftLogger" raftLogger (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_emptyState : 
  WpGlobalsGet raft "emptyState" emptyState (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrStopped : 
  WpGlobalsGet raft "ErrStopped" ErrStopped (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrProposalDropped : 
  WpGlobalsGet raft "ErrProposalDropped" ErrProposalDropped (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_globalRand : 
  WpGlobalsGet raft "globalRand" globalRand (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_stmap : 
  WpGlobalsGet raft "stmap" stmap (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_errBreak : 
  WpGlobalsGet raft "errBreak" errBreak (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrStepLocalMsg : 
  WpGlobalsGet raft "ErrStepLocalMsg" ErrStepLocalMsg (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrStepPeerNotFound : 
  WpGlobalsGet raft "ErrStepPeerNotFound" ErrStepPeerNotFound (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrCompacted : 
  WpGlobalsGet raft "ErrCompacted" ErrCompacted (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrSnapOutOfDate : 
  WpGlobalsGet raft "ErrSnapOutOfDate" ErrSnapOutOfDate (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrUnavailable : 
  WpGlobalsGet raft "ErrUnavailable" ErrUnavailable (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrSnapshotTemporarilyUnavailable : 
  WpGlobalsGet raft "ErrSnapshotTemporarilyUnavailable" ErrSnapshotTemporarilyUnavailable (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_isLocalMsg : 
  WpGlobalsGet raft "isLocalMsg" isLocalMsg (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_isResponseMsg : 
  WpGlobalsGet raft "isResponseMsg" isResponseMsg (is_pkg_defined raft).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_func_call_newLog :
  WpFuncCall raft "newLog" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_newLogWithSize :
  WpFuncCall raft "newLogWithSize" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_SetLogger :
  WpFuncCall raft "SetLogger" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ResetDefaultLogger :
  WpFuncCall raft "ResetDefaultLogger" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_getLogger :
  WpFuncCall raft "getLogger" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_header :
  WpFuncCall raft "header" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isHardStateEqual :
  WpFuncCall raft "isHardStateEqual" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsEmptyHardState :
  WpFuncCall raft "IsEmptyHardState" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsEmptySnap :
  WpFuncCall raft "IsEmptySnap" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_setupNode :
  WpFuncCall raft "setupNode" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_StartNode :
  WpFuncCall raft "StartNode" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_RestartNode :
  WpFuncCall raft "RestartNode" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_newNode :
  WpFuncCall raft "newNode" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_confChangeToMsg :
  WpFuncCall raft "confChangeToMsg" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_newRaft :
  WpFuncCall raft "newRaft" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_stepLeader :
  WpFuncCall raft "stepLeader" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_stepCandidate :
  WpFuncCall raft "stepCandidate" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_stepFollower :
  WpFuncCall raft "stepFollower" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_logSliceFromMsgApp :
  WpFuncCall raft "logSliceFromMsgApp" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_releasePendingReadIndexMessages :
  WpFuncCall raft "releasePendingReadIndexMessages" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_sendMsgReadIndexResponse :
  WpFuncCall raft "sendMsgReadIndexResponse" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewRawNode :
  WpFuncCall raft "NewRawNode" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MustSync :
  WpFuncCall raft "MustSync" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_needStorageAppendMsg :
  WpFuncCall raft "needStorageAppendMsg" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_needStorageAppendRespMsg :
  WpFuncCall raft "needStorageAppendRespMsg" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_newStorageAppendMsg :
  WpFuncCall raft "newStorageAppendMsg" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_newStorageAppendRespMsg :
  WpFuncCall raft "newStorageAppendRespMsg" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_needStorageApplyMsg :
  WpFuncCall raft "needStorageApplyMsg" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_needStorageApplyRespMsg :
  WpFuncCall raft "needStorageApplyRespMsg" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_newStorageApplyMsg :
  WpFuncCall raft "newStorageApplyMsg" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_newStorageApplyRespMsg :
  WpFuncCall raft "newStorageApplyRespMsg" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_newReadOnly :
  WpFuncCall raft "newReadOnly" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_traceInitState :
  WpFuncCall raft "traceInitState" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_traceReady :
  WpFuncCall raft "traceReady" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_traceCommit :
  WpFuncCall raft "traceCommit" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_traceReplicate :
  WpFuncCall raft "traceReplicate" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_traceBecomeFollower :
  WpFuncCall raft "traceBecomeFollower" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_traceBecomeCandidate :
  WpFuncCall raft "traceBecomeCandidate" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_traceBecomeLeader :
  WpFuncCall raft "traceBecomeLeader" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_traceChangeConfEvent :
  WpFuncCall raft "traceChangeConfEvent" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_traceConfChangeEvent :
  WpFuncCall raft "traceConfChangeEvent" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_traceSendMessage :
  WpFuncCall raft "traceSendMessage" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_traceReceiveMessage :
  WpFuncCall raft "traceReceiveMessage" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_getProgressCopy :
  WpFuncCall raft "getProgressCopy" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_getBasicStatus :
  WpFuncCall raft "getBasicStatus" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_getStatus :
  WpFuncCall raft "getStatus" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewMemoryStorage :
  WpFuncCall raft "NewMemoryStorage" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_pbEntryID :
  WpFuncCall raft "pbEntryID" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isMsgInArray :
  WpFuncCall raft "isMsgInArray" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsLocalMsg :
  WpFuncCall raft "IsLocalMsg" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsResponseMsg :
  WpFuncCall raft "IsResponseMsg" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsLocalMsgTarget :
  WpFuncCall raft "IsLocalMsgTarget" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_voteRespMsgType :
  WpFuncCall raft "voteRespMsgType" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DescribeHardState :
  WpFuncCall raft "DescribeHardState" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DescribeSoftState :
  WpFuncCall raft "DescribeSoftState" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DescribeConfState :
  WpFuncCall raft "DescribeConfState" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DescribeSnapshot :
  WpFuncCall raft "DescribeSnapshot" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DescribeReady :
  WpFuncCall raft "DescribeReady" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DescribeMessage :
  WpFuncCall raft "DescribeMessage" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_describeMessageWithIndent :
  WpFuncCall raft "describeMessageWithIndent" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_describeTarget :
  WpFuncCall raft "describeTarget" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DescribeEntry :
  WpFuncCall raft "DescribeEntry" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DescribeEntries :
  WpFuncCall raft "DescribeEntries" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_entsSize :
  WpFuncCall raft "entsSize" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_limitSize :
  WpFuncCall raft "limitSize" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_payloadSize :
  WpFuncCall raft "payloadSize" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_payloadsSize :
  WpFuncCall raft "payloadsSize" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_assertConfStatesEquivalent :
  WpFuncCall raft "assertConfStatesEquivalent" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_extend :
  WpFuncCall raft "extend" _ (is_pkg_defined raft) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_String :
  WpMethodCall raft "raftLog'ptr" "String" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_acceptApplying :
  WpMethodCall raft "raftLog'ptr" "acceptApplying" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_acceptUnstable :
  WpMethodCall raft "raftLog'ptr" "acceptUnstable" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_allEntries :
  WpMethodCall raft "raftLog'ptr" "allEntries" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_append :
  WpMethodCall raft "raftLog'ptr" "append" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_appliedTo :
  WpMethodCall raft "raftLog'ptr" "appliedTo" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_commitTo :
  WpMethodCall raft "raftLog'ptr" "commitTo" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_entries :
  WpMethodCall raft "raftLog'ptr" "entries" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_findConflict :
  WpMethodCall raft "raftLog'ptr" "findConflict" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_findConflictByTerm :
  WpMethodCall raft "raftLog'ptr" "findConflictByTerm" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_firstIndex :
  WpMethodCall raft "raftLog'ptr" "firstIndex" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_hasNextCommittedEnts :
  WpMethodCall raft "raftLog'ptr" "hasNextCommittedEnts" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_hasNextOrInProgressSnapshot :
  WpMethodCall raft "raftLog'ptr" "hasNextOrInProgressSnapshot" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_hasNextOrInProgressUnstableEnts :
  WpMethodCall raft "raftLog'ptr" "hasNextOrInProgressUnstableEnts" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_hasNextUnstableEnts :
  WpMethodCall raft "raftLog'ptr" "hasNextUnstableEnts" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_hasNextUnstableSnapshot :
  WpMethodCall raft "raftLog'ptr" "hasNextUnstableSnapshot" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_isUpToDate :
  WpMethodCall raft "raftLog'ptr" "isUpToDate" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_lastEntryID :
  WpMethodCall raft "raftLog'ptr" "lastEntryID" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_lastIndex :
  WpMethodCall raft "raftLog'ptr" "lastIndex" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_matchTerm :
  WpMethodCall raft "raftLog'ptr" "matchTerm" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_maxAppliableIndex :
  WpMethodCall raft "raftLog'ptr" "maxAppliableIndex" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_maybeAppend :
  WpMethodCall raft "raftLog'ptr" "maybeAppend" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_maybeCommit :
  WpMethodCall raft "raftLog'ptr" "maybeCommit" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_mustCheckOutOfBounds :
  WpMethodCall raft "raftLog'ptr" "mustCheckOutOfBounds" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_nextCommittedEnts :
  WpMethodCall raft "raftLog'ptr" "nextCommittedEnts" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_nextUnstableEnts :
  WpMethodCall raft "raftLog'ptr" "nextUnstableEnts" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_nextUnstableSnapshot :
  WpMethodCall raft "raftLog'ptr" "nextUnstableSnapshot" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_restore :
  WpMethodCall raft "raftLog'ptr" "restore" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_scan :
  WpMethodCall raft "raftLog'ptr" "scan" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_slice :
  WpMethodCall raft "raftLog'ptr" "slice" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_snapshot :
  WpMethodCall raft "raftLog'ptr" "snapshot" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_stableSnapTo :
  WpMethodCall raft "raftLog'ptr" "stableSnapTo" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_stableTo :
  WpMethodCall raft "raftLog'ptr" "stableTo" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_term :
  WpMethodCall raft "raftLog'ptr" "term" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raftLog'ptr_zeroTermOnOutOfBounds :
  WpMethodCall raft "raftLog'ptr" "zeroTermOnOutOfBounds" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_unstable'ptr_acceptInProgress :
  WpMethodCall raft "unstable'ptr" "acceptInProgress" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_unstable'ptr_maybeFirstIndex :
  WpMethodCall raft "unstable'ptr" "maybeFirstIndex" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_unstable'ptr_maybeLastIndex :
  WpMethodCall raft "unstable'ptr" "maybeLastIndex" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_unstable'ptr_maybeTerm :
  WpMethodCall raft "unstable'ptr" "maybeTerm" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_unstable'ptr_mustCheckOutOfBounds :
  WpMethodCall raft "unstable'ptr" "mustCheckOutOfBounds" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_unstable'ptr_nextEntries :
  WpMethodCall raft "unstable'ptr" "nextEntries" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_unstable'ptr_nextSnapshot :
  WpMethodCall raft "unstable'ptr" "nextSnapshot" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_unstable'ptr_restore :
  WpMethodCall raft "unstable'ptr" "restore" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_unstable'ptr_shrinkEntriesArray :
  WpMethodCall raft "unstable'ptr" "shrinkEntriesArray" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_unstable'ptr_slice :
  WpMethodCall raft "unstable'ptr" "slice" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_unstable'ptr_stableSnapTo :
  WpMethodCall raft "unstable'ptr" "stableSnapTo" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_unstable'ptr_stableTo :
  WpMethodCall raft "unstable'ptr" "stableTo" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_unstable'ptr_truncateAndAppend :
  WpMethodCall raft "unstable'ptr" "truncateAndAppend" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger_Fatalln :
  WpMethodCall raft "DefaultLogger" "Fatalln" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger_Flags :
  WpMethodCall raft "DefaultLogger" "Flags" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger_Output :
  WpMethodCall raft "DefaultLogger" "Output" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger_Panicln :
  WpMethodCall raft "DefaultLogger" "Panicln" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger_Prefix :
  WpMethodCall raft "DefaultLogger" "Prefix" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger_Print :
  WpMethodCall raft "DefaultLogger" "Print" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger_Printf :
  WpMethodCall raft "DefaultLogger" "Printf" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger_Println :
  WpMethodCall raft "DefaultLogger" "Println" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger_SetFlags :
  WpMethodCall raft "DefaultLogger" "SetFlags" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger_SetOutput :
  WpMethodCall raft "DefaultLogger" "SetOutput" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger_SetPrefix :
  WpMethodCall raft "DefaultLogger" "SetPrefix" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger_Writer :
  WpMethodCall raft "DefaultLogger" "Writer" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger_output :
  WpMethodCall raft "DefaultLogger" "output" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Debug :
  WpMethodCall raft "DefaultLogger'ptr" "Debug" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Debugf :
  WpMethodCall raft "DefaultLogger'ptr" "Debugf" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_EnableDebug :
  WpMethodCall raft "DefaultLogger'ptr" "EnableDebug" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_EnableTimestamps :
  WpMethodCall raft "DefaultLogger'ptr" "EnableTimestamps" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Error :
  WpMethodCall raft "DefaultLogger'ptr" "Error" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Errorf :
  WpMethodCall raft "DefaultLogger'ptr" "Errorf" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Fatal :
  WpMethodCall raft "DefaultLogger'ptr" "Fatal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Fatalf :
  WpMethodCall raft "DefaultLogger'ptr" "Fatalf" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Fatalln :
  WpMethodCall raft "DefaultLogger'ptr" "Fatalln" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Flags :
  WpMethodCall raft "DefaultLogger'ptr" "Flags" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Info :
  WpMethodCall raft "DefaultLogger'ptr" "Info" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Infof :
  WpMethodCall raft "DefaultLogger'ptr" "Infof" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Output :
  WpMethodCall raft "DefaultLogger'ptr" "Output" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Panic :
  WpMethodCall raft "DefaultLogger'ptr" "Panic" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Panicf :
  WpMethodCall raft "DefaultLogger'ptr" "Panicf" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Panicln :
  WpMethodCall raft "DefaultLogger'ptr" "Panicln" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Prefix :
  WpMethodCall raft "DefaultLogger'ptr" "Prefix" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Print :
  WpMethodCall raft "DefaultLogger'ptr" "Print" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Printf :
  WpMethodCall raft "DefaultLogger'ptr" "Printf" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Println :
  WpMethodCall raft "DefaultLogger'ptr" "Println" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_SetFlags :
  WpMethodCall raft "DefaultLogger'ptr" "SetFlags" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_SetOutput :
  WpMethodCall raft "DefaultLogger'ptr" "SetOutput" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_SetPrefix :
  WpMethodCall raft "DefaultLogger'ptr" "SetPrefix" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Warning :
  WpMethodCall raft "DefaultLogger'ptr" "Warning" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Warningf :
  WpMethodCall raft "DefaultLogger'ptr" "Warningf" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_Writer :
  WpMethodCall raft "DefaultLogger'ptr" "Writer" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_DefaultLogger'ptr_output :
  WpMethodCall raft "DefaultLogger'ptr" "output" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_SoftState'ptr_equal :
  WpMethodCall raft "SoftState'ptr" "equal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready_equal :
  WpMethodCall raft "Ready" "equal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_Descriptor :
  WpMethodCall raft "Ready'ptr" "Descriptor" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_Marshal :
  WpMethodCall raft "Ready'ptr" "Marshal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_MarshalTo :
  WpMethodCall raft "Ready'ptr" "MarshalTo" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_MarshalToSizedBuffer :
  WpMethodCall raft "Ready'ptr" "MarshalToSizedBuffer" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_ProtoMessage :
  WpMethodCall raft "Ready'ptr" "ProtoMessage" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_Reset :
  WpMethodCall raft "Ready'ptr" "Reset" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_Size :
  WpMethodCall raft "Ready'ptr" "Size" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_String :
  WpMethodCall raft "Ready'ptr" "String" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_Unmarshal :
  WpMethodCall raft "Ready'ptr" "Unmarshal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_XXX_DiscardUnknown :
  WpMethodCall raft "Ready'ptr" "XXX_DiscardUnknown" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_XXX_Marshal :
  WpMethodCall raft "Ready'ptr" "XXX_Marshal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_XXX_Merge :
  WpMethodCall raft "Ready'ptr" "XXX_Merge" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_XXX_Size :
  WpMethodCall raft "Ready'ptr" "XXX_Size" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_XXX_Unmarshal :
  WpMethodCall raft "Ready'ptr" "XXX_Unmarshal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Ready'ptr_equal :
  WpMethodCall raft "Ready'ptr" "equal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_Advance :
  WpMethodCall raft "node'ptr" "Advance" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_ApplyConfChange :
  WpMethodCall raft "node'ptr" "ApplyConfChange" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_Campaign :
  WpMethodCall raft "node'ptr" "Campaign" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_ForgetLeader :
  WpMethodCall raft "node'ptr" "ForgetLeader" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_Propose :
  WpMethodCall raft "node'ptr" "Propose" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_ProposeConfChange :
  WpMethodCall raft "node'ptr" "ProposeConfChange" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_ReadIndex :
  WpMethodCall raft "node'ptr" "ReadIndex" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_Ready :
  WpMethodCall raft "node'ptr" "Ready" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_ReportSnapshot :
  WpMethodCall raft "node'ptr" "ReportSnapshot" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_ReportUnreachable :
  WpMethodCall raft "node'ptr" "ReportUnreachable" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_Status :
  WpMethodCall raft "node'ptr" "Status" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_Step :
  WpMethodCall raft "node'ptr" "Step" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_Stop :
  WpMethodCall raft "node'ptr" "Stop" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_Tick :
  WpMethodCall raft "node'ptr" "Tick" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_TransferLeadership :
  WpMethodCall raft "node'ptr" "TransferLeadership" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_run :
  WpMethodCall raft "node'ptr" "run" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_step :
  WpMethodCall raft "node'ptr" "step" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_stepWait :
  WpMethodCall raft "node'ptr" "stepWait" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_node'ptr_stepWithWaitOption :
  WpMethodCall raft "node'ptr" "stepWithWaitOption" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockedRand'ptr_Intn :
  WpMethodCall raft "lockedRand'ptr" "Intn" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_StateType_MarshalJSON :
  WpMethodCall raft "StateType" "MarshalJSON" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_StateType_String :
  WpMethodCall raft "StateType" "String" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_StateType'ptr_MarshalJSON :
  WpMethodCall raft "StateType'ptr" "MarshalJSON" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_StateType'ptr_String :
  WpMethodCall raft "StateType'ptr" "String" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Config'ptr_validate :
  WpMethodCall raft "Config'ptr" "validate" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_Step :
  WpMethodCall raft "raft'ptr" "Step" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_abortLeaderTransfer :
  WpMethodCall raft "raft'ptr" "abortLeaderTransfer" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_appendEntry :
  WpMethodCall raft "raft'ptr" "appendEntry" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_appliedSnap :
  WpMethodCall raft "raft'ptr" "appliedSnap" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_appliedTo :
  WpMethodCall raft "raft'ptr" "appliedTo" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_applyConfChange :
  WpMethodCall raft "raft'ptr" "applyConfChange" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_bcastAppend :
  WpMethodCall raft "raft'ptr" "bcastAppend" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_bcastHeartbeat :
  WpMethodCall raft "raft'ptr" "bcastHeartbeat" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_bcastHeartbeatWithCtx :
  WpMethodCall raft "raft'ptr" "bcastHeartbeatWithCtx" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_becomeCandidate :
  WpMethodCall raft "raft'ptr" "becomeCandidate" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_becomeFollower :
  WpMethodCall raft "raft'ptr" "becomeFollower" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_becomeLeader :
  WpMethodCall raft "raft'ptr" "becomeLeader" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_becomePreCandidate :
  WpMethodCall raft "raft'ptr" "becomePreCandidate" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_campaign :
  WpMethodCall raft "raft'ptr" "campaign" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_committedEntryInCurrentTerm :
  WpMethodCall raft "raft'ptr" "committedEntryInCurrentTerm" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_handleAppendEntries :
  WpMethodCall raft "raft'ptr" "handleAppendEntries" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_handleHeartbeat :
  WpMethodCall raft "raft'ptr" "handleHeartbeat" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_handleSnapshot :
  WpMethodCall raft "raft'ptr" "handleSnapshot" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_hardState :
  WpMethodCall raft "raft'ptr" "hardState" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_hasLeader :
  WpMethodCall raft "raft'ptr" "hasLeader" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_hasUnappliedConfChanges :
  WpMethodCall raft "raft'ptr" "hasUnappliedConfChanges" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_hup :
  WpMethodCall raft "raft'ptr" "hup" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_increaseUncommittedSize :
  WpMethodCall raft "raft'ptr" "increaseUncommittedSize" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_loadState :
  WpMethodCall raft "raft'ptr" "loadState" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_maybeCommit :
  WpMethodCall raft "raft'ptr" "maybeCommit" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_maybeSendAppend :
  WpMethodCall raft "raft'ptr" "maybeSendAppend" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_maybeSendSnapshot :
  WpMethodCall raft "raft'ptr" "maybeSendSnapshot" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_pastElectionTimeout :
  WpMethodCall raft "raft'ptr" "pastElectionTimeout" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_poll :
  WpMethodCall raft "raft'ptr" "poll" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_promotable :
  WpMethodCall raft "raft'ptr" "promotable" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_reduceUncommittedSize :
  WpMethodCall raft "raft'ptr" "reduceUncommittedSize" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_reset :
  WpMethodCall raft "raft'ptr" "reset" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_resetRandomizedElectionTimeout :
  WpMethodCall raft "raft'ptr" "resetRandomizedElectionTimeout" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_responseToReadIndexReq :
  WpMethodCall raft "raft'ptr" "responseToReadIndexReq" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_restore :
  WpMethodCall raft "raft'ptr" "restore" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_send :
  WpMethodCall raft "raft'ptr" "send" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_sendAppend :
  WpMethodCall raft "raft'ptr" "sendAppend" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_sendHeartbeat :
  WpMethodCall raft "raft'ptr" "sendHeartbeat" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_sendTimeoutNow :
  WpMethodCall raft "raft'ptr" "sendTimeoutNow" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_softState :
  WpMethodCall raft "raft'ptr" "softState" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_switchToConfig :
  WpMethodCall raft "raft'ptr" "switchToConfig" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_tickElection :
  WpMethodCall raft "raft'ptr" "tickElection" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_raft'ptr_tickHeartbeat :
  WpMethodCall raft "raft'ptr" "tickHeartbeat" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_Advance :
  WpMethodCall raft "RawNode'ptr" "Advance" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_ApplyConfChange :
  WpMethodCall raft "RawNode'ptr" "ApplyConfChange" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_BasicStatus :
  WpMethodCall raft "RawNode'ptr" "BasicStatus" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_Bootstrap :
  WpMethodCall raft "RawNode'ptr" "Bootstrap" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_Campaign :
  WpMethodCall raft "RawNode'ptr" "Campaign" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_ForgetLeader :
  WpMethodCall raft "RawNode'ptr" "ForgetLeader" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_HasReady :
  WpMethodCall raft "RawNode'ptr" "HasReady" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_Propose :
  WpMethodCall raft "RawNode'ptr" "Propose" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_ProposeConfChange :
  WpMethodCall raft "RawNode'ptr" "ProposeConfChange" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_ReadIndex :
  WpMethodCall raft "RawNode'ptr" "ReadIndex" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_Ready :
  WpMethodCall raft "RawNode'ptr" "Ready" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_ReportSnapshot :
  WpMethodCall raft "RawNode'ptr" "ReportSnapshot" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_ReportUnreachable :
  WpMethodCall raft "RawNode'ptr" "ReportUnreachable" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_Status :
  WpMethodCall raft "RawNode'ptr" "Status" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_Step :
  WpMethodCall raft "RawNode'ptr" "Step" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_Tick :
  WpMethodCall raft "RawNode'ptr" "Tick" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_TickQuiesced :
  WpMethodCall raft "RawNode'ptr" "TickQuiesced" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_TransferLeader :
  WpMethodCall raft "RawNode'ptr" "TransferLeader" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_WithProgress :
  WpMethodCall raft "RawNode'ptr" "WithProgress" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_acceptReady :
  WpMethodCall raft "RawNode'ptr" "acceptReady" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_applyUnstableEntries :
  WpMethodCall raft "RawNode'ptr" "applyUnstableEntries" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RawNode'ptr_readyWithoutAccept :
  WpMethodCall raft "RawNode'ptr" "readyWithoutAccept" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readOnly'ptr_addRequest :
  WpMethodCall raft "readOnly'ptr" "addRequest" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readOnly'ptr_advance :
  WpMethodCall raft "readOnly'ptr" "advance" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readOnly'ptr_lastPendingRequestCtx :
  WpMethodCall raft "readOnly'ptr" "lastPendingRequestCtx" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readOnly'ptr_recvAck :
  WpMethodCall raft "readOnly'ptr" "recvAck" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status_MarshalJSON :
  WpMethodCall raft "Status" "MarshalJSON" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status_String :
  WpMethodCall raft "Status" "String" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_Descriptor :
  WpMethodCall raft "Status'ptr" "Descriptor" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_Marshal :
  WpMethodCall raft "Status'ptr" "Marshal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_MarshalJSON :
  WpMethodCall raft "Status'ptr" "MarshalJSON" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_MarshalTo :
  WpMethodCall raft "Status'ptr" "MarshalTo" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_MarshalToSizedBuffer :
  WpMethodCall raft "Status'ptr" "MarshalToSizedBuffer" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_ProtoMessage :
  WpMethodCall raft "Status'ptr" "ProtoMessage" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_Reset :
  WpMethodCall raft "Status'ptr" "Reset" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_Size :
  WpMethodCall raft "Status'ptr" "Size" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_String :
  WpMethodCall raft "Status'ptr" "String" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_Unmarshal :
  WpMethodCall raft "Status'ptr" "Unmarshal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_XXX_DiscardUnknown :
  WpMethodCall raft "Status'ptr" "XXX_DiscardUnknown" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_XXX_Marshal :
  WpMethodCall raft "Status'ptr" "XXX_Marshal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_XXX_Merge :
  WpMethodCall raft "Status'ptr" "XXX_Merge" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_XXX_Size :
  WpMethodCall raft "Status'ptr" "XXX_Size" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_XXX_Unmarshal :
  WpMethodCall raft "Status'ptr" "XXX_Unmarshal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Status'ptr_equal :
  WpMethodCall raft "Status'ptr" "equal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_Descriptor :
  WpMethodCall raft "BasicStatus'ptr" "Descriptor" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_Marshal :
  WpMethodCall raft "BasicStatus'ptr" "Marshal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_MarshalTo :
  WpMethodCall raft "BasicStatus'ptr" "MarshalTo" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_MarshalToSizedBuffer :
  WpMethodCall raft "BasicStatus'ptr" "MarshalToSizedBuffer" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_ProtoMessage :
  WpMethodCall raft "BasicStatus'ptr" "ProtoMessage" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_Reset :
  WpMethodCall raft "BasicStatus'ptr" "Reset" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_Size :
  WpMethodCall raft "BasicStatus'ptr" "Size" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_String :
  WpMethodCall raft "BasicStatus'ptr" "String" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_Unmarshal :
  WpMethodCall raft "BasicStatus'ptr" "Unmarshal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_XXX_DiscardUnknown :
  WpMethodCall raft "BasicStatus'ptr" "XXX_DiscardUnknown" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_XXX_Marshal :
  WpMethodCall raft "BasicStatus'ptr" "XXX_Marshal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_XXX_Merge :
  WpMethodCall raft "BasicStatus'ptr" "XXX_Merge" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_XXX_Size :
  WpMethodCall raft "BasicStatus'ptr" "XXX_Size" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_XXX_Unmarshal :
  WpMethodCall raft "BasicStatus'ptr" "XXX_Unmarshal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_BasicStatus'ptr_equal :
  WpMethodCall raft "BasicStatus'ptr" "equal" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_Append :
  WpMethodCall raft "MemoryStorage'ptr" "Append" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_ApplySnapshot :
  WpMethodCall raft "MemoryStorage'ptr" "ApplySnapshot" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_Compact :
  WpMethodCall raft "MemoryStorage'ptr" "Compact" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_CreateSnapshot :
  WpMethodCall raft "MemoryStorage'ptr" "CreateSnapshot" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_Entries :
  WpMethodCall raft "MemoryStorage'ptr" "Entries" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_FirstIndex :
  WpMethodCall raft "MemoryStorage'ptr" "FirstIndex" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_InitialState :
  WpMethodCall raft "MemoryStorage'ptr" "InitialState" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_LastIndex :
  WpMethodCall raft "MemoryStorage'ptr" "LastIndex" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_Lock :
  WpMethodCall raft "MemoryStorage'ptr" "Lock" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_SetHardState :
  WpMethodCall raft "MemoryStorage'ptr" "SetHardState" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_Snapshot :
  WpMethodCall raft "MemoryStorage'ptr" "Snapshot" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_Term :
  WpMethodCall raft "MemoryStorage'ptr" "Term" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_TryLock :
  WpMethodCall raft "MemoryStorage'ptr" "TryLock" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_Unlock :
  WpMethodCall raft "MemoryStorage'ptr" "Unlock" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_firstIndex :
  WpMethodCall raft "MemoryStorage'ptr" "firstIndex" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_MemoryStorage'ptr_lastIndex :
  WpMethodCall raft "MemoryStorage'ptr" "lastIndex" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_logSlice_lastEntryID :
  WpMethodCall raft "logSlice" "lastEntryID" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_logSlice_lastIndex :
  WpMethodCall raft "logSlice" "lastIndex" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_logSlice_valid :
  WpMethodCall raft "logSlice" "valid" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_logSlice'ptr_lastEntryID :
  WpMethodCall raft "logSlice'ptr" "lastEntryID" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_logSlice'ptr_lastIndex :
  WpMethodCall raft "logSlice'ptr" "lastIndex" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_logSlice'ptr_valid :
  WpMethodCall raft "logSlice'ptr" "valid" _ (is_pkg_defined raft) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End raft.
