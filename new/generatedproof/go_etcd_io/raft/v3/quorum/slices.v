(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.raft.v3.quorum.slices.
Module slices.
Axiom falso : False.
Module Tup.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ID' : w64;
  Idx' : w64;
  Ok' : bool;
  Bar' : w64;
}.
End def.
End Tup.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Tup `{ffi_syntax}: Settable _ :=
  settable! Tup.mk < Tup.ID'; Tup.Idx'; Tup.Ok'; Tup.Bar' >.
Global Instance into_val_Tup `{ffi_syntax} : IntoVal Tup.t.
Admitted.

Global Instance into_val_typed_Tup `{ffi_syntax} : IntoValTyped Tup.t slices.Tup :=
{|
  default_val := Tup.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Tup_ID `{ffi_syntax} : IntoValStructField "ID" slices.Tup Tup.ID'.
Admitted.

Global Instance into_val_struct_field_Tup_Idx `{ffi_syntax} : IntoValStructField "Idx" slices.Tup Tup.Idx'.
Admitted.

Global Instance into_val_struct_field_Tup_Ok `{ffi_syntax} : IntoValStructField "Ok" slices.Tup Tup.Ok'.
Admitted.

Global Instance into_val_struct_field_Tup_Bar `{ffi_syntax} : IntoValStructField "Bar" slices.Tup Tup.Bar'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Tup `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} ID' Idx' Ok' Bar':
  PureWp True
    (struct.make #slices.Tup (alist_val [
      "ID" ::= #ID';
      "Idx" ::= #Idx';
      "Ok" ::= #Ok';
      "Bar" ::= #Bar'
    ]))%struct
    #(Tup.mk ID' Idx' Ok' Bar').
Admitted.


Global Instance Tup_struct_fields_split dq l (v : Tup.t) :
  StructFieldsSplit dq l v (
    "HID" ∷ l ↦s[slices.Tup :: "ID"]{dq} v.(Tup.ID') ∗
    "HIdx" ∷ l ↦s[slices.Tup :: "Idx"]{dq} v.(Tup.Idx') ∗
    "HOk" ∷ l ↦s[slices.Tup :: "Ok"]{dq} v.(Tup.Ok') ∗
    "HBar" ∷ l ↦s[slices.Tup :: "Bar"]{dq} v.(Tup.Bar')
  ).
Admitted.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined slices :=
{|
  is_pkg_defined := is_global_definitions slices var_addrs;
|}.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

End names.
End slices.
