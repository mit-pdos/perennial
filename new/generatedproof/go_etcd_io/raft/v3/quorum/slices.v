(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.raft.v3.quorum.slices.

Set Default Proof Using "Type".

Module slices.

(* type slices.Tup *)
Module Tup.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ID' : w64;
  Idx' : w64;
  Ok' : bool;
  Bar' : w64;
}.
End def.
End Tup.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Tup : Settable Tup.t :=
  settable! Tup.mk < Tup.ID'; Tup.Idx'; Tup.Ok'; Tup.Bar' >.
Global Instance into_val_Tup : IntoVal Tup.t :=
  {| to_val_def v :=
    struct.val_aux slices.Tup [
    "ID" ::= #(Tup.ID' v);
    "Idx" ::= #(Tup.Idx' v);
    "Ok" ::= #(Tup.Ok' v);
    "Bar" ::= #(Tup.Bar' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Tup : IntoValTyped Tup.t slices.Tup :=
{|
  default_val := Tup.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Tup_ID : IntoValStructField "ID" slices.Tup Tup.ID'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Tup_Idx : IntoValStructField "Idx" slices.Tup Tup.Idx'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Tup_Ok : IntoValStructField "Ok" slices.Tup Tup.Ok'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Tup_Bar : IntoValStructField "Bar" slices.Tup Tup.Bar'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Tup ID' Idx' Ok' Bar':
  PureWp True
    (struct.make #slices.Tup (alist_val [
      "ID" ::= #ID';
      "Idx" ::= #Idx';
      "Ok" ::= #Ok';
      "Bar" ::= #Bar'
    ]))%struct
    #(Tup.mk ID' Idx' Ok' Bar').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Tup_struct_fields_split dq l (v : Tup.t) :
  StructFieldsSplit dq l v (
    "HID" ∷ l ↦s[slices.Tup :: "ID"]{dq} v.(Tup.ID') ∗
    "HIdx" ∷ l ↦s[slices.Tup :: "Idx"]{dq} v.(Tup.Idx') ∗
    "HOk" ∷ l ↦s[slices.Tup :: "Ok"]{dq} v.(Tup.Ok') ∗
    "HBar" ∷ l ↦s[slices.Tup :: "Bar"]{dq} v.(Tup.Bar')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Tup.ID' v)) slices.Tup "ID"%go.
  simpl_one_flatten_struct (# (Tup.Idx' v)) slices.Tup "Idx"%go.
  simpl_one_flatten_struct (# (Tup.Ok' v)) slices.Tup "Ok"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined slices :=
{|
  is_pkg_defined := is_global_definitions slices var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

End names.
End slices.
