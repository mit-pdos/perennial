(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.go_etcd_io.raft.v3.tracker.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.raft.v3.confchange.

Set Default Proof Using "Type".

Module confchange.

Module Changer.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Tracker' : tracker.ProgressTracker.t;
  LastIndex' : w64;
}.
End def.
End Changer.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Changer : Settable _ :=
  settable! Changer.mk < Changer.Tracker'; Changer.LastIndex' >.
Global Instance into_val_Changer : IntoVal Changer.t :=
  {| to_val_def v :=
    struct.val_aux confchange.Changer [
    "Tracker" ::= #(Changer.Tracker' v);
    "LastIndex" ::= #(Changer.LastIndex' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Changer : IntoValTyped Changer.t confchange.Changer :=
{|
  default_val := Changer.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Changer_Tracker : IntoValStructField "Tracker" confchange.Changer Changer.Tracker'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Changer_LastIndex : IntoValStructField "LastIndex" confchange.Changer Changer.LastIndex'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Changer Tracker' LastIndex':
  PureWp True
    (struct.make #confchange.Changer (alist_val [
      "Tracker" ::= #Tracker';
      "LastIndex" ::= #LastIndex'
    ]))%struct
    #(Changer.mk Tracker' LastIndex').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Changer_struct_fields_split dq l (v : Changer.t) :
  StructFieldsSplit dq l v (
    "HTracker" ∷ l ↦s[confchange.Changer :: "Tracker"]{dq} v.(Changer.Tracker') ∗
    "HLastIndex" ∷ l ↦s[confchange.Changer :: "LastIndex"]{dq} v.(Changer.LastIndex')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Changer.Tracker' v)) confchange.Changer "Tracker"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined confchange :=
{|
  is_pkg_defined := is_global_definitions confchange var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

End names.
End confchange.
