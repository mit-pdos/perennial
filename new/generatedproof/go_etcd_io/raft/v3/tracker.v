(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.fmt.
Require Export New.generatedproof.strings.
Require Export New.generatedproof.go_etcd_io.raft.v3.quorum.slices.
Require Export New.generatedproof.go_etcd_io.raft.v3.quorum.
Require Export New.generatedproof.go_etcd_io.raft.v3.raftpb.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.raft.v3.tracker.

Set Default Proof Using "Type".

Module tracker.

(* type tracker.inflight *)
Module inflight.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  index' : w64;
  bytes' : w64;
}.
End def.
End inflight.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_inflight : Settable inflight.t :=
  settable! inflight.mk < inflight.index'; inflight.bytes' >.
Global Instance into_val_inflight : IntoVal inflight.t :=
  {| to_val_def v :=
    struct.val_aux tracker.inflight [
    "index" ::= #(inflight.index' v);
    "bytes" ::= #(inflight.bytes' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_inflight : IntoValTyped inflight.t tracker.inflight :=
{|
  default_val := inflight.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_inflight_index : IntoValStructField "index" tracker.inflight inflight.index'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_inflight_bytes : IntoValStructField "bytes" tracker.inflight inflight.bytes'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_inflight index' bytes':
  PureWp True
    (struct.make #tracker.inflight (alist_val [
      "index" ::= #index';
      "bytes" ::= #bytes'
    ]))%struct
    #(inflight.mk index' bytes').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance inflight_struct_fields_split dq l (v : inflight.t) :
  StructFieldsSplit dq l v (
    "Hindex" ∷ l ↦s[tracker.inflight :: "index"]{dq} v.(inflight.index') ∗
    "Hbytes" ∷ l ↦s[tracker.inflight :: "bytes"]{dq} v.(inflight.bytes')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (inflight.index' v)) tracker.inflight "index"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type tracker.Inflights *)
Module Inflights.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  start' : w64;
  count' : w64;
  bytes' : w64;
  size' : w64;
  maxBytes' : w64;
  buffer' : slice.t;
}.
End def.
End Inflights.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Inflights : Settable Inflights.t :=
  settable! Inflights.mk < Inflights.start'; Inflights.count'; Inflights.bytes'; Inflights.size'; Inflights.maxBytes'; Inflights.buffer' >.
Global Instance into_val_Inflights : IntoVal Inflights.t :=
  {| to_val_def v :=
    struct.val_aux tracker.Inflights [
    "start" ::= #(Inflights.start' v);
    "count" ::= #(Inflights.count' v);
    "bytes" ::= #(Inflights.bytes' v);
    "size" ::= #(Inflights.size' v);
    "maxBytes" ::= #(Inflights.maxBytes' v);
    "buffer" ::= #(Inflights.buffer' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Inflights : IntoValTyped Inflights.t tracker.Inflights :=
{|
  default_val := Inflights.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Inflights_start : IntoValStructField "start" tracker.Inflights Inflights.start'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Inflights_count : IntoValStructField "count" tracker.Inflights Inflights.count'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Inflights_bytes : IntoValStructField "bytes" tracker.Inflights Inflights.bytes'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Inflights_size : IntoValStructField "size" tracker.Inflights Inflights.size'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Inflights_maxBytes : IntoValStructField "maxBytes" tracker.Inflights Inflights.maxBytes'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Inflights_buffer : IntoValStructField "buffer" tracker.Inflights Inflights.buffer'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Inflights start' count' bytes' size' maxBytes' buffer':
  PureWp True
    (struct.make #tracker.Inflights (alist_val [
      "start" ::= #start';
      "count" ::= #count';
      "bytes" ::= #bytes';
      "size" ::= #size';
      "maxBytes" ::= #maxBytes';
      "buffer" ::= #buffer'
    ]))%struct
    #(Inflights.mk start' count' bytes' size' maxBytes' buffer').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Inflights_struct_fields_split dq l (v : Inflights.t) :
  StructFieldsSplit dq l v (
    "Hstart" ∷ l ↦s[tracker.Inflights :: "start"]{dq} v.(Inflights.start') ∗
    "Hcount" ∷ l ↦s[tracker.Inflights :: "count"]{dq} v.(Inflights.count') ∗
    "Hbytes" ∷ l ↦s[tracker.Inflights :: "bytes"]{dq} v.(Inflights.bytes') ∗
    "Hsize" ∷ l ↦s[tracker.Inflights :: "size"]{dq} v.(Inflights.size') ∗
    "HmaxBytes" ∷ l ↦s[tracker.Inflights :: "maxBytes"]{dq} v.(Inflights.maxBytes') ∗
    "Hbuffer" ∷ l ↦s[tracker.Inflights :: "buffer"]{dq} v.(Inflights.buffer')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Inflights.start' v)) tracker.Inflights "start"%go.
  simpl_one_flatten_struct (# (Inflights.count' v)) tracker.Inflights "count"%go.
  simpl_one_flatten_struct (# (Inflights.bytes' v)) tracker.Inflights "bytes"%go.
  simpl_one_flatten_struct (# (Inflights.size' v)) tracker.Inflights "size"%go.
  simpl_one_flatten_struct (# (Inflights.maxBytes' v)) tracker.Inflights "maxBytes"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type tracker.StateType *)
Module StateType.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End StateType.

(* type tracker.Progress *)
Module Progress.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Match' : w64;
  Next' : w64;
  sentCommit' : w64;
  State' : StateType.t;
  PendingSnapshot' : w64;
  RecentActive' : bool;
  MsgAppFlowPaused' : bool;
  Inflights' : loc;
  IsLearner' : bool;
}.
End def.
End Progress.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Progress : Settable Progress.t :=
  settable! Progress.mk < Progress.Match'; Progress.Next'; Progress.sentCommit'; Progress.State'; Progress.PendingSnapshot'; Progress.RecentActive'; Progress.MsgAppFlowPaused'; Progress.Inflights'; Progress.IsLearner' >.
Global Instance into_val_Progress : IntoVal Progress.t :=
  {| to_val_def v :=
    struct.val_aux tracker.Progress [
    "Match" ::= #(Progress.Match' v);
    "Next" ::= #(Progress.Next' v);
    "sentCommit" ::= #(Progress.sentCommit' v);
    "State" ::= #(Progress.State' v);
    "PendingSnapshot" ::= #(Progress.PendingSnapshot' v);
    "RecentActive" ::= #(Progress.RecentActive' v);
    "MsgAppFlowPaused" ::= #(Progress.MsgAppFlowPaused' v);
    "Inflights" ::= #(Progress.Inflights' v);
    "IsLearner" ::= #(Progress.IsLearner' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Progress : IntoValTyped Progress.t tracker.Progress :=
{|
  default_val := Progress.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Progress_Match : IntoValStructField "Match" tracker.Progress Progress.Match'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Progress_Next : IntoValStructField "Next" tracker.Progress Progress.Next'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Progress_sentCommit : IntoValStructField "sentCommit" tracker.Progress Progress.sentCommit'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Progress_State : IntoValStructField "State" tracker.Progress Progress.State'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Progress_PendingSnapshot : IntoValStructField "PendingSnapshot" tracker.Progress Progress.PendingSnapshot'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Progress_RecentActive : IntoValStructField "RecentActive" tracker.Progress Progress.RecentActive'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Progress_MsgAppFlowPaused : IntoValStructField "MsgAppFlowPaused" tracker.Progress Progress.MsgAppFlowPaused'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Progress_Inflights : IntoValStructField "Inflights" tracker.Progress Progress.Inflights'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Progress_IsLearner : IntoValStructField "IsLearner" tracker.Progress Progress.IsLearner'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Progress Match' Next' sentCommit' State' PendingSnapshot' RecentActive' MsgAppFlowPaused' Inflights' IsLearner':
  PureWp True
    (struct.make #tracker.Progress (alist_val [
      "Match" ::= #Match';
      "Next" ::= #Next';
      "sentCommit" ::= #sentCommit';
      "State" ::= #State';
      "PendingSnapshot" ::= #PendingSnapshot';
      "RecentActive" ::= #RecentActive';
      "MsgAppFlowPaused" ::= #MsgAppFlowPaused';
      "Inflights" ::= #Inflights';
      "IsLearner" ::= #IsLearner'
    ]))%struct
    #(Progress.mk Match' Next' sentCommit' State' PendingSnapshot' RecentActive' MsgAppFlowPaused' Inflights' IsLearner').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Progress_struct_fields_split dq l (v : Progress.t) :
  StructFieldsSplit dq l v (
    "HMatch" ∷ l ↦s[tracker.Progress :: "Match"]{dq} v.(Progress.Match') ∗
    "HNext" ∷ l ↦s[tracker.Progress :: "Next"]{dq} v.(Progress.Next') ∗
    "HsentCommit" ∷ l ↦s[tracker.Progress :: "sentCommit"]{dq} v.(Progress.sentCommit') ∗
    "HState" ∷ l ↦s[tracker.Progress :: "State"]{dq} v.(Progress.State') ∗
    "HPendingSnapshot" ∷ l ↦s[tracker.Progress :: "PendingSnapshot"]{dq} v.(Progress.PendingSnapshot') ∗
    "HRecentActive" ∷ l ↦s[tracker.Progress :: "RecentActive"]{dq} v.(Progress.RecentActive') ∗
    "HMsgAppFlowPaused" ∷ l ↦s[tracker.Progress :: "MsgAppFlowPaused"]{dq} v.(Progress.MsgAppFlowPaused') ∗
    "HInflights" ∷ l ↦s[tracker.Progress :: "Inflights"]{dq} v.(Progress.Inflights') ∗
    "HIsLearner" ∷ l ↦s[tracker.Progress :: "IsLearner"]{dq} v.(Progress.IsLearner')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Progress.Match' v)) tracker.Progress "Match"%go.
  simpl_one_flatten_struct (# (Progress.Next' v)) tracker.Progress "Next"%go.
  simpl_one_flatten_struct (# (Progress.sentCommit' v)) tracker.Progress "sentCommit"%go.
  simpl_one_flatten_struct (# (Progress.State' v)) tracker.Progress "State"%go.
  simpl_one_flatten_struct (# (Progress.PendingSnapshot' v)) tracker.Progress "PendingSnapshot"%go.
  simpl_one_flatten_struct (# (Progress.RecentActive' v)) tracker.Progress "RecentActive"%go.
  simpl_one_flatten_struct (# (Progress.MsgAppFlowPaused' v)) tracker.Progress "MsgAppFlowPaused"%go.
  simpl_one_flatten_struct (# (Progress.Inflights' v)) tracker.Progress "Inflights"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type tracker.ProgressMap *)
Module ProgressMap.
Section def.
Context `{ffi_syntax}.
Definition t := loc.
End def.
End ProgressMap.

(* type tracker.Config *)
Module Config.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Voters' : quorum.JointConfig.t;
  AutoLeave' : bool;
  Learners' : loc;
  LearnersNext' : loc;
}.
End def.
End Config.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Config : Settable Config.t :=
  settable! Config.mk < Config.Voters'; Config.AutoLeave'; Config.Learners'; Config.LearnersNext' >.
Global Instance into_val_Config : IntoVal Config.t :=
  {| to_val_def v :=
    struct.val_aux tracker.Config [
    "Voters" ::= #(Config.Voters' v);
    "AutoLeave" ::= #(Config.AutoLeave' v);
    "Learners" ::= #(Config.Learners' v);
    "LearnersNext" ::= #(Config.LearnersNext' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Config : IntoValTyped Config.t tracker.Config :=
{|
  default_val := Config.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Config_Voters : IntoValStructField "Voters" tracker.Config Config.Voters'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_AutoLeave : IntoValStructField "AutoLeave" tracker.Config Config.AutoLeave'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_Learners : IntoValStructField "Learners" tracker.Config Config.Learners'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Config_LearnersNext : IntoValStructField "LearnersNext" tracker.Config Config.LearnersNext'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Config Voters' AutoLeave' Learners' LearnersNext':
  PureWp True
    (struct.make #tracker.Config (alist_val [
      "Voters" ::= #Voters';
      "AutoLeave" ::= #AutoLeave';
      "Learners" ::= #Learners';
      "LearnersNext" ::= #LearnersNext'
    ]))%struct
    #(Config.mk Voters' AutoLeave' Learners' LearnersNext').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Config_struct_fields_split dq l (v : Config.t) :
  StructFieldsSplit dq l v (
    "HVoters" ∷ l ↦s[tracker.Config :: "Voters"]{dq} v.(Config.Voters') ∗
    "HAutoLeave" ∷ l ↦s[tracker.Config :: "AutoLeave"]{dq} v.(Config.AutoLeave') ∗
    "HLearners" ∷ l ↦s[tracker.Config :: "Learners"]{dq} v.(Config.Learners') ∗
    "HLearnersNext" ∷ l ↦s[tracker.Config :: "LearnersNext"]{dq} v.(Config.LearnersNext')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Config.Voters' v)) tracker.Config "Voters"%go.
  simpl_one_flatten_struct (# (Config.AutoLeave' v)) tracker.Config "AutoLeave"%go.
  simpl_one_flatten_struct (# (Config.Learners' v)) tracker.Config "Learners"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type tracker.ProgressTracker *)
Module ProgressTracker.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Config' : Config.t;
  Progress' : ProgressMap.t;
  Votes' : loc;
  MaxInflight' : w64;
  MaxInflightBytes' : w64;
}.
End def.
End ProgressTracker.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_ProgressTracker : Settable ProgressTracker.t :=
  settable! ProgressTracker.mk < ProgressTracker.Config'; ProgressTracker.Progress'; ProgressTracker.Votes'; ProgressTracker.MaxInflight'; ProgressTracker.MaxInflightBytes' >.
Global Instance into_val_ProgressTracker : IntoVal ProgressTracker.t :=
  {| to_val_def v :=
    struct.val_aux tracker.ProgressTracker [
    "Config" ::= #(ProgressTracker.Config' v);
    "Progress" ::= #(ProgressTracker.Progress' v);
    "Votes" ::= #(ProgressTracker.Votes' v);
    "MaxInflight" ::= #(ProgressTracker.MaxInflight' v);
    "MaxInflightBytes" ::= #(ProgressTracker.MaxInflightBytes' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_ProgressTracker : IntoValTyped ProgressTracker.t tracker.ProgressTracker :=
{|
  default_val := ProgressTracker.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_ProgressTracker_Config : IntoValStructField "Config" tracker.ProgressTracker ProgressTracker.Config'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_ProgressTracker_Progress : IntoValStructField "Progress" tracker.ProgressTracker ProgressTracker.Progress'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_ProgressTracker_Votes : IntoValStructField "Votes" tracker.ProgressTracker ProgressTracker.Votes'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_ProgressTracker_MaxInflight : IntoValStructField "MaxInflight" tracker.ProgressTracker ProgressTracker.MaxInflight'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_ProgressTracker_MaxInflightBytes : IntoValStructField "MaxInflightBytes" tracker.ProgressTracker ProgressTracker.MaxInflightBytes'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_ProgressTracker Config' Progress' Votes' MaxInflight' MaxInflightBytes':
  PureWp True
    (struct.make #tracker.ProgressTracker (alist_val [
      "Config" ::= #Config';
      "Progress" ::= #Progress';
      "Votes" ::= #Votes';
      "MaxInflight" ::= #MaxInflight';
      "MaxInflightBytes" ::= #MaxInflightBytes'
    ]))%struct
    #(ProgressTracker.mk Config' Progress' Votes' MaxInflight' MaxInflightBytes').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance ProgressTracker_struct_fields_split dq l (v : ProgressTracker.t) :
  StructFieldsSplit dq l v (
    "HConfig" ∷ l ↦s[tracker.ProgressTracker :: "Config"]{dq} v.(ProgressTracker.Config') ∗
    "HProgress" ∷ l ↦s[tracker.ProgressTracker :: "Progress"]{dq} v.(ProgressTracker.Progress') ∗
    "HVotes" ∷ l ↦s[tracker.ProgressTracker :: "Votes"]{dq} v.(ProgressTracker.Votes') ∗
    "HMaxInflight" ∷ l ↦s[tracker.ProgressTracker :: "MaxInflight"]{dq} v.(ProgressTracker.MaxInflight') ∗
    "HMaxInflightBytes" ∷ l ↦s[tracker.ProgressTracker :: "MaxInflightBytes"]{dq} v.(ProgressTracker.MaxInflightBytes')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (ProgressTracker.Config' v)) tracker.ProgressTracker "Config"%go.
  simpl_one_flatten_struct (# (ProgressTracker.Progress' v)) tracker.ProgressTracker "Progress"%go.
  simpl_one_flatten_struct (# (ProgressTracker.Votes' v)) tracker.ProgressTracker "Votes"%go.
  simpl_one_flatten_struct (# (ProgressTracker.MaxInflight' v)) tracker.ProgressTracker "MaxInflight"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type tracker.matchAckIndexer *)
Module matchAckIndexer.
Section def.
Context `{ffi_syntax}.
Definition t := loc.
End def.
End matchAckIndexer.

Section names.

Class GlobalAddrs :=
{
  prstmap : loc;
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
    ("prstmap"%go, prstmap)
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined tracker :=
{|
  is_pkg_defined := is_global_definitions tracker var_addrs;
|}.

Definition own_allocated : iProp Σ :=
  "Hprstmap" ∷ prstmap ↦ (default_val (vec go_string (uint.nat (W64 3)))).

Global Instance wp_globals_get_prstmap : 
  WpGlobalsGet tracker "prstmap" prstmap (is_pkg_defined tracker).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_func_call_NewInflights :
  WpFuncCall tracker "NewInflights" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MakeProgressTracker :
  WpFuncCall tracker "MakeProgressTracker" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Inflights'ptr_Add :
  WpMethodCall tracker "Inflights'ptr" "Add" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Inflights'ptr_Clone :
  WpMethodCall tracker "Inflights'ptr" "Clone" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Inflights'ptr_Count :
  WpMethodCall tracker "Inflights'ptr" "Count" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Inflights'ptr_FreeLE :
  WpMethodCall tracker "Inflights'ptr" "FreeLE" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Inflights'ptr_Full :
  WpMethodCall tracker "Inflights'ptr" "Full" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Inflights'ptr_grow :
  WpMethodCall tracker "Inflights'ptr" "grow" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Inflights'ptr_reset :
  WpMethodCall tracker "Inflights'ptr" "reset" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Progress'ptr_BecomeProbe :
  WpMethodCall tracker "Progress'ptr" "BecomeProbe" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Progress'ptr_BecomeReplicate :
  WpMethodCall tracker "Progress'ptr" "BecomeReplicate" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Progress'ptr_BecomeSnapshot :
  WpMethodCall tracker "Progress'ptr" "BecomeSnapshot" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Progress'ptr_CanBumpCommit :
  WpMethodCall tracker "Progress'ptr" "CanBumpCommit" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Progress'ptr_IsPaused :
  WpMethodCall tracker "Progress'ptr" "IsPaused" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Progress'ptr_MaybeDecrTo :
  WpMethodCall tracker "Progress'ptr" "MaybeDecrTo" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Progress'ptr_MaybeUpdate :
  WpMethodCall tracker "Progress'ptr" "MaybeUpdate" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Progress'ptr_ResetState :
  WpMethodCall tracker "Progress'ptr" "ResetState" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Progress'ptr_SentCommit :
  WpMethodCall tracker "Progress'ptr" "SentCommit" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Progress'ptr_SentEntries :
  WpMethodCall tracker "Progress'ptr" "SentEntries" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Progress'ptr_String :
  WpMethodCall tracker "Progress'ptr" "String" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressMap_String :
  WpMethodCall tracker "ProgressMap" "String" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressMap'ptr_String :
  WpMethodCall tracker "ProgressMap'ptr" "String" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_StateType_String :
  WpMethodCall tracker "StateType" "String" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_StateType'ptr_String :
  WpMethodCall tracker "StateType'ptr" "String" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Config_String :
  WpMethodCall tracker "Config" "String" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Config'ptr_Clone :
  WpMethodCall tracker "Config'ptr" "Clone" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Config'ptr_String :
  WpMethodCall tracker "Config'ptr" "String" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressTracker_String :
  WpMethodCall tracker "ProgressTracker" "String" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressTracker'ptr_Clone :
  WpMethodCall tracker "ProgressTracker'ptr" "Clone" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressTracker'ptr_Committed :
  WpMethodCall tracker "ProgressTracker'ptr" "Committed" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressTracker'ptr_ConfState :
  WpMethodCall tracker "ProgressTracker'ptr" "ConfState" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressTracker'ptr_IsSingleton :
  WpMethodCall tracker "ProgressTracker'ptr" "IsSingleton" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressTracker'ptr_LearnerNodes :
  WpMethodCall tracker "ProgressTracker'ptr" "LearnerNodes" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressTracker'ptr_QuorumActive :
  WpMethodCall tracker "ProgressTracker'ptr" "QuorumActive" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressTracker'ptr_RecordVote :
  WpMethodCall tracker "ProgressTracker'ptr" "RecordVote" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressTracker'ptr_ResetVotes :
  WpMethodCall tracker "ProgressTracker'ptr" "ResetVotes" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressTracker'ptr_String :
  WpMethodCall tracker "ProgressTracker'ptr" "String" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressTracker'ptr_TallyVotes :
  WpMethodCall tracker "ProgressTracker'ptr" "TallyVotes" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressTracker'ptr_Visit :
  WpMethodCall tracker "ProgressTracker'ptr" "Visit" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ProgressTracker'ptr_VoterNodes :
  WpMethodCall tracker "ProgressTracker'ptr" "VoterNodes" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_matchAckIndexer_AckedIndex :
  WpMethodCall tracker "matchAckIndexer" "AckedIndex" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_matchAckIndexer'ptr_AckedIndex :
  WpMethodCall tracker "matchAckIndexer'ptr" "AckedIndex" _ (is_pkg_defined tracker) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End tracker.
