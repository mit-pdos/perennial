(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.log.
Require Export New.generatedproof.sync.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.etcd.pkg.v3.wait.

Set Default Proof Using "Type".

Module wait.

(* type wait.Wait *)
Module Wait.

#[global] Transparent wait.Wait.
#[global] Typeclasses Transparent wait.Wait.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End Wait.

(* type wait.list' *)
Module list'.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  e' : slice.t;
}.
End def.
End list'.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent wait.list'.
#[local] Typeclasses Transparent wait.list'.

Global Instance list'_wf : struct.Wf wait.list'.
Proof. apply _. Qed.

Global Instance settable_list' : Settable list'.t :=
  settable! list'.mk < list'.e' >.
Global Instance into_val_list' : IntoVal list'.t :=
  {| to_val_def v :=
    struct.val_aux wait.list' [
    "e" ::= #(list'.e' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_list' : IntoValTyped list'.t wait.list' :=
{|
  default_val := list'.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_list'_e : IntoValStructField "e" wait.list' list'.e'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_list' e':
  PureWp True
    (struct.make #wait.list' (alist_val [
      "e" ::= #e'
    ]))%struct
    #(list'.mk e').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance list'_struct_fields_split dq l (v : list'.t) :
  StructFieldsSplit dq l v (
    "He" ∷ l ↦s[wait.list' :: "e"]{dq} v.(list'.e')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

(* type wait.listElement *)
Module listElement.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  l' : sync.RWMutex.t;
  m' : loc;
}.
End def.
End listElement.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent wait.listElement.
#[local] Typeclasses Transparent wait.listElement.

Global Instance listElement_wf : struct.Wf wait.listElement.
Proof. apply _. Qed.

Global Instance settable_listElement : Settable listElement.t :=
  settable! listElement.mk < listElement.l'; listElement.m' >.
Global Instance into_val_listElement : IntoVal listElement.t :=
  {| to_val_def v :=
    struct.val_aux wait.listElement [
    "l" ::= #(listElement.l' v);
    "m" ::= #(listElement.m' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_listElement : IntoValTyped listElement.t wait.listElement :=
{|
  default_val := listElement.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_listElement_l : IntoValStructField "l" wait.listElement listElement.l'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_listElement_m : IntoValStructField "m" wait.listElement listElement.m'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_listElement l' m':
  PureWp True
    (struct.make #wait.listElement (alist_val [
      "l" ::= #l';
      "m" ::= #m'
    ]))%struct
    #(listElement.mk l' m').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance listElement_struct_fields_split dq l (v : listElement.t) :
  StructFieldsSplit dq l v (
    "Hl" ∷ l ↦s[wait.listElement :: "l"]{dq} v.(listElement.l') ∗
    "Hm" ∷ l ↦s[wait.listElement :: "m"]{dq} v.(listElement.m')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (listElement.l' v)) (wait.listElement) "l"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type wait.waitWithResponse *)
Module waitWithResponse.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ch' : loc;
}.
End def.
End waitWithResponse.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent wait.waitWithResponse.
#[local] Typeclasses Transparent wait.waitWithResponse.

Global Instance waitWithResponse_wf : struct.Wf wait.waitWithResponse.
Proof. apply _. Qed.

Global Instance settable_waitWithResponse : Settable waitWithResponse.t :=
  settable! waitWithResponse.mk < waitWithResponse.ch' >.
Global Instance into_val_waitWithResponse : IntoVal waitWithResponse.t :=
  {| to_val_def v :=
    struct.val_aux wait.waitWithResponse [
    "ch" ::= #(waitWithResponse.ch' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_waitWithResponse : IntoValTyped waitWithResponse.t wait.waitWithResponse :=
{|
  default_val := waitWithResponse.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_waitWithResponse_ch : IntoValStructField "ch" wait.waitWithResponse waitWithResponse.ch'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_waitWithResponse ch':
  PureWp True
    (struct.make #wait.waitWithResponse (alist_val [
      "ch" ::= #ch'
    ]))%struct
    #(waitWithResponse.mk ch').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance waitWithResponse_struct_fields_split dq l (v : waitWithResponse.t) :
  StructFieldsSplit dq l v (
    "Hch" ∷ l ↦s[wait.waitWithResponse :: "ch"]{dq} v.(waitWithResponse.ch')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

(* type wait.WaitTime *)
Module WaitTime.

#[global] Transparent wait.WaitTime.
#[global] Typeclasses Transparent wait.WaitTime.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End WaitTime.

(* type wait.timeList *)
Module timeList.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  l' : sync.Mutex.t;
  lastTriggerDeadline' : w64;
  m' : loc;
}.
End def.
End timeList.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent wait.timeList.
#[local] Typeclasses Transparent wait.timeList.

Global Instance timeList_wf : struct.Wf wait.timeList.
Proof. apply _. Qed.

Global Instance settable_timeList : Settable timeList.t :=
  settable! timeList.mk < timeList.l'; timeList.lastTriggerDeadline'; timeList.m' >.
Global Instance into_val_timeList : IntoVal timeList.t :=
  {| to_val_def v :=
    struct.val_aux wait.timeList [
    "l" ::= #(timeList.l' v);
    "lastTriggerDeadline" ::= #(timeList.lastTriggerDeadline' v);
    "m" ::= #(timeList.m' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_timeList : IntoValTyped timeList.t wait.timeList :=
{|
  default_val := timeList.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_timeList_l : IntoValStructField "l" wait.timeList timeList.l'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_timeList_lastTriggerDeadline : IntoValStructField "lastTriggerDeadline" wait.timeList timeList.lastTriggerDeadline'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_timeList_m : IntoValStructField "m" wait.timeList timeList.m'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_timeList l' lastTriggerDeadline' m':
  PureWp True
    (struct.make #wait.timeList (alist_val [
      "l" ::= #l';
      "lastTriggerDeadline" ::= #lastTriggerDeadline';
      "m" ::= #m'
    ]))%struct
    #(timeList.mk l' lastTriggerDeadline' m').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance timeList_struct_fields_split dq l (v : timeList.t) :
  StructFieldsSplit dq l v (
    "Hl" ∷ l ↦s[wait.timeList :: "l"]{dq} v.(timeList.l') ∗
    "HlastTriggerDeadline" ∷ l ↦s[wait.timeList :: "lastTriggerDeadline"]{dq} v.(timeList.lastTriggerDeadline') ∗
    "Hm" ∷ l ↦s[wait.timeList :: "m"]{dq} v.(timeList.m')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (timeList.l' v)) (wait.timeList) "l"%go.
  simpl_one_flatten_struct (# (timeList.lastTriggerDeadline' v)) (wait.timeList) "lastTriggerDeadline"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_wait : IsPkgDefinedPure wait :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single wait ∧
      is_pkg_defined_pure code.log.log ∧
      is_pkg_defined_pure code.sync.sync;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_wait : IsPkgDefined wait :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single wait ∗
       is_pkg_defined code.log.log ∗
       is_pkg_defined code.sync.sync)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_New :
  WpFuncCall wait.New _ (is_pkg_defined wait) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_NewWithResponse :
  WpFuncCall wait.NewWithResponse _ (is_pkg_defined wait) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_NewTimeList :
  WpFuncCall wait.NewTimeList _ (is_pkg_defined wait) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_list'ptr_IsRegistered :
  WpMethodCall (ptrT.id wait.list'.id) "IsRegistered" _ (is_pkg_defined wait) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_list'ptr_Register :
  WpMethodCall (ptrT.id wait.list'.id) "Register" _ (is_pkg_defined wait) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_list'ptr_Trigger :
  WpMethodCall (ptrT.id wait.list'.id) "Trigger" _ (is_pkg_defined wait) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_waitWithResponse'ptr_IsRegistered :
  WpMethodCall (ptrT.id wait.waitWithResponse.id) "IsRegistered" _ (is_pkg_defined wait) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_waitWithResponse'ptr_Register :
  WpMethodCall (ptrT.id wait.waitWithResponse.id) "Register" _ (is_pkg_defined wait) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_waitWithResponse'ptr_Trigger :
  WpMethodCall (ptrT.id wait.waitWithResponse.id) "Trigger" _ (is_pkg_defined wait) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_timeList'ptr_Trigger :
  WpMethodCall (ptrT.id wait.timeList.id) "Trigger" _ (is_pkg_defined wait) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_timeList'ptr_Wait :
  WpMethodCall (ptrT.id wait.timeList.id) "Wait" _ (is_pkg_defined wait) :=
  ltac:(solve_wp_method_call).

End names.
End wait.
