(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.etcd.pkg.v3.traceutil.

Set Default Proof Using "Type".

Module traceutil.

(* type traceutil.TraceKey *)
Module TraceKey.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End TraceKey.

Global Instance bounded_size_TraceKey : BoundedTypeSize traceutil.TraceKey.
Admitted.

Global Instance into_val_TraceKey `{ffi_syntax} : IntoVal TraceKey.t.
Admitted.

Global Instance into_val_typed_TraceKey `{ffi_syntax} : IntoValTyped TraceKey.t traceutil.TraceKey.
Admitted.

(* type traceutil.StartTimeKey *)
Module StartTimeKey.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End StartTimeKey.

Global Instance bounded_size_StartTimeKey : BoundedTypeSize traceutil.StartTimeKey.
Admitted.

Global Instance into_val_StartTimeKey `{ffi_syntax} : IntoVal StartTimeKey.t.
Admitted.

Global Instance into_val_typed_StartTimeKey `{ffi_syntax} : IntoValTyped StartTimeKey.t traceutil.StartTimeKey.
Admitted.

(* type traceutil.Field *)
Module Field.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Field.

Global Instance bounded_size_Field : BoundedTypeSize traceutil.Field.
Admitted.

Global Instance into_val_Field `{ffi_syntax} : IntoVal Field.t.
Admitted.

Global Instance into_val_typed_Field `{ffi_syntax} : IntoValTyped Field.t traceutil.Field.
Admitted.

(* type traceutil.Trace *)
Module Trace.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Trace.

Global Instance bounded_size_Trace : BoundedTypeSize traceutil.Trace.
Admitted.

Global Instance into_val_Trace `{ffi_syntax} : IntoVal Trace.t.
Admitted.

Global Instance into_val_typed_Trace `{ffi_syntax} : IntoValTyped Trace.t traceutil.Trace.
Admitted.

(* type traceutil.step *)
Module step.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End step.

Global Instance bounded_size_step : BoundedTypeSize traceutil.step.
Admitted.

Global Instance into_val_step `{ffi_syntax} : IntoVal step.t.
Admitted.

Global Instance into_val_typed_step `{ffi_syntax} : IntoValTyped step.t traceutil.step.
Admitted.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_traceutil : IsPkgDefinedPure traceutil :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single traceutil;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_traceutil : IsPkgDefined traceutil :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single traceutil)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_writeFields :
  WpFuncCall traceutil.writeFields _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_New :
  WpFuncCall traceutil.New _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_TODO :
  WpFuncCall traceutil.TODO _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Get :
  WpFuncCall traceutil.Get _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_Field'ptr_format :
  WpMethodCall (ptrT.id traceutil.Field.id) "format" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_AddField :
  WpMethodCall (ptrT.id traceutil.Trace.id) "AddField" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_GetStartTime :
  WpMethodCall (ptrT.id traceutil.Trace.id) "GetStartTime" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_InsertStep :
  WpMethodCall (ptrT.id traceutil.Trace.id) "InsertStep" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_IsEmpty :
  WpMethodCall (ptrT.id traceutil.Trace.id) "IsEmpty" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_Log :
  WpMethodCall (ptrT.id traceutil.Trace.id) "Log" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_LogAllStepsIfLong :
  WpMethodCall (ptrT.id traceutil.Trace.id) "LogAllStepsIfLong" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_LogIfLong :
  WpMethodCall (ptrT.id traceutil.Trace.id) "LogIfLong" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_LogWithStepThreshold :
  WpMethodCall (ptrT.id traceutil.Trace.id) "LogWithStepThreshold" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_SetStartTime :
  WpMethodCall (ptrT.id traceutil.Trace.id) "SetStartTime" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_StartSubTrace :
  WpMethodCall (ptrT.id traceutil.Trace.id) "StartSubTrace" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_Step :
  WpMethodCall (ptrT.id traceutil.Trace.id) "Step" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_StepWithFunction :
  WpMethodCall (ptrT.id traceutil.Trace.id) "StepWithFunction" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_StopSubTrace :
  WpMethodCall (ptrT.id traceutil.Trace.id) "StopSubTrace" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_disableStep :
  WpMethodCall (ptrT.id traceutil.Trace.id) "disableStep" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_enableStep :
  WpMethodCall (ptrT.id traceutil.Trace.id) "enableStep" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_logInfo :
  WpMethodCall (ptrT.id traceutil.Trace.id) "logInfo" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_Trace'ptr_updateFieldIfExist :
  WpMethodCall (ptrT.id traceutil.Trace.id) "updateFieldIfExist" _ (is_pkg_defined traceutil) :=
  ltac:(solve_wp_method_call).

End names.
End traceutil.
