(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.context.
Require Export New.generatedproof.strings.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.time.
Require Export New.generatedproof.go_etcd_io.etcd.api.v3.etcdserverpb.
Require Export New.generatedproof.go_etcd_io.etcd.api.v3.mvccpb.
Require Export New.generatedproof.go_etcd_io.etcd.client.v3.
Require Export New.generatedproof.errors.
Require Export New.generatedproof.google_golang_org.grpc.codes.
Require Export New.generatedproof.google_golang_org.grpc.status.
Require Export New.generatedproof.go_etcd_io.etcd.api.v3.v3rpc.rpctypes.
Require Export New.generatedproof.go_etcd_io.etcd.client.v3.concurrency.
Require Export New.generatedproof.bytes.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.etcd.client.v3.leasing.

Set Default Proof Using "Type".

Module leasing.

(* type leasing.leaseCache *)
Module leaseCache.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : sync.RWMutex.t;
  entries' : loc;
  revokes' : loc;
  header' : loc;
}.
End def.
End leaseCache.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_leaseCache : Settable leaseCache.t :=
  settable! leaseCache.mk < leaseCache.mu'; leaseCache.entries'; leaseCache.revokes'; leaseCache.header' >.
Global Instance into_val_leaseCache : IntoVal leaseCache.t :=
  {| to_val_def v :=
    struct.val_aux leasing.leaseCache [
    "mu" ::= #(leaseCache.mu' v);
    "entries" ::= #(leaseCache.entries' v);
    "revokes" ::= #(leaseCache.revokes' v);
    "header" ::= #(leaseCache.header' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_leaseCache : IntoValTyped leaseCache.t leasing.leaseCache :=
{|
  default_val := leaseCache.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_leaseCache_mu : IntoValStructField "mu" leasing.leaseCache leaseCache.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leaseCache_entries : IntoValStructField "entries" leasing.leaseCache leaseCache.entries'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leaseCache_revokes : IntoValStructField "revokes" leasing.leaseCache leaseCache.revokes'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leaseCache_header : IntoValStructField "header" leasing.leaseCache leaseCache.header'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_leaseCache mu' entries' revokes' header':
  PureWp True
    (struct.make #leasing.leaseCache (alist_val [
      "mu" ::= #mu';
      "entries" ::= #entries';
      "revokes" ::= #revokes';
      "header" ::= #header'
    ]))%struct
    #(leaseCache.mk mu' entries' revokes' header').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance leaseCache_struct_fields_split dq l (v : leaseCache.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[leasing.leaseCache :: "mu"]{dq} v.(leaseCache.mu') ∗
    "Hentries" ∷ l ↦s[leasing.leaseCache :: "entries"]{dq} v.(leaseCache.entries') ∗
    "Hrevokes" ∷ l ↦s[leasing.leaseCache :: "revokes"]{dq} v.(leaseCache.revokes') ∗
    "Hheader" ∷ l ↦s[leasing.leaseCache :: "header"]{dq} v.(leaseCache.header')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (leaseCache.mu' v)) (leasing.leaseCache) "mu"%go.
  simpl_one_flatten_struct (# (leaseCache.entries' v)) (leasing.leaseCache) "entries"%go.
  simpl_one_flatten_struct (# (leaseCache.revokes' v)) (leasing.leaseCache) "revokes"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type leasing.leaseKey *)
Module leaseKey.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  response' : loc;
  rev' : w64;
  waitc' : loc;
}.
End def.
End leaseKey.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_leaseKey : Settable leaseKey.t :=
  settable! leaseKey.mk < leaseKey.response'; leaseKey.rev'; leaseKey.waitc' >.
Global Instance into_val_leaseKey : IntoVal leaseKey.t :=
  {| to_val_def v :=
    struct.val_aux leasing.leaseKey [
    "response" ::= #(leaseKey.response' v);
    "rev" ::= #(leaseKey.rev' v);
    "waitc" ::= #(leaseKey.waitc' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_leaseKey : IntoValTyped leaseKey.t leasing.leaseKey :=
{|
  default_val := leaseKey.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_leaseKey_response : IntoValStructField "response" leasing.leaseKey leaseKey.response'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leaseKey_rev : IntoValStructField "rev" leasing.leaseKey leaseKey.rev'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leaseKey_waitc : IntoValStructField "waitc" leasing.leaseKey leaseKey.waitc'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_leaseKey response' rev' waitc':
  PureWp True
    (struct.make #leasing.leaseKey (alist_val [
      "response" ::= #response';
      "rev" ::= #rev';
      "waitc" ::= #waitc'
    ]))%struct
    #(leaseKey.mk response' rev' waitc').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance leaseKey_struct_fields_split dq l (v : leaseKey.t) :
  StructFieldsSplit dq l v (
    "Hresponse" ∷ l ↦s[leasing.leaseKey :: "response"]{dq} v.(leaseKey.response') ∗
    "Hrev" ∷ l ↦s[leasing.leaseKey :: "rev"]{dq} v.(leaseKey.rev') ∗
    "Hwaitc" ∷ l ↦s[leasing.leaseKey :: "waitc"]{dq} v.(leaseKey.waitc')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (leaseKey.response' v)) (leasing.leaseKey) "response"%go.
  simpl_one_flatten_struct (# (leaseKey.rev' v)) (leasing.leaseKey) "rev"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type leasing.leasingKV *)
Module leasingKV.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  cl' : loc;
  kv' : clientv3.KV.t;
  pfx' : go_string;
  leases' : leaseCache.t;
  ctx' : context.Context.t;
  cancel' : context.CancelFunc.t;
  wg' : sync.WaitGroup.t;
  sessionOpts' : slice.t;
  session' : loc;
  sessionc' : loc;
}.
End def.
End leasingKV.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_leasingKV : Settable leasingKV.t :=
  settable! leasingKV.mk < leasingKV.cl'; leasingKV.kv'; leasingKV.pfx'; leasingKV.leases'; leasingKV.ctx'; leasingKV.cancel'; leasingKV.wg'; leasingKV.sessionOpts'; leasingKV.session'; leasingKV.sessionc' >.
Global Instance into_val_leasingKV : IntoVal leasingKV.t :=
  {| to_val_def v :=
    struct.val_aux leasing.leasingKV [
    "cl" ::= #(leasingKV.cl' v);
    "kv" ::= #(leasingKV.kv' v);
    "pfx" ::= #(leasingKV.pfx' v);
    "leases" ::= #(leasingKV.leases' v);
    "ctx" ::= #(leasingKV.ctx' v);
    "cancel" ::= #(leasingKV.cancel' v);
    "wg" ::= #(leasingKV.wg' v);
    "sessionOpts" ::= #(leasingKV.sessionOpts' v);
    "session" ::= #(leasingKV.session' v);
    "sessionc" ::= #(leasingKV.sessionc' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_leasingKV : IntoValTyped leasingKV.t leasing.leasingKV :=
{|
  default_val := leasingKV.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_leasingKV_cl : IntoValStructField "cl" leasing.leasingKV leasingKV.cl'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leasingKV_kv : IntoValStructField "kv" leasing.leasingKV leasingKV.kv'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leasingKV_pfx : IntoValStructField "pfx" leasing.leasingKV leasingKV.pfx'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leasingKV_leases : IntoValStructField "leases" leasing.leasingKV leasingKV.leases'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leasingKV_ctx : IntoValStructField "ctx" leasing.leasingKV leasingKV.ctx'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leasingKV_cancel : IntoValStructField "cancel" leasing.leasingKV leasingKV.cancel'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leasingKV_wg : IntoValStructField "wg" leasing.leasingKV leasingKV.wg'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leasingKV_sessionOpts : IntoValStructField "sessionOpts" leasing.leasingKV leasingKV.sessionOpts'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leasingKV_session : IntoValStructField "session" leasing.leasingKV leasingKV.session'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_leasingKV_sessionc : IntoValStructField "sessionc" leasing.leasingKV leasingKV.sessionc'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_leasingKV cl' kv' pfx' leases' ctx' cancel' wg' sessionOpts' session' sessionc':
  PureWp True
    (struct.make #leasing.leasingKV (alist_val [
      "cl" ::= #cl';
      "kv" ::= #kv';
      "pfx" ::= #pfx';
      "leases" ::= #leases';
      "ctx" ::= #ctx';
      "cancel" ::= #cancel';
      "wg" ::= #wg';
      "sessionOpts" ::= #sessionOpts';
      "session" ::= #session';
      "sessionc" ::= #sessionc'
    ]))%struct
    #(leasingKV.mk cl' kv' pfx' leases' ctx' cancel' wg' sessionOpts' session' sessionc').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance leasingKV_struct_fields_split dq l (v : leasingKV.t) :
  StructFieldsSplit dq l v (
    "Hcl" ∷ l ↦s[leasing.leasingKV :: "cl"]{dq} v.(leasingKV.cl') ∗
    "Hkv" ∷ l ↦s[leasing.leasingKV :: "kv"]{dq} v.(leasingKV.kv') ∗
    "Hpfx" ∷ l ↦s[leasing.leasingKV :: "pfx"]{dq} v.(leasingKV.pfx') ∗
    "Hleases" ∷ l ↦s[leasing.leasingKV :: "leases"]{dq} v.(leasingKV.leases') ∗
    "Hctx" ∷ l ↦s[leasing.leasingKV :: "ctx"]{dq} v.(leasingKV.ctx') ∗
    "Hcancel" ∷ l ↦s[leasing.leasingKV :: "cancel"]{dq} v.(leasingKV.cancel') ∗
    "Hwg" ∷ l ↦s[leasing.leasingKV :: "wg"]{dq} v.(leasingKV.wg') ∗
    "HsessionOpts" ∷ l ↦s[leasing.leasingKV :: "sessionOpts"]{dq} v.(leasingKV.sessionOpts') ∗
    "Hsession" ∷ l ↦s[leasing.leasingKV :: "session"]{dq} v.(leasingKV.session') ∗
    "Hsessionc" ∷ l ↦s[leasing.leasingKV :: "sessionc"]{dq} v.(leasingKV.sessionc')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (leasingKV.cl' v)) (leasing.leasingKV) "cl"%go.
  simpl_one_flatten_struct (# (leasingKV.kv' v)) (leasing.leasingKV) "kv"%go.
  simpl_one_flatten_struct (# (leasingKV.pfx' v)) (leasing.leasingKV) "pfx"%go.
  simpl_one_flatten_struct (# (leasingKV.leases' v)) (leasing.leasingKV) "leases"%go.
  simpl_one_flatten_struct (# (leasingKV.ctx' v)) (leasing.leasingKV) "ctx"%go.
  simpl_one_flatten_struct (# (leasingKV.cancel' v)) (leasing.leasingKV) "cancel"%go.
  simpl_one_flatten_struct (# (leasingKV.wg' v)) (leasing.leasingKV) "wg"%go.
  simpl_one_flatten_struct (# (leasingKV.sessionOpts' v)) (leasing.leasingKV) "sessionOpts"%go.
  simpl_one_flatten_struct (# (leasingKV.session' v)) (leasing.leasingKV) "session"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type leasing.txnLeasing *)
Module txnLeasing.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Txn' : clientv3.Txn.t;
  lkv' : loc;
  ctx' : context.Context.t;
  cs' : slice.t;
  opst' : slice.t;
  opse' : slice.t;
}.
End def.
End txnLeasing.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_txnLeasing : Settable txnLeasing.t :=
  settable! txnLeasing.mk < txnLeasing.Txn'; txnLeasing.lkv'; txnLeasing.ctx'; txnLeasing.cs'; txnLeasing.opst'; txnLeasing.opse' >.
Global Instance into_val_txnLeasing : IntoVal txnLeasing.t :=
  {| to_val_def v :=
    struct.val_aux leasing.txnLeasing [
    "Txn" ::= #(txnLeasing.Txn' v);
    "lkv" ::= #(txnLeasing.lkv' v);
    "ctx" ::= #(txnLeasing.ctx' v);
    "cs" ::= #(txnLeasing.cs' v);
    "opst" ::= #(txnLeasing.opst' v);
    "opse" ::= #(txnLeasing.opse' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_txnLeasing : IntoValTyped txnLeasing.t leasing.txnLeasing :=
{|
  default_val := txnLeasing.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_txnLeasing_Txn : IntoValStructField "Txn" leasing.txnLeasing txnLeasing.Txn'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_txnLeasing_lkv : IntoValStructField "lkv" leasing.txnLeasing txnLeasing.lkv'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_txnLeasing_ctx : IntoValStructField "ctx" leasing.txnLeasing txnLeasing.ctx'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_txnLeasing_cs : IntoValStructField "cs" leasing.txnLeasing txnLeasing.cs'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_txnLeasing_opst : IntoValStructField "opst" leasing.txnLeasing txnLeasing.opst'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_txnLeasing_opse : IntoValStructField "opse" leasing.txnLeasing txnLeasing.opse'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_txnLeasing Txn' lkv' ctx' cs' opst' opse':
  PureWp True
    (struct.make #leasing.txnLeasing (alist_val [
      "Txn" ::= #Txn';
      "lkv" ::= #lkv';
      "ctx" ::= #ctx';
      "cs" ::= #cs';
      "opst" ::= #opst';
      "opse" ::= #opse'
    ]))%struct
    #(txnLeasing.mk Txn' lkv' ctx' cs' opst' opse').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance txnLeasing_struct_fields_split dq l (v : txnLeasing.t) :
  StructFieldsSplit dq l v (
    "HTxn" ∷ l ↦s[leasing.txnLeasing :: "Txn"]{dq} v.(txnLeasing.Txn') ∗
    "Hlkv" ∷ l ↦s[leasing.txnLeasing :: "lkv"]{dq} v.(txnLeasing.lkv') ∗
    "Hctx" ∷ l ↦s[leasing.txnLeasing :: "ctx"]{dq} v.(txnLeasing.ctx') ∗
    "Hcs" ∷ l ↦s[leasing.txnLeasing :: "cs"]{dq} v.(txnLeasing.cs') ∗
    "Hopst" ∷ l ↦s[leasing.txnLeasing :: "opst"]{dq} v.(txnLeasing.opst') ∗
    "Hopse" ∷ l ↦s[leasing.txnLeasing :: "opse"]{dq} v.(txnLeasing.opse')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (txnLeasing.Txn' v)) (leasing.txnLeasing) "Txn"%go.
  simpl_one_flatten_struct (# (txnLeasing.lkv' v)) (leasing.txnLeasing) "lkv"%go.
  simpl_one_flatten_struct (# (txnLeasing.ctx' v)) (leasing.txnLeasing) "ctx"%go.
  simpl_one_flatten_struct (# (txnLeasing.cs' v)) (leasing.txnLeasing) "cs"%go.
  simpl_one_flatten_struct (# (txnLeasing.opst' v)) (leasing.txnLeasing) "opst"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context `{!GoContext}.

Global Instance wp_func_call_inRange :
  WpFuncCall leasing.inRange _ (is_pkg_defined leasing) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isBadOp :
  WpFuncCall leasing.isBadOp _ (is_pkg_defined leasing) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewKV :
  WpFuncCall leasing.NewKV _ (is_pkg_defined leasing) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_compareInt64 :
  WpFuncCall leasing.compareInt64 _ (is_pkg_defined leasing) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_evalCmp :
  WpFuncCall leasing.evalCmp _ (is_pkg_defined leasing) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_gatherOps :
  WpFuncCall leasing.gatherOps _ (is_pkg_defined leasing) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_gatherResponseOps :
  WpFuncCall leasing.gatherResponseOps _ (is_pkg_defined leasing) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_copyHeader :
  WpFuncCall leasing.copyHeader _ (is_pkg_defined leasing) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_closeAll :
  WpFuncCall leasing.closeAll _ (is_pkg_defined leasing) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_Add :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "Add" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_Delete :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "Delete" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_Evict :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "Evict" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_EvictRange :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "EvictRange" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_Get :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "Get" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_Lock :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "Lock" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_LockRange :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "LockRange" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_LockWriteOps :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "LockWriteOps" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_MayAcquire :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "MayAcquire" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_NotifyOps :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "NotifyOps" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_Rev :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "Rev" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_Update :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "Update" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_clearOldRevokes :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "clearOldRevokes" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_delete :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "delete" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_evalCmp :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "evalCmp" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_evalOps :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "evalOps" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseCache'ptr_notify :
  WpMethodCall (ptrTⁱᵈ leasing.leaseCacheⁱᵈ) "notify" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leaseKey'ptr_get :
  WpMethodCall (ptrTⁱᵈ leasing.leaseKeyⁱᵈ) "get" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_Close :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "Close" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_Compact :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "Compact" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_Delete :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "Delete" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_Do :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "Do" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_Get :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "Get" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_Put :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "Put" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_Txn :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "Txn" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_acquire :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "acquire" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_delete :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "delete" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_deleteRange :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "deleteRange" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_deleteRangeRPC :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "deleteRangeRPC" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_get :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "get" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_leaseID :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "leaseID" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_monitorLease :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "monitorLease" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_monitorSession :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "monitorSession" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_put :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "put" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_readySession :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "readySession" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_rescind :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "rescind" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_revoke :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "revoke" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_revokeLeaseKvs :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "revokeLeaseKvs" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_revokeRange :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "revokeRange" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_tryModifyOp :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "tryModifyOp" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_waitRescind :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "waitRescind" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_leasingKV'ptr_waitSession :
  WpMethodCall (ptrTⁱᵈ leasing.leasingKVⁱᵈ) "waitSession" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_txnLeasing'ptr_Commit :
  WpMethodCall (ptrTⁱᵈ leasing.txnLeasingⁱᵈ) "Commit" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_txnLeasing'ptr_Else :
  WpMethodCall (ptrTⁱᵈ leasing.txnLeasingⁱᵈ) "Else" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_txnLeasing'ptr_If :
  WpMethodCall (ptrTⁱᵈ leasing.txnLeasingⁱᵈ) "If" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_txnLeasing'ptr_Then :
  WpMethodCall (ptrTⁱᵈ leasing.txnLeasingⁱᵈ) "Then" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_txnLeasing'ptr_commitToCache :
  WpMethodCall (ptrTⁱᵈ leasing.txnLeasingⁱᵈ) "commitToCache" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_txnLeasing'ptr_eval :
  WpMethodCall (ptrTⁱᵈ leasing.txnLeasingⁱᵈ) "eval" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_txnLeasing'ptr_fallback :
  WpMethodCall (ptrTⁱᵈ leasing.txnLeasingⁱᵈ) "fallback" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_txnLeasing'ptr_guard :
  WpMethodCall (ptrTⁱᵈ leasing.txnLeasingⁱᵈ) "guard" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_txnLeasing'ptr_guardKeys :
  WpMethodCall (ptrTⁱᵈ leasing.txnLeasingⁱᵈ) "guardKeys" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_txnLeasing'ptr_guardRanges :
  WpMethodCall (ptrTⁱᵈ leasing.txnLeasingⁱᵈ) "guardRanges" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_txnLeasing'ptr_revokeFallback :
  WpMethodCall (ptrTⁱᵈ leasing.txnLeasingⁱᵈ) "revokeFallback" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_txnLeasing'ptr_serverTxn :
  WpMethodCall (ptrTⁱᵈ leasing.txnLeasingⁱᵈ) "serverTxn" _ (is_pkg_defined leasing) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End leasing.
