(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.context.
Require Export New.generatedproof.errors.
Require Export New.generatedproof.fmt.
Require Export New.generatedproof.go_etcd_io.etcd.api.v3.etcdserverpb.
Require Export New.generatedproof.go_etcd_io.etcd.api.v3.mvccpb.
Require Export New.generatedproof.go_etcd_io.etcd.client.v3.
Require Export New.generatedproof.strings.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.time.
Require Export New.generatedproof.go_uber_org.zap.
Require Export New.generatedproof.math.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.etcd.client.v3.concurrency.
Module concurrency.
Axiom falso : False.
Module Election.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  session' : loc;
  keyPrefix' : go_string;
  leaderKey' : go_string;
  leaderRev' : w64;
  leaderSession' : loc;
  hdr' : loc;
}.
End def.
End Election.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Election `{ffi_syntax}: Settable _ :=
  settable! Election.mk < Election.session'; Election.keyPrefix'; Election.leaderKey'; Election.leaderRev'; Election.leaderSession'; Election.hdr' >.
Global Instance into_val_Election `{ffi_syntax} : IntoVal Election.t.
Admitted.

Global Instance into_val_typed_Election `{ffi_syntax} : IntoValTyped Election.t concurrency.Election :=
{|
  default_val := Election.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Election_session `{ffi_syntax} : IntoValStructField "session" concurrency.Election Election.session'.
Admitted.

Global Instance into_val_struct_field_Election_keyPrefix `{ffi_syntax} : IntoValStructField "keyPrefix" concurrency.Election Election.keyPrefix'.
Admitted.

Global Instance into_val_struct_field_Election_leaderKey `{ffi_syntax} : IntoValStructField "leaderKey" concurrency.Election Election.leaderKey'.
Admitted.

Global Instance into_val_struct_field_Election_leaderRev `{ffi_syntax} : IntoValStructField "leaderRev" concurrency.Election Election.leaderRev'.
Admitted.

Global Instance into_val_struct_field_Election_leaderSession `{ffi_syntax} : IntoValStructField "leaderSession" concurrency.Election Election.leaderSession'.
Admitted.

Global Instance into_val_struct_field_Election_hdr `{ffi_syntax} : IntoValStructField "hdr" concurrency.Election Election.hdr'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Election `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} session' keyPrefix' leaderKey' leaderRev' leaderSession' hdr':
  PureWp True
    (struct.make #concurrency.Election (alist_val [
      "session" ::= #session';
      "keyPrefix" ::= #keyPrefix';
      "leaderKey" ::= #leaderKey';
      "leaderRev" ::= #leaderRev';
      "leaderSession" ::= #leaderSession';
      "hdr" ::= #hdr'
    ]))%struct
    #(Election.mk session' keyPrefix' leaderKey' leaderRev' leaderSession' hdr').
Admitted.


Global Instance Election_struct_fields_split dq l (v : Election.t) :
  StructFieldsSplit dq l v (
    "Hsession" ∷ l ↦s[concurrency.Election :: "session"]{dq} v.(Election.session') ∗
    "HkeyPrefix" ∷ l ↦s[concurrency.Election :: "keyPrefix"]{dq} v.(Election.keyPrefix') ∗
    "HleaderKey" ∷ l ↦s[concurrency.Election :: "leaderKey"]{dq} v.(Election.leaderKey') ∗
    "HleaderRev" ∷ l ↦s[concurrency.Election :: "leaderRev"]{dq} v.(Election.leaderRev') ∗
    "HleaderSession" ∷ l ↦s[concurrency.Election :: "leaderSession"]{dq} v.(Election.leaderSession') ∗
    "Hhdr" ∷ l ↦s[concurrency.Election :: "hdr"]{dq} v.(Election.hdr')
  ).
Admitted.

End instances.
Module Mutex.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  s' : loc;
  pfx' : go_string;
  myKey' : go_string;
  myRev' : w64;
  hdr' : loc;
}.
End def.
End Mutex.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Mutex `{ffi_syntax}: Settable _ :=
  settable! Mutex.mk < Mutex.s'; Mutex.pfx'; Mutex.myKey'; Mutex.myRev'; Mutex.hdr' >.
Global Instance into_val_Mutex `{ffi_syntax} : IntoVal Mutex.t.
Admitted.

Global Instance into_val_typed_Mutex `{ffi_syntax} : IntoValTyped Mutex.t concurrency.Mutex :=
{|
  default_val := Mutex.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Mutex_s `{ffi_syntax} : IntoValStructField "s" concurrency.Mutex Mutex.s'.
Admitted.

Global Instance into_val_struct_field_Mutex_pfx `{ffi_syntax} : IntoValStructField "pfx" concurrency.Mutex Mutex.pfx'.
Admitted.

Global Instance into_val_struct_field_Mutex_myKey `{ffi_syntax} : IntoValStructField "myKey" concurrency.Mutex Mutex.myKey'.
Admitted.

Global Instance into_val_struct_field_Mutex_myRev `{ffi_syntax} : IntoValStructField "myRev" concurrency.Mutex Mutex.myRev'.
Admitted.

Global Instance into_val_struct_field_Mutex_hdr `{ffi_syntax} : IntoValStructField "hdr" concurrency.Mutex Mutex.hdr'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Mutex `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} s' pfx' myKey' myRev' hdr':
  PureWp True
    (struct.make #concurrency.Mutex (alist_val [
      "s" ::= #s';
      "pfx" ::= #pfx';
      "myKey" ::= #myKey';
      "myRev" ::= #myRev';
      "hdr" ::= #hdr'
    ]))%struct
    #(Mutex.mk s' pfx' myKey' myRev' hdr').
Admitted.


Global Instance Mutex_struct_fields_split dq l (v : Mutex.t) :
  StructFieldsSplit dq l v (
    "Hs" ∷ l ↦s[concurrency.Mutex :: "s"]{dq} v.(Mutex.s') ∗
    "Hpfx" ∷ l ↦s[concurrency.Mutex :: "pfx"]{dq} v.(Mutex.pfx') ∗
    "HmyKey" ∷ l ↦s[concurrency.Mutex :: "myKey"]{dq} v.(Mutex.myKey') ∗
    "HmyRev" ∷ l ↦s[concurrency.Mutex :: "myRev"]{dq} v.(Mutex.myRev') ∗
    "Hhdr" ∷ l ↦s[concurrency.Mutex :: "hdr"]{dq} v.(Mutex.hdr')
  ).
Admitted.

End instances.
Module lockerMutex.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Mutex' : loc;
}.
End def.
End lockerMutex.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_lockerMutex `{ffi_syntax}: Settable _ :=
  settable! lockerMutex.mk < lockerMutex.Mutex' >.
Global Instance into_val_lockerMutex `{ffi_syntax} : IntoVal lockerMutex.t.
Admitted.

Global Instance into_val_typed_lockerMutex `{ffi_syntax} : IntoValTyped lockerMutex.t concurrency.lockerMutex :=
{|
  default_val := lockerMutex.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_lockerMutex_Mutex `{ffi_syntax} : IntoValStructField "Mutex" concurrency.lockerMutex lockerMutex.Mutex'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_lockerMutex `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Mutex':
  PureWp True
    (struct.make #concurrency.lockerMutex (alist_val [
      "Mutex" ::= #Mutex'
    ]))%struct
    #(lockerMutex.mk Mutex').
Admitted.


Global Instance lockerMutex_struct_fields_split dq l (v : lockerMutex.t) :
  StructFieldsSplit dq l v (
    "HMutex" ∷ l ↦s[concurrency.lockerMutex :: "Mutex"]{dq} v.(lockerMutex.Mutex')
  ).
Admitted.

End instances.
Module Session.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  client' : loc;
  opts' : loc;
  id' : clientv3.LeaseID.t;
  ctx' : context.Context.t;
  cancel' : context.CancelFunc.t;
  donec' : loc;
}.
End def.
End Session.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Session `{ffi_syntax}: Settable _ :=
  settable! Session.mk < Session.client'; Session.opts'; Session.id'; Session.ctx'; Session.cancel'; Session.donec' >.
Global Instance into_val_Session `{ffi_syntax} : IntoVal Session.t.
Admitted.

Global Instance into_val_typed_Session `{ffi_syntax} : IntoValTyped Session.t concurrency.Session :=
{|
  default_val := Session.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Session_client `{ffi_syntax} : IntoValStructField "client" concurrency.Session Session.client'.
Admitted.

Global Instance into_val_struct_field_Session_opts `{ffi_syntax} : IntoValStructField "opts" concurrency.Session Session.opts'.
Admitted.

Global Instance into_val_struct_field_Session_id `{ffi_syntax} : IntoValStructField "id" concurrency.Session Session.id'.
Admitted.

Global Instance into_val_struct_field_Session_ctx `{ffi_syntax} : IntoValStructField "ctx" concurrency.Session Session.ctx'.
Admitted.

Global Instance into_val_struct_field_Session_cancel `{ffi_syntax} : IntoValStructField "cancel" concurrency.Session Session.cancel'.
Admitted.

Global Instance into_val_struct_field_Session_donec `{ffi_syntax} : IntoValStructField "donec" concurrency.Session Session.donec'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Session `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} client' opts' id' ctx' cancel' donec':
  PureWp True
    (struct.make #concurrency.Session (alist_val [
      "client" ::= #client';
      "opts" ::= #opts';
      "id" ::= #id';
      "ctx" ::= #ctx';
      "cancel" ::= #cancel';
      "donec" ::= #donec'
    ]))%struct
    #(Session.mk client' opts' id' ctx' cancel' donec').
Admitted.


Global Instance Session_struct_fields_split dq l (v : Session.t) :
  StructFieldsSplit dq l v (
    "Hclient" ∷ l ↦s[concurrency.Session :: "client"]{dq} v.(Session.client') ∗
    "Hopts" ∷ l ↦s[concurrency.Session :: "opts"]{dq} v.(Session.opts') ∗
    "Hid" ∷ l ↦s[concurrency.Session :: "id"]{dq} v.(Session.id') ∗
    "Hctx" ∷ l ↦s[concurrency.Session :: "ctx"]{dq} v.(Session.ctx') ∗
    "Hcancel" ∷ l ↦s[concurrency.Session :: "cancel"]{dq} v.(Session.cancel') ∗
    "Hdonec" ∷ l ↦s[concurrency.Session :: "donec"]{dq} v.(Session.donec')
  ).
Admitted.

End instances.
Module sessionOptions.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ttl' : w64;
  leaseID' : clientv3.LeaseID.t;
  ctx' : context.Context.t;
}.
End def.
End sessionOptions.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_sessionOptions `{ffi_syntax}: Settable _ :=
  settable! sessionOptions.mk < sessionOptions.ttl'; sessionOptions.leaseID'; sessionOptions.ctx' >.
Global Instance into_val_sessionOptions `{ffi_syntax} : IntoVal sessionOptions.t.
Admitted.

Global Instance into_val_typed_sessionOptions `{ffi_syntax} : IntoValTyped sessionOptions.t concurrency.sessionOptions :=
{|
  default_val := sessionOptions.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_sessionOptions_ttl `{ffi_syntax} : IntoValStructField "ttl" concurrency.sessionOptions sessionOptions.ttl'.
Admitted.

Global Instance into_val_struct_field_sessionOptions_leaseID `{ffi_syntax} : IntoValStructField "leaseID" concurrency.sessionOptions sessionOptions.leaseID'.
Admitted.

Global Instance into_val_struct_field_sessionOptions_ctx `{ffi_syntax} : IntoValStructField "ctx" concurrency.sessionOptions sessionOptions.ctx'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_sessionOptions `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} ttl' leaseID' ctx':
  PureWp True
    (struct.make #concurrency.sessionOptions (alist_val [
      "ttl" ::= #ttl';
      "leaseID" ::= #leaseID';
      "ctx" ::= #ctx'
    ]))%struct
    #(sessionOptions.mk ttl' leaseID' ctx').
Admitted.


Global Instance sessionOptions_struct_fields_split dq l (v : sessionOptions.t) :
  StructFieldsSplit dq l v (
    "Httl" ∷ l ↦s[concurrency.sessionOptions :: "ttl"]{dq} v.(sessionOptions.ttl') ∗
    "HleaseID" ∷ l ↦s[concurrency.sessionOptions :: "leaseID"]{dq} v.(sessionOptions.leaseID') ∗
    "Hctx" ∷ l ↦s[concurrency.sessionOptions :: "ctx"]{dq} v.(sessionOptions.ctx')
  ).
Admitted.

End instances.

Module SessionOption.
Section def.
Context `{ffi_syntax}.
Definition t := func.t.
End def.
End SessionOption.

Module STM.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End STM.

Module Isolation.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End Isolation.
Module stmError.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  err' : error.t;
}.
End def.
End stmError.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_stmError `{ffi_syntax}: Settable _ :=
  settable! stmError.mk < stmError.err' >.
Global Instance into_val_stmError `{ffi_syntax} : IntoVal stmError.t.
Admitted.

Global Instance into_val_typed_stmError `{ffi_syntax} : IntoValTyped stmError.t concurrency.stmError :=
{|
  default_val := stmError.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_stmError_err `{ffi_syntax} : IntoValStructField "err" concurrency.stmError stmError.err'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_stmError `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} err':
  PureWp True
    (struct.make #concurrency.stmError (alist_val [
      "err" ::= #err'
    ]))%struct
    #(stmError.mk err').
Admitted.


Global Instance stmError_struct_fields_split dq l (v : stmError.t) :
  StructFieldsSplit dq l v (
    "Herr" ∷ l ↦s[concurrency.stmError :: "err"]{dq} v.(stmError.err')
  ).
Admitted.

End instances.
Module stmOptions.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  iso' : Isolation.t;
  ctx' : context.Context.t;
  prefetch' : slice.t;
}.
End def.
End stmOptions.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_stmOptions `{ffi_syntax}: Settable _ :=
  settable! stmOptions.mk < stmOptions.iso'; stmOptions.ctx'; stmOptions.prefetch' >.
Global Instance into_val_stmOptions `{ffi_syntax} : IntoVal stmOptions.t.
Admitted.

Global Instance into_val_typed_stmOptions `{ffi_syntax} : IntoValTyped stmOptions.t concurrency.stmOptions :=
{|
  default_val := stmOptions.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_stmOptions_iso `{ffi_syntax} : IntoValStructField "iso" concurrency.stmOptions stmOptions.iso'.
Admitted.

Global Instance into_val_struct_field_stmOptions_ctx `{ffi_syntax} : IntoValStructField "ctx" concurrency.stmOptions stmOptions.ctx'.
Admitted.

Global Instance into_val_struct_field_stmOptions_prefetch `{ffi_syntax} : IntoValStructField "prefetch" concurrency.stmOptions stmOptions.prefetch'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_stmOptions `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} iso' ctx' prefetch':
  PureWp True
    (struct.make #concurrency.stmOptions (alist_val [
      "iso" ::= #iso';
      "ctx" ::= #ctx';
      "prefetch" ::= #prefetch'
    ]))%struct
    #(stmOptions.mk iso' ctx' prefetch').
Admitted.


Global Instance stmOptions_struct_fields_split dq l (v : stmOptions.t) :
  StructFieldsSplit dq l v (
    "Hiso" ∷ l ↦s[concurrency.stmOptions :: "iso"]{dq} v.(stmOptions.iso') ∗
    "Hctx" ∷ l ↦s[concurrency.stmOptions :: "ctx"]{dq} v.(stmOptions.ctx') ∗
    "Hprefetch" ∷ l ↦s[concurrency.stmOptions :: "prefetch"]{dq} v.(stmOptions.prefetch')
  ).
Admitted.

End instances.

Module stmOption.
Section def.
Context `{ffi_syntax}.
Definition t := func.t.
End def.
End stmOption.
Module stmResponse.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  resp' : loc;
  err' : error.t;
}.
End def.
End stmResponse.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_stmResponse `{ffi_syntax}: Settable _ :=
  settable! stmResponse.mk < stmResponse.resp'; stmResponse.err' >.
Global Instance into_val_stmResponse `{ffi_syntax} : IntoVal stmResponse.t.
Admitted.

Global Instance into_val_typed_stmResponse `{ffi_syntax} : IntoValTyped stmResponse.t concurrency.stmResponse :=
{|
  default_val := stmResponse.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_stmResponse_resp `{ffi_syntax} : IntoValStructField "resp" concurrency.stmResponse stmResponse.resp'.
Admitted.

Global Instance into_val_struct_field_stmResponse_err `{ffi_syntax} : IntoValStructField "err" concurrency.stmResponse stmResponse.err'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_stmResponse `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} resp' err':
  PureWp True
    (struct.make #concurrency.stmResponse (alist_val [
      "resp" ::= #resp';
      "err" ::= #err'
    ]))%struct
    #(stmResponse.mk resp' err').
Admitted.


Global Instance stmResponse_struct_fields_split dq l (v : stmResponse.t) :
  StructFieldsSplit dq l v (
    "Hresp" ∷ l ↦s[concurrency.stmResponse :: "resp"]{dq} v.(stmResponse.resp') ∗
    "Herr" ∷ l ↦s[concurrency.stmResponse :: "err"]{dq} v.(stmResponse.err')
  ).
Admitted.

End instances.

Module readSet.
Section def.
Context `{ffi_syntax}.
Definition t := loc.
End def.
End readSet.

Module writeSet.
Section def.
Context `{ffi_syntax}.
Definition t := loc.
End def.
End writeSet.
Module stm.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  client' : loc;
  ctx' : context.Context.t;
  rset' : readSet.t;
  wset' : writeSet.t;
  getOpts' : slice.t;
  conflicts' : func.t;
}.
End def.
End stm.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_stm `{ffi_syntax}: Settable _ :=
  settable! stm.mk < stm.client'; stm.ctx'; stm.rset'; stm.wset'; stm.getOpts'; stm.conflicts' >.
Global Instance into_val_stm `{ffi_syntax} : IntoVal stm.t.
Admitted.

Global Instance into_val_typed_stm `{ffi_syntax} : IntoValTyped stm.t concurrency.stm :=
{|
  default_val := stm.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_stm_client `{ffi_syntax} : IntoValStructField "client" concurrency.stm stm.client'.
Admitted.

Global Instance into_val_struct_field_stm_ctx `{ffi_syntax} : IntoValStructField "ctx" concurrency.stm stm.ctx'.
Admitted.

Global Instance into_val_struct_field_stm_rset `{ffi_syntax} : IntoValStructField "rset" concurrency.stm stm.rset'.
Admitted.

Global Instance into_val_struct_field_stm_wset `{ffi_syntax} : IntoValStructField "wset" concurrency.stm stm.wset'.
Admitted.

Global Instance into_val_struct_field_stm_getOpts `{ffi_syntax} : IntoValStructField "getOpts" concurrency.stm stm.getOpts'.
Admitted.

Global Instance into_val_struct_field_stm_conflicts `{ffi_syntax} : IntoValStructField "conflicts" concurrency.stm stm.conflicts'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_stm `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} client' ctx' rset' wset' getOpts' conflicts':
  PureWp True
    (struct.make #concurrency.stm (alist_val [
      "client" ::= #client';
      "ctx" ::= #ctx';
      "rset" ::= #rset';
      "wset" ::= #wset';
      "getOpts" ::= #getOpts';
      "conflicts" ::= #conflicts'
    ]))%struct
    #(stm.mk client' ctx' rset' wset' getOpts' conflicts').
Admitted.


Global Instance stm_struct_fields_split dq l (v : stm.t) :
  StructFieldsSplit dq l v (
    "Hclient" ∷ l ↦s[concurrency.stm :: "client"]{dq} v.(stm.client') ∗
    "Hctx" ∷ l ↦s[concurrency.stm :: "ctx"]{dq} v.(stm.ctx') ∗
    "Hrset" ∷ l ↦s[concurrency.stm :: "rset"]{dq} v.(stm.rset') ∗
    "Hwset" ∷ l ↦s[concurrency.stm :: "wset"]{dq} v.(stm.wset') ∗
    "HgetOpts" ∷ l ↦s[concurrency.stm :: "getOpts"]{dq} v.(stm.getOpts') ∗
    "Hconflicts" ∷ l ↦s[concurrency.stm :: "conflicts"]{dq} v.(stm.conflicts')
  ).
Admitted.

End instances.
Module stmPut.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  val' : go_string;
  op' : clientv3.Op.t;
}.
End def.
End stmPut.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_stmPut `{ffi_syntax}: Settable _ :=
  settable! stmPut.mk < stmPut.val'; stmPut.op' >.
Global Instance into_val_stmPut `{ffi_syntax} : IntoVal stmPut.t.
Admitted.

Global Instance into_val_typed_stmPut `{ffi_syntax} : IntoValTyped stmPut.t concurrency.stmPut :=
{|
  default_val := stmPut.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_stmPut_val `{ffi_syntax} : IntoValStructField "val" concurrency.stmPut stmPut.val'.
Admitted.

Global Instance into_val_struct_field_stmPut_op `{ffi_syntax} : IntoValStructField "op" concurrency.stmPut stmPut.op'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_stmPut `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} val' op':
  PureWp True
    (struct.make #concurrency.stmPut (alist_val [
      "val" ::= #val';
      "op" ::= #op'
    ]))%struct
    #(stmPut.mk val' op').
Admitted.


Global Instance stmPut_struct_fields_split dq l (v : stmPut.t) :
  StructFieldsSplit dq l v (
    "Hval" ∷ l ↦s[concurrency.stmPut :: "val"]{dq} v.(stmPut.val') ∗
    "Hop" ∷ l ↦s[concurrency.stmPut :: "op"]{dq} v.(stmPut.op')
  ).
Admitted.

End instances.
Module stmSerializable.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  stm' : stm.t;
  prefetch' : loc;
}.
End def.
End stmSerializable.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_stmSerializable `{ffi_syntax}: Settable _ :=
  settable! stmSerializable.mk < stmSerializable.stm'; stmSerializable.prefetch' >.
Global Instance into_val_stmSerializable `{ffi_syntax} : IntoVal stmSerializable.t.
Admitted.

Global Instance into_val_typed_stmSerializable `{ffi_syntax} : IntoValTyped stmSerializable.t concurrency.stmSerializable :=
{|
  default_val := stmSerializable.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_stmSerializable_stm `{ffi_syntax} : IntoValStructField "stm" concurrency.stmSerializable stmSerializable.stm'.
Admitted.

Global Instance into_val_struct_field_stmSerializable_prefetch `{ffi_syntax} : IntoValStructField "prefetch" concurrency.stmSerializable stmSerializable.prefetch'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_stmSerializable `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} stm' prefetch':
  PureWp True
    (struct.make #concurrency.stmSerializable (alist_val [
      "stm" ::= #stm';
      "prefetch" ::= #prefetch'
    ]))%struct
    #(stmSerializable.mk stm' prefetch').
Admitted.


Global Instance stmSerializable_struct_fields_split dq l (v : stmSerializable.t) :
  StructFieldsSplit dq l v (
    "Hstm" ∷ l ↦s[concurrency.stmSerializable :: "stm"]{dq} v.(stmSerializable.stm') ∗
    "Hprefetch" ∷ l ↦s[concurrency.stmSerializable :: "prefetch"]{dq} v.(stmSerializable.prefetch')
  ).
Admitted.

End instances.

Section names.

Class GlobalAddrs :=
{
  ErrElectionNotLeader : loc;
  ErrElectionNoLeader : loc;
  ErrLocked : loc;
  ErrSessionExpired : loc;
  ErrLockReleased : loc;
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
    ("ErrElectionNotLeader"%go, ErrElectionNotLeader);
    ("ErrElectionNoLeader"%go, ErrElectionNoLeader);
    ("ErrLocked"%go, ErrLocked);
    ("ErrSessionExpired"%go, ErrSessionExpired);
    ("ErrLockReleased"%go, ErrLockReleased)
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined concurrency :=
{|
  is_pkg_defined := is_global_definitions concurrency var_addrs;
|}.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
  "HErrElectionNotLeader" ∷ ErrElectionNotLeader ↦ (default_val error.t) ∗
  "HErrElectionNoLeader" ∷ ErrElectionNoLeader ↦ (default_val error.t) ∗
  "HErrLocked" ∷ ErrLocked ↦ (default_val error.t) ∗
  "HErrSessionExpired" ∷ ErrSessionExpired ↦ (default_val error.t) ∗
  "HErrLockReleased" ∷ ErrLockReleased ↦ (default_val error.t).

Global Instance wp_globals_get_ErrElectionNotLeader : 
  WpGlobalsGet concurrency "ErrElectionNotLeader" ErrElectionNotLeader (is_pkg_defined concurrency).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrElectionNoLeader : 
  WpGlobalsGet concurrency "ErrElectionNoLeader" ErrElectionNoLeader (is_pkg_defined concurrency).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrLocked : 
  WpGlobalsGet concurrency "ErrLocked" ErrLocked (is_pkg_defined concurrency).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrSessionExpired : 
  WpGlobalsGet concurrency "ErrSessionExpired" ErrSessionExpired (is_pkg_defined concurrency).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrLockReleased : 
  WpGlobalsGet concurrency "ErrLockReleased" ErrLockReleased (is_pkg_defined concurrency).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_func_call_NewElection :
  WpFuncCall concurrency "NewElection" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ResumeElection :
  WpFuncCall concurrency "ResumeElection" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_waitDelete :
  WpFuncCall concurrency "waitDelete" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_waitDeletes :
  WpFuncCall concurrency "waitDeletes" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewMutex :
  WpFuncCall concurrency "NewMutex" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewLocker :
  WpFuncCall concurrency "NewLocker" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewSession :
  WpFuncCall concurrency "NewSession" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithTTL :
  WpFuncCall concurrency "WithTTL" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithLease :
  WpFuncCall concurrency "WithLease" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithContext :
  WpFuncCall concurrency "WithContext" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithIsolation :
  WpFuncCall concurrency "WithIsolation" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithAbortContext :
  WpFuncCall concurrency "WithAbortContext" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithPrefetch :
  WpFuncCall concurrency "WithPrefetch" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewSTM :
  WpFuncCall concurrency "NewSTM" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_mkSTM :
  WpFuncCall concurrency "mkSTM" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runSTM :
  WpFuncCall concurrency "runSTM" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isKeyCurrent :
  WpFuncCall concurrency "isKeyCurrent" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_respToValue :
  WpFuncCall concurrency "respToValue" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewSTMRepeatable :
  WpFuncCall concurrency "NewSTMRepeatable" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewSTMSerializable :
  WpFuncCall concurrency "NewSTMSerializable" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewSTMReadCommitted :
  WpFuncCall concurrency "NewSTMReadCommitted" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Campaign :
  WpMethodCall concurrency "Election'ptr" "Campaign" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Header :
  WpMethodCall concurrency "Election'ptr" "Header" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Key :
  WpMethodCall concurrency "Election'ptr" "Key" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Leader :
  WpMethodCall concurrency "Election'ptr" "Leader" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Observe :
  WpMethodCall concurrency "Election'ptr" "Observe" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Proclaim :
  WpMethodCall concurrency "Election'ptr" "Proclaim" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Resign :
  WpMethodCall concurrency "Election'ptr" "Resign" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Rev :
  WpMethodCall concurrency "Election'ptr" "Rev" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_observe :
  WpMethodCall concurrency "Election'ptr" "observe" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_Header :
  WpMethodCall concurrency "Mutex'ptr" "Header" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_IsOwner :
  WpMethodCall concurrency "Mutex'ptr" "IsOwner" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_Key :
  WpMethodCall concurrency "Mutex'ptr" "Key" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_Lock :
  WpMethodCall concurrency "Mutex'ptr" "Lock" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_TryLock :
  WpMethodCall concurrency "Mutex'ptr" "TryLock" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_Unlock :
  WpMethodCall concurrency "Mutex'ptr" "Unlock" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_tryAcquire :
  WpMethodCall concurrency "Mutex'ptr" "tryAcquire" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex_Header :
  WpMethodCall concurrency "lockerMutex" "Header" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex_IsOwner :
  WpMethodCall concurrency "lockerMutex" "IsOwner" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex_Key :
  WpMethodCall concurrency "lockerMutex" "Key" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex_TryLock :
  WpMethodCall concurrency "lockerMutex" "TryLock" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex_tryAcquire :
  WpMethodCall concurrency "lockerMutex" "tryAcquire" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_Header :
  WpMethodCall concurrency "lockerMutex'ptr" "Header" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_IsOwner :
  WpMethodCall concurrency "lockerMutex'ptr" "IsOwner" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_Key :
  WpMethodCall concurrency "lockerMutex'ptr" "Key" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_Lock :
  WpMethodCall concurrency "lockerMutex'ptr" "Lock" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_TryLock :
  WpMethodCall concurrency "lockerMutex'ptr" "TryLock" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_Unlock :
  WpMethodCall concurrency "lockerMutex'ptr" "Unlock" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_tryAcquire :
  WpMethodCall concurrency "lockerMutex'ptr" "tryAcquire" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Session'ptr_Client :
  WpMethodCall concurrency "Session'ptr" "Client" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Session'ptr_Close :
  WpMethodCall concurrency "Session'ptr" "Close" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Session'ptr_Ctx :
  WpMethodCall concurrency "Session'ptr" "Ctx" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Session'ptr_Done :
  WpMethodCall concurrency "Session'ptr" "Done" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Session'ptr_Lease :
  WpMethodCall concurrency "Session'ptr" "Lease" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Session'ptr_Orphan :
  WpMethodCall concurrency "Session'ptr" "Orphan" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_Del :
  WpMethodCall concurrency "stm'ptr" "Del" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_Get :
  WpMethodCall concurrency "stm'ptr" "Get" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_Put :
  WpMethodCall concurrency "stm'ptr" "Put" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_Rev :
  WpMethodCall concurrency "stm'ptr" "Rev" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_commit :
  WpMethodCall concurrency "stm'ptr" "commit" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_fetch :
  WpMethodCall concurrency "stm'ptr" "fetch" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_reset :
  WpMethodCall concurrency "stm'ptr" "reset" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readSet_add :
  WpMethodCall concurrency "readSet" "add" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readSet_cmps :
  WpMethodCall concurrency "readSet" "cmps" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readSet_first :
  WpMethodCall concurrency "readSet" "first" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readSet'ptr_add :
  WpMethodCall concurrency "readSet'ptr" "add" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readSet'ptr_cmps :
  WpMethodCall concurrency "readSet'ptr" "cmps" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readSet'ptr_first :
  WpMethodCall concurrency "readSet'ptr" "first" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_writeSet_cmps :
  WpMethodCall concurrency "writeSet" "cmps" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_writeSet_get :
  WpMethodCall concurrency "writeSet" "get" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_writeSet_puts :
  WpMethodCall concurrency "writeSet" "puts" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_writeSet'ptr_cmps :
  WpMethodCall concurrency "writeSet'ptr" "cmps" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_writeSet'ptr_get :
  WpMethodCall concurrency "writeSet'ptr" "get" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_writeSet'ptr_puts :
  WpMethodCall concurrency "writeSet'ptr" "puts" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_Del :
  WpMethodCall concurrency "stmSerializable'ptr" "Del" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_Get :
  WpMethodCall concurrency "stmSerializable'ptr" "Get" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_Put :
  WpMethodCall concurrency "stmSerializable'ptr" "Put" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_Rev :
  WpMethodCall concurrency "stmSerializable'ptr" "Rev" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_commit :
  WpMethodCall concurrency "stmSerializable'ptr" "commit" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_fetch :
  WpMethodCall concurrency "stmSerializable'ptr" "fetch" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_gets :
  WpMethodCall concurrency "stmSerializable'ptr" "gets" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_reset :
  WpMethodCall concurrency "stmSerializable'ptr" "reset" _ (is_pkg_defined concurrency) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End concurrency.
