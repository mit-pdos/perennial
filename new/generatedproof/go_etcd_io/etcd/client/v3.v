(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.go_etcd_io.etcd.api.v3.etcdserverpb.
Require Export New.generatedproof.go_etcd_io.etcd.api.v3.mvccpb.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.etcd.client.v3.

Set Default Proof Using "Type".

Module clientv3.

(* type clientv3.Client *)
Module Client.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Client.

Global Instance bounded_size_Client : BoundedTypeSize clientv3.Client.
Admitted.

Global Instance into_val_Client `{ffi_syntax} : IntoVal Client.t.
Admitted.

Global Instance into_val_typed_Client `{ffi_syntax} : IntoValTyped Client.t clientv3.Client.
Admitted.

(* type clientv3.Cluster *)
Module Cluster.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End Cluster.

(* type clientv3.Cmp *)
Module Cmp.
Section def.
Context `{ffi_syntax}.
Definition t := etcdserverpb.Compare.t.
End def.
End Cmp.

(* type clientv3.PutResponse *)
Module PutResponse.
Section def.
Context `{ffi_syntax}.
Definition t := etcdserverpb.PutResponse.t.
End def.
End PutResponse.

(* type clientv3.GetResponse *)
Module GetResponse.
Section def.
Context `{ffi_syntax}.
Definition t := etcdserverpb.RangeResponse.t.
End def.
End GetResponse.

(* type clientv3.DeleteResponse *)
Module DeleteResponse.
Section def.
Context `{ffi_syntax}.
Definition t := etcdserverpb.DeleteRangeResponse.t.
End def.
End DeleteResponse.

(* type clientv3.TxnResponse *)
Module TxnResponse.
Section def.
Context `{ffi_syntax}.
Definition t := etcdserverpb.TxnResponse.t.
End def.
End TxnResponse.

(* type clientv3.KV *)
Module KV.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End KV.

(* type clientv3.OpResponse *)
Module OpResponse.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  put' : loc;
  get' : loc;
  del' : loc;
  txn' : loc;
}.
End def.
End OpResponse.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_OpResponse : Settable OpResponse.t :=
  settable! OpResponse.mk < OpResponse.put'; OpResponse.get'; OpResponse.del'; OpResponse.txn' >.
Global Instance into_val_OpResponse : IntoVal OpResponse.t :=
  {| to_val_def v :=
    struct.val_aux clientv3.OpResponse [
    "put" ::= #(OpResponse.put' v);
    "get" ::= #(OpResponse.get' v);
    "del" ::= #(OpResponse.del' v);
    "txn" ::= #(OpResponse.txn' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_OpResponse : IntoValTyped OpResponse.t clientv3.OpResponse :=
{|
  default_val := OpResponse.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_OpResponse_put : IntoValStructField "put" clientv3.OpResponse OpResponse.put'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_OpResponse_get : IntoValStructField "get" clientv3.OpResponse OpResponse.get'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_OpResponse_del : IntoValStructField "del" clientv3.OpResponse OpResponse.del'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_OpResponse_txn : IntoValStructField "txn" clientv3.OpResponse OpResponse.txn'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_OpResponse put' get' del' txn':
  PureWp True
    (struct.make #clientv3.OpResponse (alist_val [
      "put" ::= #put';
      "get" ::= #get';
      "del" ::= #del';
      "txn" ::= #txn'
    ]))%struct
    #(OpResponse.mk put' get' del' txn').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance OpResponse_struct_fields_split dq l (v : OpResponse.t) :
  StructFieldsSplit dq l v (
    "Hput" ∷ l ↦s[clientv3.OpResponse :: "put"]{dq} v.(OpResponse.put') ∗
    "Hget" ∷ l ↦s[clientv3.OpResponse :: "get"]{dq} v.(OpResponse.get') ∗
    "Hdel" ∷ l ↦s[clientv3.OpResponse :: "del"]{dq} v.(OpResponse.del') ∗
    "Htxn" ∷ l ↦s[clientv3.OpResponse :: "txn"]{dq} v.(OpResponse.txn')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (OpResponse.put' v)) clientv3.OpResponse "put"%go.
  simpl_one_flatten_struct (# (OpResponse.get' v)) clientv3.OpResponse "get"%go.
  simpl_one_flatten_struct (# (OpResponse.del' v)) clientv3.OpResponse "del"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type clientv3.LeaseID *)
Module LeaseID.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End LeaseID.

(* type clientv3.LeaseGrantResponse *)
Module LeaseGrantResponse.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ResponseHeader' : loc;
  ID' : LeaseID.t;
  TTL' : w64;
  Error' : go_string;
}.
End def.
End LeaseGrantResponse.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_LeaseGrantResponse : Settable LeaseGrantResponse.t :=
  settable! LeaseGrantResponse.mk < LeaseGrantResponse.ResponseHeader'; LeaseGrantResponse.ID'; LeaseGrantResponse.TTL'; LeaseGrantResponse.Error' >.
Global Instance into_val_LeaseGrantResponse : IntoVal LeaseGrantResponse.t :=
  {| to_val_def v :=
    struct.val_aux clientv3.LeaseGrantResponse [
    "ResponseHeader" ::= #(LeaseGrantResponse.ResponseHeader' v);
    "ID" ::= #(LeaseGrantResponse.ID' v);
    "TTL" ::= #(LeaseGrantResponse.TTL' v);
    "Error" ::= #(LeaseGrantResponse.Error' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_LeaseGrantResponse : IntoValTyped LeaseGrantResponse.t clientv3.LeaseGrantResponse :=
{|
  default_val := LeaseGrantResponse.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_LeaseGrantResponse_ResponseHeader : IntoValStructField "ResponseHeader" clientv3.LeaseGrantResponse LeaseGrantResponse.ResponseHeader'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_LeaseGrantResponse_ID : IntoValStructField "ID" clientv3.LeaseGrantResponse LeaseGrantResponse.ID'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_LeaseGrantResponse_TTL : IntoValStructField "TTL" clientv3.LeaseGrantResponse LeaseGrantResponse.TTL'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_LeaseGrantResponse_Error : IntoValStructField "Error" clientv3.LeaseGrantResponse LeaseGrantResponse.Error'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_LeaseGrantResponse ResponseHeader' ID' TTL' Error':
  PureWp True
    (struct.make #clientv3.LeaseGrantResponse (alist_val [
      "ResponseHeader" ::= #ResponseHeader';
      "ID" ::= #ID';
      "TTL" ::= #TTL';
      "Error" ::= #Error'
    ]))%struct
    #(LeaseGrantResponse.mk ResponseHeader' ID' TTL' Error').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance LeaseGrantResponse_struct_fields_split dq l (v : LeaseGrantResponse.t) :
  StructFieldsSplit dq l v (
    "HResponseHeader" ∷ l ↦s[clientv3.LeaseGrantResponse :: "ResponseHeader"]{dq} v.(LeaseGrantResponse.ResponseHeader') ∗
    "HID" ∷ l ↦s[clientv3.LeaseGrantResponse :: "ID"]{dq} v.(LeaseGrantResponse.ID') ∗
    "HTTL" ∷ l ↦s[clientv3.LeaseGrantResponse :: "TTL"]{dq} v.(LeaseGrantResponse.TTL') ∗
    "HError" ∷ l ↦s[clientv3.LeaseGrantResponse :: "Error"]{dq} v.(LeaseGrantResponse.Error')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (LeaseGrantResponse.ResponseHeader' v)) clientv3.LeaseGrantResponse "ResponseHeader"%go.
  simpl_one_flatten_struct (# (LeaseGrantResponse.ID' v)) clientv3.LeaseGrantResponse "ID"%go.
  simpl_one_flatten_struct (# (LeaseGrantResponse.TTL' v)) clientv3.LeaseGrantResponse "TTL"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type clientv3.Lease *)
Module Lease.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End Lease.

(* type clientv3.Op *)
Module Op.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Op.

Global Instance bounded_size_Op : BoundedTypeSize clientv3.Op.
Admitted.

Global Instance into_val_Op `{ffi_syntax} : IntoVal Op.t.
Admitted.

Global Instance into_val_typed_Op `{ffi_syntax} : IntoValTyped Op.t clientv3.Op.
Admitted.

(* type clientv3.OpOption *)
Module OpOption.
Section def.
Context `{ffi_syntax}.
Definition t := func.t.
End def.
End OpOption.

(* type clientv3.Txn *)
Module Txn.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End Txn.

(* type clientv3.Event *)
Module Event.
Section def.
Context `{ffi_syntax}.
Definition t := mvccpb.Event.t.
End def.
End Event.

(* type clientv3.WatchChan *)
Module WatchChan.
Section def.
Context `{ffi_syntax}.
Definition t := loc.
End def.
End WatchChan.

(* type clientv3.Watcher *)
Module Watcher.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End Watcher.

(* type clientv3.WatchResponse *)
Module WatchResponse.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Header' : etcdserverpb.ResponseHeader.t;
  Events' : slice.t;
  CompactRevision' : w64;
  Canceled' : bool;
  Created' : bool;
  closeErr' : error.t;
  cancelReason' : go_string;
}.
End def.
End WatchResponse.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_WatchResponse : Settable WatchResponse.t :=
  settable! WatchResponse.mk < WatchResponse.Header'; WatchResponse.Events'; WatchResponse.CompactRevision'; WatchResponse.Canceled'; WatchResponse.Created'; WatchResponse.closeErr'; WatchResponse.cancelReason' >.
Global Instance into_val_WatchResponse : IntoVal WatchResponse.t :=
  {| to_val_def v :=
    struct.val_aux clientv3.WatchResponse [
    "Header" ::= #(WatchResponse.Header' v);
    "Events" ::= #(WatchResponse.Events' v);
    "CompactRevision" ::= #(WatchResponse.CompactRevision' v);
    "Canceled" ::= #(WatchResponse.Canceled' v);
    "Created" ::= #(WatchResponse.Created' v);
    "closeErr" ::= #(WatchResponse.closeErr' v);
    "cancelReason" ::= #(WatchResponse.cancelReason' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_WatchResponse : IntoValTyped WatchResponse.t clientv3.WatchResponse :=
{|
  default_val := WatchResponse.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_WatchResponse_Header : IntoValStructField "Header" clientv3.WatchResponse WatchResponse.Header'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_WatchResponse_Events : IntoValStructField "Events" clientv3.WatchResponse WatchResponse.Events'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_WatchResponse_CompactRevision : IntoValStructField "CompactRevision" clientv3.WatchResponse WatchResponse.CompactRevision'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_WatchResponse_Canceled : IntoValStructField "Canceled" clientv3.WatchResponse WatchResponse.Canceled'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_WatchResponse_Created : IntoValStructField "Created" clientv3.WatchResponse WatchResponse.Created'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_WatchResponse_closeErr : IntoValStructField "closeErr" clientv3.WatchResponse WatchResponse.closeErr'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_WatchResponse_cancelReason : IntoValStructField "cancelReason" clientv3.WatchResponse WatchResponse.cancelReason'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_WatchResponse Header' Events' CompactRevision' Canceled' Created' closeErr' cancelReason':
  PureWp True
    (struct.make #clientv3.WatchResponse (alist_val [
      "Header" ::= #Header';
      "Events" ::= #Events';
      "CompactRevision" ::= #CompactRevision';
      "Canceled" ::= #Canceled';
      "Created" ::= #Created';
      "closeErr" ::= #closeErr';
      "cancelReason" ::= #cancelReason'
    ]))%struct
    #(WatchResponse.mk Header' Events' CompactRevision' Canceled' Created' closeErr' cancelReason').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance WatchResponse_struct_fields_split dq l (v : WatchResponse.t) :
  StructFieldsSplit dq l v (
    "HHeader" ∷ l ↦s[clientv3.WatchResponse :: "Header"]{dq} v.(WatchResponse.Header') ∗
    "HEvents" ∷ l ↦s[clientv3.WatchResponse :: "Events"]{dq} v.(WatchResponse.Events') ∗
    "HCompactRevision" ∷ l ↦s[clientv3.WatchResponse :: "CompactRevision"]{dq} v.(WatchResponse.CompactRevision') ∗
    "HCanceled" ∷ l ↦s[clientv3.WatchResponse :: "Canceled"]{dq} v.(WatchResponse.Canceled') ∗
    "HCreated" ∷ l ↦s[clientv3.WatchResponse :: "Created"]{dq} v.(WatchResponse.Created') ∗
    "HcloseErr" ∷ l ↦s[clientv3.WatchResponse :: "closeErr"]{dq} v.(WatchResponse.closeErr') ∗
    "HcancelReason" ∷ l ↦s[clientv3.WatchResponse :: "cancelReason"]{dq} v.(WatchResponse.cancelReason')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (WatchResponse.Header' v)) clientv3.WatchResponse "Header"%go.
  simpl_one_flatten_struct (# (WatchResponse.Events' v)) clientv3.WatchResponse "Events"%go.
  simpl_one_flatten_struct (# (WatchResponse.CompactRevision' v)) clientv3.WatchResponse "CompactRevision"%go.
  simpl_one_flatten_struct (# (WatchResponse.Canceled' v)) clientv3.WatchResponse "Canceled"%go.
  simpl_one_flatten_struct (# (WatchResponse.Created' v)) clientv3.WatchResponse "Created"%go.
  simpl_one_flatten_struct (# (WatchResponse.closeErr' v)) clientv3.WatchResponse "closeErr"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined clientv3 :=
{|
  is_pkg_defined := is_global_definitions clientv3 var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

End names.
End clientv3.
