(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.etcd.server.v3.storage.backend.

Set Default Proof Using "Type".

Module backend.

(* type backend.Backend *)
Module Backend.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Backend.

Global Instance bounded_size_Backend : BoundedTypeSize backend.Backend.
Admitted.

Global Instance into_val_Backend `{ffi_syntax} : IntoVal Backend.t.
Admitted.

Global Instance into_val_typed_Backend `{ffi_syntax} : IntoValTyped Backend.t backend.Backend.
Admitted.

(* type backend.Snapshot *)
Module Snapshot.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Snapshot.

Global Instance bounded_size_Snapshot : BoundedTypeSize backend.Snapshot.
Admitted.

Global Instance into_val_Snapshot `{ffi_syntax} : IntoVal Snapshot.t.
Admitted.

Global Instance into_val_typed_Snapshot `{ffi_syntax} : IntoValTyped Snapshot.t backend.Snapshot.
Admitted.

(* type backend.txReadBufferCache *)
Module txReadBufferCache.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End txReadBufferCache.

Global Instance bounded_size_txReadBufferCache : BoundedTypeSize backend.txReadBufferCache.
Admitted.

Global Instance into_val_txReadBufferCache `{ffi_syntax} : IntoVal txReadBufferCache.t.
Admitted.

Global Instance into_val_typed_txReadBufferCache `{ffi_syntax} : IntoValTyped txReadBufferCache.t backend.txReadBufferCache.
Admitted.

(* type backend.backend *)
Module backend.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End backend.

Global Instance bounded_size_backend : BoundedTypeSize backend.backend.
Admitted.

Global Instance into_val_backend `{ffi_syntax} : IntoVal backend.t.
Admitted.

Global Instance into_val_typed_backend `{ffi_syntax} : IntoValTyped backend.t backend.backend.
Admitted.

(* type backend.BackendConfig *)
Module BackendConfig.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End BackendConfig.

Global Instance bounded_size_BackendConfig : BoundedTypeSize backend.BackendConfig.
Admitted.

Global Instance into_val_BackendConfig `{ffi_syntax} : IntoVal BackendConfig.t.
Admitted.

Global Instance into_val_typed_BackendConfig `{ffi_syntax} : IntoValTyped BackendConfig.t backend.BackendConfig.
Admitted.

(* type backend.BackendConfigOption *)
Module BackendConfigOption.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End BackendConfigOption.

Global Instance bounded_size_BackendConfigOption : BoundedTypeSize backend.BackendConfigOption.
Admitted.

Global Instance into_val_BackendConfigOption `{ffi_syntax} : IntoVal BackendConfigOption.t.
Admitted.

Global Instance into_val_typed_BackendConfigOption `{ffi_syntax} : IntoValTyped BackendConfigOption.t backend.BackendConfigOption.
Admitted.

(* type backend.snapshot *)
Module snapshot.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End snapshot.

Global Instance bounded_size_snapshot : BoundedTypeSize backend.snapshot.
Admitted.

Global Instance into_val_snapshot `{ffi_syntax} : IntoVal snapshot.t.
Admitted.

Global Instance into_val_typed_snapshot `{ffi_syntax} : IntoValTyped snapshot.t backend.snapshot.
Admitted.

(* type backend.zapBoltLogger *)
Module zapBoltLogger.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End zapBoltLogger.

Global Instance bounded_size_zapBoltLogger : BoundedTypeSize backend.zapBoltLogger.
Admitted.

Global Instance into_val_zapBoltLogger `{ffi_syntax} : IntoVal zapBoltLogger.t.
Admitted.

Global Instance into_val_typed_zapBoltLogger `{ffi_syntax} : IntoValTyped zapBoltLogger.t backend.zapBoltLogger.
Admitted.

(* type backend.BucketID *)
Module BucketID.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End BucketID.

Global Instance bounded_size_BucketID : BoundedTypeSize backend.BucketID.
Admitted.

Global Instance into_val_BucketID `{ffi_syntax} : IntoVal BucketID.t.
Admitted.

Global Instance into_val_typed_BucketID `{ffi_syntax} : IntoValTyped BucketID.t backend.BucketID.
Admitted.

(* type backend.Bucket *)
Module Bucket.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Bucket.

Global Instance bounded_size_Bucket : BoundedTypeSize backend.Bucket.
Admitted.

Global Instance into_val_Bucket `{ffi_syntax} : IntoVal Bucket.t.
Admitted.

Global Instance into_val_typed_Bucket `{ffi_syntax} : IntoValTyped Bucket.t backend.Bucket.
Admitted.

(* type backend.BatchTx *)
Module BatchTx.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End BatchTx.

Global Instance bounded_size_BatchTx : BoundedTypeSize backend.BatchTx.
Admitted.

Global Instance into_val_BatchTx `{ffi_syntax} : IntoVal BatchTx.t.
Admitted.

Global Instance into_val_typed_BatchTx `{ffi_syntax} : IntoValTyped BatchTx.t backend.BatchTx.
Admitted.

(* type backend.UnsafeReadWriter *)
Module UnsafeReadWriter.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End UnsafeReadWriter.

Global Instance bounded_size_UnsafeReadWriter : BoundedTypeSize backend.UnsafeReadWriter.
Admitted.

Global Instance into_val_UnsafeReadWriter `{ffi_syntax} : IntoVal UnsafeReadWriter.t.
Admitted.

Global Instance into_val_typed_UnsafeReadWriter `{ffi_syntax} : IntoValTyped UnsafeReadWriter.t backend.UnsafeReadWriter.
Admitted.

(* type backend.UnsafeWriter *)
Module UnsafeWriter.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End UnsafeWriter.

Global Instance bounded_size_UnsafeWriter : BoundedTypeSize backend.UnsafeWriter.
Admitted.

Global Instance into_val_UnsafeWriter `{ffi_syntax} : IntoVal UnsafeWriter.t.
Admitted.

Global Instance into_val_typed_UnsafeWriter `{ffi_syntax} : IntoValTyped UnsafeWriter.t backend.UnsafeWriter.
Admitted.

(* type backend.batchTx *)
Module batchTx.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End batchTx.

Global Instance bounded_size_batchTx : BoundedTypeSize backend.batchTx.
Admitted.

Global Instance into_val_batchTx `{ffi_syntax} : IntoVal batchTx.t.
Admitted.

Global Instance into_val_typed_batchTx `{ffi_syntax} : IntoValTyped batchTx.t backend.batchTx.
Admitted.

(* type backend.batchTxBuffered *)
Module batchTxBuffered.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End batchTxBuffered.

Global Instance bounded_size_batchTxBuffered : BoundedTypeSize backend.batchTxBuffered.
Admitted.

Global Instance into_val_batchTxBuffered `{ffi_syntax} : IntoVal batchTxBuffered.t.
Admitted.

Global Instance into_val_typed_batchTxBuffered `{ffi_syntax} : IntoValTyped batchTxBuffered.t backend.batchTxBuffered.
Admitted.

(* type backend.HookFunc *)
Module HookFunc.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End HookFunc.

Global Instance bounded_size_HookFunc : BoundedTypeSize backend.HookFunc.
Admitted.

Global Instance into_val_HookFunc `{ffi_syntax} : IntoVal HookFunc.t.
Admitted.

Global Instance into_val_typed_HookFunc `{ffi_syntax} : IntoValTyped HookFunc.t backend.HookFunc.
Admitted.

(* type backend.Hooks *)
Module Hooks.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Hooks.

Global Instance bounded_size_Hooks : BoundedTypeSize backend.Hooks.
Admitted.

Global Instance into_val_Hooks `{ffi_syntax} : IntoVal Hooks.t.
Admitted.

Global Instance into_val_typed_Hooks `{ffi_syntax} : IntoValTyped Hooks.t backend.Hooks.
Admitted.

(* type backend.hooks *)
Module hooks.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End hooks.

Global Instance bounded_size_hooks : BoundedTypeSize backend.hooks.
Admitted.

Global Instance into_val_hooks `{ffi_syntax} : IntoVal hooks.t.
Admitted.

Global Instance into_val_typed_hooks `{ffi_syntax} : IntoValTyped hooks.t backend.hooks.
Admitted.

(* type backend.ReadTx *)
Module ReadTx.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End ReadTx.

Global Instance bounded_size_ReadTx : BoundedTypeSize backend.ReadTx.
Admitted.

Global Instance into_val_ReadTx `{ffi_syntax} : IntoVal ReadTx.t.
Admitted.

Global Instance into_val_typed_ReadTx `{ffi_syntax} : IntoValTyped ReadTx.t backend.ReadTx.
Admitted.

(* type backend.UnsafeReader *)
Module UnsafeReader.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End UnsafeReader.

Global Instance bounded_size_UnsafeReader : BoundedTypeSize backend.UnsafeReader.
Admitted.

Global Instance into_val_UnsafeReader `{ffi_syntax} : IntoVal UnsafeReader.t.
Admitted.

Global Instance into_val_typed_UnsafeReader `{ffi_syntax} : IntoValTyped UnsafeReader.t backend.UnsafeReader.
Admitted.

(* type backend.baseReadTx *)
Module baseReadTx.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End baseReadTx.

Global Instance bounded_size_baseReadTx : BoundedTypeSize backend.baseReadTx.
Admitted.

Global Instance into_val_baseReadTx `{ffi_syntax} : IntoVal baseReadTx.t.
Admitted.

Global Instance into_val_typed_baseReadTx `{ffi_syntax} : IntoValTyped baseReadTx.t backend.baseReadTx.
Admitted.

(* type backend.readTx *)
Module readTx.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End readTx.

Global Instance bounded_size_readTx : BoundedTypeSize backend.readTx.
Admitted.

Global Instance into_val_readTx `{ffi_syntax} : IntoVal readTx.t.
Admitted.

Global Instance into_val_typed_readTx `{ffi_syntax} : IntoValTyped readTx.t backend.readTx.
Admitted.

(* type backend.concurrentReadTx *)
Module concurrentReadTx.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End concurrentReadTx.

Global Instance bounded_size_concurrentReadTx : BoundedTypeSize backend.concurrentReadTx.
Admitted.

Global Instance into_val_concurrentReadTx `{ffi_syntax} : IntoVal concurrentReadTx.t.
Admitted.

Global Instance into_val_typed_concurrentReadTx `{ffi_syntax} : IntoValTyped concurrentReadTx.t backend.concurrentReadTx.
Admitted.

(* type backend.txBuffer *)
Module txBuffer.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End txBuffer.

Global Instance bounded_size_txBuffer : BoundedTypeSize backend.txBuffer.
Admitted.

Global Instance into_val_txBuffer `{ffi_syntax} : IntoVal txBuffer.t.
Admitted.

Global Instance into_val_typed_txBuffer `{ffi_syntax} : IntoValTyped txBuffer.t backend.txBuffer.
Admitted.

(* type backend.txWriteBuffer *)
Module txWriteBuffer.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End txWriteBuffer.

Global Instance bounded_size_txWriteBuffer : BoundedTypeSize backend.txWriteBuffer.
Admitted.

Global Instance into_val_txWriteBuffer `{ffi_syntax} : IntoVal txWriteBuffer.t.
Admitted.

Global Instance into_val_typed_txWriteBuffer `{ffi_syntax} : IntoValTyped txWriteBuffer.t backend.txWriteBuffer.
Admitted.

(* type backend.txReadBuffer *)
Module txReadBuffer.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End txReadBuffer.

Global Instance bounded_size_txReadBuffer : BoundedTypeSize backend.txReadBuffer.
Admitted.

Global Instance into_val_txReadBuffer `{ffi_syntax} : IntoVal txReadBuffer.t.
Admitted.

Global Instance into_val_typed_txReadBuffer `{ffi_syntax} : IntoValTyped txReadBuffer.t backend.txReadBuffer.
Admitted.

(* type backend.kv *)
Module kv.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End kv.

Global Instance bounded_size_kv : BoundedTypeSize backend.kv.
Admitted.

Global Instance into_val_kv `{ffi_syntax} : IntoVal kv.t.
Admitted.

Global Instance into_val_typed_kv `{ffi_syntax} : IntoValTyped kv.t backend.kv.
Admitted.

(* type backend.bucketBuffer *)
Module bucketBuffer.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End bucketBuffer.

Global Instance bounded_size_bucketBuffer : BoundedTypeSize backend.bucketBuffer.
Admitted.

Global Instance into_val_bucketBuffer `{ffi_syntax} : IntoVal bucketBuffer.t.
Admitted.

Global Instance into_val_typed_bucketBuffer `{ffi_syntax} : IntoValTyped bucketBuffer.t backend.bucketBuffer.
Admitted.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_backend : IsPkgDefinedPure backend :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single backend;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_backend : IsPkgDefined backend :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single backend)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

End names.
End backend.
