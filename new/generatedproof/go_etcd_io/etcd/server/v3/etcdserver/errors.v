(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.errors.
Require Export New.generatedproof.fmt.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.etcd.server.v3.etcdserver.errors.

Set Default Proof Using "Type".

Module errors.

(* type errors.DiscoveryError *)
Module DiscoveryError.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Op' : go_string;
  Err' : error.t;
}.
End def.
End DiscoveryError.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_DiscoveryError : Settable DiscoveryError.t :=
  settable! DiscoveryError.mk < DiscoveryError.Op'; DiscoveryError.Err' >.
Global Instance into_val_DiscoveryError : IntoVal DiscoveryError.t :=
  {| to_val_def v :=
    struct.val_aux errors.DiscoveryError [
    "Op" ::= #(DiscoveryError.Op' v);
    "Err" ::= #(DiscoveryError.Err' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_DiscoveryError : IntoValTyped DiscoveryError.t errors.DiscoveryError :=
{|
  default_val := DiscoveryError.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_DiscoveryError_Op : IntoValStructField "Op" errors.DiscoveryError DiscoveryError.Op'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_DiscoveryError_Err : IntoValStructField "Err" errors.DiscoveryError DiscoveryError.Err'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_DiscoveryError Op' Err':
  PureWp True
    (struct.make #errors.DiscoveryError (alist_val [
      "Op" ::= #Op';
      "Err" ::= #Err'
    ]))%struct
    #(DiscoveryError.mk Op' Err').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance DiscoveryError_struct_fields_split dq l (v : DiscoveryError.t) :
  StructFieldsSplit dq l v (
    "HOp" ∷ l ↦s[errors.DiscoveryError :: "Op"]{dq} v.(DiscoveryError.Op') ∗
    "HErr" ∷ l ↦s[errors.DiscoveryError :: "Err"]{dq} v.(DiscoveryError.Err')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (DiscoveryError.Op' v)) (errors.DiscoveryError) "Op"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_errors : IsPkgDefinedPure errors :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single errors ∧
      is_pkg_defined_pure code.errors.errors ∧
      is_pkg_defined_pure code.fmt.fmt;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_errors : IsPkgDefined errors :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single errors ∗
       is_pkg_defined code.errors.errors ∗
       is_pkg_defined code.fmt.fmt)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_method_call_DiscoveryError_Error :
  WpMethodCall errors.DiscoveryError.id "Error" _ (is_pkg_defined errors) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_DiscoveryError'ptr_Error :
  WpMethodCall (ptrT.id errors.DiscoveryError.id) "Error" _ (is_pkg_defined errors) :=
  ltac:(solve_wp_method_call).

End names.
End errors.
