(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.etcd.server.v3.etcdserver.apply.

Set Default Proof Using "Type".

Module apply.

(* type apply.RaftStatusGetter *)
Module RaftStatusGetter.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End RaftStatusGetter.

Global Instance bounded_size_RaftStatusGetter : BoundedTypeSize apply.RaftStatusGetter.
Admitted.

Global Instance into_val_RaftStatusGetter `{ffi_syntax} : IntoVal RaftStatusGetter.t.
Admitted.

Global Instance into_val_typed_RaftStatusGetter `{ffi_syntax} : IntoValTyped RaftStatusGetter.t apply.RaftStatusGetter.
Admitted.

(* type apply.Result *)
Module Result.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Result.

Global Instance bounded_size_Result : BoundedTypeSize apply.Result.
Admitted.

Global Instance into_val_Result `{ffi_syntax} : IntoVal Result.t.
Admitted.

Global Instance into_val_typed_Result `{ffi_syntax} : IntoValTyped Result.t apply.Result.
Admitted.

(* type apply.applyFunc *)
Module applyFunc.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End applyFunc.

Global Instance bounded_size_applyFunc : BoundedTypeSize apply.applyFunc.
Admitted.

Global Instance into_val_applyFunc `{ffi_syntax} : IntoVal applyFunc.t.
Admitted.

Global Instance into_val_typed_applyFunc `{ffi_syntax} : IntoValTyped applyFunc.t apply.applyFunc.
Admitted.

(* type apply.applierV3 *)
Module applierV3.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End applierV3.

Global Instance bounded_size_applierV3 : BoundedTypeSize apply.applierV3.
Admitted.

Global Instance into_val_applierV3 `{ffi_syntax} : IntoVal applierV3.t.
Admitted.

Global Instance into_val_typed_applierV3 `{ffi_syntax} : IntoValTyped applierV3.t apply.applierV3.
Admitted.

(* type apply.SnapshotServer *)
Module SnapshotServer.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End SnapshotServer.

Global Instance bounded_size_SnapshotServer : BoundedTypeSize apply.SnapshotServer.
Admitted.

Global Instance into_val_SnapshotServer `{ffi_syntax} : IntoVal SnapshotServer.t.
Admitted.

Global Instance into_val_typed_SnapshotServer `{ffi_syntax} : IntoValTyped SnapshotServer.t apply.SnapshotServer.
Admitted.

(* type apply.applierV3backend *)
Module applierV3backend.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End applierV3backend.

Global Instance bounded_size_applierV3backend : BoundedTypeSize apply.applierV3backend.
Admitted.

Global Instance into_val_applierV3backend `{ffi_syntax} : IntoVal applierV3backend.t.
Admitted.

Global Instance into_val_typed_applierV3backend `{ffi_syntax} : IntoValTyped applierV3backend.t apply.applierV3backend.
Admitted.

(* type apply.applierV3Capped *)
Module applierV3Capped.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End applierV3Capped.

Global Instance bounded_size_applierV3Capped : BoundedTypeSize apply.applierV3Capped.
Admitted.

Global Instance into_val_applierV3Capped `{ffi_syntax} : IntoVal applierV3Capped.t.
Admitted.

Global Instance into_val_typed_applierV3Capped `{ffi_syntax} : IntoValTyped applierV3Capped.t apply.applierV3Capped.
Admitted.

(* type apply.applierMembership *)
Module applierMembership.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End applierMembership.

Global Instance bounded_size_applierMembership : BoundedTypeSize apply.applierMembership.
Admitted.

Global Instance into_val_applierMembership `{ffi_syntax} : IntoVal applierMembership.t.
Admitted.

Global Instance into_val_typed_applierMembership `{ffi_syntax} : IntoValTyped applierMembership.t apply.applierMembership.
Admitted.

(* type apply.quotaApplierV3 *)
Module quotaApplierV3.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End quotaApplierV3.

Global Instance bounded_size_quotaApplierV3 : BoundedTypeSize apply.quotaApplierV3.
Admitted.

Global Instance into_val_quotaApplierV3 `{ffi_syntax} : IntoVal quotaApplierV3.t.
Admitted.

Global Instance into_val_typed_quotaApplierV3 `{ffi_syntax} : IntoValTyped quotaApplierV3.t apply.quotaApplierV3.
Admitted.

(* type apply.authApplierV3 *)
Module authApplierV3.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End authApplierV3.

Global Instance bounded_size_authApplierV3 : BoundedTypeSize apply.authApplierV3.
Admitted.

Global Instance into_val_authApplierV3 `{ffi_syntax} : IntoVal authApplierV3.t.
Admitted.

Global Instance into_val_typed_authApplierV3 `{ffi_syntax} : IntoValTyped authApplierV3.t apply.authApplierV3.
Admitted.

(* type apply.applierV3Corrupt *)
Module applierV3Corrupt.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End applierV3Corrupt.

Global Instance bounded_size_applierV3Corrupt : BoundedTypeSize apply.applierV3Corrupt.
Admitted.

Global Instance into_val_applierV3Corrupt `{ffi_syntax} : IntoVal applierV3Corrupt.t.
Admitted.

Global Instance into_val_typed_applierV3Corrupt `{ffi_syntax} : IntoValTyped applierV3Corrupt.t apply.applierV3Corrupt.
Admitted.

(* type apply.UberApplier *)
Module UberApplier.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End UberApplier.

Global Instance bounded_size_UberApplier : BoundedTypeSize apply.UberApplier.
Admitted.

Global Instance into_val_UberApplier `{ffi_syntax} : IntoVal UberApplier.t.
Admitted.

Global Instance into_val_typed_UberApplier `{ffi_syntax} : IntoValTyped UberApplier.t apply.UberApplier.
Admitted.

(* type apply.uberApplier *)
Module uberApplier.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End uberApplier.

Global Instance bounded_size_uberApplier : BoundedTypeSize apply.uberApplier.
Admitted.

Global Instance into_val_uberApplier `{ffi_syntax} : IntoVal uberApplier.t.
Admitted.

Global Instance into_val_typed_uberApplier `{ffi_syntax} : IntoValTyped uberApplier.t apply.uberApplier.
Admitted.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_apply : IsPkgDefinedPure apply :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single apply;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_apply : IsPkgDefined apply :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single apply)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

End names.
End apply.
