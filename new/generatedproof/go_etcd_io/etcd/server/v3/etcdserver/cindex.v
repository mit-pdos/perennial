(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.sync.atomic.
Require Export New.generatedproof.go_etcd_io.etcd.server.v3.storage.backend.
Require Export New.generatedproof.go_etcd_io.etcd.server.v3.storage.schema.
Require Export New.golang.theory.

Require Export New.code.go_etcd_io.etcd.server.v3.etcdserver.cindex.

Set Default Proof Using "Type".

Module cindex.

(* type cindex.Backend *)
Module Backend.

#[global] Transparent cindex.Backend.
#[global] Typeclasses Transparent cindex.Backend.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End Backend.

(* type cindex.ConsistentIndexer *)
Module ConsistentIndexer.

#[global] Transparent cindex.ConsistentIndexer.
#[global] Typeclasses Transparent cindex.ConsistentIndexer.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End ConsistentIndexer.

(* type cindex.consistentIndex *)
Module consistentIndex.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  consistentIndex' : w64;
  term' : w64;
  applyingIndex' : w64;
  applyingTerm' : w64;
  be' : Backend.t;
  mutex' : sync.Mutex.t;
}.
End def.
End consistentIndex.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent cindex.consistentIndex.
#[local] Typeclasses Transparent cindex.consistentIndex.

Global Instance consistentIndex_wf : struct.Wf cindex.consistentIndex.
Proof. apply _. Qed.

Global Instance settable_consistentIndex : Settable consistentIndex.t :=
  settable! consistentIndex.mk < consistentIndex.consistentIndex'; consistentIndex.term'; consistentIndex.applyingIndex'; consistentIndex.applyingTerm'; consistentIndex.be'; consistentIndex.mutex' >.
Global Instance into_val_consistentIndex : IntoVal consistentIndex.t :=
  {| to_val_def v :=
    struct.val_aux cindex.consistentIndex [
    "consistentIndex" ::= #(consistentIndex.consistentIndex' v);
    "term" ::= #(consistentIndex.term' v);
    "applyingIndex" ::= #(consistentIndex.applyingIndex' v);
    "applyingTerm" ::= #(consistentIndex.applyingTerm' v);
    "be" ::= #(consistentIndex.be' v);
    "mutex" ::= #(consistentIndex.mutex' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_consistentIndex : IntoValTyped consistentIndex.t cindex.consistentIndex :=
{|
  default_val := consistentIndex.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_consistentIndex_consistentIndex : IntoValStructField "consistentIndex" cindex.consistentIndex consistentIndex.consistentIndex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_consistentIndex_term : IntoValStructField "term" cindex.consistentIndex consistentIndex.term'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_consistentIndex_applyingIndex : IntoValStructField "applyingIndex" cindex.consistentIndex consistentIndex.applyingIndex'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_consistentIndex_applyingTerm : IntoValStructField "applyingTerm" cindex.consistentIndex consistentIndex.applyingTerm'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_consistentIndex_be : IntoValStructField "be" cindex.consistentIndex consistentIndex.be'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_consistentIndex_mutex : IntoValStructField "mutex" cindex.consistentIndex consistentIndex.mutex'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_consistentIndex consistentIndex' term' applyingIndex' applyingTerm' be' mutex':
  PureWp True
    (struct.make #cindex.consistentIndex (alist_val [
      "consistentIndex" ::= #consistentIndex';
      "term" ::= #term';
      "applyingIndex" ::= #applyingIndex';
      "applyingTerm" ::= #applyingTerm';
      "be" ::= #be';
      "mutex" ::= #mutex'
    ]))%struct
    #(consistentIndex.mk consistentIndex' term' applyingIndex' applyingTerm' be' mutex').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance consistentIndex_struct_fields_split dq l (v : consistentIndex.t) :
  StructFieldsSplit dq l v (
    "HconsistentIndex" ∷ l ↦s[cindex.consistentIndex :: "consistentIndex"]{dq} v.(consistentIndex.consistentIndex') ∗
    "Hterm" ∷ l ↦s[cindex.consistentIndex :: "term"]{dq} v.(consistentIndex.term') ∗
    "HapplyingIndex" ∷ l ↦s[cindex.consistentIndex :: "applyingIndex"]{dq} v.(consistentIndex.applyingIndex') ∗
    "HapplyingTerm" ∷ l ↦s[cindex.consistentIndex :: "applyingTerm"]{dq} v.(consistentIndex.applyingTerm') ∗
    "Hbe" ∷ l ↦s[cindex.consistentIndex :: "be"]{dq} v.(consistentIndex.be') ∗
    "Hmutex" ∷ l ↦s[cindex.consistentIndex :: "mutex"]{dq} v.(consistentIndex.mutex')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (consistentIndex.consistentIndex' v)) (cindex.consistentIndex) "consistentIndex"%go.
  simpl_one_flatten_struct (# (consistentIndex.term' v)) (cindex.consistentIndex) "term"%go.
  simpl_one_flatten_struct (# (consistentIndex.applyingIndex' v)) (cindex.consistentIndex) "applyingIndex"%go.
  simpl_one_flatten_struct (# (consistentIndex.applyingTerm' v)) (cindex.consistentIndex) "applyingTerm"%go.
  simpl_one_flatten_struct (# (consistentIndex.be' v)) (cindex.consistentIndex) "be"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type cindex.fakeConsistentIndex *)
Module fakeConsistentIndex.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  index' : w64;
  term' : w64;
}.
End def.
End fakeConsistentIndex.

Section instances.
Context `{ffi_syntax}.
#[local] Transparent cindex.fakeConsistentIndex.
#[local] Typeclasses Transparent cindex.fakeConsistentIndex.

Global Instance fakeConsistentIndex_wf : struct.Wf cindex.fakeConsistentIndex.
Proof. apply _. Qed.

Global Instance settable_fakeConsistentIndex : Settable fakeConsistentIndex.t :=
  settable! fakeConsistentIndex.mk < fakeConsistentIndex.index'; fakeConsistentIndex.term' >.
Global Instance into_val_fakeConsistentIndex : IntoVal fakeConsistentIndex.t :=
  {| to_val_def v :=
    struct.val_aux cindex.fakeConsistentIndex [
    "index" ::= #(fakeConsistentIndex.index' v);
    "term" ::= #(fakeConsistentIndex.term' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_fakeConsistentIndex : IntoValTyped fakeConsistentIndex.t cindex.fakeConsistentIndex :=
{|
  default_val := fakeConsistentIndex.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_fakeConsistentIndex_index : IntoValStructField "index" cindex.fakeConsistentIndex fakeConsistentIndex.index'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_fakeConsistentIndex_term : IntoValStructField "term" cindex.fakeConsistentIndex fakeConsistentIndex.term'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_fakeConsistentIndex index' term':
  PureWp True
    (struct.make #cindex.fakeConsistentIndex (alist_val [
      "index" ::= #index';
      "term" ::= #term'
    ]))%struct
    #(fakeConsistentIndex.mk index' term').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance fakeConsistentIndex_struct_fields_split dq l (v : fakeConsistentIndex.t) :
  StructFieldsSplit dq l v (
    "Hindex" ∷ l ↦s[cindex.fakeConsistentIndex :: "index"]{dq} v.(fakeConsistentIndex.index') ∗
    "Hterm" ∷ l ↦s[cindex.fakeConsistentIndex :: "term"]{dq} v.(fakeConsistentIndex.term')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (fakeConsistentIndex.index' v)) (cindex.fakeConsistentIndex) "index"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_cindex : IsPkgDefinedPure cindex :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single cindex ∧
      is_pkg_defined_pure code.sync.sync ∧
      is_pkg_defined_pure code.sync.atomic.atomic ∧
      is_pkg_defined_pure code.go_etcd_io.etcd.server.v3.storage.backend.backend ∧
      is_pkg_defined_pure code.go_etcd_io.etcd.server.v3.storage.schema.schema;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_cindex : IsPkgDefined cindex :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single cindex ∗
       is_pkg_defined code.sync.sync ∗
       is_pkg_defined code.sync.atomic.atomic ∗
       is_pkg_defined code.go_etcd_io.etcd.server.v3.storage.backend.backend ∗
       is_pkg_defined code.go_etcd_io.etcd.server.v3.storage.schema.schema)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_NewConsistentIndex :
  WpFuncCall cindex.NewConsistentIndex _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_NewFakeConsistentIndex :
  WpFuncCall cindex.NewFakeConsistentIndex _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_UpdateConsistentIndexForce :
  WpFuncCall cindex.UpdateConsistentIndexForce _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_consistentIndex'ptr_ConsistentApplyingIndex :
  WpMethodCall (ptrT.id cindex.consistentIndex.id) "ConsistentApplyingIndex" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_consistentIndex'ptr_ConsistentIndex :
  WpMethodCall (ptrT.id cindex.consistentIndex.id) "ConsistentIndex" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_consistentIndex'ptr_SetBackend :
  WpMethodCall (ptrT.id cindex.consistentIndex.id) "SetBackend" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_consistentIndex'ptr_SetConsistentApplyingIndex :
  WpMethodCall (ptrT.id cindex.consistentIndex.id) "SetConsistentApplyingIndex" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_consistentIndex'ptr_SetConsistentIndex :
  WpMethodCall (ptrT.id cindex.consistentIndex.id) "SetConsistentIndex" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_consistentIndex'ptr_UnsafeConsistentIndex :
  WpMethodCall (ptrT.id cindex.consistentIndex.id) "UnsafeConsistentIndex" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_consistentIndex'ptr_UnsafeSave :
  WpMethodCall (ptrT.id cindex.consistentIndex.id) "UnsafeSave" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_fakeConsistentIndex'ptr_ConsistentApplyingIndex :
  WpMethodCall (ptrT.id cindex.fakeConsistentIndex.id) "ConsistentApplyingIndex" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_fakeConsistentIndex'ptr_ConsistentIndex :
  WpMethodCall (ptrT.id cindex.fakeConsistentIndex.id) "ConsistentIndex" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_fakeConsistentIndex'ptr_SetBackend :
  WpMethodCall (ptrT.id cindex.fakeConsistentIndex.id) "SetBackend" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_fakeConsistentIndex'ptr_SetConsistentApplyingIndex :
  WpMethodCall (ptrT.id cindex.fakeConsistentIndex.id) "SetConsistentApplyingIndex" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_fakeConsistentIndex'ptr_SetConsistentIndex :
  WpMethodCall (ptrT.id cindex.fakeConsistentIndex.id) "SetConsistentIndex" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_fakeConsistentIndex'ptr_UnsafeConsistentIndex :
  WpMethodCall (ptrT.id cindex.fakeConsistentIndex.id) "UnsafeConsistentIndex" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_fakeConsistentIndex'ptr_UnsafeSave :
  WpMethodCall (ptrT.id cindex.fakeConsistentIndex.id) "UnsafeSave" _ (is_pkg_defined cindex) :=
  ltac:(solve_wp_method_call).

End names.
End cindex.
