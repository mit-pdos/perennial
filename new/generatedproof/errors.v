(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.errors.

Set Default Proof Using "Type".

Module errors.

(* type errors.errorString *)
Module errorString.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End errorString.

Global Instance bounded_size_errorString : BoundedTypeSize errors.errorString.
Admitted.

Global Instance into_val_errorString `{ffi_syntax} : IntoVal errorString.t.
Admitted.

Global Instance into_val_typed_errorString `{ffi_syntax} : IntoValTyped errorString.t errors.errorString.
Admitted.

(* type errors.joinError *)
Module joinError.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End joinError.

Global Instance bounded_size_joinError : BoundedTypeSize errors.joinError.
Admitted.

Global Instance into_val_joinError `{ffi_syntax} : IntoVal joinError.t.
Admitted.

Global Instance into_val_typed_joinError `{ffi_syntax} : IntoValTyped joinError.t errors.joinError.
Admitted.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_errors : IsPkgDefinedPure errors :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single errors;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_errors : IsPkgDefined errors :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single errors)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

End names.
End errors.
