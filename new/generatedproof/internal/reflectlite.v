(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.internal.reflectlite.

Set Default Proof Using "Type".

Module reflectlite.

(* type reflectlite.Type' *)
Module Type'.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Type'.

Global Instance bounded_size_Type' : BoundedTypeSize reflectlite.Type'.
Admitted.

Global Instance into_val_Type' `{ffi_syntax} : IntoVal Type'.t.
Admitted.

Global Instance into_val_typed_Type' `{ffi_syntax} : IntoValTyped Type'.t reflectlite.Type'.
Admitted.

(* type reflectlite.Kind *)
Module Kind.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Kind.

Global Instance bounded_size_Kind : BoundedTypeSize reflectlite.Kind.
Admitted.

Global Instance into_val_Kind `{ffi_syntax} : IntoVal Kind.t.
Admitted.

Global Instance into_val_typed_Kind `{ffi_syntax} : IntoValTyped Kind.t reflectlite.Kind.
Admitted.

(* type reflectlite.nameOff *)
Module nameOff.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End nameOff.

Global Instance bounded_size_nameOff : BoundedTypeSize reflectlite.nameOff.
Admitted.

Global Instance into_val_nameOff `{ffi_syntax} : IntoVal nameOff.t.
Admitted.

Global Instance into_val_typed_nameOff `{ffi_syntax} : IntoValTyped nameOff.t reflectlite.nameOff.
Admitted.

(* type reflectlite.typeOff *)
Module typeOff.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End typeOff.

Global Instance bounded_size_typeOff : BoundedTypeSize reflectlite.typeOff.
Admitted.

Global Instance into_val_typeOff `{ffi_syntax} : IntoVal typeOff.t.
Admitted.

Global Instance into_val_typed_typeOff `{ffi_syntax} : IntoValTyped typeOff.t reflectlite.typeOff.
Admitted.

(* type reflectlite.textOff *)
Module textOff.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End textOff.

Global Instance bounded_size_textOff : BoundedTypeSize reflectlite.textOff.
Admitted.

Global Instance into_val_textOff `{ffi_syntax} : IntoVal textOff.t.
Admitted.

Global Instance into_val_typed_textOff `{ffi_syntax} : IntoValTyped textOff.t reflectlite.textOff.
Admitted.

(* type reflectlite.rtype *)
Module rtype.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End rtype.

Global Instance bounded_size_rtype : BoundedTypeSize reflectlite.rtype.
Admitted.

Global Instance into_val_rtype `{ffi_syntax} : IntoVal rtype.t.
Admitted.

Global Instance into_val_typed_rtype `{ffi_syntax} : IntoValTyped rtype.t reflectlite.rtype.
Admitted.

(* type reflectlite.uncommonType *)
Module uncommonType.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End uncommonType.

Global Instance bounded_size_uncommonType : BoundedTypeSize reflectlite.uncommonType.
Admitted.

Global Instance into_val_uncommonType `{ffi_syntax} : IntoVal uncommonType.t.
Admitted.

Global Instance into_val_typed_uncommonType `{ffi_syntax} : IntoValTyped uncommonType.t reflectlite.uncommonType.
Admitted.

(* type reflectlite.arrayType *)
Module arrayType.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End arrayType.

Global Instance bounded_size_arrayType : BoundedTypeSize reflectlite.arrayType.
Admitted.

Global Instance into_val_arrayType `{ffi_syntax} : IntoVal arrayType.t.
Admitted.

Global Instance into_val_typed_arrayType `{ffi_syntax} : IntoValTyped arrayType.t reflectlite.arrayType.
Admitted.

(* type reflectlite.chanType *)
Module chanType.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End chanType.

Global Instance bounded_size_chanType : BoundedTypeSize reflectlite.chanType.
Admitted.

Global Instance into_val_chanType `{ffi_syntax} : IntoVal chanType.t.
Admitted.

Global Instance into_val_typed_chanType `{ffi_syntax} : IntoValTyped chanType.t reflectlite.chanType.
Admitted.

(* type reflectlite.funcType *)
Module funcType.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End funcType.

Global Instance bounded_size_funcType : BoundedTypeSize reflectlite.funcType.
Admitted.

Global Instance into_val_funcType `{ffi_syntax} : IntoVal funcType.t.
Admitted.

Global Instance into_val_typed_funcType `{ffi_syntax} : IntoValTyped funcType.t reflectlite.funcType.
Admitted.

(* type reflectlite.interfaceType *)
Module interfaceType.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End interfaceType.

Global Instance bounded_size_interfaceType : BoundedTypeSize reflectlite.interfaceType.
Admitted.

Global Instance into_val_interfaceType `{ffi_syntax} : IntoVal interfaceType.t.
Admitted.

Global Instance into_val_typed_interfaceType `{ffi_syntax} : IntoValTyped interfaceType.t reflectlite.interfaceType.
Admitted.

(* type reflectlite.ptrType *)
Module ptrType.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End ptrType.

Global Instance bounded_size_ptrType : BoundedTypeSize reflectlite.ptrType.
Admitted.

Global Instance into_val_ptrType `{ffi_syntax} : IntoVal ptrType.t.
Admitted.

Global Instance into_val_typed_ptrType `{ffi_syntax} : IntoValTyped ptrType.t reflectlite.ptrType.
Admitted.

(* type reflectlite.sliceType *)
Module sliceType.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End sliceType.

Global Instance bounded_size_sliceType : BoundedTypeSize reflectlite.sliceType.
Admitted.

Global Instance into_val_sliceType `{ffi_syntax} : IntoVal sliceType.t.
Admitted.

Global Instance into_val_typed_sliceType `{ffi_syntax} : IntoValTyped sliceType.t reflectlite.sliceType.
Admitted.

(* type reflectlite.structType *)
Module structType.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End structType.

Global Instance bounded_size_structType : BoundedTypeSize reflectlite.structType.
Admitted.

Global Instance into_val_structType `{ffi_syntax} : IntoVal structType.t.
Admitted.

Global Instance into_val_typed_structType `{ffi_syntax} : IntoValTyped structType.t reflectlite.structType.
Admitted.

(* type reflectlite.name *)
Module name.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End name.

Global Instance bounded_size_name : BoundedTypeSize reflectlite.name.
Admitted.

Global Instance into_val_name `{ffi_syntax} : IntoVal name.t.
Admitted.

Global Instance into_val_typed_name `{ffi_syntax} : IntoValTyped name.t reflectlite.name.
Admitted.

(* type reflectlite.Value *)
Module Value.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Value.

Global Instance bounded_size_Value : BoundedTypeSize reflectlite.Value.
Admitted.

Global Instance into_val_Value `{ffi_syntax} : IntoVal Value.t.
Admitted.

Global Instance into_val_typed_Value `{ffi_syntax} : IntoValTyped Value.t reflectlite.Value.
Admitted.

(* type reflectlite.flag *)
Module flag.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End flag.

Global Instance bounded_size_flag : BoundedTypeSize reflectlite.flag.
Admitted.

Global Instance into_val_flag `{ffi_syntax} : IntoVal flag.t.
Admitted.

Global Instance into_val_typed_flag `{ffi_syntax} : IntoValTyped flag.t reflectlite.flag.
Admitted.

(* type reflectlite.ValueError *)
Module ValueError.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End ValueError.

Global Instance bounded_size_ValueError : BoundedTypeSize reflectlite.ValueError.
Admitted.

Global Instance into_val_ValueError `{ffi_syntax} : IntoVal ValueError.t.
Admitted.

Global Instance into_val_typed_ValueError `{ffi_syntax} : IntoValTyped ValueError.t reflectlite.ValueError.
Admitted.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_reflectlite : IsPkgDefinedPure reflectlite :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single reflectlite;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_reflectlite : IsPkgDefined reflectlite :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single reflectlite)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

End names.
End reflectlite.
