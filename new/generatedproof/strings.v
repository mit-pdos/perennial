(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.strings.

Set Default Proof Using "Type".

Module strings.

Module Builder.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  addr' : loc;
  buf' : slice.t;
}.
End def.
End Builder.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Builder : Settable _ :=
  settable! Builder.mk < Builder.addr'; Builder.buf' >.
Global Instance into_val_Builder : IntoVal Builder.t :=
  {| to_val_def v :=
    struct.val_aux strings.Builder [
    "addr" ::= #(Builder.addr' v);
    "buf" ::= #(Builder.buf' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Builder : IntoValTyped Builder.t strings.Builder :=
{|
  default_val := Builder.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Builder_addr : IntoValStructField "addr" strings.Builder Builder.addr'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Builder_buf : IntoValStructField "buf" strings.Builder Builder.buf'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Builder addr' buf':
  PureWp True
    (struct.make #strings.Builder (alist_val [
      "addr" ::= #addr';
      "buf" ::= #buf'
    ]))%struct
    #(Builder.mk addr' buf').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Builder_struct_fields_split dq l (v : Builder.t) :
  StructFieldsSplit dq l v (
    "Haddr" ∷ l ↦s[strings.Builder :: "addr"]{dq} v.(Builder.addr') ∗
    "Hbuf" ∷ l ↦s[strings.Builder :: "buf"]{dq} v.(Builder.buf')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Builder.addr' v)) strings.Builder "addr"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined strings :=
{|
  is_pkg_defined := is_global_definitions strings var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

End names.
End strings.
