(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.strconv.

Set Default Proof Using "Type".

Module strconv.

(* type strconv.NumError *)
Module NumError.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End NumError.

Global Instance bounded_size_NumError : BoundedTypeSize strconv.NumError.
Admitted.

Global Instance into_val_NumError `{ffi_syntax} : IntoVal NumError.t.
Admitted.

Global Instance into_val_typed_NumError `{ffi_syntax} : IntoValTyped NumError.t strconv.NumError.
Admitted.

(* type strconv.decimal *)
Module decimal.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End decimal.

Global Instance bounded_size_decimal : BoundedTypeSize strconv.decimal.
Admitted.

Global Instance into_val_decimal `{ffi_syntax} : IntoVal decimal.t.
Admitted.

Global Instance into_val_typed_decimal `{ffi_syntax} : IntoValTyped decimal.t strconv.decimal.
Admitted.

(* type strconv.leftCheat *)
Module leftCheat.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End leftCheat.

Global Instance bounded_size_leftCheat : BoundedTypeSize strconv.leftCheat.
Admitted.

Global Instance into_val_leftCheat `{ffi_syntax} : IntoVal leftCheat.t.
Admitted.

Global Instance into_val_typed_leftCheat `{ffi_syntax} : IntoValTyped leftCheat.t strconv.leftCheat.
Admitted.

(* type strconv.floatInfo *)
Module floatInfo.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End floatInfo.

Global Instance bounded_size_floatInfo : BoundedTypeSize strconv.floatInfo.
Admitted.

Global Instance into_val_floatInfo `{ffi_syntax} : IntoVal floatInfo.t.
Admitted.

Global Instance into_val_typed_floatInfo `{ffi_syntax} : IntoValTyped floatInfo.t strconv.floatInfo.
Admitted.

(* type strconv.decimalSlice *)
Module decimalSlice.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End decimalSlice.

Global Instance bounded_size_decimalSlice : BoundedTypeSize strconv.decimalSlice.
Admitted.

Global Instance into_val_decimalSlice `{ffi_syntax} : IntoVal decimalSlice.t.
Admitted.

Global Instance into_val_typed_decimalSlice `{ffi_syntax} : IntoValTyped decimalSlice.t strconv.decimalSlice.
Admitted.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_strconv : IsPkgDefinedPure strconv :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single strconv;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_strconv : IsPkgDefined strconv :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single strconv)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

End names.
End strconv.
