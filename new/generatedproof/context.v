(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.errors.
Require Export New.generatedproof.internal.reflectlite.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.sync.atomic.
Require Export New.generatedproof.time.
Require Export New.golang.theory.

Require Export New.code.context.

Set Default Proof Using "Type".

Module context.

(* type context.Context *)
Module Context.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End Context.

(* type context.deadlineExceededError *)
Module deadlineExceededError.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End deadlineExceededError.

Section instances.
Context `{ffi_syntax}.
Global Instance into_val_deadlineExceededError : IntoVal deadlineExceededError.t :=
  {| to_val_def v :=
    struct.val_aux context.deadlineExceededError [
    ]%struct
  |}.

Global Program Instance into_val_typed_deadlineExceededError : IntoValTyped deadlineExceededError.t context.deadlineExceededError :=
{|
  default_val := deadlineExceededError.mk;
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_deadlineExceededError:
  PureWp True
    (struct.make #context.deadlineExceededError (alist_val [
    ]))%struct
    #(deadlineExceededError.mk).
Proof. solve_struct_make_pure_wp. Qed.

End instances.

(* type context.emptyCtx *)
Module emptyCtx.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End emptyCtx.

Section instances.
Context `{ffi_syntax}.
Global Instance into_val_emptyCtx : IntoVal emptyCtx.t :=
  {| to_val_def v :=
    struct.val_aux context.emptyCtx [
    ]%struct
  |}.

Global Program Instance into_val_typed_emptyCtx : IntoValTyped emptyCtx.t context.emptyCtx :=
{|
  default_val := emptyCtx.mk;
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_emptyCtx:
  PureWp True
    (struct.make #context.emptyCtx (alist_val [
    ]))%struct
    #(emptyCtx.mk).
Proof. solve_struct_make_pure_wp. Qed.

End instances.

(* type context.backgroundCtx *)
Module backgroundCtx.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  emptyCtx' : emptyCtx.t;
}.
End def.
End backgroundCtx.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_backgroundCtx : Settable backgroundCtx.t :=
  settable! backgroundCtx.mk < backgroundCtx.emptyCtx' >.
Global Instance into_val_backgroundCtx : IntoVal backgroundCtx.t :=
  {| to_val_def v :=
    struct.val_aux context.backgroundCtx [
    "emptyCtx" ::= #(backgroundCtx.emptyCtx' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_backgroundCtx : IntoValTyped backgroundCtx.t context.backgroundCtx :=
{|
  default_val := backgroundCtx.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_backgroundCtx_emptyCtx : IntoValStructField "emptyCtx" context.backgroundCtx backgroundCtx.emptyCtx'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_backgroundCtx emptyCtx':
  PureWp True
    (struct.make #context.backgroundCtx (alist_val [
      "emptyCtx" ::= #emptyCtx'
    ]))%struct
    #(backgroundCtx.mk emptyCtx').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance backgroundCtx_struct_fields_split dq l (v : backgroundCtx.t) :
  StructFieldsSplit dq l v (
    "HemptyCtx" ∷ l ↦s[context.backgroundCtx :: "emptyCtx"]{dq} v.(backgroundCtx.emptyCtx')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

(* type context.todoCtx *)
Module todoCtx.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  emptyCtx' : emptyCtx.t;
}.
End def.
End todoCtx.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_todoCtx : Settable todoCtx.t :=
  settable! todoCtx.mk < todoCtx.emptyCtx' >.
Global Instance into_val_todoCtx : IntoVal todoCtx.t :=
  {| to_val_def v :=
    struct.val_aux context.todoCtx [
    "emptyCtx" ::= #(todoCtx.emptyCtx' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_todoCtx : IntoValTyped todoCtx.t context.todoCtx :=
{|
  default_val := todoCtx.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_todoCtx_emptyCtx : IntoValStructField "emptyCtx" context.todoCtx todoCtx.emptyCtx'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_todoCtx emptyCtx':
  PureWp True
    (struct.make #context.todoCtx (alist_val [
      "emptyCtx" ::= #emptyCtx'
    ]))%struct
    #(todoCtx.mk emptyCtx').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance todoCtx_struct_fields_split dq l (v : todoCtx.t) :
  StructFieldsSplit dq l v (
    "HemptyCtx" ∷ l ↦s[context.todoCtx :: "emptyCtx"]{dq} v.(todoCtx.emptyCtx')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

(* type context.CancelFunc *)
Module CancelFunc.
Section def.
Context `{ffi_syntax}.
Definition t := func.t.
End def.
End CancelFunc.

(* type context.CancelCauseFunc *)
Module CancelCauseFunc.
Section def.
Context `{ffi_syntax}.
Definition t := func.t.
End def.
End CancelCauseFunc.

(* type context.afterFuncer *)
Module afterFuncer.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End afterFuncer.

(* type context.cancelCtx *)
Module cancelCtx.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Context' : Context.t;
  mu' : sync.Mutex.t;
  done' : atomic.Value.t;
  children' : loc;
  err' : error.t;
  cause' : error.t;
}.
End def.
End cancelCtx.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_cancelCtx : Settable cancelCtx.t :=
  settable! cancelCtx.mk < cancelCtx.Context'; cancelCtx.mu'; cancelCtx.done'; cancelCtx.children'; cancelCtx.err'; cancelCtx.cause' >.
Global Instance into_val_cancelCtx : IntoVal cancelCtx.t :=
  {| to_val_def v :=
    struct.val_aux context.cancelCtx [
    "Context" ::= #(cancelCtx.Context' v);
    "mu" ::= #(cancelCtx.mu' v);
    "done" ::= #(cancelCtx.done' v);
    "children" ::= #(cancelCtx.children' v);
    "err" ::= #(cancelCtx.err' v);
    "cause" ::= #(cancelCtx.cause' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_cancelCtx : IntoValTyped cancelCtx.t context.cancelCtx :=
{|
  default_val := cancelCtx.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_cancelCtx_Context : IntoValStructField "Context" context.cancelCtx cancelCtx.Context'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_cancelCtx_mu : IntoValStructField "mu" context.cancelCtx cancelCtx.mu'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_cancelCtx_done : IntoValStructField "done" context.cancelCtx cancelCtx.done'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_cancelCtx_children : IntoValStructField "children" context.cancelCtx cancelCtx.children'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_cancelCtx_err : IntoValStructField "err" context.cancelCtx cancelCtx.err'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_cancelCtx_cause : IntoValStructField "cause" context.cancelCtx cancelCtx.cause'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_cancelCtx Context' mu' done' children' err' cause':
  PureWp True
    (struct.make #context.cancelCtx (alist_val [
      "Context" ::= #Context';
      "mu" ::= #mu';
      "done" ::= #done';
      "children" ::= #children';
      "err" ::= #err';
      "cause" ::= #cause'
    ]))%struct
    #(cancelCtx.mk Context' mu' done' children' err' cause').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance cancelCtx_struct_fields_split dq l (v : cancelCtx.t) :
  StructFieldsSplit dq l v (
    "HContext" ∷ l ↦s[context.cancelCtx :: "Context"]{dq} v.(cancelCtx.Context') ∗
    "Hmu" ∷ l ↦s[context.cancelCtx :: "mu"]{dq} v.(cancelCtx.mu') ∗
    "Hdone" ∷ l ↦s[context.cancelCtx :: "done"]{dq} v.(cancelCtx.done') ∗
    "Hchildren" ∷ l ↦s[context.cancelCtx :: "children"]{dq} v.(cancelCtx.children') ∗
    "Herr" ∷ l ↦s[context.cancelCtx :: "err"]{dq} v.(cancelCtx.err') ∗
    "Hcause" ∷ l ↦s[context.cancelCtx :: "cause"]{dq} v.(cancelCtx.cause')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (cancelCtx.Context' v)) (context.cancelCtx) "Context"%go.
  simpl_one_flatten_struct (# (cancelCtx.mu' v)) (context.cancelCtx) "mu"%go.
  simpl_one_flatten_struct (# (cancelCtx.done' v)) (context.cancelCtx) "done"%go.
  simpl_one_flatten_struct (# (cancelCtx.children' v)) (context.cancelCtx) "children"%go.
  simpl_one_flatten_struct (# (cancelCtx.err' v)) (context.cancelCtx) "err"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type context.afterFuncCtx *)
Module afterFuncCtx.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  cancelCtx' : cancelCtx.t;
  once' : sync.Once.t;
  f' : func.t;
}.
End def.
End afterFuncCtx.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_afterFuncCtx : Settable afterFuncCtx.t :=
  settable! afterFuncCtx.mk < afterFuncCtx.cancelCtx'; afterFuncCtx.once'; afterFuncCtx.f' >.
Global Instance into_val_afterFuncCtx : IntoVal afterFuncCtx.t :=
  {| to_val_def v :=
    struct.val_aux context.afterFuncCtx [
    "cancelCtx" ::= #(afterFuncCtx.cancelCtx' v);
    "once" ::= #(afterFuncCtx.once' v);
    "f" ::= #(afterFuncCtx.f' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_afterFuncCtx : IntoValTyped afterFuncCtx.t context.afterFuncCtx :=
{|
  default_val := afterFuncCtx.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_afterFuncCtx_cancelCtx : IntoValStructField "cancelCtx" context.afterFuncCtx afterFuncCtx.cancelCtx'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_afterFuncCtx_once : IntoValStructField "once" context.afterFuncCtx afterFuncCtx.once'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_afterFuncCtx_f : IntoValStructField "f" context.afterFuncCtx afterFuncCtx.f'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_afterFuncCtx cancelCtx' once' f':
  PureWp True
    (struct.make #context.afterFuncCtx (alist_val [
      "cancelCtx" ::= #cancelCtx';
      "once" ::= #once';
      "f" ::= #f'
    ]))%struct
    #(afterFuncCtx.mk cancelCtx' once' f').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance afterFuncCtx_struct_fields_split dq l (v : afterFuncCtx.t) :
  StructFieldsSplit dq l v (
    "HcancelCtx" ∷ l ↦s[context.afterFuncCtx :: "cancelCtx"]{dq} v.(afterFuncCtx.cancelCtx') ∗
    "Honce" ∷ l ↦s[context.afterFuncCtx :: "once"]{dq} v.(afterFuncCtx.once') ∗
    "Hf" ∷ l ↦s[context.afterFuncCtx :: "f"]{dq} v.(afterFuncCtx.f')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (afterFuncCtx.cancelCtx' v)) (context.afterFuncCtx) "cancelCtx"%go.
  simpl_one_flatten_struct (# (afterFuncCtx.once' v)) (context.afterFuncCtx) "once"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type context.stopCtx *)
Module stopCtx.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Context' : Context.t;
  stop' : func.t;
}.
End def.
End stopCtx.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_stopCtx : Settable stopCtx.t :=
  settable! stopCtx.mk < stopCtx.Context'; stopCtx.stop' >.
Global Instance into_val_stopCtx : IntoVal stopCtx.t :=
  {| to_val_def v :=
    struct.val_aux context.stopCtx [
    "Context" ::= #(stopCtx.Context' v);
    "stop" ::= #(stopCtx.stop' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_stopCtx : IntoValTyped stopCtx.t context.stopCtx :=
{|
  default_val := stopCtx.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_stopCtx_Context : IntoValStructField "Context" context.stopCtx stopCtx.Context'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_stopCtx_stop : IntoValStructField "stop" context.stopCtx stopCtx.stop'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_stopCtx Context' stop':
  PureWp True
    (struct.make #context.stopCtx (alist_val [
      "Context" ::= #Context';
      "stop" ::= #stop'
    ]))%struct
    #(stopCtx.mk Context' stop').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance stopCtx_struct_fields_split dq l (v : stopCtx.t) :
  StructFieldsSplit dq l v (
    "HContext" ∷ l ↦s[context.stopCtx :: "Context"]{dq} v.(stopCtx.Context') ∗
    "Hstop" ∷ l ↦s[context.stopCtx :: "stop"]{dq} v.(stopCtx.stop')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (stopCtx.Context' v)) (context.stopCtx) "Context"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type context.canceler *)
Module canceler.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End canceler.

(* type context.stringer *)
Module stringer.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End stringer.

(* type context.withoutCancelCtx *)
Module withoutCancelCtx.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  c' : Context.t;
}.
End def.
End withoutCancelCtx.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_withoutCancelCtx : Settable withoutCancelCtx.t :=
  settable! withoutCancelCtx.mk < withoutCancelCtx.c' >.
Global Instance into_val_withoutCancelCtx : IntoVal withoutCancelCtx.t :=
  {| to_val_def v :=
    struct.val_aux context.withoutCancelCtx [
    "c" ::= #(withoutCancelCtx.c' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_withoutCancelCtx : IntoValTyped withoutCancelCtx.t context.withoutCancelCtx :=
{|
  default_val := withoutCancelCtx.mk (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_withoutCancelCtx_c : IntoValStructField "c" context.withoutCancelCtx withoutCancelCtx.c'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_withoutCancelCtx c':
  PureWp True
    (struct.make #context.withoutCancelCtx (alist_val [
      "c" ::= #c'
    ]))%struct
    #(withoutCancelCtx.mk c').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance withoutCancelCtx_struct_fields_split dq l (v : withoutCancelCtx.t) :
  StructFieldsSplit dq l v (
    "Hc" ∷ l ↦s[context.withoutCancelCtx :: "c"]{dq} v.(withoutCancelCtx.c')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.

  solve_field_ref_f.
Qed.

End instances.

(* type context.timerCtx *)
Module timerCtx.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  cancelCtx' : cancelCtx.t;
  timer' : loc;
  deadline' : time.Time.t;
}.
End def.
End timerCtx.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_timerCtx : Settable timerCtx.t :=
  settable! timerCtx.mk < timerCtx.cancelCtx'; timerCtx.timer'; timerCtx.deadline' >.
Global Instance into_val_timerCtx : IntoVal timerCtx.t :=
  {| to_val_def v :=
    struct.val_aux context.timerCtx [
    "cancelCtx" ::= #(timerCtx.cancelCtx' v);
    "timer" ::= #(timerCtx.timer' v);
    "deadline" ::= #(timerCtx.deadline' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_timerCtx : IntoValTyped timerCtx.t context.timerCtx :=
{|
  default_val := timerCtx.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_timerCtx_cancelCtx : IntoValStructField "cancelCtx" context.timerCtx timerCtx.cancelCtx'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_timerCtx_timer : IntoValStructField "timer" context.timerCtx timerCtx.timer'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_timerCtx_deadline : IntoValStructField "deadline" context.timerCtx timerCtx.deadline'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_timerCtx cancelCtx' timer' deadline':
  PureWp True
    (struct.make #context.timerCtx (alist_val [
      "cancelCtx" ::= #cancelCtx';
      "timer" ::= #timer';
      "deadline" ::= #deadline'
    ]))%struct
    #(timerCtx.mk cancelCtx' timer' deadline').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance timerCtx_struct_fields_split dq l (v : timerCtx.t) :
  StructFieldsSplit dq l v (
    "HcancelCtx" ∷ l ↦s[context.timerCtx :: "cancelCtx"]{dq} v.(timerCtx.cancelCtx') ∗
    "Htimer" ∷ l ↦s[context.timerCtx :: "timer"]{dq} v.(timerCtx.timer') ∗
    "Hdeadline" ∷ l ↦s[context.timerCtx :: "deadline"]{dq} v.(timerCtx.deadline')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (timerCtx.cancelCtx' v)) (context.timerCtx) "cancelCtx"%go.
  simpl_one_flatten_struct (# (timerCtx.timer' v)) (context.timerCtx) "timer"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type context.valueCtx *)
Module valueCtx.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Context' : Context.t;
  key' : interface.t;
  val' : interface.t;
}.
End def.
End valueCtx.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_valueCtx : Settable valueCtx.t :=
  settable! valueCtx.mk < valueCtx.Context'; valueCtx.key'; valueCtx.val' >.
Global Instance into_val_valueCtx : IntoVal valueCtx.t :=
  {| to_val_def v :=
    struct.val_aux context.valueCtx [
    "Context" ::= #(valueCtx.Context' v);
    "key" ::= #(valueCtx.key' v);
    "val" ::= #(valueCtx.val' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_valueCtx : IntoValTyped valueCtx.t context.valueCtx :=
{|
  default_val := valueCtx.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_valueCtx_Context : IntoValStructField "Context" context.valueCtx valueCtx.Context'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_valueCtx_key : IntoValStructField "key" context.valueCtx valueCtx.key'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_valueCtx_val : IntoValStructField "val" context.valueCtx valueCtx.val'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_valueCtx Context' key' val':
  PureWp True
    (struct.make #context.valueCtx (alist_val [
      "Context" ::= #Context';
      "key" ::= #key';
      "val" ::= #val'
    ]))%struct
    #(valueCtx.mk Context' key' val').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance valueCtx_struct_fields_split dq l (v : valueCtx.t) :
  StructFieldsSplit dq l v (
    "HContext" ∷ l ↦s[context.valueCtx :: "Context"]{dq} v.(valueCtx.Context') ∗
    "Hkey" ∷ l ↦s[context.valueCtx :: "key"]{dq} v.(valueCtx.key') ∗
    "Hval" ∷ l ↦s[context.valueCtx :: "val"]{dq} v.(valueCtx.val')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (valueCtx.Context' v)) (context.valueCtx) "Context"%go.
  simpl_one_flatten_struct (# (valueCtx.key' v)) (context.valueCtx) "key"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_context : IsPkgDefinedPure context :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single context ∧
      is_pkg_defined_pure code.errors.errors ∧
      is_pkg_defined_pure code.internal.reflectlite.reflectlite ∧
      is_pkg_defined_pure code.sync.sync ∧
      is_pkg_defined_pure code.sync.atomic.atomic ∧
      is_pkg_defined_pure code.time.time;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_context : IsPkgDefined context :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single context ∗
       is_pkg_defined code.errors.errors ∗
       is_pkg_defined code.internal.reflectlite.reflectlite ∗
       is_pkg_defined code.sync.sync ∗
       is_pkg_defined code.sync.atomic.atomic ∗
       is_pkg_defined code.time.time)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_Background :
  WpFuncCall context.Background _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_TODO :
  WpFuncCall context.TODO _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_WithCancel :
  WpFuncCall context.WithCancel _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_WithCancelCause :
  WpFuncCall context.WithCancelCause _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_withCancel :
  WpFuncCall context.withCancel _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Cause :
  WpFuncCall context.Cause _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_AfterFunc :
  WpFuncCall context.AfterFunc _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_parentCancelCtx :
  WpFuncCall context.parentCancelCtx _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_removeChild :
  WpFuncCall context.removeChild _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_contextName :
  WpFuncCall context.contextName _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_WithoutCancel :
  WpFuncCall context.WithoutCancel _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_WithDeadline :
  WpFuncCall context.WithDeadline _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_WithDeadlineCause :
  WpFuncCall context.WithDeadlineCause _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_WithTimeout :
  WpFuncCall context.WithTimeout _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_WithTimeoutCause :
  WpFuncCall context.WithTimeoutCause _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_WithValue :
  WpFuncCall context.WithValue _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_stringify :
  WpFuncCall context.stringify _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_value :
  WpFuncCall context.value _ (is_pkg_defined context) :=
  ltac:(solve_wp_func_call).

Global Instance wp_method_call_deadlineExceededError_Error :
  WpMethodCall context.deadlineExceededError.id "Error" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_deadlineExceededError_Temporary :
  WpMethodCall context.deadlineExceededError.id "Temporary" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_deadlineExceededError_Timeout :
  WpMethodCall context.deadlineExceededError.id "Timeout" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_deadlineExceededError'ptr_Error :
  WpMethodCall (ptrT.id context.deadlineExceededError.id) "Error" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_deadlineExceededError'ptr_Temporary :
  WpMethodCall (ptrT.id context.deadlineExceededError.id) "Temporary" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_deadlineExceededError'ptr_Timeout :
  WpMethodCall (ptrT.id context.deadlineExceededError.id) "Timeout" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_emptyCtx_Deadline :
  WpMethodCall context.emptyCtx.id "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_emptyCtx_Done :
  WpMethodCall context.emptyCtx.id "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_emptyCtx_Err :
  WpMethodCall context.emptyCtx.id "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_emptyCtx_Value :
  WpMethodCall context.emptyCtx.id "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_emptyCtx'ptr_Deadline :
  WpMethodCall (ptrT.id context.emptyCtx.id) "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_emptyCtx'ptr_Done :
  WpMethodCall (ptrT.id context.emptyCtx.id) "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_emptyCtx'ptr_Err :
  WpMethodCall (ptrT.id context.emptyCtx.id) "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_emptyCtx'ptr_Value :
  WpMethodCall (ptrT.id context.emptyCtx.id) "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_backgroundCtx_Deadline :
  WpMethodCall context.backgroundCtx.id "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_backgroundCtx_Done :
  WpMethodCall context.backgroundCtx.id "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_backgroundCtx_Err :
  WpMethodCall context.backgroundCtx.id "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_backgroundCtx_String :
  WpMethodCall context.backgroundCtx.id "String" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_backgroundCtx_Value :
  WpMethodCall context.backgroundCtx.id "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_backgroundCtx'ptr_Deadline :
  WpMethodCall (ptrT.id context.backgroundCtx.id) "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_backgroundCtx'ptr_Done :
  WpMethodCall (ptrT.id context.backgroundCtx.id) "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_backgroundCtx'ptr_Err :
  WpMethodCall (ptrT.id context.backgroundCtx.id) "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_backgroundCtx'ptr_String :
  WpMethodCall (ptrT.id context.backgroundCtx.id) "String" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_backgroundCtx'ptr_Value :
  WpMethodCall (ptrT.id context.backgroundCtx.id) "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_todoCtx_Deadline :
  WpMethodCall context.todoCtx.id "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_todoCtx_Done :
  WpMethodCall context.todoCtx.id "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_todoCtx_Err :
  WpMethodCall context.todoCtx.id "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_todoCtx_String :
  WpMethodCall context.todoCtx.id "String" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_todoCtx_Value :
  WpMethodCall context.todoCtx.id "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_todoCtx'ptr_Deadline :
  WpMethodCall (ptrT.id context.todoCtx.id) "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_todoCtx'ptr_Done :
  WpMethodCall (ptrT.id context.todoCtx.id) "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_todoCtx'ptr_Err :
  WpMethodCall (ptrT.id context.todoCtx.id) "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_todoCtx'ptr_String :
  WpMethodCall (ptrT.id context.todoCtx.id) "String" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_todoCtx'ptr_Value :
  WpMethodCall (ptrT.id context.todoCtx.id) "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_afterFuncCtx_Deadline :
  WpMethodCall context.afterFuncCtx.id "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_afterFuncCtx'ptr_Deadline :
  WpMethodCall (ptrT.id context.afterFuncCtx.id) "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_afterFuncCtx'ptr_Done :
  WpMethodCall (ptrT.id context.afterFuncCtx.id) "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_afterFuncCtx'ptr_Err :
  WpMethodCall (ptrT.id context.afterFuncCtx.id) "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_afterFuncCtx'ptr_String :
  WpMethodCall (ptrT.id context.afterFuncCtx.id) "String" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_afterFuncCtx'ptr_Value :
  WpMethodCall (ptrT.id context.afterFuncCtx.id) "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_afterFuncCtx'ptr_cancel :
  WpMethodCall (ptrT.id context.afterFuncCtx.id) "cancel" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_afterFuncCtx'ptr_propagateCancel :
  WpMethodCall (ptrT.id context.afterFuncCtx.id) "propagateCancel" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_stopCtx_Deadline :
  WpMethodCall context.stopCtx.id "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_stopCtx_Done :
  WpMethodCall context.stopCtx.id "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_stopCtx_Err :
  WpMethodCall context.stopCtx.id "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_stopCtx_Value :
  WpMethodCall context.stopCtx.id "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_stopCtx'ptr_Deadline :
  WpMethodCall (ptrT.id context.stopCtx.id) "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_stopCtx'ptr_Done :
  WpMethodCall (ptrT.id context.stopCtx.id) "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_stopCtx'ptr_Err :
  WpMethodCall (ptrT.id context.stopCtx.id) "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_stopCtx'ptr_Value :
  WpMethodCall (ptrT.id context.stopCtx.id) "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_cancelCtx_Deadline :
  WpMethodCall context.cancelCtx.id "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_cancelCtx'ptr_Deadline :
  WpMethodCall (ptrT.id context.cancelCtx.id) "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_cancelCtx'ptr_Done :
  WpMethodCall (ptrT.id context.cancelCtx.id) "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_cancelCtx'ptr_Err :
  WpMethodCall (ptrT.id context.cancelCtx.id) "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_cancelCtx'ptr_String :
  WpMethodCall (ptrT.id context.cancelCtx.id) "String" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_cancelCtx'ptr_Value :
  WpMethodCall (ptrT.id context.cancelCtx.id) "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_cancelCtx'ptr_cancel :
  WpMethodCall (ptrT.id context.cancelCtx.id) "cancel" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_cancelCtx'ptr_propagateCancel :
  WpMethodCall (ptrT.id context.cancelCtx.id) "propagateCancel" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_withoutCancelCtx_Deadline :
  WpMethodCall context.withoutCancelCtx.id "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_withoutCancelCtx_Done :
  WpMethodCall context.withoutCancelCtx.id "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_withoutCancelCtx_Err :
  WpMethodCall context.withoutCancelCtx.id "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_withoutCancelCtx_String :
  WpMethodCall context.withoutCancelCtx.id "String" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_withoutCancelCtx_Value :
  WpMethodCall context.withoutCancelCtx.id "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_withoutCancelCtx'ptr_Deadline :
  WpMethodCall (ptrT.id context.withoutCancelCtx.id) "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_withoutCancelCtx'ptr_Done :
  WpMethodCall (ptrT.id context.withoutCancelCtx.id) "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_withoutCancelCtx'ptr_Err :
  WpMethodCall (ptrT.id context.withoutCancelCtx.id) "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_withoutCancelCtx'ptr_String :
  WpMethodCall (ptrT.id context.withoutCancelCtx.id) "String" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_withoutCancelCtx'ptr_Value :
  WpMethodCall (ptrT.id context.withoutCancelCtx.id) "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_timerCtx'ptr_Deadline :
  WpMethodCall (ptrT.id context.timerCtx.id) "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_timerCtx'ptr_Done :
  WpMethodCall (ptrT.id context.timerCtx.id) "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_timerCtx'ptr_Err :
  WpMethodCall (ptrT.id context.timerCtx.id) "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_timerCtx'ptr_String :
  WpMethodCall (ptrT.id context.timerCtx.id) "String" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_timerCtx'ptr_Value :
  WpMethodCall (ptrT.id context.timerCtx.id) "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_timerCtx'ptr_cancel :
  WpMethodCall (ptrT.id context.timerCtx.id) "cancel" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_timerCtx'ptr_propagateCancel :
  WpMethodCall (ptrT.id context.timerCtx.id) "propagateCancel" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_valueCtx_Deadline :
  WpMethodCall context.valueCtx.id "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_valueCtx_Done :
  WpMethodCall context.valueCtx.id "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_valueCtx_Err :
  WpMethodCall context.valueCtx.id "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_valueCtx'ptr_Deadline :
  WpMethodCall (ptrT.id context.valueCtx.id) "Deadline" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_valueCtx'ptr_Done :
  WpMethodCall (ptrT.id context.valueCtx.id) "Done" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_valueCtx'ptr_Err :
  WpMethodCall (ptrT.id context.valueCtx.id) "Err" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_valueCtx'ptr_String :
  WpMethodCall (ptrT.id context.valueCtx.id) "String" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

Global Instance wp_method_call_valueCtx'ptr_Value :
  WpMethodCall (ptrT.id context.valueCtx.id) "Value" _ (is_pkg_defined context) :=
  ltac:(solve_wp_method_call).

End names.
End context.
