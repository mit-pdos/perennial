(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.manualproof.time.
Require Export New.golang.theory.

Require Export New.code.time.

Set Default Proof Using "Type".

Module time.

(* type time.ParseError *)
Module ParseError.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End ParseError.

Global Instance bounded_size_ParseError : BoundedTypeSize time.ParseError.
Admitted.

Global Instance into_val_ParseError `{ffi_syntax} : IntoVal ParseError.t.
Admitted.

Global Instance into_val_typed_ParseError `{ffi_syntax} : IntoValTyped ParseError.t time.ParseError.
Admitted.

(* type time.Timer *)
Module Timer.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  C' : loc;
  initTimer' : bool;
}.
End def.
End Timer.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Timer : Settable Timer.t :=
  settable! Timer.mk < Timer.C'; Timer.initTimer' >.
Global Instance into_val_Timer : IntoVal Timer.t :=
  {| to_val_def v :=
    struct.val_aux time.Timer [
    "C" ::= #(Timer.C' v);
    "initTimer" ::= #(Timer.initTimer' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Timer : IntoValTyped Timer.t time.Timer :=
{|
  default_val := Timer.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Timer_C : IntoValStructField "C" time.Timer Timer.C'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Timer_initTimer : IntoValStructField "initTimer" time.Timer Timer.initTimer'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Timer C' initTimer':
  PureWp True
    (struct.make #time.Timer (alist_val [
      "C" ::= #C';
      "initTimer" ::= #initTimer'
    ]))%struct
    #(Timer.mk C' initTimer').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Timer_struct_fields_split dq l (v : Timer.t) :
  StructFieldsSplit dq l v (
    "HC" ∷ l ↦s[time.Timer :: "C"]{dq} v.(Timer.C') ∗
    "HinitTimer" ∷ l ↦s[time.Timer :: "initTimer"]{dq} v.(Timer.initTimer')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Timer.C' v)) (time.Timer) "C"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type time.Ticker *)
Module Ticker.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Ticker.

Global Instance bounded_size_Ticker : BoundedTypeSize time.Ticker.
Admitted.

Global Instance into_val_Ticker `{ffi_syntax} : IntoVal Ticker.t.
Admitted.

Global Instance into_val_typed_Ticker `{ffi_syntax} : IntoValTyped Ticker.t time.Ticker.
Admitted.

(* type time.Time *)
Module Time.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  wall' : w64;
  ext' : w64;
  loc' : loc;
}.
End def.
End Time.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Time : Settable Time.t :=
  settable! Time.mk < Time.wall'; Time.ext'; Time.loc' >.
Global Instance into_val_Time : IntoVal Time.t :=
  {| to_val_def v :=
    struct.val_aux time.Time [
    "wall" ::= #(Time.wall' v);
    "ext" ::= #(Time.ext' v);
    "loc" ::= #(Time.loc' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Time : IntoValTyped Time.t time.Time :=
{|
  default_val := Time.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Time_wall : IntoValStructField "wall" time.Time Time.wall'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Time_ext : IntoValStructField "ext" time.Time Time.ext'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Time_loc : IntoValStructField "loc" time.Time Time.loc'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Time wall' ext' loc':
  PureWp True
    (struct.make #time.Time (alist_val [
      "wall" ::= #wall';
      "ext" ::= #ext';
      "loc" ::= #loc'
    ]))%struct
    #(Time.mk wall' ext' loc').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Time_struct_fields_split dq l (v : Time.t) :
  StructFieldsSplit dq l v (
    "Hwall" ∷ l ↦s[time.Time :: "wall"]{dq} v.(Time.wall') ∗
    "Hext" ∷ l ↦s[time.Time :: "ext"]{dq} v.(Time.ext') ∗
    "Hloc" ∷ l ↦s[time.Time :: "loc"]{dq} v.(Time.loc')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Time.wall' v)) (time.Time) "wall"%go.
  simpl_one_flatten_struct (# (Time.ext' v)) (time.Time) "ext"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type time.Month *)
Module Month.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Month.

Global Instance bounded_size_Month : BoundedTypeSize time.Month.
Admitted.

Global Instance into_val_Month `{ffi_syntax} : IntoVal Month.t.
Admitted.

Global Instance into_val_typed_Month `{ffi_syntax} : IntoValTyped Month.t time.Month.
Admitted.

(* type time.Weekday *)
Module Weekday.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Weekday.

Global Instance bounded_size_Weekday : BoundedTypeSize time.Weekday.
Admitted.

Global Instance into_val_Weekday `{ffi_syntax} : IntoVal Weekday.t.
Admitted.

Global Instance into_val_typed_Weekday `{ffi_syntax} : IntoValTyped Weekday.t time.Weekday.
Admitted.

(* type time.absSeconds *)
Module absSeconds.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End absSeconds.

Global Instance bounded_size_absSeconds : BoundedTypeSize time.absSeconds.
Admitted.

Global Instance into_val_absSeconds `{ffi_syntax} : IntoVal absSeconds.t.
Admitted.

Global Instance into_val_typed_absSeconds `{ffi_syntax} : IntoValTyped absSeconds.t time.absSeconds.
Admitted.

(* type time.absDays *)
Module absDays.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End absDays.

Global Instance bounded_size_absDays : BoundedTypeSize time.absDays.
Admitted.

Global Instance into_val_absDays `{ffi_syntax} : IntoVal absDays.t.
Admitted.

Global Instance into_val_typed_absDays `{ffi_syntax} : IntoValTyped absDays.t time.absDays.
Admitted.

(* type time.absCentury *)
Module absCentury.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End absCentury.

Global Instance bounded_size_absCentury : BoundedTypeSize time.absCentury.
Admitted.

Global Instance into_val_absCentury `{ffi_syntax} : IntoVal absCentury.t.
Admitted.

Global Instance into_val_typed_absCentury `{ffi_syntax} : IntoValTyped absCentury.t time.absCentury.
Admitted.

(* type time.absCyear *)
Module absCyear.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End absCyear.

Global Instance bounded_size_absCyear : BoundedTypeSize time.absCyear.
Admitted.

Global Instance into_val_absCyear `{ffi_syntax} : IntoVal absCyear.t.
Admitted.

Global Instance into_val_typed_absCyear `{ffi_syntax} : IntoValTyped absCyear.t time.absCyear.
Admitted.

(* type time.absYday *)
Module absYday.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End absYday.

Global Instance bounded_size_absYday : BoundedTypeSize time.absYday.
Admitted.

Global Instance into_val_absYday `{ffi_syntax} : IntoVal absYday.t.
Admitted.

Global Instance into_val_typed_absYday `{ffi_syntax} : IntoValTyped absYday.t time.absYday.
Admitted.

(* type time.absMonth *)
Module absMonth.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End absMonth.

Global Instance bounded_size_absMonth : BoundedTypeSize time.absMonth.
Admitted.

Global Instance into_val_absMonth `{ffi_syntax} : IntoVal absMonth.t.
Admitted.

Global Instance into_val_typed_absMonth `{ffi_syntax} : IntoValTyped absMonth.t time.absMonth.
Admitted.

(* type time.absLeap *)
Module absLeap.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End absLeap.

Global Instance bounded_size_absLeap : BoundedTypeSize time.absLeap.
Admitted.

Global Instance into_val_absLeap `{ffi_syntax} : IntoVal absLeap.t.
Admitted.

Global Instance into_val_typed_absLeap `{ffi_syntax} : IntoValTyped absLeap.t time.absLeap.
Admitted.

(* type time.absJanFeb *)
Module absJanFeb.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End absJanFeb.

Global Instance bounded_size_absJanFeb : BoundedTypeSize time.absJanFeb.
Admitted.

Global Instance into_val_absJanFeb `{ffi_syntax} : IntoVal absJanFeb.t.
Admitted.

Global Instance into_val_typed_absJanFeb `{ffi_syntax} : IntoValTyped absJanFeb.t time.absJanFeb.
Admitted.

(* type time.Duration *)
Module Duration.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End Duration.

(* type time.Location *)
Module Location.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End Location.

Global Instance bounded_size_Location : BoundedTypeSize time.Location.
Admitted.

Global Instance into_val_Location `{ffi_syntax} : IntoVal Location.t.
Admitted.

Global Instance into_val_typed_Location `{ffi_syntax} : IntoValTyped Location.t time.Location.
Admitted.

(* type time.zone *)
Module zone.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End zone.

Global Instance bounded_size_zone : BoundedTypeSize time.zone.
Admitted.

Global Instance into_val_zone `{ffi_syntax} : IntoVal zone.t.
Admitted.

Global Instance into_val_typed_zone `{ffi_syntax} : IntoValTyped zone.t time.zone.
Admitted.

(* type time.zoneTrans *)
Module zoneTrans.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End zoneTrans.

Global Instance bounded_size_zoneTrans : BoundedTypeSize time.zoneTrans.
Admitted.

Global Instance into_val_zoneTrans `{ffi_syntax} : IntoVal zoneTrans.t.
Admitted.

Global Instance into_val_typed_zoneTrans `{ffi_syntax} : IntoValTyped zoneTrans.t time.zoneTrans.
Admitted.

(* type time.ruleKind *)
Module ruleKind.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End ruleKind.

Global Instance bounded_size_ruleKind : BoundedTypeSize time.ruleKind.
Admitted.

Global Instance into_val_ruleKind `{ffi_syntax} : IntoVal ruleKind.t.
Admitted.

Global Instance into_val_typed_ruleKind `{ffi_syntax} : IntoValTyped ruleKind.t time.ruleKind.
Admitted.

(* type time.rule *)
Module rule.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End rule.

Global Instance bounded_size_rule : BoundedTypeSize time.rule.
Admitted.

Global Instance into_val_rule `{ffi_syntax} : IntoVal rule.t.
Admitted.

Global Instance into_val_typed_rule `{ffi_syntax} : IntoValTyped rule.t time.rule.
Admitted.

(* type time.fileSizeError *)
Module fileSizeError.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End fileSizeError.

Global Instance bounded_size_fileSizeError : BoundedTypeSize time.fileSizeError.
Admitted.

Global Instance into_val_fileSizeError `{ffi_syntax} : IntoVal fileSizeError.t.
Admitted.

Global Instance into_val_typed_fileSizeError `{ffi_syntax} : IntoValTyped fileSizeError.t time.fileSizeError.
Admitted.

(* type time.dataIO *)
Module dataIO.
Section def.
Context `{ffi_syntax}.
Axiom t : Type.
End def.
End dataIO.

Global Instance bounded_size_dataIO : BoundedTypeSize time.dataIO.
Admitted.

Global Instance into_val_dataIO `{ffi_syntax} : IntoVal dataIO.t.
Admitted.

Global Instance into_val_typed_dataIO `{ffi_syntax} : IntoValTyped dataIO.t time.dataIO.
Admitted.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_time : IsPkgDefinedPure time :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single time;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_time : IsPkgDefined time :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single time)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_syncTimer :
  WpFuncCall time.syncTimer _ (is_pkg_defined time) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_newTimer :
  WpFuncCall time.newTimer _ (is_pkg_defined time) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_After :
  WpFuncCall time.After _ (is_pkg_defined time) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_runtimeNano :
  WpFuncCall time.runtimeNano _ (is_pkg_defined time) :=
  ltac:(solve_wp_func_call).

End names.
End time.
