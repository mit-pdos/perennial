(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.manualproof.time.
Require Export New.golang.theory.

Require Export New.code.time.

Set Default Proof Using "Type".

Module time.

(* type time.Timer *)
Module Timer.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  C' : loc;
  initTimer' : bool;
}.
End def.
End Timer.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Timer : Settable Timer.t :=
  settable! Timer.mk < Timer.C'; Timer.initTimer' >.
Global Instance into_val_Timer : IntoVal Timer.t :=
  {| to_val_def v :=
    struct.val_aux time.Timer [
    "C" ::= #(Timer.C' v);
    "initTimer" ::= #(Timer.initTimer' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Timer : IntoValTyped Timer.t time.Timer :=
{|
  default_val := Timer.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Timer_C : IntoValStructField "C" time.Timer Timer.C'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Timer_initTimer : IntoValStructField "initTimer" time.Timer Timer.initTimer'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Timer C' initTimer':
  PureWp True
    (struct.make #time.Timer (alist_val [
      "C" ::= #C';
      "initTimer" ::= #initTimer'
    ]))%struct
    #(Timer.mk C' initTimer').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Timer_struct_fields_split dq l (v : Timer.t) :
  StructFieldsSplit dq l v (
    "HC" ∷ l ↦s[time.Timer :: "C"]{dq} v.(Timer.C') ∗
    "HinitTimer" ∷ l ↦s[time.Timer :: "initTimer"]{dq} v.(Timer.initTimer')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Timer.C' v)) time.Timer "C"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type time.Time *)
Module Time.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  wall' : w64;
  ext' : w64;
  loc' : loc;
}.
End def.
End Time.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Time : Settable Time.t :=
  settable! Time.mk < Time.wall'; Time.ext'; Time.loc' >.
Global Instance into_val_Time : IntoVal Time.t :=
  {| to_val_def v :=
    struct.val_aux time.Time [
    "wall" ::= #(Time.wall' v);
    "ext" ::= #(Time.ext' v);
    "loc" ::= #(Time.loc' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Time : IntoValTyped Time.t time.Time :=
{|
  default_val := Time.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Time_wall : IntoValStructField "wall" time.Time Time.wall'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Time_ext : IntoValStructField "ext" time.Time Time.ext'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Time_loc : IntoValStructField "loc" time.Time Time.loc'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Time wall' ext' loc':
  PureWp True
    (struct.make #time.Time (alist_val [
      "wall" ::= #wall';
      "ext" ::= #ext';
      "loc" ::= #loc'
    ]))%struct
    #(Time.mk wall' ext' loc').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Time_struct_fields_split dq l (v : Time.t) :
  StructFieldsSplit dq l v (
    "Hwall" ∷ l ↦s[time.Time :: "wall"]{dq} v.(Time.wall') ∗
    "Hext" ∷ l ↦s[time.Time :: "ext"]{dq} v.(Time.ext') ∗
    "Hloc" ∷ l ↦s[time.Time :: "loc"]{dq} v.(Time.loc')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Time.wall' v)) time.Time "wall"%go.
  simpl_one_flatten_struct (# (Time.ext' v)) time.Time "ext"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type time.Duration *)
Module Duration.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End Duration.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context `{!GoContext}.

Global Instance wp_func_call_syncTimer :
  WpFuncCall time.syncTimer _ (is_pkg_defined time) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_newTimer :
  WpFuncCall time.newTimer _ (is_pkg_defined time) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_After :
  WpFuncCall time.After _ (is_pkg_defined time) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtimeNano :
  WpFuncCall time.runtimeNano _ (is_pkg_defined time) :=
  ltac:(apply wp_func_call'; reflexivity).

End names.
End time.
