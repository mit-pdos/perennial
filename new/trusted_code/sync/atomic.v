From New.golang Require Import defn.core.

Module atomic.
Section code.
Context `{ffi_syntax}.

(* BEGIN TEMPLATE *)
Definition LoadUint64ⁱᵐᵖˡ : val :=
  λ: "addr", Load "addr".
Definition StoreUint64ⁱᵐᵖˡ : val :=
  λ: "addr" "val", AtomicStore "addr" "val".
Definition AddUint64ⁱᵐᵖˡ : val :=
  λ: "addr" "val", AtomicOp PlusOp "addr" "val".
Definition CompareAndSwapUint64ⁱᵐᵖˡ : val :=
  λ: "addr" "old" "new",
    Snd (CmpXchg "addr" "old" "new").
(* END TEMPLATE *)

(* AUTO-GENERATED - DO NOT EDIT *)
  (* auto-generated by int_template.py *)
  (** Int64 *)
  Definition LoadInt64ⁱᵐᵖˡ : val :=
    λ: "addr", Load "addr".
  Definition StoreInt64ⁱᵐᵖˡ : val :=
    λ: "addr" "val", AtomicStore "addr" "val".
  Definition AddInt64ⁱᵐᵖˡ : val :=
    λ: "addr" "val", AtomicOp PlusOp "addr" "val".
  Definition CompareAndSwapInt64ⁱᵐᵖˡ : val :=
    λ: "addr" "old" "new",
      Snd (CmpXchg "addr" "old" "new").
  
  (** Uint32 *)
  Definition LoadUint32ⁱᵐᵖˡ : val :=
    λ: "addr", Load "addr".
  Definition StoreUint32ⁱᵐᵖˡ : val :=
    λ: "addr" "val", AtomicStore "addr" "val".
  Definition AddUint32ⁱᵐᵖˡ : val :=
    λ: "addr" "val", AtomicOp PlusOp "addr" "val".
  Definition CompareAndSwapUint32ⁱᵐᵖˡ : val :=
    λ: "addr" "old" "new",
      Snd (CmpXchg "addr" "old" "new").
  
  (** Int32 *)
  Definition LoadInt32ⁱᵐᵖˡ : val :=
    λ: "addr", Load "addr".
  Definition StoreInt32ⁱᵐᵖˡ : val :=
    λ: "addr" "val", AtomicStore "addr" "val".
  Definition AddInt32ⁱᵐᵖˡ : val :=
    λ: "addr" "val", AtomicOp PlusOp "addr" "val".
  Definition CompareAndSwapInt32ⁱᵐᵖˡ : val :=
    λ: "addr" "old" "new",
      Snd (CmpXchg "addr" "old" "new").
  
(* END AUTO-GENERATED *)

End code.
End atomic.
