(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.proof Require Import github_com.goose_lang.std.
From New.code Require Import github_com.mit_pdos.gokv.memkv.getreply_gk.
From New.generatedproof Require Import github_com.mit_pdos.gokv.memkv.getreply_gk.
From New.proof.github_com.mit_pdos.gokv.memkv Require Import error_proof_gk.
From New.code Require Import github_com.mit_pdos.gokv.memkv.error_gk.

Module getReply_gk.
Section getReply_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ} {go_ctx : GoContext}.

#[global] Instance : IsPkgInit getreply_gk := define_is_pkg_init True%I.

Record C :=
    mkC {
        err' :  Error_gk.I;
        value' : list u8;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (err_enc : list u8), 
  encoded = err_enc ++
              (u64_le $ length $ args.(value')) ++ args.(value')
  /\ Error_gk.has_encoding err_enc args.(err')
  /\ length args.(value') < 2^64.

Definition own (args__v: getreply_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  "Hown_err" ∷ Error_gk.own args__v.(getreply_gk.S.Err') args__c.(err') dq ∗
  "Hown_value" ∷ own_slice args__v.(getreply_gk.S.Value') dq args__c.(value') ∗
  "%Hown_value_len" ∷ ⌜ length args__c.(value') < 2^64 ⌝.

Lemma wp_Encode (args__t : getreply_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init getreply_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    @! getreply_gk.Marshal #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)".
  iUnfold own in "Hown". iNamed "Hown".
  wp_auto.

  wp_apply (Error_gk.wp_Encode with "[$Hsl $Hcap $Hown_err]").
  iIntros (err_enc ?) "(%Hargs_err_enc & Hown_err & Hsl & Hcap)".
  wp_auto.

  iDestruct (own_slice_len with "Hown_value") as "%Hown_value_sz".
  wp_apply (wp_WriteInt with "[$Hsl $Hcap]"). iIntros (?) "[Hsl Hcap]". wp_auto.
  wp_apply (wp_WriteBytes with "[$Hsl $Hcap $Hown_value]").
  iIntros (?) "(Hsl & Hcap & Hown_value)". wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  exists err_enc.
  split; first repeat (f_equal; try word).
  all: try done.
   
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init getreply_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    @! getreply_gk.Unmarshal #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (err_enc & Henc & Henc_err & Hlen_value ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (Error_gk.wp_Decode err_enc with "[$Hsl]"); first done.
  iIntros (err__v ?) "[Hown_err Hsl]". wp_auto.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hown_value Hsl]". wp_auto.
  wp_apply (wp_BytesClone with "[$Hown_value]").
  iIntros (?) "[Hown_value Hown_value_cap]". wp_auto.

  iApply "HΦ". iFrame; done.
Qed.

End getReply_gk.
End getReply_gk.

