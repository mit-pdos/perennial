(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mit_pdos.gokv.memkv.error_gk.
From New.generatedproof Require Import github_com.mit_pdos.gokv.memkv.error_gk.
From Perennial.Helpers Require Import NamedProps.

Module Error_gk.
Section Error_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ} {go_ctx : GoContext}.

Definition name_map_def : gmap w32 go_string := list_to_map [
                                                ((W32 0), "ENone"%go);
                                                ((W32 1), "EDontHaveShard"%go)
                                              ].
Definition value_map_def : gmap go_string w32 := list_to_map [
                                                 ("ENone"%go, (W32 0));
                                                 ("EDontHaveShard"%go, (W32 1))
                                               ].

Definition is_initialized : iProp Σ :=
  ∃ name_map value_map,
  "HglobalName" ∷ (global_addr error_gk.Name) ↦□ name_map ∗
  "Hname" ∷ name_map ↦$□ name_map_def ∗
  "HglobalValue" ∷ (global_addr error_gk.Value) ↦□ value_map ∗
  "Hvalue" ∷ value_map ↦$□ value_map_def.

#[global] Instance : IsPkgInit error_gk := define_is_pkg_init is_initialized.
#[global] Instance : GetIsPkgInitWf error_gk := build_get_is_pkg_init_wf.

Lemma wp_initialize' get_is_pkg_init :
  get_is_pkg_init_prop error_gk get_is_pkg_init ->
  {{{ own_initializing get_is_pkg_init ∗ is_go_context ∗ □ is_pkg_defined error_gk }}}
    error_gk.initialize' #()
  {{{ RET #(); own_initializing get_is_pkg_init ∗ is_pkg_init error_gk }}}.

Proof.
  intros Hinit. wp_start as "(Hown & #? & #Hdef)". wp_call.
  wp_apply (wp_package_init with "[$Hown] HΦ").
  { destruct Hinit as (-> & ?); done. }
  iIntros "Hown". wp_auto.

  wp_apply (marshal.wp_initialize' with "[$Hown]") as "[Hown #?]".
  { naive_solver. }
  { iModIntro. iEval simpl_is_pkg_defined in "Hdef". iPkgInit. }
  iFrame. wp_call.

  wp_auto. wp_apply wp_globals_get.
  wp_apply assume.wp_assume.
  rewrite bool_decide_eq_true. iIntros (<-).
  iDestruct "addr" as "Hname_ptr". 

  wp_auto. wp_apply wp_globals_get.
  wp_apply assume.wp_assume.
  rewrite bool_decide_eq_true. iIntros (<-).
  iDestruct "addr" as "Hvalue_ptr". 

  wp_auto.

  wp_apply wp_map_literal; first done.
  iIntros (?) "Hname". wp_auto.
  wp_apply wp_globals_get.
  iPersist "Hname_ptr Hname".

  wp_apply wp_map_literal; first done.
  iIntros (?) "Hvalue". wp_auto.
  rewrite -wp_fupd. wp_apply wp_globals_get.
  iPersist "Hvalue_ptr Hvalue".

  iModIntro.
  iEval (rewrite is_pkg_init_unfold /=).
  iFrame "∗#".
Qed.

Inductive I :=
| ENone
| EDontHaveShard.

Definition to_tag i : w32 :=
  match i with
  | ENone => W32 0
  | EDontHaveShard => W32 1
  end.

Definition has_encoding (encoded : list u8) (args : I) : Prop :=
  encoded = u32_le $ to_tag $ args.

Definition own (args__v : error_gk.E.t) (args__c : I) (dq : dfrac) : iProp Σ :=
  "%Herror_eq" ∷ ⌜ args__v = to_tag args__c ⌝.

Lemma wp_Encode (args__t : error_gk.E.t) (args__c : I) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init error_gk ∗
        own args__t args__c dq ∗
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    @! error_gk.Marshal #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)".
  unfold own. iNamed "Hown". 
  wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iApply "HΦ". iFrame.
  iPureIntro. unfold has_encoding.
  subst. split; try reflexivity.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : I) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init error_gk ∗  
        own_slice enc_sl dq (enc ++ suffix) ∗
        ⌜ has_encoding enc args__c ⌝
  }}}
    @! error_gk.Unmarshal #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "(Hsl & %Henc)". wp_auto.
  unfold has_encoding in Henc. subst.

  wp_apply (wp_ReadInt32 with "[$Hsl]").
  iIntros (?) "Hsl". wp_auto.

  iApply "HΦ". iFrame. done.
Qed.

End Error_gk.
End Error_gk.
