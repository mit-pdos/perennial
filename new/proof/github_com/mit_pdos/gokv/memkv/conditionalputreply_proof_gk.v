(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mit_pdos.gokv.memkv.conditionalputreply_gk.
From New.generatedproof Require Import github_com.mit_pdos.gokv.memkv.conditionalputreply_gk.
From New.proof.github_com.mit_pdos.gokv.memkv Require Import error_proof_gk.
From New.code Require Import github_com.mit_pdos.gokv.memkv.error_gk.

Module conditionalPutReply_gk.
Section conditionalPutReply_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ} {go_ctx : GoContext}.

#[global] Instance : IsPkgInit conditionalputreply_gk := define_is_pkg_init True%I.

Record C :=
    mkC {
        err' :  Error_gk.I;
        success' :  bool;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (err_enc : list u8), 
  encoded = err_enc ++
              [if args.(success') then W8 1 else W8 0]
  /\ Error_gk.has_encoding err_enc args.(err').

Definition own (args__v: conditionalputreply_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  "Hown_err" ∷ Error_gk.own args__v.(conditionalputreply_gk.S.Err') args__c.(err') dq ∗
  "%Hown_success" ∷ ⌜ args__v.(conditionalputreply_gk.S.Success') = args__c.(success') ⌝.

Lemma wp_Encode (args__t : conditionalputreply_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init conditionalputreply_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    @! conditionalputreply_gk.Marshal #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)".
  iUnfold own in "Hown". iNamed "Hown".
  wp_auto.

  wp_apply (Error_gk.wp_Encode with "[$Hsl $Hcap $Hown_err]").
  iIntros (err_enc ?) "(%Hargs_err_enc & Hown_err & Hsl & Hcap)".
  wp_auto.

  wp_apply (wp_WriteBool with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  exists err_enc.
  split; first repeat (f_equal; try word).
  { rewrite Hown_success. done. } 
  all: try done.
   
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init conditionalputreply_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    @! conditionalputreply_gk.Unmarshal #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (err_enc & Henc & Henc_err ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (Error_gk.wp_Decode err_enc with "[$Hsl]"); first done.
  iIntros (err__v ?) "[Hown_err Hsl]". wp_auto.

  wp_apply (wp_ReadBool with "[$Hsl]").
  iIntros (success_b ?) "[%Hsuccess Hsl]".
  assert (success_b = args__c.(success')) as Hargs_success.
  { destruct args__c.(success'); rewrite Hsuccess; reflexivity. }
  rewrite Hargs_success. wp_auto.

  iApply "HΦ". iFrame; done.
Qed.

End conditionalPutReply_gk.
End conditionalPutReply_gk.

