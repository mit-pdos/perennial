(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.proof Require Import github_com.goose_lang.primitive.
From New.proof Require Import github_com.goose_lang.std.
From New.code Require Import github_com.mit_pdos.gokv.tutorial.kvservice.get_gk.
From New.generatedproof Require Import github_com.mit_pdos.gokv.tutorial.kvservice.get_gk.

Module get_gk.
Section get_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ} {go_ctx : GoContext}.

#[global] Instance : IsPkgInit get_gk := define_is_pkg_init True%I.

Definition C := get_gk.S.t.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u64_le args.(get_gk.S.OpId')) ++
              (u64_le $ length $ args.(get_gk.S.Key')) ++ args.(get_gk.S.Key')
  /\ length args.(get_gk.S.Key') < 2^64.

Definition own (args__v: get_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  "%Hown_opId" ∷ ⌜ args__v.(get_gk.S.OpId') = args__c.(get_gk.S.OpId') ⌝ ∗
  "%Hown_key" ∷ ⌜ args__v.(get_gk.S.Key') = args__c.(get_gk.S.Key') ⌝ ∗
  "%Hown_key_len" ∷ ⌜ length args__c.(get_gk.S.Key') < 2^64 ⌝.

Lemma wp_Encode (args__t : get_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init get_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    @! get_gk.Marshal #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)".
  iUnfold own in "Hown". iNamed "Hown".
  wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply wp_AssumeNoStringOverflow. iIntros "%HkeyLen". wp_auto.
  wp_apply wp_StringToBytes. iIntros (?) "HkeyBytes". wp_auto.
  wp_apply (wp_WriteLenPrefixedBytes with "[$Hsl $Hcap $HkeyBytes]").
  iIntros (?) "(Hsl & Hcap & HkeyBytes)". wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  
  split. all: congruence || done. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init get_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    @! get_gk.Unmarshal #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (Henc & Hlen_key ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hkey_byt Hsl]". wp_auto.
  wp_apply (wp_BytesClone with "[$Hkey_byt]").
  iIntros (?) "[Hkey_byt Hkey_byt_cap]".
  wp_apply (wp_StringFromBytes with "[$Hkey_byt]").
  iIntros "Hkey_byt". wp_auto.

  iApply "HΦ". iFrame; done.
Qed.

End get_gk.
End get_gk.

