(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mit_pdos.gokv.tutorial.objectstore.dir.preparedwrite_gk.
From New.generatedproof Require Import github_com.mit_pdos.gokv.tutorial.objectstore.dir.preparedwrite_gk.

Module preparedWrite_gk.
Section preparedWrite_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ} {go_ctx : GoContext}.

#[global] Instance : IsPkgInit preparedwrite_gk := define_is_pkg_init True%I.

Record C :=
    mkC {
        id' :  u64;
        chunkAddrs' : list u64;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (chunkAddrs_enc : list u8), 
  encoded = (u64_le args.(id')) ++
              (u64_le $ length $ args.(chunkAddrs')) ++ chunkAddrs_enc
  /\ encodes chunkAddrs_enc args.(chunkAddrs') uint64_has_encoding
  /\ length args.(chunkAddrs') < 2^64.

Definition own (args__v: preparedwrite_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃ (l__chunkAddrs : list u64), 
  "%Hown_id" ∷ ⌜ args__v.(preparedwrite_gk.S.Id') = args__c.(id') ⌝ ∗
  "Hown_chunkAddrs_sl" ∷ own_slice args__v.(preparedwrite_gk.S.ChunkAddrs') dq l__chunkAddrs ∗
  "Hown_chunkAddrs_own" ∷ ([∗ list] x;c ∈ l__chunkAddrs;args__c.(chunkAddrs'), own_prim x c dq) ∗
  "%Hown_chunkAddrs_len" ∷ ⌜ length l__chunkAddrs < 2^64 ⌝.

Lemma wp_Encode (args__t : preparedwrite_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init preparedwrite_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    @! preparedwrite_gk.Marshal #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)".
  iUnfold own in "Hown". iNamed "Hown".
  wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iDestruct (own_slice_len with "Hown_chunkAddrs_sl") as "[%Hown_chunkAddrs_sz %Hown_chunkAddrs_sz_nonneg]".
  iDestruct (big_sepL2_length with "Hown_chunkAddrs_own") as "%Hown_chunkAddrs_sz'".
  rewrite Hown_chunkAddrs_sz' in Hown_chunkAddrs_sz.
  wp_apply (wp_WriteSlice _ _ _ _ _ uint64_has_encoding with "[$Hsl $Hcap $Hown_chunkAddrs_sl $Hown_chunkAddrs_own]").
  {
    iIntros (????) "!>".
    iIntros (?) "(Hown & Hsl & Hcap) HΦ".
    iDestruct (own_prim_eq with "Hown") as "%Hown_x".
    rewrite Hown_x.
    wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (chunkAddrs_enc chunkAddrs_sl') "(Hown_chunkAddrs & Hown_chunkAddrs_own & %Henc_chunkAddrs & Hsl & Hcap)".
  wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  exists chunkAddrs_enc.
  split; first repeat (f_equal; try word).
  all: try done.
  rewrite <- Hown_chunkAddrs_sz'.
  done. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init preparedwrite_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    @! preparedwrite_gk.Unmarshal #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (chunkAddrs_enc & Henc & Henc_chunkAddrs & HchunkAddrs_sz ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.
  wp_apply (wp_ReadSlice _ _ _ _ _ own_prim  with "[$Hsl]").
  {
    iSplit; auto.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl Henc] HΦ".
    iDestruct "Henc" as "%Hown_x".
    unfold uint64_has_encoding in Hown_x.
    rewrite Hown_x.
    wp_apply (wp_ReadInt with "[$Hsl]").
    iIntros (?) "Hsl".
    iApply "HΦ". iFrame.
    done.
  }
  iIntros (???) "(Hown_chunkAddrs_sl & Hown_chunkAddrs_own & Hsl)". wp_auto.
  iDestruct (big_sepL2_length with "Hown_chunkAddrs_own") as "%Hown_chunkAddrs_sz".
  rewrite <- Hown_chunkAddrs_sz in HchunkAddrs_sz.

  iApply "HΦ". iFrame; done.
Qed.

End preparedWrite_gk.
End preparedWrite_gk.

