(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.proof Require Import github_com.goose_lang.primitive.
From New.proof Require Import github_com.goose_lang.std.
From New.code Require Import github_com.mit_pdos.gokv.cachekv.cachevalue_gk.
From New.generatedproof Require Import github_com.mit_pdos.gokv.cachekv.cachevalue_gk.

Module cacheValue_gk.
Section cacheValue_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ} {go_ctx : GoContext}.

#[global] Instance : IsPkgInit cachevalue_gk := define_is_pkg_init True%I.

Definition C := cachevalue_gk.S.t.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u64_le $ length $ args.(cachevalue_gk.S.V')) ++ args.(cachevalue_gk.S.V') ++
              (u64_le args.(cachevalue_gk.S.L'))
  /\ length args.(cachevalue_gk.S.V') < 2^64.

Definition own (args__v: cachevalue_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  "%Hown_v" ∷ ⌜ args__v.(cachevalue_gk.S.V') = args__c.(cachevalue_gk.S.V') ⌝ ∗
  "%Hown_v_len" ∷ ⌜ length args__c.(cachevalue_gk.S.V') < 2^64 ⌝ ∗
  "%Hown_l" ∷ ⌜ args__v.(cachevalue_gk.S.L') = args__c.(cachevalue_gk.S.L') ⌝.

Lemma wp_Encode (args__t : cachevalue_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init cachevalue_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    @! cachevalue_gk.Marshal #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)".
  iUnfold own in "Hown". iNamed "Hown".
  wp_auto.

  wp_apply wp_AssumeNoStringOverflow. iIntros "%HvLen". wp_auto.
  wp_apply wp_StringToBytes. iIntros (?) "HvBytes". wp_auto.
  wp_apply (wp_WriteLenPrefixedBytes with "[$Hsl $Hcap $HvBytes]").
  iIntros (?) "(Hsl & Hcap & HvBytes)". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  
  split. all: congruence || done. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init cachevalue_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    @! cachevalue_gk.Unmarshal #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (Henc & Hlen_v ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hv_byt Hsl]". wp_auto.
  wp_apply (wp_BytesClone with "[$Hv_byt]").
  iIntros (?) "[Hv_byt Hv_byt_cap]".
  wp_apply (wp_StringFromBytes with "[$Hv_byt]").
  iIntros "Hv_byt". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  iApply "HΦ". iFrame; done.
Qed.

End cacheValue_gk.
End cacheValue_gk.

