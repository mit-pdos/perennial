(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mit_pdos.gokv.reconfig.replica.becomeprimaryargs_gk.
From New.generatedproof Require Import github_com.mit_pdos.gokv.reconfig.replica.becomeprimaryargs_gk.
From New.proof.github_com.mit_pdos.gokv.reconfig.replica Require Import configuration_proof_gk.
From New.code Require Import github_com.mit_pdos.gokv.reconfig.replica.configuration_gk.

Module becomePrimaryArgs_gk.
Section becomePrimaryArgs_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ} {go_ctx : GoContext}.

#[global] Instance : IsPkgInit becomeprimaryargs_gk := define_is_pkg_init True%I.

Record C :=
    mkC {
        epoch' :  u64;
        conf' :  configuration_gk.C;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (conf_enc : list u8), 
  encoded = (u64_le args.(epoch')) ++
              conf_enc
  /\ configuration_gk.has_encoding conf_enc args.(conf').

Definition own (args__v: becomeprimaryargs_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  "%Hown_epoch" ∷ ⌜ args__v.(becomeprimaryargs_gk.S.Epoch') = args__c.(epoch') ⌝ ∗
  "Hown_conf" ∷ configuration_gk.own args__v.(becomeprimaryargs_gk.S.Conf') args__c.(conf') dq.

Lemma wp_Encode (args__t : becomeprimaryargs_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init becomeprimaryargs_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    @! becomeprimaryargs_gk.Marshal #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)".
  iUnfold own in "Hown". iNamed "Hown".
  wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (configuration_gk.wp_Encode with "[$Hsl $Hcap $Hown_conf]").
  iIntros (conf_enc ?) "(%Hargs_conf_enc & Hown_conf & Hsl & Hcap)".
  wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  exists conf_enc.
  split. all: congruence || done. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init becomeprimaryargs_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    @! becomeprimaryargs_gk.Unmarshal #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (conf_enc & Henc & Henc_conf ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (configuration_gk.wp_Decode conf_enc with "[$Hsl]"); first done.
  iIntros (conf__v ?) "[Hown_conf Hsl]". wp_auto.

  iApply "HΦ". iFrame; done.
Qed.

End becomePrimaryArgs_gk.
End becomePrimaryArgs_gk.

