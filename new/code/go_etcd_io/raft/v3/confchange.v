(* autogenerated from go.etcd.io/raft/v3/confchange *)
Require Export New.code.go_etcd_io.raft.v3.tracker.

From New.golang Require Import defn.
Definition confchange : go_string := "go.etcd.io/raft/v3/confchange".

Module confchange.

Module Changer. Definition id : go_string := "go.etcd.io/raft/v3/confchange.Changer"%go. End Changer.

Section code.
Context `{ffi_syntax}.


Definition Changer : go_type := structT [
  "Tracker" :: tracker.ProgressTracker;
  "LastIndex" :: uint64T
].

Definition checkInvariants : go_string := "go.etcd.io/raft/v3/confchange.checkInvariants"%go.

Definition checkAndReturn : go_string := "go.etcd.io/raft/v3/confchange.checkAndReturn"%go.

Definition nilAwareAdd : go_string := "go.etcd.io/raft/v3/confchange.nilAwareAdd"%go.

Definition nilAwareDelete : go_string := "go.etcd.io/raft/v3/confchange.nilAwareDelete"%go.

Definition symdiff : go_string := "go.etcd.io/raft/v3/confchange.symdiff"%go.

Definition joint : go_string := "go.etcd.io/raft/v3/confchange.joint"%go.

Definition incoming : go_string := "go.etcd.io/raft/v3/confchange.incoming"%go.

Definition outgoing : go_string := "go.etcd.io/raft/v3/confchange.outgoing"%go.

Definition outgoingPtr : go_string := "go.etcd.io/raft/v3/confchange.outgoingPtr"%go.

Definition Describe : go_string := "go.etcd.io/raft/v3/confchange.Describe"%go.

Definition toConfChangeSingle : go_string := "go.etcd.io/raft/v3/confchange.toConfChangeSingle"%go.

Definition chain : go_string := "go.etcd.io/raft/v3/confchange.chain"%go.

Definition Restore : go_string := "go.etcd.io/raft/v3/confchange.Restore"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom checkInvariantsⁱᵐᵖˡ : val.

Axiom checkAndReturnⁱᵐᵖˡ : val.

Axiom nilAwareAddⁱᵐᵖˡ : val.

Axiom nilAwareDeleteⁱᵐᵖˡ : val.

Axiom symdiffⁱᵐᵖˡ : val.

Axiom jointⁱᵐᵖˡ : val.

Axiom incomingⁱᵐᵖˡ : val.

Axiom outgoingⁱᵐᵖˡ : val.

Axiom outgoingPtrⁱᵐᵖˡ : val.

Axiom Describeⁱᵐᵖˡ : val.

Axiom toConfChangeSingleⁱᵐᵖˡ : val.

Axiom chainⁱᵐᵖˡ : val.

Axiom Restoreⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(checkInvariants, checkInvariantsⁱᵐᵖˡ); (checkAndReturn, checkAndReturnⁱᵐᵖˡ); (nilAwareAdd, nilAwareAddⁱᵐᵖˡ); (nilAwareDelete, nilAwareDeleteⁱᵐᵖˡ); (symdiff, symdiffⁱᵐᵖˡ); (joint, jointⁱᵐᵖˡ); (incoming, incomingⁱᵐᵖˡ); (outgoing, outgoingⁱᵐᵖˡ); (outgoingPtr, outgoingPtrⁱᵐᵖˡ); (Describe, Describeⁱᵐᵖˡ); (toConfChangeSingle, toConfChangeSingleⁱᵐᵖˡ); (chain, chainⁱᵐᵖˡ); (Restore, Restoreⁱᵐᵖˡ)].

Axiom Changer__EnterJointⁱᵐᵖˡ : val.

Axiom Changer__LeaveJointⁱᵐᵖˡ : val.

Axiom Changer__Simpleⁱᵐᵖˡ : val.

Axiom Changer__applyⁱᵐᵖˡ : val.

Axiom Changer__checkAndCopyⁱᵐᵖˡ : val.

Axiom Changer__errⁱᵐᵖˡ : val.

Axiom Changer__initProgressⁱᵐᵖˡ : val.

Axiom Changer__makeLearnerⁱᵐᵖˡ : val.

Axiom Changer__makeVoterⁱᵐᵖˡ : val.

Axiom Changer__removeⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(Changer.id, [("EnterJoint"%go, Changer__EnterJointⁱᵐᵖˡ); ("LeaveJoint"%go, Changer__LeaveJointⁱᵐᵖˡ); ("Simple"%go, Changer__Simpleⁱᵐᵖˡ); ("apply"%go, Changer__applyⁱᵐᵖˡ); ("checkAndCopy"%go, Changer__checkAndCopyⁱᵐᵖˡ); ("err"%go, Changer__errⁱᵐᵖˡ); ("initProgress"%go, Changer__initProgressⁱᵐᵖˡ); ("makeLearner"%go, Changer__makeLearnerⁱᵐᵖˡ); ("makeVoter"%go, Changer__makeVoterⁱᵐᵖˡ); ("remove"%go, Changer__removeⁱᵐᵖˡ)]); (ptrT.id Changer.id, [("EnterJoint"%go, Changer__EnterJointⁱᵐᵖˡ); ("LeaveJoint"%go, Changer__LeaveJointⁱᵐᵖˡ); ("Simple"%go, Changer__Simpleⁱᵐᵖˡ); ("apply"%go, Changer__applyⁱᵐᵖˡ); ("checkAndCopy"%go, Changer__checkAndCopyⁱᵐᵖˡ); ("err"%go, Changer__errⁱᵐᵖˡ); ("initProgress"%go, Changer__initProgressⁱᵐᵖˡ); ("makeLearner"%go, Changer__makeLearnerⁱᵐᵖˡ); ("makeVoter"%go, Changer__makeVoterⁱᵐᵖˡ); ("remove"%go, Changer__removeⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo confchange.confchange :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [code.go_etcd_io.raft.v3.tracker.tracker];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #confchange.confchange (λ: <>,
      exception_do (do:  (tracker.initialize' #());;;
      do:  (package.alloc confchange.confchange #()))
      ).

End code.
End confchange.
