(* autogenerated from go.etcd.io/raft/v3/quorum/slices *)

From New.golang Require Import defn.
Definition slices : go_string := "go.etcd.io/raft/v3/quorum/slices".

Module slices.

Module Tup. Definition id : go_string := "go.etcd.io/raft/v3/quorum/slices.Tup"%go. End Tup.

Section code.
Context `{ffi_syntax}.


Definition CompareUint64 : go_string := "go.etcd.io/raft/v3/quorum/slices.CompareUint64"%go.

Definition SortUint64 : go_string := "go.etcd.io/raft/v3/quorum/slices.SortUint64"%go.

Definition Tup : go_type := structT [
  "ID" :: uint64T;
  "Idx" :: uint64T;
  "Ok" :: boolT;
  "Bar" :: intT
].
#[global] Typeclasses Opaque Tup.
#[global] Opaque Tup.

Definition SortFuncTup : go_string := "go.etcd.io/raft/v3/quorum/slices.SortFuncTup"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom CompareUint64ⁱᵐᵖˡ : val.

Axiom SortUint64ⁱᵐᵖˡ : val.

Axiom SortFuncTupⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(CompareUint64, CompareUint64ⁱᵐᵖˡ); (SortUint64, SortUint64ⁱᵐᵖˡ); (SortFuncTup, SortFuncTupⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(Tup.id, []); (ptrT.id Tup.id, [])].

#[global] Instance info' : PkgInfo slices.slices :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #slices.slices (λ: <>,
      exception_do (do:  (package.alloc slices.slices #()))
      ).

End code.
End slices.
