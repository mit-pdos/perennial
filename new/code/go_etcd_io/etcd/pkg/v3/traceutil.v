(* autogenerated from go.etcd.io/etcd/pkg/v3/traceutil *)

From New.golang Require Import defn.
Definition traceutil : go_string := "go.etcd.io/etcd/pkg/v3/traceutil".

Module traceutil.

Module TraceKey. Definition id : go_string := "go.etcd.io/etcd/pkg/v3/traceutil.TraceKey"%go. End TraceKey.
Module StartTimeKey. Definition id : go_string := "go.etcd.io/etcd/pkg/v3/traceutil.StartTimeKey"%go. End StartTimeKey.
Module Field. Definition id : go_string := "go.etcd.io/etcd/pkg/v3/traceutil.Field"%go. End Field.
Module Trace. Definition id : go_string := "go.etcd.io/etcd/pkg/v3/traceutil.Trace"%go. End Trace.
Module step. Definition id : go_string := "go.etcd.io/etcd/pkg/v3/traceutil.step"%go. End step.

Section code.
Context `{ffi_syntax}.


Axiom TraceKey : go_type.

Axiom StartTimeKey : go_type.

Axiom Field : go_type.

Definition writeFields : go_string := "go.etcd.io/etcd/pkg/v3/traceutil.writeFields"%go.

Axiom Trace : go_type.

Axiom step : go_type.

Definition New : go_string := "go.etcd.io/etcd/pkg/v3/traceutil.New"%go.

Definition TODO : go_string := "go.etcd.io/etcd/pkg/v3/traceutil.TODO"%go.

Definition Get : go_string := "go.etcd.io/etcd/pkg/v3/traceutil.Get"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom writeFieldsⁱᵐᵖˡ : val.

Axiom Newⁱᵐᵖˡ : val.

Axiom TODOⁱᵐᵖˡ : val.

Axiom Getⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(writeFields, writeFieldsⁱᵐᵖˡ); (New, Newⁱᵐᵖˡ); (TODO, TODOⁱᵐᵖˡ); (Get, Getⁱᵐᵖˡ)].

Axiom Field__formatⁱᵐᵖˡ : val.

Axiom Trace__AddFieldⁱᵐᵖˡ : val.

Axiom Trace__GetStartTimeⁱᵐᵖˡ : val.

Axiom Trace__InsertStepⁱᵐᵖˡ : val.

Axiom Trace__IsEmptyⁱᵐᵖˡ : val.

Axiom Trace__Logⁱᵐᵖˡ : val.

Axiom Trace__LogAllStepsIfLongⁱᵐᵖˡ : val.

Axiom Trace__LogIfLongⁱᵐᵖˡ : val.

Axiom Trace__LogWithStepThresholdⁱᵐᵖˡ : val.

Axiom Trace__SetStartTimeⁱᵐᵖˡ : val.

Axiom Trace__StartSubTraceⁱᵐᵖˡ : val.

Axiom Trace__Stepⁱᵐᵖˡ : val.

Axiom Trace__StepWithFunctionⁱᵐᵖˡ : val.

Axiom Trace__StopSubTraceⁱᵐᵖˡ : val.

Axiom Trace__disableStepⁱᵐᵖˡ : val.

Axiom Trace__enableStepⁱᵐᵖˡ : val.

Axiom Trace__logInfoⁱᵐᵖˡ : val.

Axiom Trace__updateFieldIfExistⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(TraceKey.id, []); (ptrT.id TraceKey.id, []); (StartTimeKey.id, []); (ptrT.id StartTimeKey.id, []); (Field.id, []); (ptrT.id Field.id, [("format"%go, Field__formatⁱᵐᵖˡ)]); (Trace.id, []); (ptrT.id Trace.id, [("AddField"%go, Trace__AddFieldⁱᵐᵖˡ); ("GetStartTime"%go, Trace__GetStartTimeⁱᵐᵖˡ); ("InsertStep"%go, Trace__InsertStepⁱᵐᵖˡ); ("IsEmpty"%go, Trace__IsEmptyⁱᵐᵖˡ); ("Log"%go, Trace__Logⁱᵐᵖˡ); ("LogAllStepsIfLong"%go, Trace__LogAllStepsIfLongⁱᵐᵖˡ); ("LogIfLong"%go, Trace__LogIfLongⁱᵐᵖˡ); ("LogWithStepThreshold"%go, Trace__LogWithStepThresholdⁱᵐᵖˡ); ("SetStartTime"%go, Trace__SetStartTimeⁱᵐᵖˡ); ("StartSubTrace"%go, Trace__StartSubTraceⁱᵐᵖˡ); ("Step"%go, Trace__Stepⁱᵐᵖˡ); ("StepWithFunction"%go, Trace__StepWithFunctionⁱᵐᵖˡ); ("StopSubTrace"%go, Trace__StopSubTraceⁱᵐᵖˡ); ("disableStep"%go, Trace__disableStepⁱᵐᵖˡ); ("enableStep"%go, Trace__enableStepⁱᵐᵖˡ); ("logInfo"%go, Trace__logInfoⁱᵐᵖˡ); ("updateFieldIfExist"%go, Trace__updateFieldIfExistⁱᵐᵖˡ)]); (step.id, []); (ptrT.id step.id, [])].

#[global] Instance info' : PkgInfo traceutil.traceutil :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #traceutil.traceutil (λ: <>,
      exception_do (do:  (package.alloc traceutil.traceutil #()))
      ).

End code.
End traceutil.
