(* autogenerated from go.etcd.io/etcd/server/v3/auth *)

From New.golang Require Import defn.
Definition auth : go_string := "go.etcd.io/etcd/server/v3/auth".

Module auth.

Module tokenJWT. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.tokenJWT"%go. End tokenJWT.
Module tokenNop. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.tokenNop"%go. End tokenNop.
Module jwtOptions. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.jwtOptions"%go. End jwtOptions.
Module unifiedRangePermissions. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.unifiedRangePermissions"%go. End unifiedRangePermissions.
Module simpleTokenTTLKeeper. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.simpleTokenTTLKeeper"%go. End simpleTokenTTLKeeper.
Module tokenSimple. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.tokenSimple"%go. End tokenSimple.
Module AuthInfo. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.AuthInfo"%go. End AuthInfo.
Module AuthenticateParamIndex. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.AuthenticateParamIndex"%go. End AuthenticateParamIndex.
Module AuthenticateParamSimpleTokenPrefix. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.AuthenticateParamSimpleTokenPrefix"%go. End AuthenticateParamSimpleTokenPrefix.
Module AuthStore. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.AuthStore"%go. End AuthStore.
Module TokenProvider. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.TokenProvider"%go. End TokenProvider.
Module AuthBackend. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.AuthBackend"%go. End AuthBackend.
Module AuthReadTx. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.AuthReadTx"%go. End AuthReadTx.
Module UnsafeAuthReader. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.UnsafeAuthReader"%go. End UnsafeAuthReader.
Module AuthBatchTx. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.AuthBatchTx"%go. End AuthBatchTx.
Module UnsafeAuthReadWriter. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.UnsafeAuthReadWriter"%go. End UnsafeAuthReadWriter.
Module UnsafeAuthWriter. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.UnsafeAuthWriter"%go. End UnsafeAuthWriter.
Module authStore. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.authStore"%go. End authStore.
Module permSlice. Definition id : go_string := "go.etcd.io/etcd/server/v3/auth.permSlice"%go. End permSlice.

Section code.
Context `{ffi_syntax}.


Axiom tokenJWT : go_type.

Definition newTokenProviderJWT : go_string := "go.etcd.io/etcd/server/v3/auth.newTokenProviderJWT"%go.

Definition currentAuthRevision : go_string := "go.etcd.io/etcd/server/v3/auth.currentAuthRevision"%go.

Axiom currentAuthRevision'init : val.

Definition reportCurrentAuthRevMu : go_string := "go.etcd.io/etcd/server/v3/auth.reportCurrentAuthRevMu"%go.

Definition reportCurrentAuthRev : go_string := "go.etcd.io/etcd/server/v3/auth.reportCurrentAuthRev"%go.

Axiom reportCurrentAuthRev'init : val.

Definition init : go_string := "go.etcd.io/etcd/server/v3/auth.init"%go.

Axiom tokenNop : go_type.

Definition newTokenProviderNop : go_string := "go.etcd.io/etcd/server/v3/auth.newTokenProviderNop"%go.

Axiom optSignMethod : go_string.

Axiom optPublicKey : go_string.

Axiom optPrivateKey : go_string.

Axiom optTTL : go_string.

Definition knownOptions : go_string := "go.etcd.io/etcd/server/v3/auth.knownOptions"%go.

Axiom knownOptions'init : val.

Definition DefaultTTL : go_string := "go.etcd.io/etcd/server/v3/auth.DefaultTTL"%go.

Axiom DefaultTTL'init : val.

Axiom jwtOptions : go_type.

Definition getMergedPerms : go_string := "go.etcd.io/etcd/server/v3/auth.getMergedPerms"%go.

Definition checkKeyInterval : go_string := "go.etcd.io/etcd/server/v3/auth.checkKeyInterval"%go.

Definition checkKeyPoint : go_string := "go.etcd.io/etcd/server/v3/auth.checkKeyPoint"%go.

Axiom unifiedRangePermissions : go_type.

Definition isOpenEnded : go_string := "go.etcd.io/etcd/server/v3/auth.isOpenEnded"%go.

Definition isValidPermissionRange : go_string := "go.etcd.io/etcd/server/v3/auth.isValidPermissionRange"%go.

Axiom letters : go_string.

Axiom defaultSimpleTokenLength : Z.

Definition simpleTokenTTLDefault : go_string := "go.etcd.io/etcd/server/v3/auth.simpleTokenTTLDefault"%go.

Axiom simpleTokenTTLDefault'init : val.

Definition simpleTokenTTLResolution : go_string := "go.etcd.io/etcd/server/v3/auth.simpleTokenTTLResolution"%go.

Axiom simpleTokenTTLResolution'init : val.

Axiom simpleTokenTTLKeeper : go_type.

Axiom tokenSimple : go_type.

Definition newTokenProviderSimple : go_string := "go.etcd.io/etcd/server/v3/auth.newTokenProviderSimple"%go.

Definition rootPerm : go_string := "go.etcd.io/etcd/server/v3/auth.rootPerm"%go.

Axiom rootPerm'init : val.

Definition ErrRootUserNotExist : go_string := "go.etcd.io/etcd/server/v3/auth.ErrRootUserNotExist"%go.

Axiom ErrRootUserNotExist'init : val.

Definition ErrRootRoleNotExist : go_string := "go.etcd.io/etcd/server/v3/auth.ErrRootRoleNotExist"%go.

Axiom ErrRootRoleNotExist'init : val.

Definition ErrUserAlreadyExist : go_string := "go.etcd.io/etcd/server/v3/auth.ErrUserAlreadyExist"%go.

Axiom ErrUserAlreadyExist'init : val.

Definition ErrUserEmpty : go_string := "go.etcd.io/etcd/server/v3/auth.ErrUserEmpty"%go.

Axiom ErrUserEmpty'init : val.

Definition ErrUserNotFound : go_string := "go.etcd.io/etcd/server/v3/auth.ErrUserNotFound"%go.

Axiom ErrUserNotFound'init : val.

Definition ErrRoleAlreadyExist : go_string := "go.etcd.io/etcd/server/v3/auth.ErrRoleAlreadyExist"%go.

Axiom ErrRoleAlreadyExist'init : val.

Definition ErrRoleNotFound : go_string := "go.etcd.io/etcd/server/v3/auth.ErrRoleNotFound"%go.

Axiom ErrRoleNotFound'init : val.

Definition ErrRoleEmpty : go_string := "go.etcd.io/etcd/server/v3/auth.ErrRoleEmpty"%go.

Axiom ErrRoleEmpty'init : val.

Definition ErrPermissionNotGiven : go_string := "go.etcd.io/etcd/server/v3/auth.ErrPermissionNotGiven"%go.

Axiom ErrPermissionNotGiven'init : val.

Definition ErrAuthFailed : go_string := "go.etcd.io/etcd/server/v3/auth.ErrAuthFailed"%go.

Axiom ErrAuthFailed'init : val.

Definition ErrNoPasswordUser : go_string := "go.etcd.io/etcd/server/v3/auth.ErrNoPasswordUser"%go.

Axiom ErrNoPasswordUser'init : val.

Definition ErrPermissionDenied : go_string := "go.etcd.io/etcd/server/v3/auth.ErrPermissionDenied"%go.

Axiom ErrPermissionDenied'init : val.

Definition ErrRoleNotGranted : go_string := "go.etcd.io/etcd/server/v3/auth.ErrRoleNotGranted"%go.

Axiom ErrRoleNotGranted'init : val.

Definition ErrPermissionNotGranted : go_string := "go.etcd.io/etcd/server/v3/auth.ErrPermissionNotGranted"%go.

Axiom ErrPermissionNotGranted'init : val.

Definition ErrAuthNotEnabled : go_string := "go.etcd.io/etcd/server/v3/auth.ErrAuthNotEnabled"%go.

Axiom ErrAuthNotEnabled'init : val.

Definition ErrAuthOldRevision : go_string := "go.etcd.io/etcd/server/v3/auth.ErrAuthOldRevision"%go.

Axiom ErrAuthOldRevision'init : val.

Definition ErrInvalidAuthToken : go_string := "go.etcd.io/etcd/server/v3/auth.ErrInvalidAuthToken"%go.

Axiom ErrInvalidAuthToken'init : val.

Definition ErrInvalidAuthOpts : go_string := "go.etcd.io/etcd/server/v3/auth.ErrInvalidAuthOpts"%go.

Axiom ErrInvalidAuthOpts'init : val.

Definition ErrInvalidAuthMgmt : go_string := "go.etcd.io/etcd/server/v3/auth.ErrInvalidAuthMgmt"%go.

Axiom ErrInvalidAuthMgmt'init : val.

Definition ErrInvalidAuthMethod : go_string := "go.etcd.io/etcd/server/v3/auth.ErrInvalidAuthMethod"%go.

Axiom ErrInvalidAuthMethod'init : val.

Definition ErrMissingKey : go_string := "go.etcd.io/etcd/server/v3/auth.ErrMissingKey"%go.

Axiom ErrMissingKey'init : val.

Definition ErrKeyMismatch : go_string := "go.etcd.io/etcd/server/v3/auth.ErrKeyMismatch"%go.

Axiom ErrKeyMismatch'init : val.

Definition ErrVerifyOnly : go_string := "go.etcd.io/etcd/server/v3/auth.ErrVerifyOnly"%go.

Axiom ErrVerifyOnly'init : val.

Axiom rootUser : go_string.

Axiom rootRole : go_string.

Axiom tokenTypeSimple : go_string.

Axiom tokenTypeJWT : go_string.

Axiom AuthInfo : go_type.

Axiom AuthenticateParamIndex : go_type.

Axiom AuthenticateParamSimpleTokenPrefix : go_type.

Axiom AuthStore : go_type.

Axiom TokenProvider : go_type.

Axiom AuthBackend : go_type.

Axiom AuthReadTx : go_type.

Axiom UnsafeAuthReader : go_type.

Axiom AuthBatchTx : go_type.

Axiom UnsafeAuthReadWriter : go_type.

Axiom UnsafeAuthWriter : go_type.

Axiom authStore : go_type.

Axiom permSlice : go_type.

Definition NewAuthStore : go_string := "go.etcd.io/etcd/server/v3/auth.NewAuthStore"%go.

Definition hasRootRole : go_string := "go.etcd.io/etcd/server/v3/auth.hasRootRole"%go.

Definition decomposeOpts : go_string := "go.etcd.io/etcd/server/v3/auth.decomposeOpts"%go.

Definition NewTokenProvider : go_string := "go.etcd.io/etcd/server/v3/auth.NewTokenProvider"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom newTokenProviderJWTⁱᵐᵖˡ : val.

Axiom newTokenProviderNopⁱᵐᵖˡ : val.

Axiom getMergedPermsⁱᵐᵖˡ : val.

Axiom checkKeyIntervalⁱᵐᵖˡ : val.

Axiom checkKeyPointⁱᵐᵖˡ : val.

Axiom isOpenEndedⁱᵐᵖˡ : val.

Axiom isValidPermissionRangeⁱᵐᵖˡ : val.

Axiom newTokenProviderSimpleⁱᵐᵖˡ : val.

Axiom NewAuthStoreⁱᵐᵖˡ : val.

Axiom hasRootRoleⁱᵐᵖˡ : val.

Axiom decomposeOptsⁱᵐᵖˡ : val.

Axiom NewTokenProviderⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(newTokenProviderJWT, newTokenProviderJWTⁱᵐᵖˡ); (newTokenProviderNop, newTokenProviderNopⁱᵐᵖˡ); (getMergedPerms, getMergedPermsⁱᵐᵖˡ); (checkKeyInterval, checkKeyIntervalⁱᵐᵖˡ); (checkKeyPoint, checkKeyPointⁱᵐᵖˡ); (isOpenEnded, isOpenEndedⁱᵐᵖˡ); (isValidPermissionRange, isValidPermissionRangeⁱᵐᵖˡ); (newTokenProviderSimple, newTokenProviderSimpleⁱᵐᵖˡ); (NewAuthStore, NewAuthStoreⁱᵐᵖˡ); (hasRootRole, hasRootRoleⁱᵐᵖˡ); (decomposeOpts, decomposeOptsⁱᵐᵖˡ); (NewTokenProvider, NewTokenProviderⁱᵐᵖˡ)].

Axiom tokenJWT__assignⁱᵐᵖˡ : val.

Axiom tokenJWT__disableⁱᵐᵖˡ : val.

Axiom tokenJWT__enableⁱᵐᵖˡ : val.

Axiom tokenJWT__genTokenPrefixⁱᵐᵖˡ : val.

Axiom tokenJWT__infoⁱᵐᵖˡ : val.

Axiom tokenJWT__invalidateUserⁱᵐᵖˡ : val.

Axiom tokenNop__assignⁱᵐᵖˡ : val.

Axiom tokenNop__disableⁱᵐᵖˡ : val.

Axiom tokenNop__enableⁱᵐᵖˡ : val.

Axiom tokenNop__genTokenPrefixⁱᵐᵖˡ : val.

Axiom tokenNop__infoⁱᵐᵖˡ : val.

Axiom tokenNop__invalidateUserⁱᵐᵖˡ : val.

Axiom jwtOptions__Keyⁱᵐᵖˡ : val.

Axiom jwtOptions__Parseⁱᵐᵖˡ : val.

Axiom jwtOptions__ParseWithDefaultsⁱᵐᵖˡ : val.

Axiom jwtOptions__ecKeyⁱᵐᵖˡ : val.

Axiom jwtOptions__edKeyⁱᵐᵖˡ : val.

Axiom jwtOptions__hmacKeyⁱᵐᵖˡ : val.

Axiom jwtOptions__rsaKeyⁱᵐᵖˡ : val.

Axiom simpleTokenTTLKeeper__addSimpleTokenⁱᵐᵖˡ : val.

Axiom simpleTokenTTLKeeper__deleteSimpleTokenⁱᵐᵖˡ : val.

Axiom simpleTokenTTLKeeper__resetSimpleTokenⁱᵐᵖˡ : val.

Axiom simpleTokenTTLKeeper__runⁱᵐᵖˡ : val.

Axiom simpleTokenTTLKeeper__stopⁱᵐᵖˡ : val.

Axiom tokenSimple__assignⁱᵐᵖˡ : val.

Axiom tokenSimple__assignSimpleTokenToUserⁱᵐᵖˡ : val.

Axiom tokenSimple__disableⁱᵐᵖˡ : val.

Axiom tokenSimple__enableⁱᵐᵖˡ : val.

Axiom tokenSimple__genTokenPrefixⁱᵐᵖˡ : val.

Axiom tokenSimple__infoⁱᵐᵖˡ : val.

Axiom tokenSimple__invalidateUserⁱᵐᵖˡ : val.

Axiom tokenSimple__isValidSimpleTokenⁱᵐᵖˡ : val.

Axiom authStore__AuthDisableⁱᵐᵖˡ : val.

Axiom authStore__AuthEnableⁱᵐᵖˡ : val.

Axiom authStore__AuthInfoFromCtxⁱᵐᵖˡ : val.

Axiom authStore__AuthInfoFromTLSⁱᵐᵖˡ : val.

Axiom authStore__Authenticateⁱᵐᵖˡ : val.

Axiom authStore__BcryptCostⁱᵐᵖˡ : val.

Axiom authStore__CheckPasswordⁱᵐᵖˡ : val.

Axiom authStore__Closeⁱᵐᵖˡ : val.

Axiom authStore__GenTokenPrefixⁱᵐᵖˡ : val.

Axiom authStore__HasRoleⁱᵐᵖˡ : val.

Axiom authStore__IsAdminPermittedⁱᵐᵖˡ : val.

Axiom authStore__IsAuthEnabledⁱᵐᵖˡ : val.

Axiom authStore__IsDeleteRangePermittedⁱᵐᵖˡ : val.

Axiom authStore__IsPutPermittedⁱᵐᵖˡ : val.

Axiom authStore__IsRangePermittedⁱᵐᵖˡ : val.

Axiom authStore__Recoverⁱᵐᵖˡ : val.

Axiom authStore__Revisionⁱᵐᵖˡ : val.

Axiom authStore__RoleAddⁱᵐᵖˡ : val.

Axiom authStore__RoleDeleteⁱᵐᵖˡ : val.

Axiom authStore__RoleGetⁱᵐᵖˡ : val.

Axiom authStore__RoleGrantPermissionⁱᵐᵖˡ : val.

Axiom authStore__RoleListⁱᵐᵖˡ : val.

Axiom authStore__RoleRevokePermissionⁱᵐᵖˡ : val.

Axiom authStore__UserAddⁱᵐᵖˡ : val.

Axiom authStore__UserChangePasswordⁱᵐᵖˡ : val.

Axiom authStore__UserDeleteⁱᵐᵖˡ : val.

Axiom authStore__UserGetⁱᵐᵖˡ : val.

Axiom authStore__UserGrantRoleⁱᵐᵖˡ : val.

Axiom authStore__UserListⁱᵐᵖˡ : val.

Axiom authStore__UserRevokeRoleⁱᵐᵖˡ : val.

Axiom authStore__WithRootⁱᵐᵖˡ : val.

Axiom authStore__authInfoFromTokenⁱᵐᵖˡ : val.

Axiom authStore__commitRevisionⁱᵐᵖˡ : val.

Axiom authStore__isOpPermittedⁱᵐᵖˡ : val.

Axiom authStore__isRangeOpPermittedⁱᵐᵖˡ : val.

Axiom authStore__refreshRangePermCacheⁱᵐᵖˡ : val.

Axiom authStore__selectPasswordⁱᵐᵖˡ : val.

Axiom authStore__setRevisionⁱᵐᵖˡ : val.

Axiom authStore__setupMetricsReporterⁱᵐᵖˡ : val.

Axiom permSlice__Lenⁱᵐᵖˡ : val.

Axiom permSlice__Lessⁱᵐᵖˡ : val.

Axiom permSlice__Swapⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(tokenJWT.id, []); (ptrT.id tokenJWT.id, [("assign"%go, tokenJWT__assignⁱᵐᵖˡ); ("disable"%go, tokenJWT__disableⁱᵐᵖˡ); ("enable"%go, tokenJWT__enableⁱᵐᵖˡ); ("genTokenPrefix"%go, tokenJWT__genTokenPrefixⁱᵐᵖˡ); ("info"%go, tokenJWT__infoⁱᵐᵖˡ); ("invalidateUser"%go, tokenJWT__invalidateUserⁱᵐᵖˡ)]); (tokenNop.id, []); (ptrT.id tokenNop.id, [("assign"%go, tokenNop__assignⁱᵐᵖˡ); ("disable"%go, tokenNop__disableⁱᵐᵖˡ); ("enable"%go, tokenNop__enableⁱᵐᵖˡ); ("genTokenPrefix"%go, tokenNop__genTokenPrefixⁱᵐᵖˡ); ("info"%go, tokenNop__infoⁱᵐᵖˡ); ("invalidateUser"%go, tokenNop__invalidateUserⁱᵐᵖˡ)]); (jwtOptions.id, []); (ptrT.id jwtOptions.id, [("Key"%go, jwtOptions__Keyⁱᵐᵖˡ); ("Parse"%go, jwtOptions__Parseⁱᵐᵖˡ); ("ParseWithDefaults"%go, jwtOptions__ParseWithDefaultsⁱᵐᵖˡ); ("ecKey"%go, jwtOptions__ecKeyⁱᵐᵖˡ); ("edKey"%go, jwtOptions__edKeyⁱᵐᵖˡ); ("hmacKey"%go, jwtOptions__hmacKeyⁱᵐᵖˡ); ("rsaKey"%go, jwtOptions__rsaKeyⁱᵐᵖˡ)]); (unifiedRangePermissions.id, []); (ptrT.id unifiedRangePermissions.id, []); (simpleTokenTTLKeeper.id, []); (ptrT.id simpleTokenTTLKeeper.id, [("addSimpleToken"%go, simpleTokenTTLKeeper__addSimpleTokenⁱᵐᵖˡ); ("deleteSimpleToken"%go, simpleTokenTTLKeeper__deleteSimpleTokenⁱᵐᵖˡ); ("resetSimpleToken"%go, simpleTokenTTLKeeper__resetSimpleTokenⁱᵐᵖˡ); ("run"%go, simpleTokenTTLKeeper__runⁱᵐᵖˡ); ("stop"%go, simpleTokenTTLKeeper__stopⁱᵐᵖˡ)]); (tokenSimple.id, []); (ptrT.id tokenSimple.id, [("assign"%go, tokenSimple__assignⁱᵐᵖˡ); ("assignSimpleTokenToUser"%go, tokenSimple__assignSimpleTokenToUserⁱᵐᵖˡ); ("disable"%go, tokenSimple__disableⁱᵐᵖˡ); ("enable"%go, tokenSimple__enableⁱᵐᵖˡ); ("genTokenPrefix"%go, tokenSimple__genTokenPrefixⁱᵐᵖˡ); ("info"%go, tokenSimple__infoⁱᵐᵖˡ); ("invalidateUser"%go, tokenSimple__invalidateUserⁱᵐᵖˡ); ("isValidSimpleToken"%go, tokenSimple__isValidSimpleTokenⁱᵐᵖˡ)]); (AuthInfo.id, []); (ptrT.id AuthInfo.id, []); (AuthenticateParamIndex.id, []); (ptrT.id AuthenticateParamIndex.id, []); (AuthenticateParamSimpleTokenPrefix.id, []); (ptrT.id AuthenticateParamSimpleTokenPrefix.id, []); (authStore.id, []); (ptrT.id authStore.id, [("AuthDisable"%go, authStore__AuthDisableⁱᵐᵖˡ); ("AuthEnable"%go, authStore__AuthEnableⁱᵐᵖˡ); ("AuthInfoFromCtx"%go, authStore__AuthInfoFromCtxⁱᵐᵖˡ); ("AuthInfoFromTLS"%go, authStore__AuthInfoFromTLSⁱᵐᵖˡ); ("Authenticate"%go, authStore__Authenticateⁱᵐᵖˡ); ("BcryptCost"%go, authStore__BcryptCostⁱᵐᵖˡ); ("CheckPassword"%go, authStore__CheckPasswordⁱᵐᵖˡ); ("Close"%go, authStore__Closeⁱᵐᵖˡ); ("GenTokenPrefix"%go, authStore__GenTokenPrefixⁱᵐᵖˡ); ("HasRole"%go, authStore__HasRoleⁱᵐᵖˡ); ("IsAdminPermitted"%go, authStore__IsAdminPermittedⁱᵐᵖˡ); ("IsAuthEnabled"%go, authStore__IsAuthEnabledⁱᵐᵖˡ); ("IsDeleteRangePermitted"%go, authStore__IsDeleteRangePermittedⁱᵐᵖˡ); ("IsPutPermitted"%go, authStore__IsPutPermittedⁱᵐᵖˡ); ("IsRangePermitted"%go, authStore__IsRangePermittedⁱᵐᵖˡ); ("Recover"%go, authStore__Recoverⁱᵐᵖˡ); ("Revision"%go, authStore__Revisionⁱᵐᵖˡ); ("RoleAdd"%go, authStore__RoleAddⁱᵐᵖˡ); ("RoleDelete"%go, authStore__RoleDeleteⁱᵐᵖˡ); ("RoleGet"%go, authStore__RoleGetⁱᵐᵖˡ); ("RoleGrantPermission"%go, authStore__RoleGrantPermissionⁱᵐᵖˡ); ("RoleList"%go, authStore__RoleListⁱᵐᵖˡ); ("RoleRevokePermission"%go, authStore__RoleRevokePermissionⁱᵐᵖˡ); ("UserAdd"%go, authStore__UserAddⁱᵐᵖˡ); ("UserChangePassword"%go, authStore__UserChangePasswordⁱᵐᵖˡ); ("UserDelete"%go, authStore__UserDeleteⁱᵐᵖˡ); ("UserGet"%go, authStore__UserGetⁱᵐᵖˡ); ("UserGrantRole"%go, authStore__UserGrantRoleⁱᵐᵖˡ); ("UserList"%go, authStore__UserListⁱᵐᵖˡ); ("UserRevokeRole"%go, authStore__UserRevokeRoleⁱᵐᵖˡ); ("WithRoot"%go, authStore__WithRootⁱᵐᵖˡ); ("authInfoFromToken"%go, authStore__authInfoFromTokenⁱᵐᵖˡ); ("commitRevision"%go, authStore__commitRevisionⁱᵐᵖˡ); ("isOpPermitted"%go, authStore__isOpPermittedⁱᵐᵖˡ); ("isRangeOpPermitted"%go, authStore__isRangeOpPermittedⁱᵐᵖˡ); ("refreshRangePermCache"%go, authStore__refreshRangePermCacheⁱᵐᵖˡ); ("selectPassword"%go, authStore__selectPasswordⁱᵐᵖˡ); ("setRevision"%go, authStore__setRevisionⁱᵐᵖˡ); ("setupMetricsReporter"%go, authStore__setupMetricsReporterⁱᵐᵖˡ)]); (permSlice.id, [("Len"%go, permSlice__Lenⁱᵐᵖˡ); ("Less"%go, permSlice__Lessⁱᵐᵖˡ); ("Swap"%go, permSlice__Swapⁱᵐᵖˡ)]); (ptrT.id permSlice.id, [("Len"%go, permSlice__Lenⁱᵐᵖˡ); ("Less"%go, permSlice__Lessⁱᵐᵖˡ); ("Swap"%go, permSlice__Swapⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo auth.auth :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #auth.auth (λ: <>,
      exception_do (do:  (package.alloc auth.auth #());;;
      do:  (reportCurrentAuthRev'init #());;;
      do:  (currentAuthRevision'init #());;;
      do:  (knownOptions'init #());;;
      do:  (DefaultTTL'init #());;;
      do:  (simpleTokenTTLDefault'init #());;;
      do:  (simpleTokenTTLResolution'init #());;;
      do:  (rootPerm'init #());;;
      do:  (ErrRootUserNotExist'init #());;;
      do:  (ErrRootRoleNotExist'init #());;;
      do:  (ErrUserAlreadyExist'init #());;;
      do:  (ErrUserEmpty'init #());;;
      do:  (ErrUserNotFound'init #());;;
      do:  (ErrRoleAlreadyExist'init #());;;
      do:  (ErrRoleNotFound'init #());;;
      do:  (ErrRoleEmpty'init #());;;
      do:  (ErrPermissionNotGiven'init #());;;
      do:  (ErrAuthFailed'init #());;;
      do:  (ErrNoPasswordUser'init #());;;
      do:  (ErrPermissionDenied'init #());;;
      do:  (ErrRoleNotGranted'init #());;;
      do:  (ErrPermissionNotGranted'init #());;;
      do:  (ErrAuthNotEnabled'init #());;;
      do:  (ErrAuthOldRevision'init #());;;
      do:  (ErrInvalidAuthToken'init #());;;
      do:  (ErrInvalidAuthOpts'init #());;;
      do:  (ErrInvalidAuthMgmt'init #());;;
      do:  (ErrInvalidAuthMethod'init #());;;
      do:  (ErrMissingKey'init #());;;
      do:  (ErrKeyMismatch'init #());;;
      do:  (ErrVerifyOnly'init #()))
      ).

End code.
End auth.
