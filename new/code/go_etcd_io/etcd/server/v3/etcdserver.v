(* autogenerated from go.etcd.io/etcd/server/v3/etcdserver *)
Require Export New.code.context.
Require Export New.code.github_com.gogo.protobuf.proto.
Require Export New.code.github_com.prometheus.client_golang.prometheus.
Require Export New.code.go_etcd_io.etcd.api.v3.etcdserverpb.
Require Export New.code.go_etcd_io.etcd.pkg.v3.idutil.
Require Export New.code.go_etcd_io.etcd.pkg.v3.traceutil.
Require Export New.code.go_etcd_io.etcd.pkg.v3.wait.
Require Export New.code.go_etcd_io.etcd.server.v3.auth.
Require Export New.code.go_etcd_io.etcd.server.v3.config.
Require Export New.code.go_etcd_io.etcd.server.v3.etcdserver.apply.
Require Export New.code.go_etcd_io.etcd.server.v3.etcdserver.errors.

From New.golang Require Import defn.
Definition etcdserver : go_string := "go.etcd.io/etcd/server/v3/etcdserver".

Module etcdserver.

Module serverVersionAdapter. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.serverVersionAdapter"%go. End serverVersionAdapter.
Module bootstrappedServer. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrappedServer"%go. End bootstrappedServer.
Module bootstrappedStorage. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrappedStorage"%go. End bootstrappedStorage.
Module bootstrappedBackend. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrappedBackend"%go. End bootstrappedBackend.
Module bootstrappedCluster. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrappedCluster"%go. End bootstrappedCluster.
Module bootstrappedRaft. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrappedRaft"%go. End bootstrappedRaft.
Module snapshotMetadata. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.snapshotMetadata"%go. End snapshotMetadata.
Module bootstrappedWAL. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrappedWAL"%go. End bootstrappedWAL.
Module CorruptionChecker. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.CorruptionChecker"%go. End CorruptionChecker.
Module corruptionChecker. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.corruptionChecker"%go. End corruptionChecker.
Module Hasher. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.Hasher"%go. End Hasher.
Module hasherAdapter. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.hasherAdapter"%go. End hasherAdapter.
Module peerInfo. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.peerInfo"%go. End peerInfo.
Module peerHashKVResp. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.peerHashKVResp"%go. End peerHashKVResp.
Module hashKVHandler. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.hashKVHandler"%go. End hashKVHandler.
Module toApply. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.toApply"%go. End toApply.
Module raftNode. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.raftNode"%go. End raftNode.
Module raftNodeConfig. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.raftNodeConfig"%go. End raftNodeConfig.
Module Response. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.Response"%go. End Response.
Module ServerV2. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.ServerV2"%go. End ServerV2.
Module ServerV3. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.ServerV3"%go. End ServerV3.
Module Server. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.Server"%go. End Server.
Module EtcdServer. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.EtcdServer"%go. End EtcdServer.
Module ServerPeer. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.ServerPeer"%go. End ServerPeer.
Module ServerPeerV2. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.ServerPeerV2"%go. End ServerPeerV2.
Module downgradeEnabledHandler. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.downgradeEnabledHandler"%go. End downgradeEnabledHandler.
Module etcdProgress. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.etcdProgress"%go. End etcdProgress.
Module raftReadyHandler. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.raftReadyHandler"%go. End raftReadyHandler.
Module confChangeResponse. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.confChangeResponse"%go. End confChangeResponse.
Module AccessController. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.AccessController"%go. End AccessController.
Module notifier. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.notifier"%go. End notifier.
Module panicAlternativeStringer. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.panicAlternativeStringer"%go. End panicAlternativeStringer.
Module RequestV2. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.RequestV2"%go. End RequestV2.
Module RaftKV. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.RaftKV"%go. End RaftKV.
Module Lessor. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.Lessor"%go. End Lessor.
Module Authenticator. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.Authenticator"%go. End Authenticator.
Module zapRaftLogger. Definition id : go_string := "go.etcd.io/etcd/server/v3/etcdserver.zapRaftLogger"%go. End zapRaftLogger.

Section code.
Context `{ffi_syntax}.


Axiom serverVersionAdapter : go_type.

Definition NewServerVersionAdapter : go_string := "go.etcd.io/etcd/server/v3/etcdserver.NewServerVersionAdapter"%go.

Definition v2ToV3Request : go_string := "go.etcd.io/etcd/server/v3/etcdserver.v2ToV3Request"%go.

Definition bootstrap : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrap"%go.

Axiom bootstrappedServer : go_type.

Axiom bootstrappedStorage : go_type.

Axiom bootstrappedBackend : go_type.

Axiom bootstrappedCluster : go_type.

Axiom bootstrappedRaft : go_type.

Definition bootstrapStorage : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrapStorage"%go.

Definition bootstrapSnapshot : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrapSnapshot"%go.

Definition bootstrapBackend : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrapBackend"%go.

Definition maybeDefragBackend : go_string := "go.etcd.io/etcd/server/v3/etcdserver.maybeDefragBackend"%go.

Definition bootstrapCluster : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrapCluster"%go.

Definition bootstrapExistingClusterNoWAL : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrapExistingClusterNoWAL"%go.

Definition bootstrapNewClusterNoWAL : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrapNewClusterNoWAL"%go.

Definition bootstrapClusterWithWAL : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrapClusterWithWAL"%go.

Definition recoverSnapshot : go_string := "go.etcd.io/etcd/server/v3/etcdserver.recoverSnapshot"%go.

Definition bootstrapRaft : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrapRaft"%go.

Definition bootstrapRaftFromCluster : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrapRaftFromCluster"%go.

Definition bootstrapRaftFromWAL : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrapRaftFromWAL"%go.

Definition raftConfig : go_string := "go.etcd.io/etcd/server/v3/etcdserver.raftConfig"%go.

Definition bootstrapWALFromSnapshot : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrapWALFromSnapshot"%go.

Definition openWALFromSnapshot : go_string := "go.etcd.io/etcd/server/v3/etcdserver.openWALFromSnapshot"%go.

Axiom snapshotMetadata : go_type.

Definition bootstrapNewWAL : go_string := "go.etcd.io/etcd/server/v3/etcdserver.bootstrapNewWAL"%go.

Axiom bootstrappedWAL : go_type.

Definition isMemberBootstrapped : go_string := "go.etcd.io/etcd/server/v3/etcdserver.isMemberBootstrapped"%go.

Definition GetClusterFromRemotePeers : go_string := "go.etcd.io/etcd/server/v3/etcdserver.GetClusterFromRemotePeers"%go.

Definition getClusterFromRemotePeers : go_string := "go.etcd.io/etcd/server/v3/etcdserver.getClusterFromRemotePeers"%go.

Definition getRemotePeerURLs : go_string := "go.etcd.io/etcd/server/v3/etcdserver.getRemotePeerURLs"%go.

Definition getMembersVersions : go_string := "go.etcd.io/etcd/server/v3/etcdserver.getMembersVersions"%go.

Definition allowedVersionRange : go_string := "go.etcd.io/etcd/server/v3/etcdserver.allowedVersionRange"%go.

Definition isCompatibleWithCluster : go_string := "go.etcd.io/etcd/server/v3/etcdserver.isCompatibleWithCluster"%go.

Definition isCompatibleWithVers : go_string := "go.etcd.io/etcd/server/v3/etcdserver.isCompatibleWithVers"%go.

Definition getVersion : go_string := "go.etcd.io/etcd/server/v3/etcdserver.getVersion"%go.

Definition promoteMemberHTTP : go_string := "go.etcd.io/etcd/server/v3/etcdserver.promoteMemberHTTP"%go.

Definition getDowngradeEnabledFromRemotePeers : go_string := "go.etcd.io/etcd/server/v3/etcdserver.getDowngradeEnabledFromRemotePeers"%go.

Definition getDowngradeEnabled : go_string := "go.etcd.io/etcd/server/v3/etcdserver.getDowngradeEnabled"%go.

Definition convertToClusterVersion : go_string := "go.etcd.io/etcd/server/v3/etcdserver.convertToClusterVersion"%go.

Definition GetMembershipInfoInV2Format : go_string := "go.etcd.io/etcd/server/v3/etcdserver.GetMembershipInfoInV2Format"%go.

Axiom CorruptionChecker : go_type.

Axiom corruptionChecker : go_type.

Axiom Hasher : go_type.

Definition newCorruptionChecker : go_string := "go.etcd.io/etcd/server/v3/etcdserver.newCorruptionChecker"%go.

Axiom hasherAdapter : go_type.

Axiom peerInfo : go_type.

Axiom peerHashKVResp : go_type.

Axiom PeerHashKVPath : go_string.

Axiom hashKVHandler : go_type.

Definition HashByRev : go_string := "go.etcd.io/etcd/server/v3/etcdserver.HashByRev"%go.

Definition hasLeader : go_string := "go.etcd.io/etcd/server/v3/etcdserver.hasLeader"%go.

Axiom hasLeader'init : val.

Definition isLeader : go_string := "go.etcd.io/etcd/server/v3/etcdserver.isLeader"%go.

Axiom isLeader'init : val.

Definition leaderChanges : go_string := "go.etcd.io/etcd/server/v3/etcdserver.leaderChanges"%go.

Axiom leaderChanges'init : val.

Definition learnerPromoteFailed : go_string := "go.etcd.io/etcd/server/v3/etcdserver.learnerPromoteFailed"%go.

Axiom learnerPromoteFailed'init : val.

Definition learnerPromoteSucceed : go_string := "go.etcd.io/etcd/server/v3/etcdserver.learnerPromoteSucceed"%go.

Axiom learnerPromoteSucceed'init : val.

Definition heartbeatSendFailures : go_string := "go.etcd.io/etcd/server/v3/etcdserver.heartbeatSendFailures"%go.

Axiom heartbeatSendFailures'init : val.

Definition applySnapshotInProgress : go_string := "go.etcd.io/etcd/server/v3/etcdserver.applySnapshotInProgress"%go.

Axiom applySnapshotInProgress'init : val.

Definition proposalsCommitted : go_string := "go.etcd.io/etcd/server/v3/etcdserver.proposalsCommitted"%go.

Axiom proposalsCommitted'init : val.

Definition proposalsApplied : go_string := "go.etcd.io/etcd/server/v3/etcdserver.proposalsApplied"%go.

Axiom proposalsApplied'init : val.

Definition proposalsPending : go_string := "go.etcd.io/etcd/server/v3/etcdserver.proposalsPending"%go.

Axiom proposalsPending'init : val.

Definition proposalsFailed : go_string := "go.etcd.io/etcd/server/v3/etcdserver.proposalsFailed"%go.

Axiom proposalsFailed'init : val.

Definition slowReadIndex : go_string := "go.etcd.io/etcd/server/v3/etcdserver.slowReadIndex"%go.

Axiom slowReadIndex'init : val.

Definition readIndexFailed : go_string := "go.etcd.io/etcd/server/v3/etcdserver.readIndexFailed"%go.

Axiom readIndexFailed'init : val.

Definition leaseExpired : go_string := "go.etcd.io/etcd/server/v3/etcdserver.leaseExpired"%go.

Axiom leaseExpired'init : val.

Definition currentVersion : go_string := "go.etcd.io/etcd/server/v3/etcdserver.currentVersion"%go.

Axiom currentVersion'init : val.

Definition currentGoVersion : go_string := "go.etcd.io/etcd/server/v3/etcdserver.currentGoVersion"%go.

Axiom currentGoVersion'init : val.

Definition serverID : go_string := "go.etcd.io/etcd/server/v3/etcdserver.serverID"%go.

Axiom serverID'init : val.

Definition fdUsed : go_string := "go.etcd.io/etcd/server/v3/etcdserver.fdUsed"%go.

Axiom fdUsed'init : val.

Definition fdLimit : go_string := "go.etcd.io/etcd/server/v3/etcdserver.fdLimit"%go.

Axiom fdLimit'init : val.

Definition init : go_string := "go.etcd.io/etcd/server/v3/etcdserver.init"%go.

Definition monitorFileDescriptor : go_string := "go.etcd.io/etcd/server/v3/etcdserver.monitorFileDescriptor"%go.

Axiom maxSizePerMsg : Z.

Axiom maxInflightMsgs : Z.

Definition raftStatusMu : go_string := "go.etcd.io/etcd/server/v3/etcdserver.raftStatusMu"%go.

Definition raftStatus : go_string := "go.etcd.io/etcd/server/v3/etcdserver.raftStatus"%go.

Axiom toApply : go_type.

Axiom raftNode : go_type.

Axiom raftNodeConfig : go_type.

Definition newRaftNode : go_string := "go.etcd.io/etcd/server/v3/etcdserver.newRaftNode"%go.

Definition updateCommittedIndex : go_string := "go.etcd.io/etcd/server/v3/etcdserver.updateCommittedIndex"%go.

Axiom DefaultSnapshotCount : Z.

Axiom DefaultSnapshotCatchUpEntries : expr.

Axiom StoreClusterPrefix : go_string.

Axiom StoreKeysPrefix : go_string.

Axiom HealthInterval : expr.

Axiom purgeFileInterval : expr.

Axiom maxInFlightMsgSnap : Z.

Axiom releaseDelayAfterSnapshot : expr.

Axiom maxPendingRevokes : Z.

Axiom recommendedMaxRequestBytes : Z.

Axiom readyPercentThreshold : expr.

Axiom DowngradeEnabledPath : go_string.

Axiom memorySnapshotCount : Z.

Definition monitorVersionInterval : go_string := "go.etcd.io/etcd/server/v3/etcdserver.monitorVersionInterval"%go.

Axiom monitorVersionInterval'init : val.

Definition recommendedMaxRequestBytesString : go_string := "go.etcd.io/etcd/server/v3/etcdserver.recommendedMaxRequestBytesString"%go.

Axiom recommendedMaxRequestBytesString'init : val.

Definition storeMemberAttributeRegexp : go_string := "go.etcd.io/etcd/server/v3/etcdserver.storeMemberAttributeRegexp"%go.

Axiom storeMemberAttributeRegexp'init : val.

Axiom Response : go_type.

Axiom ServerV2 : go_type.

Axiom ServerV3 : go_type.

Axiom Server : go_type.

Axiom EtcdServer : go_type.

Definition NewServer : go_string := "go.etcd.io/etcd/server/v3/etcdserver.NewServer"%go.

Definition tickToDur : go_string := "go.etcd.io/etcd/server/v3/etcdserver.tickToDur"%go.

Axiom ServerPeer : go_type.

Axiom ServerPeerV2 : go_type.

Axiom downgradeEnabledHandler : go_type.

Axiom etcdProgress : go_type.

Axiom raftReadyHandler : go_type.

Definition verifySnapshotIndex : go_string := "go.etcd.io/etcd/server/v3/etcdserver.verifySnapshotIndex"%go.

Definition verifyConsistentIndexIsLatest : go_string := "go.etcd.io/etcd/server/v3/etcdserver.verifyConsistentIndexIsLatest"%go.

Axiom confChangeResponse : go_type.

Definition noSideEffect : go_string := "go.etcd.io/etcd/server/v3/etcdserver.noSideEffect"%go.

Definition removeNeedlessRangeReqs : go_string := "go.etcd.io/etcd/server/v3/etcdserver.removeNeedlessRangeReqs"%go.

Axiom AccessController : go_type.

Definition NewAccessController : go_string := "go.etcd.io/etcd/server/v3/etcdserver.NewAccessController"%go.

Definition newSnapshotReaderCloser : go_string := "go.etcd.io/etcd/server/v3/etcdserver.newSnapshotReaderCloser"%go.

Definition isConnectedToQuorumSince : go_string := "go.etcd.io/etcd/server/v3/etcdserver.isConnectedToQuorumSince"%go.

Definition isConnectedSince : go_string := "go.etcd.io/etcd/server/v3/etcdserver.isConnectedSince"%go.

Definition isConnectedFullySince : go_string := "go.etcd.io/etcd/server/v3/etcdserver.isConnectedFullySince"%go.

Definition numConnectedSince : go_string := "go.etcd.io/etcd/server/v3/etcdserver.numConnectedSince"%go.

Definition longestConnected : go_string := "go.etcd.io/etcd/server/v3/etcdserver.longestConnected"%go.

Axiom notifier : go_type.

Definition newNotifier : go_string := "go.etcd.io/etcd/server/v3/etcdserver.newNotifier"%go.

Axiom panicAlternativeStringer : go_type.

Axiom RequestV2 : go_type.

Axiom maxGapBetweenApplyAndCommitIndex : Z.

Axiom traceThreshold : expr.

Axiom readIndexRetryTime : expr.

Axiom applyTimeout : expr.

Axiom RaftKV : go_type.

Axiom Lessor : go_type.

Axiom Authenticator : go_type.

(* go: v3_server.go:143:22 *)
Definition EtcdServer__Putⁱᵐᵖˡ : val :=
  λ: "s" "ctx" "r",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "r" := (mem.alloc "r") in
    let: "ctx" := (mem.alloc "ctx") in
    let: "$r0" := (let: "$a0" := (![#context.Context] "ctx") in
    let: "$a1" := (interface.make #traceutil.StartTimeKey.id (struct.make #traceutil.StartTimeKey [{
    }])) in
    let: "$a2" := (interface.make #time.Time.id ((func_call #time.Now) #())) in
    (func_call #context.WithValue) "$a0" "$a1" "$a2") in
    do:  ("ctx" <-[#context.Context] "$r0");;;
    let: "err" := (mem.alloc (type.zero_val #error)) in
    let: "resp" := (mem.alloc (type.zero_val #proto.Message)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#context.Context] "ctx") in
    let: "$a1" := (let: "$Put" := (![#ptrT] "r") in
    struct.make #etcdserverpb.InternalRaftRequest [{
      "Header" ::= type.zero_val #ptrT;
      "ID" ::= type.zero_val #uint64T;
      "V2" ::= type.zero_val #ptrT;
      "Range" ::= type.zero_val #ptrT;
      "Put" ::= "$Put";
      "DeleteRange" ::= type.zero_val #ptrT;
      "Txn" ::= type.zero_val #ptrT;
      "Compaction" ::= type.zero_val #ptrT;
      "LeaseGrant" ::= type.zero_val #ptrT;
      "LeaseRevoke" ::= type.zero_val #ptrT;
      "Alarm" ::= type.zero_val #ptrT;
      "LeaseCheckpoint" ::= type.zero_val #ptrT;
      "AuthEnable" ::= type.zero_val #ptrT;
      "AuthDisable" ::= type.zero_val #ptrT;
      "AuthStatus" ::= type.zero_val #ptrT;
      "Authenticate" ::= type.zero_val #ptrT;
      "AuthUserAdd" ::= type.zero_val #ptrT;
      "AuthUserDelete" ::= type.zero_val #ptrT;
      "AuthUserGet" ::= type.zero_val #ptrT;
      "AuthUserChangePassword" ::= type.zero_val #ptrT;
      "AuthUserGrantRole" ::= type.zero_val #ptrT;
      "AuthUserRevokeRole" ::= type.zero_val #ptrT;
      "AuthUserList" ::= type.zero_val #ptrT;
      "AuthRoleList" ::= type.zero_val #ptrT;
      "AuthRoleAdd" ::= type.zero_val #ptrT;
      "AuthRoleDelete" ::= type.zero_val #ptrT;
      "AuthRoleGet" ::= type.zero_val #ptrT;
      "AuthRoleGrantPermission" ::= type.zero_val #ptrT;
      "AuthRoleRevokePermission" ::= type.zero_val #ptrT;
      "ClusterVersionSet" ::= type.zero_val #ptrT;
      "ClusterMemberAttrSet" ::= type.zero_val #ptrT;
      "DowngradeInfoSet" ::= type.zero_val #ptrT;
      "XXX_NoUnkeyedLiteral" ::= type.zero_val (type.structT [
      ]);
      "XXX_unrecognized" ::= type.zero_val #sliceT;
      "XXX_sizecache" ::= type.zero_val #int32T
    }]) in
    (method_call #(ptrT.id EtcdServer.id) #"raftRequest"%go (![#ptrT] "s")) "$a0" "$a1") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("resp" <-[#proto.Message] "$r0");;;
    do:  ("err" <-[#error] "$r1");;;
    (if: (~ (interface.eq (![#error] "err") #interface.nil))
    then return: (#null, ![#error] "err")
    else do:  #());;;
    return: (interface.type_assert (![#proto.Message] "resp") #(ptrT.id etcdserverpb.PutResponse.id), #interface.nil)).

(* go: v3_server.go:738:22 *)
Definition EtcdServer__processInternalRaftRequestOnceⁱᵐᵖˡ : val :=
  λ: "s" "ctx" "r",
    with_defer: (let: "s" := (mem.alloc "s") in
    let: "r" := (mem.alloc "r") in
    let: "ctx" := (mem.alloc "ctx") in
    let: "ai" := (mem.alloc (type.zero_val #uint64T)) in
    let: "$r0" := ((method_call #(ptrT.id EtcdServer.id) #"getAppliedIndex"%go (![#ptrT] "s")) #()) in
    do:  ("ai" <-[#uint64T] "$r0");;;
    let: "ci" := (mem.alloc (type.zero_val #uint64T)) in
    let: "$r0" := ((method_call #(ptrT.id EtcdServer.id) #"getCommittedIndex"%go (![#ptrT] "s")) #()) in
    do:  ("ci" <-[#uint64T] "$r0");;;
    (if: (![#uint64T] "ci") > ((![#uint64T] "ai") + #(W64 maxGapBetweenApplyAndCommitIndex))
    then return: (#null, ![#error] (globals.get #errors.ErrTooManyRequests))
    else do:  #());;;
    let: "$r0" := (mem.alloc (let: "$ID" := ((method_call #(ptrT.id idutil.Generator.id) #"Next"%go (![#ptrT] (struct.field_ref #EtcdServer #"reqIDGen"%go (![#ptrT] "s")))) #()) in
    struct.make #etcdserverpb.RequestHeader [{
      "ID" ::= "$ID";
      "Username" ::= type.zero_val #stringT;
      "AuthRevision" ::= type.zero_val #uint64T;
      "XXX_NoUnkeyedLiteral" ::= type.zero_val (type.structT [
      ]);
      "XXX_unrecognized" ::= type.zero_val #sliceT;
      "XXX_sizecache" ::= type.zero_val #int32T
    }])) in
    do:  ((struct.field_ref #etcdserverpb.InternalRaftRequest #"Header"%go "r") <-[#ptrT] "$r0");;;
    (if: (![#ptrT] (struct.field_ref #etcdserverpb.InternalRaftRequest #"Authenticate"%go "r")) = #null
    then
      let: "err" := (mem.alloc (type.zero_val #error)) in
      let: "authInfo" := (mem.alloc (type.zero_val #ptrT)) in
      let: ("$ret0", "$ret1") := (let: "$a0" := (![#context.Context] "ctx") in
      (method_call #(ptrT.id EtcdServer.id) #"AuthInfoFromCtx"%go (![#ptrT] "s")) "$a0") in
      let: "$r0" := "$ret0" in
      let: "$r1" := "$ret1" in
      do:  ("authInfo" <-[#ptrT] "$r0");;;
      do:  ("err" <-[#error] "$r1");;;
      (if: (~ (interface.eq (![#error] "err") #interface.nil))
      then return: (#null, ![#error] "err")
      else do:  #());;;
      (if: (![#ptrT] "authInfo") ≠ #null
      then
        let: "$r0" := (![#stringT] (struct.field_ref #auth.AuthInfo #"Username"%go (![#ptrT] "authInfo"))) in
        do:  ((struct.field_ref #etcdserverpb.RequestHeader #"Username"%go (![#ptrT] (struct.field_ref #etcdserverpb.InternalRaftRequest #"Header"%go "r"))) <-[#stringT] "$r0");;;
        let: "$r0" := (![#uint64T] (struct.field_ref #auth.AuthInfo #"Revision"%go (![#ptrT] "authInfo"))) in
        do:  ((struct.field_ref #etcdserverpb.RequestHeader #"AuthRevision"%go (![#ptrT] (struct.field_ref #etcdserverpb.InternalRaftRequest #"Header"%go "r"))) <-[#uint64T] "$r0")
      else do:  #())
    else do:  #());;;
    let: "err" := (mem.alloc (type.zero_val #error)) in
    let: "data" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := ((method_call #(ptrT.id etcdserverpb.InternalRaftRequest.id) #"Marshal"%go "r") #()) in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("data" <-[#sliceT] "$r0");;;
    do:  ("err" <-[#error] "$r1");;;
    (if: (~ (interface.eq (![#error] "err") #interface.nil))
    then return: (#null, ![#error] "err")
    else do:  #());;;
    (if: int_gt (let: "$a0" := (![#sliceT] "data") in
    slice.len "$a0") (u_to_w64 (![#uintT] (struct.field_ref #config.ServerConfig #"MaxRequestBytes"%go (struct.field_ref #EtcdServer #"Cfg"%go (![#ptrT] "s")))))
    then return: (#null, ![#error] (globals.get #errors.ErrRequestTooLarge))
    else do:  #());;;
    let: "id" := (mem.alloc (type.zero_val #uint64T)) in
    let: "$r0" := (![#uint64T] (struct.field_ref #etcdserverpb.InternalRaftRequest #"ID"%go "r")) in
    do:  ("id" <-[#uint64T] "$r0");;;
    (if: (![#uint64T] "id") = #(W64 0)
    then
      let: "$r0" := (![#uint64T] (struct.field_ref #etcdserverpb.RequestHeader #"ID"%go (![#ptrT] (struct.field_ref #etcdserverpb.InternalRaftRequest #"Header"%go "r")))) in
      do:  ("id" <-[#uint64T] "$r0")
    else do:  #());;;
    let: "ch" := (mem.alloc (type.zero_val (type.chanT #interfaceT))) in
    let: "$r0" := (let: "$a0" := (![#uint64T] "id") in
    (interface.get #"Register"%go (![#wait.Wait] (struct.field_ref #EtcdServer #"w"%go (![#ptrT] "s")))) "$a0") in
    do:  ("ch" <-[type.chanT #interfaceT] "$r0");;;
    let: "cancel" := (mem.alloc (type.zero_val #context.CancelFunc)) in
    let: "cctx" := (mem.alloc (type.zero_val #context.Context)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#context.Context] "ctx") in
    let: "$a1" := ((method_call #(ptrT.id config.ServerConfig.id) #"ReqTimeout"%go (struct.field_ref #EtcdServer #"Cfg"%go (![#ptrT] "s"))) #()) in
    (func_call #context.WithTimeout) "$a0" "$a1") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("cctx" <-[#context.Context] "$r0");;;
    do:  ("cancel" <-[#context.CancelFunc] "$r1");;;
    do:  (let: "$f" := (![#context.CancelFunc] "cancel") in
    "$defer" <-[#funcT] (let: "$oldf" := (![#funcT] "$defer") in
    (λ: <>,
      "$f" #();;
      "$oldf" #()
      )));;;
    let: "start" := (mem.alloc (type.zero_val #time.Time)) in
    let: "$r0" := ((func_call #time.Now) #()) in
    do:  ("start" <-[#time.Time] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#context.Context] "cctx") in
    let: "$a1" := (![#sliceT] "data") in
    (method_call #raftNode.id #"Propose"%go (![#raftNode] (struct.field_ref #EtcdServer #"r"%go (![#ptrT] "s")))) "$a0" "$a1") in
    do:  ("err" <-[#error] "$r0");;;
    (if: (~ (interface.eq (![#error] "err") #interface.nil))
    then
      do:  ((interface.get #"Inc"%go (![#prometheus.Counter] (globals.get #proposalsFailed))) #());;;
      do:  (let: "$a0" := (![#uint64T] "id") in
      let: "$a1" := #interface.nil in
      (interface.get #"Trigger"%go (![#wait.Wait] (struct.field_ref #EtcdServer #"w"%go (![#ptrT] "s")))) "$a0" "$a1");;;
      return: (#null, ![#error] "err")
    else do:  #());;;
    do:  ((interface.get #"Inc"%go (![#prometheus.Gauge] (globals.get #proposalsPending))) #());;;
    do:  (let: "$f" := (interface.get #"Dec"%go (![#prometheus.Gauge] (globals.get #proposalsPending))) in
    "$defer" <-[#funcT] (let: "$oldf" := (![#funcT] "$defer") in
    (λ: <>,
      "$f" #();;
      "$oldf" #()
      )));;;
    chan.select [chan.select_receive (![type.chanT #interfaceT] "ch") (λ: "$recvVal",
       let: "x" := (mem.alloc (type.zero_val #interfaceT)) in
       let: "$r0" := (Fst "$recvVal") in
       do:  ("x" <-[#interfaceT] "$r0");;;
       return: (interface.type_assert (![#interfaceT] "x") #(ptrT.id apply.Result.id), #interface.nil)
       ); chan.select_receive ((interface.get #"Done"%go (![#context.Context] "cctx")) #()) (λ: "$recvVal",
       do:  ((interface.get #"Inc"%go (![#prometheus.Counter] (globals.get #proposalsFailed))) #());;;
       do:  (let: "$a0" := (![#uint64T] "id") in
       let: "$a1" := #interface.nil in
       (interface.get #"Trigger"%go (![#wait.Wait] (struct.field_ref #EtcdServer #"w"%go (![#ptrT] "s")))) "$a0" "$a1");;;
       return: (#null, let: "$a0" := ((interface.get #"Err"%go (![#context.Context] "cctx")) #()) in
        let: "$a1" := (![#time.Time] "start") in
        (method_call #(ptrT.id EtcdServer.id) #"parseProposeCtxErr"%go (![#ptrT] "s")) "$a0" "$a1")
       ); chan.select_receive (![type.chanT (type.structT [
     ])] (struct.field_ref #EtcdServer #"done"%go (![#ptrT] "s"))) (λ: "$recvVal",
       return: (#null, ![#error] (globals.get #errors.ErrStopped))
       )] chan.select_no_default).

Definition isStopped : go_string := "go.etcd.io/etcd/server/v3/etcdserver.isStopped"%go.

Definition uint64ToBigEndianBytes : go_string := "go.etcd.io/etcd/server/v3/etcdserver.uint64ToBigEndianBytes"%go.

Definition NewRaftLogger : go_string := "go.etcd.io/etcd/server/v3/etcdserver.NewRaftLogger"%go.

Definition NewRaftLoggerZap : go_string := "go.etcd.io/etcd/server/v3/etcdserver.NewRaftLoggerZap"%go.

Definition NewRaftLoggerFromZapCore : go_string := "go.etcd.io/etcd/server/v3/etcdserver.NewRaftLoggerFromZapCore"%go.

Axiom zapRaftLogger : go_type.

Definition vars' : list (go_string * go_type) := [].

Axiom NewServerVersionAdapterⁱᵐᵖˡ : val.

Axiom v2ToV3Requestⁱᵐᵖˡ : val.

Axiom bootstrapⁱᵐᵖˡ : val.

Axiom bootstrapStorageⁱᵐᵖˡ : val.

Axiom bootstrapSnapshotⁱᵐᵖˡ : val.

Axiom bootstrapBackendⁱᵐᵖˡ : val.

Axiom maybeDefragBackendⁱᵐᵖˡ : val.

Axiom bootstrapClusterⁱᵐᵖˡ : val.

Axiom bootstrapExistingClusterNoWALⁱᵐᵖˡ : val.

Axiom bootstrapNewClusterNoWALⁱᵐᵖˡ : val.

Axiom bootstrapClusterWithWALⁱᵐᵖˡ : val.

Axiom recoverSnapshotⁱᵐᵖˡ : val.

Axiom bootstrapRaftⁱᵐᵖˡ : val.

Axiom bootstrapRaftFromClusterⁱᵐᵖˡ : val.

Axiom bootstrapRaftFromWALⁱᵐᵖˡ : val.

Axiom raftConfigⁱᵐᵖˡ : val.

Axiom bootstrapWALFromSnapshotⁱᵐᵖˡ : val.

Axiom openWALFromSnapshotⁱᵐᵖˡ : val.

Axiom bootstrapNewWALⁱᵐᵖˡ : val.

Axiom isMemberBootstrappedⁱᵐᵖˡ : val.

Axiom GetClusterFromRemotePeersⁱᵐᵖˡ : val.

Axiom getClusterFromRemotePeersⁱᵐᵖˡ : val.

Axiom getRemotePeerURLsⁱᵐᵖˡ : val.

Axiom getMembersVersionsⁱᵐᵖˡ : val.

Axiom allowedVersionRangeⁱᵐᵖˡ : val.

Axiom isCompatibleWithClusterⁱᵐᵖˡ : val.

Axiom isCompatibleWithVersⁱᵐᵖˡ : val.

Axiom getVersionⁱᵐᵖˡ : val.

Axiom promoteMemberHTTPⁱᵐᵖˡ : val.

Axiom getDowngradeEnabledFromRemotePeersⁱᵐᵖˡ : val.

Axiom getDowngradeEnabledⁱᵐᵖˡ : val.

Axiom convertToClusterVersionⁱᵐᵖˡ : val.

Axiom GetMembershipInfoInV2Formatⁱᵐᵖˡ : val.

Axiom newCorruptionCheckerⁱᵐᵖˡ : val.

Axiom HashByRevⁱᵐᵖˡ : val.

Axiom monitorFileDescriptorⁱᵐᵖˡ : val.

Axiom newRaftNodeⁱᵐᵖˡ : val.

Axiom updateCommittedIndexⁱᵐᵖˡ : val.

Axiom NewServerⁱᵐᵖˡ : val.

Axiom tickToDurⁱᵐᵖˡ : val.

Axiom verifySnapshotIndexⁱᵐᵖˡ : val.

Axiom verifyConsistentIndexIsLatestⁱᵐᵖˡ : val.

Axiom noSideEffectⁱᵐᵖˡ : val.

Axiom removeNeedlessRangeReqsⁱᵐᵖˡ : val.

Axiom NewAccessControllerⁱᵐᵖˡ : val.

Axiom newSnapshotReaderCloserⁱᵐᵖˡ : val.

Axiom isConnectedToQuorumSinceⁱᵐᵖˡ : val.

Axiom isConnectedSinceⁱᵐᵖˡ : val.

Axiom isConnectedFullySinceⁱᵐᵖˡ : val.

Axiom numConnectedSinceⁱᵐᵖˡ : val.

Axiom longestConnectedⁱᵐᵖˡ : val.

Axiom newNotifierⁱᵐᵖˡ : val.

Axiom isStoppedⁱᵐᵖˡ : val.

Axiom uint64ToBigEndianBytesⁱᵐᵖˡ : val.

Axiom NewRaftLoggerⁱᵐᵖˡ : val.

Axiom NewRaftLoggerZapⁱᵐᵖˡ : val.

Axiom NewRaftLoggerFromZapCoreⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(NewServerVersionAdapter, NewServerVersionAdapterⁱᵐᵖˡ); (v2ToV3Request, v2ToV3Requestⁱᵐᵖˡ); (bootstrap, bootstrapⁱᵐᵖˡ); (bootstrapStorage, bootstrapStorageⁱᵐᵖˡ); (bootstrapSnapshot, bootstrapSnapshotⁱᵐᵖˡ); (bootstrapBackend, bootstrapBackendⁱᵐᵖˡ); (maybeDefragBackend, maybeDefragBackendⁱᵐᵖˡ); (bootstrapCluster, bootstrapClusterⁱᵐᵖˡ); (bootstrapExistingClusterNoWAL, bootstrapExistingClusterNoWALⁱᵐᵖˡ); (bootstrapNewClusterNoWAL, bootstrapNewClusterNoWALⁱᵐᵖˡ); (bootstrapClusterWithWAL, bootstrapClusterWithWALⁱᵐᵖˡ); (recoverSnapshot, recoverSnapshotⁱᵐᵖˡ); (bootstrapRaft, bootstrapRaftⁱᵐᵖˡ); (bootstrapRaftFromCluster, bootstrapRaftFromClusterⁱᵐᵖˡ); (bootstrapRaftFromWAL, bootstrapRaftFromWALⁱᵐᵖˡ); (raftConfig, raftConfigⁱᵐᵖˡ); (bootstrapWALFromSnapshot, bootstrapWALFromSnapshotⁱᵐᵖˡ); (openWALFromSnapshot, openWALFromSnapshotⁱᵐᵖˡ); (bootstrapNewWAL, bootstrapNewWALⁱᵐᵖˡ); (isMemberBootstrapped, isMemberBootstrappedⁱᵐᵖˡ); (GetClusterFromRemotePeers, GetClusterFromRemotePeersⁱᵐᵖˡ); (getClusterFromRemotePeers, getClusterFromRemotePeersⁱᵐᵖˡ); (getRemotePeerURLs, getRemotePeerURLsⁱᵐᵖˡ); (getMembersVersions, getMembersVersionsⁱᵐᵖˡ); (allowedVersionRange, allowedVersionRangeⁱᵐᵖˡ); (isCompatibleWithCluster, isCompatibleWithClusterⁱᵐᵖˡ); (isCompatibleWithVers, isCompatibleWithVersⁱᵐᵖˡ); (getVersion, getVersionⁱᵐᵖˡ); (promoteMemberHTTP, promoteMemberHTTPⁱᵐᵖˡ); (getDowngradeEnabledFromRemotePeers, getDowngradeEnabledFromRemotePeersⁱᵐᵖˡ); (getDowngradeEnabled, getDowngradeEnabledⁱᵐᵖˡ); (convertToClusterVersion, convertToClusterVersionⁱᵐᵖˡ); (GetMembershipInfoInV2Format, GetMembershipInfoInV2Formatⁱᵐᵖˡ); (newCorruptionChecker, newCorruptionCheckerⁱᵐᵖˡ); (HashByRev, HashByRevⁱᵐᵖˡ); (monitorFileDescriptor, monitorFileDescriptorⁱᵐᵖˡ); (newRaftNode, newRaftNodeⁱᵐᵖˡ); (updateCommittedIndex, updateCommittedIndexⁱᵐᵖˡ); (NewServer, NewServerⁱᵐᵖˡ); (tickToDur, tickToDurⁱᵐᵖˡ); (verifySnapshotIndex, verifySnapshotIndexⁱᵐᵖˡ); (verifyConsistentIndexIsLatest, verifyConsistentIndexIsLatestⁱᵐᵖˡ); (noSideEffect, noSideEffectⁱᵐᵖˡ); (removeNeedlessRangeReqs, removeNeedlessRangeReqsⁱᵐᵖˡ); (NewAccessController, NewAccessControllerⁱᵐᵖˡ); (newSnapshotReaderCloser, newSnapshotReaderCloserⁱᵐᵖˡ); (isConnectedToQuorumSince, isConnectedToQuorumSinceⁱᵐᵖˡ); (isConnectedSince, isConnectedSinceⁱᵐᵖˡ); (isConnectedFullySince, isConnectedFullySinceⁱᵐᵖˡ); (numConnectedSince, numConnectedSinceⁱᵐᵖˡ); (longestConnected, longestConnectedⁱᵐᵖˡ); (newNotifier, newNotifierⁱᵐᵖˡ); (isStopped, isStoppedⁱᵐᵖˡ); (uint64ToBigEndianBytes, uint64ToBigEndianBytesⁱᵐᵖˡ); (NewRaftLogger, NewRaftLoggerⁱᵐᵖˡ); (NewRaftLoggerZap, NewRaftLoggerZapⁱᵐᵖˡ); (NewRaftLoggerFromZapCore, NewRaftLoggerFromZapCoreⁱᵐᵖˡ)].

Axiom serverVersionAdapter__AddMemberⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Alarmⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Alarmsⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__AppliedIndexⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__ApplyWaitⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__AuthDisableⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__AuthEnableⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__AuthInfoFromCtxⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__AuthStatusⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__AuthStoreⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Authenticateⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Backendⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Cleanupⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__ClientCertAuthEnabledⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Clusterⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__ClusterVersionⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__CommittedIndexⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Compactⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Configⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__CorruptionCheckerⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__CutPeerⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__DeleteRangeⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Downgradeⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__DowngradeCancelⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__DowngradeEnableⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__DowngradeEnabledHandlerⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__DowngradeInfoⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__FeatureEnabledⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__FirstCommitInTermNotifyⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__ForceSnapshotⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__GetClusterVersionⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__GetDowngradeInfoⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__GetMembersVersionsⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__GetStorageVersionⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__GoAttachⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__HardStopⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__HashKVHandlerⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__IsHostWhitelistedⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__IsIDRemovedⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__IsLearnerⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__IsMemberExistⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__KVⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Leadⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Leaderⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__LeaderChangedNotifyⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__LeaseGrantⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__LeaseHandlerⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__LeaseLeasesⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__LeaseRenewⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__LeaseRevokeⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__LeaseTimeToLiveⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__LinearizableReadNotifyⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Loggerⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__MemberIDⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__MemberIdⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__MendPeerⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__MoveLeaderⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__NewUberApplierⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__OriginAllowedⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__PauseSendingⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Processⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__PromoteMemberⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Putⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__RaftHandlerⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Rangeⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__ReadyNotifyⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__RemoveMemberⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__ReportSnapshotⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__ReportUnreachableⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__ResumeSendingⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__RoleAddⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__RoleDeleteⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__RoleGetⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__RoleGrantPermissionⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__RoleListⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__RoleRevokePermissionⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Startⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Stopⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__StopNotifyⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__StoppingNotifyⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__StorageVersionⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Termⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__TryTransferLeadershipOnShutdownⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Txnⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__UpdateClusterVersionⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__UpdateMemberⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__UpdateStorageVersionⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__UserAddⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__UserChangePasswordⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__UserDeleteⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__UserGetⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__UserGrantRoleⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__UserListⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__UserRevokeRoleⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Versionⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__Watchableⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__adjustTicksⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__applyⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__applyAllⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__applyConfChangeⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__applyEntriesⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__applyEntryNormalⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__applyInternalRaftRequestⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__applySnapshotⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__checkLeaseTimeToLiveⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__checkMembershipOperationPermissionⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__compactRaftLogⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__configureⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__createMergedSnapshotMessageⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__doSerializeⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__downgradeCancelⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__downgradeEnableⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__downgradeValidateⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__ensureLeadershipⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__getAppliedIndexⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__getCommittedIndexⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__getLeadⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__getPeerHashKVsⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__getTermⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__getTxPostLockInsideApplyHookⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__hasMultipleVotingMembersⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__isActiveⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__isLeaderⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__isLearnerReadyⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__leaseTimeToLiveⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__linearizableReadLoopⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__linearizableReadNotifyⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__mayAddMemberⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__mayPromoteMemberⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__mayRemoveMemberⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__monitorClusterVersionsⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__monitorCompactHashⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__monitorDowngradeⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__monitorKVHashⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__monitorStorageVersionⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__newHeaderⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__parseProposeCtxErrⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__processInternalRaftRequestOnceⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__promoteMemberⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__publishV3ⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__purgeFileⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__raftRequestⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__raftRequestOnceⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__raftStatusⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__requestCurrentIndexⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__restoreAlarmsⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__revokeExpiredLeasesⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__runⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__sendMergedSnapⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__sendReadIndexⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__setAppliedIndexⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__setCommittedIndexⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__setLeadⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__setTermⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__shouldSnapshotToDiskⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__shouldSnapshotToMemoryⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__snapshotⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__snapshotIfNeededAndCompactRaftLogⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__startⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__stopWithDelayⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__triggerCorruptAlarmⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__updateClusterVersionV3ⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__waitAppliedIndexⁱᵐᵖˡ : val.

Axiom serverVersionAdapter__waitLeaderⁱᵐᵖˡ : val.

Axiom bootstrappedServer__Closeⁱᵐᵖˡ : val.

Axiom bootstrappedStorage__Closeⁱᵐᵖˡ : val.

Axiom bootstrappedBackend__Closeⁱᵐᵖˡ : val.

Axiom bootstrappedCluster__Finalizeⁱᵐᵖˡ : val.

Axiom bootstrappedCluster__databaseFileMissingⁱᵐᵖˡ : val.

Axiom bootstrappedRaft__newRaftNodeⁱᵐᵖˡ : val.

Axiom bootstrappedWAL__AppendAndCommitEntriesⁱᵐᵖˡ : val.

Axiom bootstrappedWAL__CommitedEntriesⁱᵐᵖˡ : val.

Axiom bootstrappedWAL__MemoryStorageⁱᵐᵖˡ : val.

Axiom bootstrappedWAL__NewConfigChangeEntriesⁱᵐᵖˡ : val.

Axiom corruptionChecker__CompactHashCheckⁱᵐᵖˡ : val.

Axiom corruptionChecker__InitialCheckⁱᵐᵖˡ : val.

Axiom corruptionChecker__PeriodicCheckⁱᵐᵖˡ : val.

Axiom corruptionChecker__checkPeerHashesⁱᵐᵖˡ : val.

Axiom corruptionChecker__handleConsistentHashⁱᵐᵖˡ : val.

Axiom corruptionChecker__uncheckedRevisionsⁱᵐᵖˡ : val.

Axiom hasherAdapter__AddMemberⁱᵐᵖˡ : val.

Axiom hasherAdapter__Alarmⁱᵐᵖˡ : val.

Axiom hasherAdapter__Alarmsⁱᵐᵖˡ : val.

Axiom hasherAdapter__AppliedIndexⁱᵐᵖˡ : val.

Axiom hasherAdapter__ApplyWaitⁱᵐᵖˡ : val.

Axiom hasherAdapter__AuthDisableⁱᵐᵖˡ : val.

Axiom hasherAdapter__AuthEnableⁱᵐᵖˡ : val.

Axiom hasherAdapter__AuthInfoFromCtxⁱᵐᵖˡ : val.

Axiom hasherAdapter__AuthStatusⁱᵐᵖˡ : val.

Axiom hasherAdapter__AuthStoreⁱᵐᵖˡ : val.

Axiom hasherAdapter__Authenticateⁱᵐᵖˡ : val.

Axiom hasherAdapter__Backendⁱᵐᵖˡ : val.

Axiom hasherAdapter__Cleanupⁱᵐᵖˡ : val.

Axiom hasherAdapter__ClientCertAuthEnabledⁱᵐᵖˡ : val.

Axiom hasherAdapter__Clusterⁱᵐᵖˡ : val.

Axiom hasherAdapter__ClusterVersionⁱᵐᵖˡ : val.

Axiom hasherAdapter__CommittedIndexⁱᵐᵖˡ : val.

Axiom hasherAdapter__Compactⁱᵐᵖˡ : val.

Axiom hasherAdapter__Configⁱᵐᵖˡ : val.

Axiom hasherAdapter__CorruptionCheckerⁱᵐᵖˡ : val.

Axiom hasherAdapter__CutPeerⁱᵐᵖˡ : val.

Axiom hasherAdapter__DeleteRangeⁱᵐᵖˡ : val.

Axiom hasherAdapter__Downgradeⁱᵐᵖˡ : val.

Axiom hasherAdapter__DowngradeEnabledHandlerⁱᵐᵖˡ : val.

Axiom hasherAdapter__DowngradeInfoⁱᵐᵖˡ : val.

Axiom hasherAdapter__FeatureEnabledⁱᵐᵖˡ : val.

Axiom hasherAdapter__FirstCommitInTermNotifyⁱᵐᵖˡ : val.

Axiom hasherAdapter__ForceSnapshotⁱᵐᵖˡ : val.

Axiom hasherAdapter__GoAttachⁱᵐᵖˡ : val.

Axiom hasherAdapter__HardStopⁱᵐᵖˡ : val.

Axiom hasherAdapter__Hashⁱᵐᵖˡ : val.

Axiom hasherAdapter__HashByRevⁱᵐᵖˡ : val.

Axiom hasherAdapter__HashKVHandlerⁱᵐᵖˡ : val.

Axiom hasherAdapter__Hashesⁱᵐᵖˡ : val.

Axiom hasherAdapter__IsHostWhitelistedⁱᵐᵖˡ : val.

Axiom hasherAdapter__IsIDRemovedⁱᵐᵖˡ : val.

Axiom hasherAdapter__IsLearnerⁱᵐᵖˡ : val.

Axiom hasherAdapter__IsMemberExistⁱᵐᵖˡ : val.

Axiom hasherAdapter__KVⁱᵐᵖˡ : val.

Axiom hasherAdapter__Leadⁱᵐᵖˡ : val.

Axiom hasherAdapter__Leaderⁱᵐᵖˡ : val.

Axiom hasherAdapter__LeaderChangedNotifyⁱᵐᵖˡ : val.

Axiom hasherAdapter__LeaseGrantⁱᵐᵖˡ : val.

Axiom hasherAdapter__LeaseHandlerⁱᵐᵖˡ : val.

Axiom hasherAdapter__LeaseLeasesⁱᵐᵖˡ : val.

Axiom hasherAdapter__LeaseRenewⁱᵐᵖˡ : val.

Axiom hasherAdapter__LeaseRevokeⁱᵐᵖˡ : val.

Axiom hasherAdapter__LeaseTimeToLiveⁱᵐᵖˡ : val.

Axiom hasherAdapter__LinearizableReadNotifyⁱᵐᵖˡ : val.

Axiom hasherAdapter__Loggerⁱᵐᵖˡ : val.

Axiom hasherAdapter__MemberIDⁱᵐᵖˡ : val.

Axiom hasherAdapter__MemberIdⁱᵐᵖˡ : val.

Axiom hasherAdapter__MendPeerⁱᵐᵖˡ : val.

Axiom hasherAdapter__MoveLeaderⁱᵐᵖˡ : val.

Axiom hasherAdapter__NewUberApplierⁱᵐᵖˡ : val.

Axiom hasherAdapter__OriginAllowedⁱᵐᵖˡ : val.

Axiom hasherAdapter__PauseSendingⁱᵐᵖˡ : val.

Axiom hasherAdapter__PeerHashByRevⁱᵐᵖˡ : val.

Axiom hasherAdapter__Processⁱᵐᵖˡ : val.

Axiom hasherAdapter__PromoteMemberⁱᵐᵖˡ : val.

Axiom hasherAdapter__Putⁱᵐᵖˡ : val.

Axiom hasherAdapter__RaftHandlerⁱᵐᵖˡ : val.

Axiom hasherAdapter__Rangeⁱᵐᵖˡ : val.

Axiom hasherAdapter__ReadyNotifyⁱᵐᵖˡ : val.

Axiom hasherAdapter__RemoveMemberⁱᵐᵖˡ : val.

Axiom hasherAdapter__ReportSnapshotⁱᵐᵖˡ : val.

Axiom hasherAdapter__ReportUnreachableⁱᵐᵖˡ : val.

Axiom hasherAdapter__ReqTimeoutⁱᵐᵖˡ : val.

Axiom hasherAdapter__ResumeSendingⁱᵐᵖˡ : val.

Axiom hasherAdapter__RoleAddⁱᵐᵖˡ : val.

Axiom hasherAdapter__RoleDeleteⁱᵐᵖˡ : val.

Axiom hasherAdapter__RoleGetⁱᵐᵖˡ : val.

Axiom hasherAdapter__RoleGrantPermissionⁱᵐᵖˡ : val.

Axiom hasherAdapter__RoleListⁱᵐᵖˡ : val.

Axiom hasherAdapter__RoleRevokePermissionⁱᵐᵖˡ : val.

Axiom hasherAdapter__Startⁱᵐᵖˡ : val.

Axiom hasherAdapter__Stopⁱᵐᵖˡ : val.

Axiom hasherAdapter__StopNotifyⁱᵐᵖˡ : val.

Axiom hasherAdapter__StoppingNotifyⁱᵐᵖˡ : val.

Axiom hasherAdapter__StorageVersionⁱᵐᵖˡ : val.

Axiom hasherAdapter__Storeⁱᵐᵖˡ : val.

Axiom hasherAdapter__Termⁱᵐᵖˡ : val.

Axiom hasherAdapter__TriggerCorruptAlarmⁱᵐᵖˡ : val.

Axiom hasherAdapter__TryTransferLeadershipOnShutdownⁱᵐᵖˡ : val.

Axiom hasherAdapter__Txnⁱᵐᵖˡ : val.

Axiom hasherAdapter__UpdateMemberⁱᵐᵖˡ : val.

Axiom hasherAdapter__UserAddⁱᵐᵖˡ : val.

Axiom hasherAdapter__UserChangePasswordⁱᵐᵖˡ : val.

Axiom hasherAdapter__UserDeleteⁱᵐᵖˡ : val.

Axiom hasherAdapter__UserGetⁱᵐᵖˡ : val.

Axiom hasherAdapter__UserGrantRoleⁱᵐᵖˡ : val.

Axiom hasherAdapter__UserListⁱᵐᵖˡ : val.

Axiom hasherAdapter__UserRevokeRoleⁱᵐᵖˡ : val.

Axiom hasherAdapter__Versionⁱᵐᵖˡ : val.

Axiom hasherAdapter__Watchableⁱᵐᵖˡ : val.

Axiom hasherAdapter__adjustTicksⁱᵐᵖˡ : val.

Axiom hasherAdapter__applyⁱᵐᵖˡ : val.

Axiom hasherAdapter__applyAllⁱᵐᵖˡ : val.

Axiom hasherAdapter__applyConfChangeⁱᵐᵖˡ : val.

Axiom hasherAdapter__applyEntriesⁱᵐᵖˡ : val.

Axiom hasherAdapter__applyEntryNormalⁱᵐᵖˡ : val.

Axiom hasherAdapter__applyInternalRaftRequestⁱᵐᵖˡ : val.

Axiom hasherAdapter__applySnapshotⁱᵐᵖˡ : val.

Axiom hasherAdapter__checkLeaseTimeToLiveⁱᵐᵖˡ : val.

Axiom hasherAdapter__checkMembershipOperationPermissionⁱᵐᵖˡ : val.

Axiom hasherAdapter__compactRaftLogⁱᵐᵖˡ : val.

Axiom hasherAdapter__configureⁱᵐᵖˡ : val.

Axiom hasherAdapter__createMergedSnapshotMessageⁱᵐᵖˡ : val.

Axiom hasherAdapter__doSerializeⁱᵐᵖˡ : val.

Axiom hasherAdapter__downgradeCancelⁱᵐᵖˡ : val.

Axiom hasherAdapter__downgradeEnableⁱᵐᵖˡ : val.

Axiom hasherAdapter__downgradeValidateⁱᵐᵖˡ : val.

Axiom hasherAdapter__ensureLeadershipⁱᵐᵖˡ : val.

Axiom hasherAdapter__getAppliedIndexⁱᵐᵖˡ : val.

Axiom hasherAdapter__getCommittedIndexⁱᵐᵖˡ : val.

Axiom hasherAdapter__getLeadⁱᵐᵖˡ : val.

Axiom hasherAdapter__getPeerHashKVsⁱᵐᵖˡ : val.

Axiom hasherAdapter__getTermⁱᵐᵖˡ : val.

Axiom hasherAdapter__getTxPostLockInsideApplyHookⁱᵐᵖˡ : val.

Axiom hasherAdapter__hasMultipleVotingMembersⁱᵐᵖˡ : val.

Axiom hasherAdapter__isActiveⁱᵐᵖˡ : val.

Axiom hasherAdapter__isLeaderⁱᵐᵖˡ : val.

Axiom hasherAdapter__isLearnerReadyⁱᵐᵖˡ : val.

Axiom hasherAdapter__leaseTimeToLiveⁱᵐᵖˡ : val.

Axiom hasherAdapter__linearizableReadLoopⁱᵐᵖˡ : val.

Axiom hasherAdapter__linearizableReadNotifyⁱᵐᵖˡ : val.

Axiom hasherAdapter__mayAddMemberⁱᵐᵖˡ : val.

Axiom hasherAdapter__mayPromoteMemberⁱᵐᵖˡ : val.

Axiom hasherAdapter__mayRemoveMemberⁱᵐᵖˡ : val.

Axiom hasherAdapter__monitorClusterVersionsⁱᵐᵖˡ : val.

Axiom hasherAdapter__monitorCompactHashⁱᵐᵖˡ : val.

Axiom hasherAdapter__monitorDowngradeⁱᵐᵖˡ : val.

Axiom hasherAdapter__monitorKVHashⁱᵐᵖˡ : val.

Axiom hasherAdapter__monitorStorageVersionⁱᵐᵖˡ : val.

Axiom hasherAdapter__newHeaderⁱᵐᵖˡ : val.

Axiom hasherAdapter__parseProposeCtxErrⁱᵐᵖˡ : val.

Axiom hasherAdapter__processInternalRaftRequestOnceⁱᵐᵖˡ : val.

Axiom hasherAdapter__promoteMemberⁱᵐᵖˡ : val.

Axiom hasherAdapter__publishV3ⁱᵐᵖˡ : val.

Axiom hasherAdapter__purgeFileⁱᵐᵖˡ : val.

Axiom hasherAdapter__raftRequestⁱᵐᵖˡ : val.

Axiom hasherAdapter__raftRequestOnceⁱᵐᵖˡ : val.

Axiom hasherAdapter__raftStatusⁱᵐᵖˡ : val.

Axiom hasherAdapter__requestCurrentIndexⁱᵐᵖˡ : val.

Axiom hasherAdapter__restoreAlarmsⁱᵐᵖˡ : val.

Axiom hasherAdapter__revokeExpiredLeasesⁱᵐᵖˡ : val.

Axiom hasherAdapter__runⁱᵐᵖˡ : val.

Axiom hasherAdapter__sendMergedSnapⁱᵐᵖˡ : val.

Axiom hasherAdapter__sendReadIndexⁱᵐᵖˡ : val.

Axiom hasherAdapter__setAppliedIndexⁱᵐᵖˡ : val.

Axiom hasherAdapter__setCommittedIndexⁱᵐᵖˡ : val.

Axiom hasherAdapter__setLeadⁱᵐᵖˡ : val.

Axiom hasherAdapter__setTermⁱᵐᵖˡ : val.

Axiom hasherAdapter__shouldSnapshotToDiskⁱᵐᵖˡ : val.

Axiom hasherAdapter__shouldSnapshotToMemoryⁱᵐᵖˡ : val.

Axiom hasherAdapter__snapshotⁱᵐᵖˡ : val.

Axiom hasherAdapter__snapshotIfNeededAndCompactRaftLogⁱᵐᵖˡ : val.

Axiom hasherAdapter__startⁱᵐᵖˡ : val.

Axiom hasherAdapter__stopWithDelayⁱᵐᵖˡ : val.

Axiom hasherAdapter__triggerCorruptAlarmⁱᵐᵖˡ : val.

Axiom hasherAdapter__updateClusterVersionV3ⁱᵐᵖˡ : val.

Axiom hasherAdapter__waitAppliedIndexⁱᵐᵖˡ : val.

Axiom hasherAdapter__waitLeaderⁱᵐᵖˡ : val.

Axiom hashKVHandler__ServeHTTPⁱᵐᵖˡ : val.

Axiom raftNode__Advanceⁱᵐᵖˡ : val.

Axiom raftNode__ApplyConfChangeⁱᵐᵖˡ : val.

Axiom raftNode__Campaignⁱᵐᵖˡ : val.

Axiom raftNode__ForgetLeaderⁱᵐᵖˡ : val.

Axiom raftNode__Proposeⁱᵐᵖˡ : val.

Axiom raftNode__ProposeConfChangeⁱᵐᵖˡ : val.

Axiom raftNode__ReadIndexⁱᵐᵖˡ : val.

Axiom raftNode__Readyⁱᵐᵖˡ : val.

Axiom raftNode__ReportSnapshotⁱᵐᵖˡ : val.

Axiom raftNode__ReportUnreachableⁱᵐᵖˡ : val.

Axiom raftNode__Statusⁱᵐᵖˡ : val.

Axiom raftNode__Stepⁱᵐᵖˡ : val.

Axiom raftNode__Stopⁱᵐᵖˡ : val.

Axiom raftNode__Tickⁱᵐᵖˡ : val.

Axiom raftNode__TransferLeadershipⁱᵐᵖˡ : val.

Axiom raftNode__advanceTicksⁱᵐᵖˡ : val.

Axiom raftNode__applyⁱᵐᵖˡ : val.

Axiom raftNode__getLatestTickTsⁱᵐᵖˡ : val.

Axiom raftNode__onStopⁱᵐᵖˡ : val.

Axiom raftNode__pauseSendingⁱᵐᵖˡ : val.

Axiom raftNode__processMessagesⁱᵐᵖˡ : val.

Axiom raftNode__resumeSendingⁱᵐᵖˡ : val.

Axiom raftNode__startⁱᵐᵖˡ : val.

Axiom raftNode__stopⁱᵐᵖˡ : val.

Axiom raftNode__tickⁱᵐᵖˡ : val.

Axiom raftNodeConfig__Advanceⁱᵐᵖˡ : val.

Axiom raftNodeConfig__ApplyConfChangeⁱᵐᵖˡ : val.

Axiom raftNodeConfig__Campaignⁱᵐᵖˡ : val.

Axiom raftNodeConfig__ForgetLeaderⁱᵐᵖˡ : val.

Axiom raftNodeConfig__Proposeⁱᵐᵖˡ : val.

Axiom raftNodeConfig__ProposeConfChangeⁱᵐᵖˡ : val.

Axiom raftNodeConfig__ReadIndexⁱᵐᵖˡ : val.

Axiom raftNodeConfig__Readyⁱᵐᵖˡ : val.

Axiom raftNodeConfig__ReportSnapshotⁱᵐᵖˡ : val.

Axiom raftNodeConfig__ReportUnreachableⁱᵐᵖˡ : val.

Axiom raftNodeConfig__Statusⁱᵐᵖˡ : val.

Axiom raftNodeConfig__Stepⁱᵐᵖˡ : val.

Axiom raftNodeConfig__Stopⁱᵐᵖˡ : val.

Axiom raftNodeConfig__Tickⁱᵐᵖˡ : val.

Axiom raftNodeConfig__TransferLeadershipⁱᵐᵖˡ : val.

Axiom EtcdServer__AddMemberⁱᵐᵖˡ : val.

Axiom EtcdServer__Alarmⁱᵐᵖˡ : val.

Axiom EtcdServer__Alarmsⁱᵐᵖˡ : val.

Axiom EtcdServer__AppliedIndexⁱᵐᵖˡ : val.

Axiom EtcdServer__ApplyWaitⁱᵐᵖˡ : val.

Axiom EtcdServer__AuthDisableⁱᵐᵖˡ : val.

Axiom EtcdServer__AuthEnableⁱᵐᵖˡ : val.

Axiom EtcdServer__AuthInfoFromCtxⁱᵐᵖˡ : val.

Axiom EtcdServer__AuthStatusⁱᵐᵖˡ : val.

Axiom EtcdServer__AuthStoreⁱᵐᵖˡ : val.

Axiom EtcdServer__Authenticateⁱᵐᵖˡ : val.

Axiom EtcdServer__Backendⁱᵐᵖˡ : val.

Axiom EtcdServer__Cleanupⁱᵐᵖˡ : val.

Axiom EtcdServer__ClientCertAuthEnabledⁱᵐᵖˡ : val.

Axiom EtcdServer__Clusterⁱᵐᵖˡ : val.

Axiom EtcdServer__ClusterVersionⁱᵐᵖˡ : val.

Axiom EtcdServer__CommittedIndexⁱᵐᵖˡ : val.

Axiom EtcdServer__Compactⁱᵐᵖˡ : val.

Axiom EtcdServer__Configⁱᵐᵖˡ : val.

Axiom EtcdServer__CorruptionCheckerⁱᵐᵖˡ : val.

Axiom EtcdServer__CutPeerⁱᵐᵖˡ : val.

Axiom EtcdServer__DeleteRangeⁱᵐᵖˡ : val.

Axiom EtcdServer__Downgradeⁱᵐᵖˡ : val.

Axiom EtcdServer__DowngradeEnabledHandlerⁱᵐᵖˡ : val.

Axiom EtcdServer__DowngradeInfoⁱᵐᵖˡ : val.

Axiom EtcdServer__FeatureEnabledⁱᵐᵖˡ : val.

Axiom EtcdServer__FirstCommitInTermNotifyⁱᵐᵖˡ : val.

Axiom EtcdServer__ForceSnapshotⁱᵐᵖˡ : val.

Axiom EtcdServer__GoAttachⁱᵐᵖˡ : val.

Axiom EtcdServer__HardStopⁱᵐᵖˡ : val.

Axiom EtcdServer__HashKVHandlerⁱᵐᵖˡ : val.

Axiom EtcdServer__IsHostWhitelistedⁱᵐᵖˡ : val.

Axiom EtcdServer__IsIDRemovedⁱᵐᵖˡ : val.

Axiom EtcdServer__IsLearnerⁱᵐᵖˡ : val.

Axiom EtcdServer__IsMemberExistⁱᵐᵖˡ : val.

Axiom EtcdServer__KVⁱᵐᵖˡ : val.

Axiom EtcdServer__Leadⁱᵐᵖˡ : val.

Axiom EtcdServer__Leaderⁱᵐᵖˡ : val.

Axiom EtcdServer__LeaderChangedNotifyⁱᵐᵖˡ : val.

Axiom EtcdServer__LeaseGrantⁱᵐᵖˡ : val.

Axiom EtcdServer__LeaseHandlerⁱᵐᵖˡ : val.

Axiom EtcdServer__LeaseLeasesⁱᵐᵖˡ : val.

Axiom EtcdServer__LeaseRenewⁱᵐᵖˡ : val.

Axiom EtcdServer__LeaseRevokeⁱᵐᵖˡ : val.

Axiom EtcdServer__LeaseTimeToLiveⁱᵐᵖˡ : val.

Axiom EtcdServer__LinearizableReadNotifyⁱᵐᵖˡ : val.

Axiom EtcdServer__Loggerⁱᵐᵖˡ : val.

Axiom EtcdServer__MemberIDⁱᵐᵖˡ : val.

Axiom EtcdServer__MemberIdⁱᵐᵖˡ : val.

Axiom EtcdServer__MendPeerⁱᵐᵖˡ : val.

Axiom EtcdServer__MoveLeaderⁱᵐᵖˡ : val.

Axiom EtcdServer__NewUberApplierⁱᵐᵖˡ : val.

Axiom EtcdServer__OriginAllowedⁱᵐᵖˡ : val.

Axiom EtcdServer__PauseSendingⁱᵐᵖˡ : val.

Axiom EtcdServer__Processⁱᵐᵖˡ : val.

Axiom EtcdServer__PromoteMemberⁱᵐᵖˡ : val.

Axiom EtcdServer__RaftHandlerⁱᵐᵖˡ : val.

Axiom EtcdServer__Rangeⁱᵐᵖˡ : val.

Axiom EtcdServer__ReadyNotifyⁱᵐᵖˡ : val.

Axiom EtcdServer__RemoveMemberⁱᵐᵖˡ : val.

Axiom EtcdServer__ReportSnapshotⁱᵐᵖˡ : val.

Axiom EtcdServer__ReportUnreachableⁱᵐᵖˡ : val.

Axiom EtcdServer__ResumeSendingⁱᵐᵖˡ : val.

Axiom EtcdServer__RoleAddⁱᵐᵖˡ : val.

Axiom EtcdServer__RoleDeleteⁱᵐᵖˡ : val.

Axiom EtcdServer__RoleGetⁱᵐᵖˡ : val.

Axiom EtcdServer__RoleGrantPermissionⁱᵐᵖˡ : val.

Axiom EtcdServer__RoleListⁱᵐᵖˡ : val.

Axiom EtcdServer__RoleRevokePermissionⁱᵐᵖˡ : val.

Axiom EtcdServer__Startⁱᵐᵖˡ : val.

Axiom EtcdServer__Stopⁱᵐᵖˡ : val.

Axiom EtcdServer__StopNotifyⁱᵐᵖˡ : val.

Axiom EtcdServer__StoppingNotifyⁱᵐᵖˡ : val.

Axiom EtcdServer__StorageVersionⁱᵐᵖˡ : val.

Axiom EtcdServer__Termⁱᵐᵖˡ : val.

Axiom EtcdServer__TryTransferLeadershipOnShutdownⁱᵐᵖˡ : val.

Axiom EtcdServer__Txnⁱᵐᵖˡ : val.

Axiom EtcdServer__UpdateMemberⁱᵐᵖˡ : val.

Axiom EtcdServer__UserAddⁱᵐᵖˡ : val.

Axiom EtcdServer__UserChangePasswordⁱᵐᵖˡ : val.

Axiom EtcdServer__UserDeleteⁱᵐᵖˡ : val.

Axiom EtcdServer__UserGetⁱᵐᵖˡ : val.

Axiom EtcdServer__UserGrantRoleⁱᵐᵖˡ : val.

Axiom EtcdServer__UserListⁱᵐᵖˡ : val.

Axiom EtcdServer__UserRevokeRoleⁱᵐᵖˡ : val.

Axiom EtcdServer__Versionⁱᵐᵖˡ : val.

Axiom EtcdServer__Watchableⁱᵐᵖˡ : val.

Axiom EtcdServer__adjustTicksⁱᵐᵖˡ : val.

Axiom EtcdServer__applyⁱᵐᵖˡ : val.

Axiom EtcdServer__applyAllⁱᵐᵖˡ : val.

Axiom EtcdServer__applyConfChangeⁱᵐᵖˡ : val.

Axiom EtcdServer__applyEntriesⁱᵐᵖˡ : val.

Axiom EtcdServer__applyEntryNormalⁱᵐᵖˡ : val.

Axiom EtcdServer__applyInternalRaftRequestⁱᵐᵖˡ : val.

Axiom EtcdServer__applySnapshotⁱᵐᵖˡ : val.

Axiom EtcdServer__checkLeaseTimeToLiveⁱᵐᵖˡ : val.

Axiom EtcdServer__checkMembershipOperationPermissionⁱᵐᵖˡ : val.

Axiom EtcdServer__compactRaftLogⁱᵐᵖˡ : val.

Axiom EtcdServer__configureⁱᵐᵖˡ : val.

Axiom EtcdServer__createMergedSnapshotMessageⁱᵐᵖˡ : val.

Axiom EtcdServer__doSerializeⁱᵐᵖˡ : val.

Axiom EtcdServer__downgradeCancelⁱᵐᵖˡ : val.

Axiom EtcdServer__downgradeEnableⁱᵐᵖˡ : val.

Axiom EtcdServer__downgradeValidateⁱᵐᵖˡ : val.

Axiom EtcdServer__ensureLeadershipⁱᵐᵖˡ : val.

Axiom EtcdServer__getAppliedIndexⁱᵐᵖˡ : val.

Axiom EtcdServer__getCommittedIndexⁱᵐᵖˡ : val.

Axiom EtcdServer__getLeadⁱᵐᵖˡ : val.

Axiom EtcdServer__getPeerHashKVsⁱᵐᵖˡ : val.

Axiom EtcdServer__getTermⁱᵐᵖˡ : val.

Axiom EtcdServer__getTxPostLockInsideApplyHookⁱᵐᵖˡ : val.

Axiom EtcdServer__hasMultipleVotingMembersⁱᵐᵖˡ : val.

Axiom EtcdServer__isActiveⁱᵐᵖˡ : val.

Axiom EtcdServer__isLeaderⁱᵐᵖˡ : val.

Axiom EtcdServer__isLearnerReadyⁱᵐᵖˡ : val.

Axiom EtcdServer__leaseTimeToLiveⁱᵐᵖˡ : val.

Axiom EtcdServer__linearizableReadLoopⁱᵐᵖˡ : val.

Axiom EtcdServer__linearizableReadNotifyⁱᵐᵖˡ : val.

Axiom EtcdServer__mayAddMemberⁱᵐᵖˡ : val.

Axiom EtcdServer__mayPromoteMemberⁱᵐᵖˡ : val.

Axiom EtcdServer__mayRemoveMemberⁱᵐᵖˡ : val.

Axiom EtcdServer__monitorClusterVersionsⁱᵐᵖˡ : val.

Axiom EtcdServer__monitorCompactHashⁱᵐᵖˡ : val.

Axiom EtcdServer__monitorDowngradeⁱᵐᵖˡ : val.

Axiom EtcdServer__monitorKVHashⁱᵐᵖˡ : val.

Axiom EtcdServer__monitorStorageVersionⁱᵐᵖˡ : val.

Axiom EtcdServer__newHeaderⁱᵐᵖˡ : val.

Axiom EtcdServer__parseProposeCtxErrⁱᵐᵖˡ : val.

Axiom EtcdServer__promoteMemberⁱᵐᵖˡ : val.

Axiom EtcdServer__publishV3ⁱᵐᵖˡ : val.

Axiom EtcdServer__purgeFileⁱᵐᵖˡ : val.

Axiom EtcdServer__raftRequestⁱᵐᵖˡ : val.

Axiom EtcdServer__raftRequestOnceⁱᵐᵖˡ : val.

Axiom EtcdServer__raftStatusⁱᵐᵖˡ : val.

Axiom EtcdServer__requestCurrentIndexⁱᵐᵖˡ : val.

Axiom EtcdServer__restoreAlarmsⁱᵐᵖˡ : val.

Axiom EtcdServer__revokeExpiredLeasesⁱᵐᵖˡ : val.

Axiom EtcdServer__runⁱᵐᵖˡ : val.

Axiom EtcdServer__sendMergedSnapⁱᵐᵖˡ : val.

Axiom EtcdServer__sendReadIndexⁱᵐᵖˡ : val.

Axiom EtcdServer__setAppliedIndexⁱᵐᵖˡ : val.

Axiom EtcdServer__setCommittedIndexⁱᵐᵖˡ : val.

Axiom EtcdServer__setLeadⁱᵐᵖˡ : val.

Axiom EtcdServer__setTermⁱᵐᵖˡ : val.

Axiom EtcdServer__shouldSnapshotToDiskⁱᵐᵖˡ : val.

Axiom EtcdServer__shouldSnapshotToMemoryⁱᵐᵖˡ : val.

Axiom EtcdServer__snapshotⁱᵐᵖˡ : val.

Axiom EtcdServer__snapshotIfNeededAndCompactRaftLogⁱᵐᵖˡ : val.

Axiom EtcdServer__startⁱᵐᵖˡ : val.

Axiom EtcdServer__stopWithDelayⁱᵐᵖˡ : val.

Axiom EtcdServer__triggerCorruptAlarmⁱᵐᵖˡ : val.

Axiom EtcdServer__updateClusterVersionV3ⁱᵐᵖˡ : val.

Axiom EtcdServer__waitAppliedIndexⁱᵐᵖˡ : val.

Axiom EtcdServer__waitLeaderⁱᵐᵖˡ : val.

Axiom downgradeEnabledHandler__ServeHTTPⁱᵐᵖˡ : val.

Axiom AccessController__IsHostWhitelistedⁱᵐᵖˡ : val.

Axiom AccessController__OriginAllowedⁱᵐᵖˡ : val.

Axiom notifier__notifyⁱᵐᵖˡ : val.

Axiom panicAlternativeStringer__Stringⁱᵐᵖˡ : val.

Axiom RequestV2__Stringⁱᵐᵖˡ : val.

Axiom zapRaftLogger__Debugⁱᵐᵖˡ : val.

Axiom zapRaftLogger__Debugfⁱᵐᵖˡ : val.

Axiom zapRaftLogger__Errorⁱᵐᵖˡ : val.

Axiom zapRaftLogger__Errorfⁱᵐᵖˡ : val.

Axiom zapRaftLogger__Fatalⁱᵐᵖˡ : val.

Axiom zapRaftLogger__Fatalfⁱᵐᵖˡ : val.

Axiom zapRaftLogger__Infoⁱᵐᵖˡ : val.

Axiom zapRaftLogger__Infofⁱᵐᵖˡ : val.

Axiom zapRaftLogger__Panicⁱᵐᵖˡ : val.

Axiom zapRaftLogger__Panicfⁱᵐᵖˡ : val.

Axiom zapRaftLogger__Warningⁱᵐᵖˡ : val.

Axiom zapRaftLogger__Warningfⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(serverVersionAdapter.id, [("AddMember"%go, serverVersionAdapter__AddMemberⁱᵐᵖˡ); ("Alarm"%go, serverVersionAdapter__Alarmⁱᵐᵖˡ); ("Alarms"%go, serverVersionAdapter__Alarmsⁱᵐᵖˡ); ("AppliedIndex"%go, serverVersionAdapter__AppliedIndexⁱᵐᵖˡ); ("ApplyWait"%go, serverVersionAdapter__ApplyWaitⁱᵐᵖˡ); ("AuthDisable"%go, serverVersionAdapter__AuthDisableⁱᵐᵖˡ); ("AuthEnable"%go, serverVersionAdapter__AuthEnableⁱᵐᵖˡ); ("AuthInfoFromCtx"%go, serverVersionAdapter__AuthInfoFromCtxⁱᵐᵖˡ); ("AuthStatus"%go, serverVersionAdapter__AuthStatusⁱᵐᵖˡ); ("AuthStore"%go, serverVersionAdapter__AuthStoreⁱᵐᵖˡ); ("Authenticate"%go, serverVersionAdapter__Authenticateⁱᵐᵖˡ); ("Backend"%go, serverVersionAdapter__Backendⁱᵐᵖˡ); ("Cleanup"%go, serverVersionAdapter__Cleanupⁱᵐᵖˡ); ("ClientCertAuthEnabled"%go, serverVersionAdapter__ClientCertAuthEnabledⁱᵐᵖˡ); ("Cluster"%go, serverVersionAdapter__Clusterⁱᵐᵖˡ); ("ClusterVersion"%go, serverVersionAdapter__ClusterVersionⁱᵐᵖˡ); ("CommittedIndex"%go, serverVersionAdapter__CommittedIndexⁱᵐᵖˡ); ("Compact"%go, serverVersionAdapter__Compactⁱᵐᵖˡ); ("Config"%go, serverVersionAdapter__Configⁱᵐᵖˡ); ("CorruptionChecker"%go, serverVersionAdapter__CorruptionCheckerⁱᵐᵖˡ); ("CutPeer"%go, serverVersionAdapter__CutPeerⁱᵐᵖˡ); ("DeleteRange"%go, serverVersionAdapter__DeleteRangeⁱᵐᵖˡ); ("Downgrade"%go, serverVersionAdapter__Downgradeⁱᵐᵖˡ); ("DowngradeEnabledHandler"%go, serverVersionAdapter__DowngradeEnabledHandlerⁱᵐᵖˡ); ("DowngradeInfo"%go, serverVersionAdapter__DowngradeInfoⁱᵐᵖˡ); ("FeatureEnabled"%go, serverVersionAdapter__FeatureEnabledⁱᵐᵖˡ); ("FirstCommitInTermNotify"%go, serverVersionAdapter__FirstCommitInTermNotifyⁱᵐᵖˡ); ("ForceSnapshot"%go, serverVersionAdapter__ForceSnapshotⁱᵐᵖˡ); ("GoAttach"%go, serverVersionAdapter__GoAttachⁱᵐᵖˡ); ("HardStop"%go, serverVersionAdapter__HardStopⁱᵐᵖˡ); ("HashKVHandler"%go, serverVersionAdapter__HashKVHandlerⁱᵐᵖˡ); ("IsHostWhitelisted"%go, serverVersionAdapter__IsHostWhitelistedⁱᵐᵖˡ); ("IsIDRemoved"%go, serverVersionAdapter__IsIDRemovedⁱᵐᵖˡ); ("IsLearner"%go, serverVersionAdapter__IsLearnerⁱᵐᵖˡ); ("IsMemberExist"%go, serverVersionAdapter__IsMemberExistⁱᵐᵖˡ); ("KV"%go, serverVersionAdapter__KVⁱᵐᵖˡ); ("Lead"%go, serverVersionAdapter__Leadⁱᵐᵖˡ); ("Leader"%go, serverVersionAdapter__Leaderⁱᵐᵖˡ); ("LeaderChangedNotify"%go, serverVersionAdapter__LeaderChangedNotifyⁱᵐᵖˡ); ("LeaseGrant"%go, serverVersionAdapter__LeaseGrantⁱᵐᵖˡ); ("LeaseHandler"%go, serverVersionAdapter__LeaseHandlerⁱᵐᵖˡ); ("LeaseLeases"%go, serverVersionAdapter__LeaseLeasesⁱᵐᵖˡ); ("LeaseRenew"%go, serverVersionAdapter__LeaseRenewⁱᵐᵖˡ); ("LeaseRevoke"%go, serverVersionAdapter__LeaseRevokeⁱᵐᵖˡ); ("LeaseTimeToLive"%go, serverVersionAdapter__LeaseTimeToLiveⁱᵐᵖˡ); ("Logger"%go, serverVersionAdapter__Loggerⁱᵐᵖˡ); ("MemberID"%go, serverVersionAdapter__MemberIDⁱᵐᵖˡ); ("MemberId"%go, serverVersionAdapter__MemberIdⁱᵐᵖˡ); ("MendPeer"%go, serverVersionAdapter__MendPeerⁱᵐᵖˡ); ("MoveLeader"%go, serverVersionAdapter__MoveLeaderⁱᵐᵖˡ); ("NewUberApplier"%go, serverVersionAdapter__NewUberApplierⁱᵐᵖˡ); ("OriginAllowed"%go, serverVersionAdapter__OriginAllowedⁱᵐᵖˡ); ("PauseSending"%go, serverVersionAdapter__PauseSendingⁱᵐᵖˡ); ("Process"%go, serverVersionAdapter__Processⁱᵐᵖˡ); ("PromoteMember"%go, serverVersionAdapter__PromoteMemberⁱᵐᵖˡ); ("Put"%go, serverVersionAdapter__Putⁱᵐᵖˡ); ("RaftHandler"%go, serverVersionAdapter__RaftHandlerⁱᵐᵖˡ); ("Range"%go, serverVersionAdapter__Rangeⁱᵐᵖˡ); ("ReadyNotify"%go, serverVersionAdapter__ReadyNotifyⁱᵐᵖˡ); ("RemoveMember"%go, serverVersionAdapter__RemoveMemberⁱᵐᵖˡ); ("ReportSnapshot"%go, serverVersionAdapter__ReportSnapshotⁱᵐᵖˡ); ("ReportUnreachable"%go, serverVersionAdapter__ReportUnreachableⁱᵐᵖˡ); ("ResumeSending"%go, serverVersionAdapter__ResumeSendingⁱᵐᵖˡ); ("RoleAdd"%go, serverVersionAdapter__RoleAddⁱᵐᵖˡ); ("RoleDelete"%go, serverVersionAdapter__RoleDeleteⁱᵐᵖˡ); ("RoleGet"%go, serverVersionAdapter__RoleGetⁱᵐᵖˡ); ("RoleGrantPermission"%go, serverVersionAdapter__RoleGrantPermissionⁱᵐᵖˡ); ("RoleList"%go, serverVersionAdapter__RoleListⁱᵐᵖˡ); ("RoleRevokePermission"%go, serverVersionAdapter__RoleRevokePermissionⁱᵐᵖˡ); ("Start"%go, serverVersionAdapter__Startⁱᵐᵖˡ); ("Stop"%go, serverVersionAdapter__Stopⁱᵐᵖˡ); ("StopNotify"%go, serverVersionAdapter__StopNotifyⁱᵐᵖˡ); ("StoppingNotify"%go, serverVersionAdapter__StoppingNotifyⁱᵐᵖˡ); ("StorageVersion"%go, serverVersionAdapter__StorageVersionⁱᵐᵖˡ); ("Term"%go, serverVersionAdapter__Termⁱᵐᵖˡ); ("TryTransferLeadershipOnShutdown"%go, serverVersionAdapter__TryTransferLeadershipOnShutdownⁱᵐᵖˡ); ("Txn"%go, serverVersionAdapter__Txnⁱᵐᵖˡ); ("UpdateMember"%go, serverVersionAdapter__UpdateMemberⁱᵐᵖˡ); ("UserAdd"%go, serverVersionAdapter__UserAddⁱᵐᵖˡ); ("UserChangePassword"%go, serverVersionAdapter__UserChangePasswordⁱᵐᵖˡ); ("UserDelete"%go, serverVersionAdapter__UserDeleteⁱᵐᵖˡ); ("UserGet"%go, serverVersionAdapter__UserGetⁱᵐᵖˡ); ("UserGrantRole"%go, serverVersionAdapter__UserGrantRoleⁱᵐᵖˡ); ("UserList"%go, serverVersionAdapter__UserListⁱᵐᵖˡ); ("UserRevokeRole"%go, serverVersionAdapter__UserRevokeRoleⁱᵐᵖˡ); ("Version"%go, serverVersionAdapter__Versionⁱᵐᵖˡ); ("Watchable"%go, serverVersionAdapter__Watchableⁱᵐᵖˡ); ("adjustTicks"%go, serverVersionAdapter__adjustTicksⁱᵐᵖˡ); ("apply"%go, serverVersionAdapter__applyⁱᵐᵖˡ); ("applyAll"%go, serverVersionAdapter__applyAllⁱᵐᵖˡ); ("applyConfChange"%go, serverVersionAdapter__applyConfChangeⁱᵐᵖˡ); ("applyEntries"%go, serverVersionAdapter__applyEntriesⁱᵐᵖˡ); ("applyEntryNormal"%go, serverVersionAdapter__applyEntryNormalⁱᵐᵖˡ); ("applyInternalRaftRequest"%go, serverVersionAdapter__applyInternalRaftRequestⁱᵐᵖˡ); ("applySnapshot"%go, serverVersionAdapter__applySnapshotⁱᵐᵖˡ); ("checkLeaseTimeToLive"%go, serverVersionAdapter__checkLeaseTimeToLiveⁱᵐᵖˡ); ("checkMembershipOperationPermission"%go, serverVersionAdapter__checkMembershipOperationPermissionⁱᵐᵖˡ); ("compactRaftLog"%go, serverVersionAdapter__compactRaftLogⁱᵐᵖˡ); ("configure"%go, serverVersionAdapter__configureⁱᵐᵖˡ); ("createMergedSnapshotMessage"%go, serverVersionAdapter__createMergedSnapshotMessageⁱᵐᵖˡ); ("doSerialize"%go, serverVersionAdapter__doSerializeⁱᵐᵖˡ); ("downgradeCancel"%go, serverVersionAdapter__downgradeCancelⁱᵐᵖˡ); ("downgradeEnable"%go, serverVersionAdapter__downgradeEnableⁱᵐᵖˡ); ("downgradeValidate"%go, serverVersionAdapter__downgradeValidateⁱᵐᵖˡ); ("ensureLeadership"%go, serverVersionAdapter__ensureLeadershipⁱᵐᵖˡ); ("getAppliedIndex"%go, serverVersionAdapter__getAppliedIndexⁱᵐᵖˡ); ("getCommittedIndex"%go, serverVersionAdapter__getCommittedIndexⁱᵐᵖˡ); ("getLead"%go, serverVersionAdapter__getLeadⁱᵐᵖˡ); ("getPeerHashKVs"%go, serverVersionAdapter__getPeerHashKVsⁱᵐᵖˡ); ("getTerm"%go, serverVersionAdapter__getTermⁱᵐᵖˡ); ("getTxPostLockInsideApplyHook"%go, serverVersionAdapter__getTxPostLockInsideApplyHookⁱᵐᵖˡ); ("hasMultipleVotingMembers"%go, serverVersionAdapter__hasMultipleVotingMembersⁱᵐᵖˡ); ("isActive"%go, serverVersionAdapter__isActiveⁱᵐᵖˡ); ("isLeader"%go, serverVersionAdapter__isLeaderⁱᵐᵖˡ); ("isLearnerReady"%go, serverVersionAdapter__isLearnerReadyⁱᵐᵖˡ); ("leaseTimeToLive"%go, serverVersionAdapter__leaseTimeToLiveⁱᵐᵖˡ); ("linearizableReadLoop"%go, serverVersionAdapter__linearizableReadLoopⁱᵐᵖˡ); ("linearizableReadNotify"%go, serverVersionAdapter__linearizableReadNotifyⁱᵐᵖˡ); ("mayAddMember"%go, serverVersionAdapter__mayAddMemberⁱᵐᵖˡ); ("mayPromoteMember"%go, serverVersionAdapter__mayPromoteMemberⁱᵐᵖˡ); ("mayRemoveMember"%go, serverVersionAdapter__mayRemoveMemberⁱᵐᵖˡ); ("monitorClusterVersions"%go, serverVersionAdapter__monitorClusterVersionsⁱᵐᵖˡ); ("monitorCompactHash"%go, serverVersionAdapter__monitorCompactHashⁱᵐᵖˡ); ("monitorDowngrade"%go, serverVersionAdapter__monitorDowngradeⁱᵐᵖˡ); ("monitorKVHash"%go, serverVersionAdapter__monitorKVHashⁱᵐᵖˡ); ("monitorStorageVersion"%go, serverVersionAdapter__monitorStorageVersionⁱᵐᵖˡ); ("newHeader"%go, serverVersionAdapter__newHeaderⁱᵐᵖˡ); ("parseProposeCtxErr"%go, serverVersionAdapter__parseProposeCtxErrⁱᵐᵖˡ); ("processInternalRaftRequestOnce"%go, serverVersionAdapter__processInternalRaftRequestOnceⁱᵐᵖˡ); ("promoteMember"%go, serverVersionAdapter__promoteMemberⁱᵐᵖˡ); ("publishV3"%go, serverVersionAdapter__publishV3ⁱᵐᵖˡ); ("purgeFile"%go, serverVersionAdapter__purgeFileⁱᵐᵖˡ); ("raftRequest"%go, serverVersionAdapter__raftRequestⁱᵐᵖˡ); ("raftRequestOnce"%go, serverVersionAdapter__raftRequestOnceⁱᵐᵖˡ); ("raftStatus"%go, serverVersionAdapter__raftStatusⁱᵐᵖˡ); ("requestCurrentIndex"%go, serverVersionAdapter__requestCurrentIndexⁱᵐᵖˡ); ("restoreAlarms"%go, serverVersionAdapter__restoreAlarmsⁱᵐᵖˡ); ("revokeExpiredLeases"%go, serverVersionAdapter__revokeExpiredLeasesⁱᵐᵖˡ); ("run"%go, serverVersionAdapter__runⁱᵐᵖˡ); ("sendMergedSnap"%go, serverVersionAdapter__sendMergedSnapⁱᵐᵖˡ); ("sendReadIndex"%go, serverVersionAdapter__sendReadIndexⁱᵐᵖˡ); ("setAppliedIndex"%go, serverVersionAdapter__setAppliedIndexⁱᵐᵖˡ); ("setCommittedIndex"%go, serverVersionAdapter__setCommittedIndexⁱᵐᵖˡ); ("setLead"%go, serverVersionAdapter__setLeadⁱᵐᵖˡ); ("setTerm"%go, serverVersionAdapter__setTermⁱᵐᵖˡ); ("shouldSnapshotToDisk"%go, serverVersionAdapter__shouldSnapshotToDiskⁱᵐᵖˡ); ("shouldSnapshotToMemory"%go, serverVersionAdapter__shouldSnapshotToMemoryⁱᵐᵖˡ); ("snapshot"%go, serverVersionAdapter__snapshotⁱᵐᵖˡ); ("snapshotIfNeededAndCompactRaftLog"%go, serverVersionAdapter__snapshotIfNeededAndCompactRaftLogⁱᵐᵖˡ); ("start"%go, serverVersionAdapter__startⁱᵐᵖˡ); ("stopWithDelay"%go, serverVersionAdapter__stopWithDelayⁱᵐᵖˡ); ("triggerCorruptAlarm"%go, serverVersionAdapter__triggerCorruptAlarmⁱᵐᵖˡ); ("updateClusterVersionV3"%go, serverVersionAdapter__updateClusterVersionV3ⁱᵐᵖˡ); ("waitAppliedIndex"%go, serverVersionAdapter__waitAppliedIndexⁱᵐᵖˡ); ("waitLeader"%go, serverVersionAdapter__waitLeaderⁱᵐᵖˡ)]); (ptrT.id serverVersionAdapter.id, [("AddMember"%go, serverVersionAdapter__AddMemberⁱᵐᵖˡ); ("Alarm"%go, serverVersionAdapter__Alarmⁱᵐᵖˡ); ("Alarms"%go, serverVersionAdapter__Alarmsⁱᵐᵖˡ); ("AppliedIndex"%go, serverVersionAdapter__AppliedIndexⁱᵐᵖˡ); ("ApplyWait"%go, serverVersionAdapter__ApplyWaitⁱᵐᵖˡ); ("AuthDisable"%go, serverVersionAdapter__AuthDisableⁱᵐᵖˡ); ("AuthEnable"%go, serverVersionAdapter__AuthEnableⁱᵐᵖˡ); ("AuthInfoFromCtx"%go, serverVersionAdapter__AuthInfoFromCtxⁱᵐᵖˡ); ("AuthStatus"%go, serverVersionAdapter__AuthStatusⁱᵐᵖˡ); ("AuthStore"%go, serverVersionAdapter__AuthStoreⁱᵐᵖˡ); ("Authenticate"%go, serverVersionAdapter__Authenticateⁱᵐᵖˡ); ("Backend"%go, serverVersionAdapter__Backendⁱᵐᵖˡ); ("Cleanup"%go, serverVersionAdapter__Cleanupⁱᵐᵖˡ); ("ClientCertAuthEnabled"%go, serverVersionAdapter__ClientCertAuthEnabledⁱᵐᵖˡ); ("Cluster"%go, serverVersionAdapter__Clusterⁱᵐᵖˡ); ("ClusterVersion"%go, serverVersionAdapter__ClusterVersionⁱᵐᵖˡ); ("CommittedIndex"%go, serverVersionAdapter__CommittedIndexⁱᵐᵖˡ); ("Compact"%go, serverVersionAdapter__Compactⁱᵐᵖˡ); ("Config"%go, serverVersionAdapter__Configⁱᵐᵖˡ); ("CorruptionChecker"%go, serverVersionAdapter__CorruptionCheckerⁱᵐᵖˡ); ("CutPeer"%go, serverVersionAdapter__CutPeerⁱᵐᵖˡ); ("DeleteRange"%go, serverVersionAdapter__DeleteRangeⁱᵐᵖˡ); ("Downgrade"%go, serverVersionAdapter__Downgradeⁱᵐᵖˡ); ("DowngradeCancel"%go, serverVersionAdapter__DowngradeCancelⁱᵐᵖˡ); ("DowngradeEnable"%go, serverVersionAdapter__DowngradeEnableⁱᵐᵖˡ); ("DowngradeEnabledHandler"%go, serverVersionAdapter__DowngradeEnabledHandlerⁱᵐᵖˡ); ("DowngradeInfo"%go, serverVersionAdapter__DowngradeInfoⁱᵐᵖˡ); ("FeatureEnabled"%go, serverVersionAdapter__FeatureEnabledⁱᵐᵖˡ); ("FirstCommitInTermNotify"%go, serverVersionAdapter__FirstCommitInTermNotifyⁱᵐᵖˡ); ("ForceSnapshot"%go, serverVersionAdapter__ForceSnapshotⁱᵐᵖˡ); ("GetClusterVersion"%go, serverVersionAdapter__GetClusterVersionⁱᵐᵖˡ); ("GetDowngradeInfo"%go, serverVersionAdapter__GetDowngradeInfoⁱᵐᵖˡ); ("GetMembersVersions"%go, serverVersionAdapter__GetMembersVersionsⁱᵐᵖˡ); ("GetStorageVersion"%go, serverVersionAdapter__GetStorageVersionⁱᵐᵖˡ); ("GoAttach"%go, serverVersionAdapter__GoAttachⁱᵐᵖˡ); ("HardStop"%go, serverVersionAdapter__HardStopⁱᵐᵖˡ); ("HashKVHandler"%go, serverVersionAdapter__HashKVHandlerⁱᵐᵖˡ); ("IsHostWhitelisted"%go, serverVersionAdapter__IsHostWhitelistedⁱᵐᵖˡ); ("IsIDRemoved"%go, serverVersionAdapter__IsIDRemovedⁱᵐᵖˡ); ("IsLearner"%go, serverVersionAdapter__IsLearnerⁱᵐᵖˡ); ("IsMemberExist"%go, serverVersionAdapter__IsMemberExistⁱᵐᵖˡ); ("KV"%go, serverVersionAdapter__KVⁱᵐᵖˡ); ("Lead"%go, serverVersionAdapter__Leadⁱᵐᵖˡ); ("Leader"%go, serverVersionAdapter__Leaderⁱᵐᵖˡ); ("LeaderChangedNotify"%go, serverVersionAdapter__LeaderChangedNotifyⁱᵐᵖˡ); ("LeaseGrant"%go, serverVersionAdapter__LeaseGrantⁱᵐᵖˡ); ("LeaseHandler"%go, serverVersionAdapter__LeaseHandlerⁱᵐᵖˡ); ("LeaseLeases"%go, serverVersionAdapter__LeaseLeasesⁱᵐᵖˡ); ("LeaseRenew"%go, serverVersionAdapter__LeaseRenewⁱᵐᵖˡ); ("LeaseRevoke"%go, serverVersionAdapter__LeaseRevokeⁱᵐᵖˡ); ("LeaseTimeToLive"%go, serverVersionAdapter__LeaseTimeToLiveⁱᵐᵖˡ); ("LinearizableReadNotify"%go, serverVersionAdapter__LinearizableReadNotifyⁱᵐᵖˡ); ("Logger"%go, serverVersionAdapter__Loggerⁱᵐᵖˡ); ("MemberID"%go, serverVersionAdapter__MemberIDⁱᵐᵖˡ); ("MemberId"%go, serverVersionAdapter__MemberIdⁱᵐᵖˡ); ("MendPeer"%go, serverVersionAdapter__MendPeerⁱᵐᵖˡ); ("MoveLeader"%go, serverVersionAdapter__MoveLeaderⁱᵐᵖˡ); ("NewUberApplier"%go, serverVersionAdapter__NewUberApplierⁱᵐᵖˡ); ("OriginAllowed"%go, serverVersionAdapter__OriginAllowedⁱᵐᵖˡ); ("PauseSending"%go, serverVersionAdapter__PauseSendingⁱᵐᵖˡ); ("Process"%go, serverVersionAdapter__Processⁱᵐᵖˡ); ("PromoteMember"%go, serverVersionAdapter__PromoteMemberⁱᵐᵖˡ); ("Put"%go, serverVersionAdapter__Putⁱᵐᵖˡ); ("RaftHandler"%go, serverVersionAdapter__RaftHandlerⁱᵐᵖˡ); ("Range"%go, serverVersionAdapter__Rangeⁱᵐᵖˡ); ("ReadyNotify"%go, serverVersionAdapter__ReadyNotifyⁱᵐᵖˡ); ("RemoveMember"%go, serverVersionAdapter__RemoveMemberⁱᵐᵖˡ); ("ReportSnapshot"%go, serverVersionAdapter__ReportSnapshotⁱᵐᵖˡ); ("ReportUnreachable"%go, serverVersionAdapter__ReportUnreachableⁱᵐᵖˡ); ("ResumeSending"%go, serverVersionAdapter__ResumeSendingⁱᵐᵖˡ); ("RoleAdd"%go, serverVersionAdapter__RoleAddⁱᵐᵖˡ); ("RoleDelete"%go, serverVersionAdapter__RoleDeleteⁱᵐᵖˡ); ("RoleGet"%go, serverVersionAdapter__RoleGetⁱᵐᵖˡ); ("RoleGrantPermission"%go, serverVersionAdapter__RoleGrantPermissionⁱᵐᵖˡ); ("RoleList"%go, serverVersionAdapter__RoleListⁱᵐᵖˡ); ("RoleRevokePermission"%go, serverVersionAdapter__RoleRevokePermissionⁱᵐᵖˡ); ("Start"%go, serverVersionAdapter__Startⁱᵐᵖˡ); ("Stop"%go, serverVersionAdapter__Stopⁱᵐᵖˡ); ("StopNotify"%go, serverVersionAdapter__StopNotifyⁱᵐᵖˡ); ("StoppingNotify"%go, serverVersionAdapter__StoppingNotifyⁱᵐᵖˡ); ("StorageVersion"%go, serverVersionAdapter__StorageVersionⁱᵐᵖˡ); ("Term"%go, serverVersionAdapter__Termⁱᵐᵖˡ); ("TryTransferLeadershipOnShutdown"%go, serverVersionAdapter__TryTransferLeadershipOnShutdownⁱᵐᵖˡ); ("Txn"%go, serverVersionAdapter__Txnⁱᵐᵖˡ); ("UpdateClusterVersion"%go, serverVersionAdapter__UpdateClusterVersionⁱᵐᵖˡ); ("UpdateMember"%go, serverVersionAdapter__UpdateMemberⁱᵐᵖˡ); ("UpdateStorageVersion"%go, serverVersionAdapter__UpdateStorageVersionⁱᵐᵖˡ); ("UserAdd"%go, serverVersionAdapter__UserAddⁱᵐᵖˡ); ("UserChangePassword"%go, serverVersionAdapter__UserChangePasswordⁱᵐᵖˡ); ("UserDelete"%go, serverVersionAdapter__UserDeleteⁱᵐᵖˡ); ("UserGet"%go, serverVersionAdapter__UserGetⁱᵐᵖˡ); ("UserGrantRole"%go, serverVersionAdapter__UserGrantRoleⁱᵐᵖˡ); ("UserList"%go, serverVersionAdapter__UserListⁱᵐᵖˡ); ("UserRevokeRole"%go, serverVersionAdapter__UserRevokeRoleⁱᵐᵖˡ); ("Version"%go, serverVersionAdapter__Versionⁱᵐᵖˡ); ("Watchable"%go, serverVersionAdapter__Watchableⁱᵐᵖˡ); ("adjustTicks"%go, serverVersionAdapter__adjustTicksⁱᵐᵖˡ); ("apply"%go, serverVersionAdapter__applyⁱᵐᵖˡ); ("applyAll"%go, serverVersionAdapter__applyAllⁱᵐᵖˡ); ("applyConfChange"%go, serverVersionAdapter__applyConfChangeⁱᵐᵖˡ); ("applyEntries"%go, serverVersionAdapter__applyEntriesⁱᵐᵖˡ); ("applyEntryNormal"%go, serverVersionAdapter__applyEntryNormalⁱᵐᵖˡ); ("applyInternalRaftRequest"%go, serverVersionAdapter__applyInternalRaftRequestⁱᵐᵖˡ); ("applySnapshot"%go, serverVersionAdapter__applySnapshotⁱᵐᵖˡ); ("checkLeaseTimeToLive"%go, serverVersionAdapter__checkLeaseTimeToLiveⁱᵐᵖˡ); ("checkMembershipOperationPermission"%go, serverVersionAdapter__checkMembershipOperationPermissionⁱᵐᵖˡ); ("compactRaftLog"%go, serverVersionAdapter__compactRaftLogⁱᵐᵖˡ); ("configure"%go, serverVersionAdapter__configureⁱᵐᵖˡ); ("createMergedSnapshotMessage"%go, serverVersionAdapter__createMergedSnapshotMessageⁱᵐᵖˡ); ("doSerialize"%go, serverVersionAdapter__doSerializeⁱᵐᵖˡ); ("downgradeCancel"%go, serverVersionAdapter__downgradeCancelⁱᵐᵖˡ); ("downgradeEnable"%go, serverVersionAdapter__downgradeEnableⁱᵐᵖˡ); ("downgradeValidate"%go, serverVersionAdapter__downgradeValidateⁱᵐᵖˡ); ("ensureLeadership"%go, serverVersionAdapter__ensureLeadershipⁱᵐᵖˡ); ("getAppliedIndex"%go, serverVersionAdapter__getAppliedIndexⁱᵐᵖˡ); ("getCommittedIndex"%go, serverVersionAdapter__getCommittedIndexⁱᵐᵖˡ); ("getLead"%go, serverVersionAdapter__getLeadⁱᵐᵖˡ); ("getPeerHashKVs"%go, serverVersionAdapter__getPeerHashKVsⁱᵐᵖˡ); ("getTerm"%go, serverVersionAdapter__getTermⁱᵐᵖˡ); ("getTxPostLockInsideApplyHook"%go, serverVersionAdapter__getTxPostLockInsideApplyHookⁱᵐᵖˡ); ("hasMultipleVotingMembers"%go, serverVersionAdapter__hasMultipleVotingMembersⁱᵐᵖˡ); ("isActive"%go, serverVersionAdapter__isActiveⁱᵐᵖˡ); ("isLeader"%go, serverVersionAdapter__isLeaderⁱᵐᵖˡ); ("isLearnerReady"%go, serverVersionAdapter__isLearnerReadyⁱᵐᵖˡ); ("leaseTimeToLive"%go, serverVersionAdapter__leaseTimeToLiveⁱᵐᵖˡ); ("linearizableReadLoop"%go, serverVersionAdapter__linearizableReadLoopⁱᵐᵖˡ); ("linearizableReadNotify"%go, serverVersionAdapter__linearizableReadNotifyⁱᵐᵖˡ); ("mayAddMember"%go, serverVersionAdapter__mayAddMemberⁱᵐᵖˡ); ("mayPromoteMember"%go, serverVersionAdapter__mayPromoteMemberⁱᵐᵖˡ); ("mayRemoveMember"%go, serverVersionAdapter__mayRemoveMemberⁱᵐᵖˡ); ("monitorClusterVersions"%go, serverVersionAdapter__monitorClusterVersionsⁱᵐᵖˡ); ("monitorCompactHash"%go, serverVersionAdapter__monitorCompactHashⁱᵐᵖˡ); ("monitorDowngrade"%go, serverVersionAdapter__monitorDowngradeⁱᵐᵖˡ); ("monitorKVHash"%go, serverVersionAdapter__monitorKVHashⁱᵐᵖˡ); ("monitorStorageVersion"%go, serverVersionAdapter__monitorStorageVersionⁱᵐᵖˡ); ("newHeader"%go, serverVersionAdapter__newHeaderⁱᵐᵖˡ); ("parseProposeCtxErr"%go, serverVersionAdapter__parseProposeCtxErrⁱᵐᵖˡ); ("processInternalRaftRequestOnce"%go, serverVersionAdapter__processInternalRaftRequestOnceⁱᵐᵖˡ); ("promoteMember"%go, serverVersionAdapter__promoteMemberⁱᵐᵖˡ); ("publishV3"%go, serverVersionAdapter__publishV3ⁱᵐᵖˡ); ("purgeFile"%go, serverVersionAdapter__purgeFileⁱᵐᵖˡ); ("raftRequest"%go, serverVersionAdapter__raftRequestⁱᵐᵖˡ); ("raftRequestOnce"%go, serverVersionAdapter__raftRequestOnceⁱᵐᵖˡ); ("raftStatus"%go, serverVersionAdapter__raftStatusⁱᵐᵖˡ); ("requestCurrentIndex"%go, serverVersionAdapter__requestCurrentIndexⁱᵐᵖˡ); ("restoreAlarms"%go, serverVersionAdapter__restoreAlarmsⁱᵐᵖˡ); ("revokeExpiredLeases"%go, serverVersionAdapter__revokeExpiredLeasesⁱᵐᵖˡ); ("run"%go, serverVersionAdapter__runⁱᵐᵖˡ); ("sendMergedSnap"%go, serverVersionAdapter__sendMergedSnapⁱᵐᵖˡ); ("sendReadIndex"%go, serverVersionAdapter__sendReadIndexⁱᵐᵖˡ); ("setAppliedIndex"%go, serverVersionAdapter__setAppliedIndexⁱᵐᵖˡ); ("setCommittedIndex"%go, serverVersionAdapter__setCommittedIndexⁱᵐᵖˡ); ("setLead"%go, serverVersionAdapter__setLeadⁱᵐᵖˡ); ("setTerm"%go, serverVersionAdapter__setTermⁱᵐᵖˡ); ("shouldSnapshotToDisk"%go, serverVersionAdapter__shouldSnapshotToDiskⁱᵐᵖˡ); ("shouldSnapshotToMemory"%go, serverVersionAdapter__shouldSnapshotToMemoryⁱᵐᵖˡ); ("snapshot"%go, serverVersionAdapter__snapshotⁱᵐᵖˡ); ("snapshotIfNeededAndCompactRaftLog"%go, serverVersionAdapter__snapshotIfNeededAndCompactRaftLogⁱᵐᵖˡ); ("start"%go, serverVersionAdapter__startⁱᵐᵖˡ); ("stopWithDelay"%go, serverVersionAdapter__stopWithDelayⁱᵐᵖˡ); ("triggerCorruptAlarm"%go, serverVersionAdapter__triggerCorruptAlarmⁱᵐᵖˡ); ("updateClusterVersionV3"%go, serverVersionAdapter__updateClusterVersionV3ⁱᵐᵖˡ); ("waitAppliedIndex"%go, serverVersionAdapter__waitAppliedIndexⁱᵐᵖˡ); ("waitLeader"%go, serverVersionAdapter__waitLeaderⁱᵐᵖˡ)]); (bootstrappedServer.id, []); (ptrT.id bootstrappedServer.id, [("Close"%go, bootstrappedServer__Closeⁱᵐᵖˡ)]); (bootstrappedStorage.id, []); (ptrT.id bootstrappedStorage.id, [("Close"%go, bootstrappedStorage__Closeⁱᵐᵖˡ)]); (bootstrappedBackend.id, []); (ptrT.id bootstrappedBackend.id, [("Close"%go, bootstrappedBackend__Closeⁱᵐᵖˡ)]); (bootstrappedCluster.id, []); (ptrT.id bootstrappedCluster.id, [("Finalize"%go, bootstrappedCluster__Finalizeⁱᵐᵖˡ); ("databaseFileMissing"%go, bootstrappedCluster__databaseFileMissingⁱᵐᵖˡ)]); (bootstrappedRaft.id, []); (ptrT.id bootstrappedRaft.id, [("newRaftNode"%go, bootstrappedRaft__newRaftNodeⁱᵐᵖˡ)]); (snapshotMetadata.id, []); (ptrT.id snapshotMetadata.id, []); (bootstrappedWAL.id, []); (ptrT.id bootstrappedWAL.id, [("AppendAndCommitEntries"%go, bootstrappedWAL__AppendAndCommitEntriesⁱᵐᵖˡ); ("CommitedEntries"%go, bootstrappedWAL__CommitedEntriesⁱᵐᵖˡ); ("MemoryStorage"%go, bootstrappedWAL__MemoryStorageⁱᵐᵖˡ); ("NewConfigChangeEntries"%go, bootstrappedWAL__NewConfigChangeEntriesⁱᵐᵖˡ)]); (corruptionChecker.id, []); (ptrT.id corruptionChecker.id, [("CompactHashCheck"%go, corruptionChecker__CompactHashCheckⁱᵐᵖˡ); ("InitialCheck"%go, corruptionChecker__InitialCheckⁱᵐᵖˡ); ("PeriodicCheck"%go, corruptionChecker__PeriodicCheckⁱᵐᵖˡ); ("checkPeerHashes"%go, corruptionChecker__checkPeerHashesⁱᵐᵖˡ); ("handleConsistentHash"%go, corruptionChecker__handleConsistentHashⁱᵐᵖˡ); ("uncheckedRevisions"%go, corruptionChecker__uncheckedRevisionsⁱᵐᵖˡ)]); (hasherAdapter.id, [("AddMember"%go, hasherAdapter__AddMemberⁱᵐᵖˡ); ("Alarm"%go, hasherAdapter__Alarmⁱᵐᵖˡ); ("Alarms"%go, hasherAdapter__Alarmsⁱᵐᵖˡ); ("AppliedIndex"%go, hasherAdapter__AppliedIndexⁱᵐᵖˡ); ("ApplyWait"%go, hasherAdapter__ApplyWaitⁱᵐᵖˡ); ("AuthDisable"%go, hasherAdapter__AuthDisableⁱᵐᵖˡ); ("AuthEnable"%go, hasherAdapter__AuthEnableⁱᵐᵖˡ); ("AuthInfoFromCtx"%go, hasherAdapter__AuthInfoFromCtxⁱᵐᵖˡ); ("AuthStatus"%go, hasherAdapter__AuthStatusⁱᵐᵖˡ); ("AuthStore"%go, hasherAdapter__AuthStoreⁱᵐᵖˡ); ("Authenticate"%go, hasherAdapter__Authenticateⁱᵐᵖˡ); ("Backend"%go, hasherAdapter__Backendⁱᵐᵖˡ); ("Cleanup"%go, hasherAdapter__Cleanupⁱᵐᵖˡ); ("ClientCertAuthEnabled"%go, hasherAdapter__ClientCertAuthEnabledⁱᵐᵖˡ); ("Cluster"%go, hasherAdapter__Clusterⁱᵐᵖˡ); ("ClusterVersion"%go, hasherAdapter__ClusterVersionⁱᵐᵖˡ); ("CommittedIndex"%go, hasherAdapter__CommittedIndexⁱᵐᵖˡ); ("Compact"%go, hasherAdapter__Compactⁱᵐᵖˡ); ("Config"%go, hasherAdapter__Configⁱᵐᵖˡ); ("CorruptionChecker"%go, hasherAdapter__CorruptionCheckerⁱᵐᵖˡ); ("CutPeer"%go, hasherAdapter__CutPeerⁱᵐᵖˡ); ("DeleteRange"%go, hasherAdapter__DeleteRangeⁱᵐᵖˡ); ("Downgrade"%go, hasherAdapter__Downgradeⁱᵐᵖˡ); ("DowngradeEnabledHandler"%go, hasherAdapter__DowngradeEnabledHandlerⁱᵐᵖˡ); ("DowngradeInfo"%go, hasherAdapter__DowngradeInfoⁱᵐᵖˡ); ("FeatureEnabled"%go, hasherAdapter__FeatureEnabledⁱᵐᵖˡ); ("FirstCommitInTermNotify"%go, hasherAdapter__FirstCommitInTermNotifyⁱᵐᵖˡ); ("ForceSnapshot"%go, hasherAdapter__ForceSnapshotⁱᵐᵖˡ); ("GoAttach"%go, hasherAdapter__GoAttachⁱᵐᵖˡ); ("HardStop"%go, hasherAdapter__HardStopⁱᵐᵖˡ); ("Hash"%go, hasherAdapter__Hashⁱᵐᵖˡ); ("HashByRev"%go, hasherAdapter__HashByRevⁱᵐᵖˡ); ("HashKVHandler"%go, hasherAdapter__HashKVHandlerⁱᵐᵖˡ); ("Hashes"%go, hasherAdapter__Hashesⁱᵐᵖˡ); ("IsHostWhitelisted"%go, hasherAdapter__IsHostWhitelistedⁱᵐᵖˡ); ("IsIDRemoved"%go, hasherAdapter__IsIDRemovedⁱᵐᵖˡ); ("IsLearner"%go, hasherAdapter__IsLearnerⁱᵐᵖˡ); ("IsMemberExist"%go, hasherAdapter__IsMemberExistⁱᵐᵖˡ); ("KV"%go, hasherAdapter__KVⁱᵐᵖˡ); ("Lead"%go, hasherAdapter__Leadⁱᵐᵖˡ); ("Leader"%go, hasherAdapter__Leaderⁱᵐᵖˡ); ("LeaderChangedNotify"%go, hasherAdapter__LeaderChangedNotifyⁱᵐᵖˡ); ("LeaseGrant"%go, hasherAdapter__LeaseGrantⁱᵐᵖˡ); ("LeaseHandler"%go, hasherAdapter__LeaseHandlerⁱᵐᵖˡ); ("LeaseLeases"%go, hasherAdapter__LeaseLeasesⁱᵐᵖˡ); ("LeaseRenew"%go, hasherAdapter__LeaseRenewⁱᵐᵖˡ); ("LeaseRevoke"%go, hasherAdapter__LeaseRevokeⁱᵐᵖˡ); ("LeaseTimeToLive"%go, hasherAdapter__LeaseTimeToLiveⁱᵐᵖˡ); ("LinearizableReadNotify"%go, hasherAdapter__LinearizableReadNotifyⁱᵐᵖˡ); ("Logger"%go, hasherAdapter__Loggerⁱᵐᵖˡ); ("MemberID"%go, hasherAdapter__MemberIDⁱᵐᵖˡ); ("MemberId"%go, hasherAdapter__MemberIdⁱᵐᵖˡ); ("MendPeer"%go, hasherAdapter__MendPeerⁱᵐᵖˡ); ("MoveLeader"%go, hasherAdapter__MoveLeaderⁱᵐᵖˡ); ("NewUberApplier"%go, hasherAdapter__NewUberApplierⁱᵐᵖˡ); ("OriginAllowed"%go, hasherAdapter__OriginAllowedⁱᵐᵖˡ); ("PauseSending"%go, hasherAdapter__PauseSendingⁱᵐᵖˡ); ("PeerHashByRev"%go, hasherAdapter__PeerHashByRevⁱᵐᵖˡ); ("Process"%go, hasherAdapter__Processⁱᵐᵖˡ); ("PromoteMember"%go, hasherAdapter__PromoteMemberⁱᵐᵖˡ); ("Put"%go, hasherAdapter__Putⁱᵐᵖˡ); ("RaftHandler"%go, hasherAdapter__RaftHandlerⁱᵐᵖˡ); ("Range"%go, hasherAdapter__Rangeⁱᵐᵖˡ); ("ReadyNotify"%go, hasherAdapter__ReadyNotifyⁱᵐᵖˡ); ("RemoveMember"%go, hasherAdapter__RemoveMemberⁱᵐᵖˡ); ("ReportSnapshot"%go, hasherAdapter__ReportSnapshotⁱᵐᵖˡ); ("ReportUnreachable"%go, hasherAdapter__ReportUnreachableⁱᵐᵖˡ); ("ReqTimeout"%go, hasherAdapter__ReqTimeoutⁱᵐᵖˡ); ("ResumeSending"%go, hasherAdapter__ResumeSendingⁱᵐᵖˡ); ("RoleAdd"%go, hasherAdapter__RoleAddⁱᵐᵖˡ); ("RoleDelete"%go, hasherAdapter__RoleDeleteⁱᵐᵖˡ); ("RoleGet"%go, hasherAdapter__RoleGetⁱᵐᵖˡ); ("RoleGrantPermission"%go, hasherAdapter__RoleGrantPermissionⁱᵐᵖˡ); ("RoleList"%go, hasherAdapter__RoleListⁱᵐᵖˡ); ("RoleRevokePermission"%go, hasherAdapter__RoleRevokePermissionⁱᵐᵖˡ); ("Start"%go, hasherAdapter__Startⁱᵐᵖˡ); ("Stop"%go, hasherAdapter__Stopⁱᵐᵖˡ); ("StopNotify"%go, hasherAdapter__StopNotifyⁱᵐᵖˡ); ("StoppingNotify"%go, hasherAdapter__StoppingNotifyⁱᵐᵖˡ); ("StorageVersion"%go, hasherAdapter__StorageVersionⁱᵐᵖˡ); ("Store"%go, hasherAdapter__Storeⁱᵐᵖˡ); ("Term"%go, hasherAdapter__Termⁱᵐᵖˡ); ("TriggerCorruptAlarm"%go, hasherAdapter__TriggerCorruptAlarmⁱᵐᵖˡ); ("TryTransferLeadershipOnShutdown"%go, hasherAdapter__TryTransferLeadershipOnShutdownⁱᵐᵖˡ); ("Txn"%go, hasherAdapter__Txnⁱᵐᵖˡ); ("UpdateMember"%go, hasherAdapter__UpdateMemberⁱᵐᵖˡ); ("UserAdd"%go, hasherAdapter__UserAddⁱᵐᵖˡ); ("UserChangePassword"%go, hasherAdapter__UserChangePasswordⁱᵐᵖˡ); ("UserDelete"%go, hasherAdapter__UserDeleteⁱᵐᵖˡ); ("UserGet"%go, hasherAdapter__UserGetⁱᵐᵖˡ); ("UserGrantRole"%go, hasherAdapter__UserGrantRoleⁱᵐᵖˡ); ("UserList"%go, hasherAdapter__UserListⁱᵐᵖˡ); ("UserRevokeRole"%go, hasherAdapter__UserRevokeRoleⁱᵐᵖˡ); ("Version"%go, hasherAdapter__Versionⁱᵐᵖˡ); ("Watchable"%go, hasherAdapter__Watchableⁱᵐᵖˡ); ("adjustTicks"%go, hasherAdapter__adjustTicksⁱᵐᵖˡ); ("apply"%go, hasherAdapter__applyⁱᵐᵖˡ); ("applyAll"%go, hasherAdapter__applyAllⁱᵐᵖˡ); ("applyConfChange"%go, hasherAdapter__applyConfChangeⁱᵐᵖˡ); ("applyEntries"%go, hasherAdapter__applyEntriesⁱᵐᵖˡ); ("applyEntryNormal"%go, hasherAdapter__applyEntryNormalⁱᵐᵖˡ); ("applyInternalRaftRequest"%go, hasherAdapter__applyInternalRaftRequestⁱᵐᵖˡ); ("applySnapshot"%go, hasherAdapter__applySnapshotⁱᵐᵖˡ); ("checkLeaseTimeToLive"%go, hasherAdapter__checkLeaseTimeToLiveⁱᵐᵖˡ); ("checkMembershipOperationPermission"%go, hasherAdapter__checkMembershipOperationPermissionⁱᵐᵖˡ); ("compactRaftLog"%go, hasherAdapter__compactRaftLogⁱᵐᵖˡ); ("configure"%go, hasherAdapter__configureⁱᵐᵖˡ); ("createMergedSnapshotMessage"%go, hasherAdapter__createMergedSnapshotMessageⁱᵐᵖˡ); ("doSerialize"%go, hasherAdapter__doSerializeⁱᵐᵖˡ); ("downgradeCancel"%go, hasherAdapter__downgradeCancelⁱᵐᵖˡ); ("downgradeEnable"%go, hasherAdapter__downgradeEnableⁱᵐᵖˡ); ("downgradeValidate"%go, hasherAdapter__downgradeValidateⁱᵐᵖˡ); ("ensureLeadership"%go, hasherAdapter__ensureLeadershipⁱᵐᵖˡ); ("getAppliedIndex"%go, hasherAdapter__getAppliedIndexⁱᵐᵖˡ); ("getCommittedIndex"%go, hasherAdapter__getCommittedIndexⁱᵐᵖˡ); ("getLead"%go, hasherAdapter__getLeadⁱᵐᵖˡ); ("getPeerHashKVs"%go, hasherAdapter__getPeerHashKVsⁱᵐᵖˡ); ("getTerm"%go, hasherAdapter__getTermⁱᵐᵖˡ); ("getTxPostLockInsideApplyHook"%go, hasherAdapter__getTxPostLockInsideApplyHookⁱᵐᵖˡ); ("hasMultipleVotingMembers"%go, hasherAdapter__hasMultipleVotingMembersⁱᵐᵖˡ); ("isActive"%go, hasherAdapter__isActiveⁱᵐᵖˡ); ("isLeader"%go, hasherAdapter__isLeaderⁱᵐᵖˡ); ("isLearnerReady"%go, hasherAdapter__isLearnerReadyⁱᵐᵖˡ); ("leaseTimeToLive"%go, hasherAdapter__leaseTimeToLiveⁱᵐᵖˡ); ("linearizableReadLoop"%go, hasherAdapter__linearizableReadLoopⁱᵐᵖˡ); ("linearizableReadNotify"%go, hasherAdapter__linearizableReadNotifyⁱᵐᵖˡ); ("mayAddMember"%go, hasherAdapter__mayAddMemberⁱᵐᵖˡ); ("mayPromoteMember"%go, hasherAdapter__mayPromoteMemberⁱᵐᵖˡ); ("mayRemoveMember"%go, hasherAdapter__mayRemoveMemberⁱᵐᵖˡ); ("monitorClusterVersions"%go, hasherAdapter__monitorClusterVersionsⁱᵐᵖˡ); ("monitorCompactHash"%go, hasherAdapter__monitorCompactHashⁱᵐᵖˡ); ("monitorDowngrade"%go, hasherAdapter__monitorDowngradeⁱᵐᵖˡ); ("monitorKVHash"%go, hasherAdapter__monitorKVHashⁱᵐᵖˡ); ("monitorStorageVersion"%go, hasherAdapter__monitorStorageVersionⁱᵐᵖˡ); ("newHeader"%go, hasherAdapter__newHeaderⁱᵐᵖˡ); ("parseProposeCtxErr"%go, hasherAdapter__parseProposeCtxErrⁱᵐᵖˡ); ("processInternalRaftRequestOnce"%go, hasherAdapter__processInternalRaftRequestOnceⁱᵐᵖˡ); ("promoteMember"%go, hasherAdapter__promoteMemberⁱᵐᵖˡ); ("publishV3"%go, hasherAdapter__publishV3ⁱᵐᵖˡ); ("purgeFile"%go, hasherAdapter__purgeFileⁱᵐᵖˡ); ("raftRequest"%go, hasherAdapter__raftRequestⁱᵐᵖˡ); ("raftRequestOnce"%go, hasherAdapter__raftRequestOnceⁱᵐᵖˡ); ("raftStatus"%go, hasherAdapter__raftStatusⁱᵐᵖˡ); ("requestCurrentIndex"%go, hasherAdapter__requestCurrentIndexⁱᵐᵖˡ); ("restoreAlarms"%go, hasherAdapter__restoreAlarmsⁱᵐᵖˡ); ("revokeExpiredLeases"%go, hasherAdapter__revokeExpiredLeasesⁱᵐᵖˡ); ("run"%go, hasherAdapter__runⁱᵐᵖˡ); ("sendMergedSnap"%go, hasherAdapter__sendMergedSnapⁱᵐᵖˡ); ("sendReadIndex"%go, hasherAdapter__sendReadIndexⁱᵐᵖˡ); ("setAppliedIndex"%go, hasherAdapter__setAppliedIndexⁱᵐᵖˡ); ("setCommittedIndex"%go, hasherAdapter__setCommittedIndexⁱᵐᵖˡ); ("setLead"%go, hasherAdapter__setLeadⁱᵐᵖˡ); ("setTerm"%go, hasherAdapter__setTermⁱᵐᵖˡ); ("shouldSnapshotToDisk"%go, hasherAdapter__shouldSnapshotToDiskⁱᵐᵖˡ); ("shouldSnapshotToMemory"%go, hasherAdapter__shouldSnapshotToMemoryⁱᵐᵖˡ); ("snapshot"%go, hasherAdapter__snapshotⁱᵐᵖˡ); ("snapshotIfNeededAndCompactRaftLog"%go, hasherAdapter__snapshotIfNeededAndCompactRaftLogⁱᵐᵖˡ); ("start"%go, hasherAdapter__startⁱᵐᵖˡ); ("stopWithDelay"%go, hasherAdapter__stopWithDelayⁱᵐᵖˡ); ("triggerCorruptAlarm"%go, hasherAdapter__triggerCorruptAlarmⁱᵐᵖˡ); ("updateClusterVersionV3"%go, hasherAdapter__updateClusterVersionV3ⁱᵐᵖˡ); ("waitAppliedIndex"%go, hasherAdapter__waitAppliedIndexⁱᵐᵖˡ); ("waitLeader"%go, hasherAdapter__waitLeaderⁱᵐᵖˡ)]); (ptrT.id hasherAdapter.id, [("AddMember"%go, hasherAdapter__AddMemberⁱᵐᵖˡ); ("Alarm"%go, hasherAdapter__Alarmⁱᵐᵖˡ); ("Alarms"%go, hasherAdapter__Alarmsⁱᵐᵖˡ); ("AppliedIndex"%go, hasherAdapter__AppliedIndexⁱᵐᵖˡ); ("ApplyWait"%go, hasherAdapter__ApplyWaitⁱᵐᵖˡ); ("AuthDisable"%go, hasherAdapter__AuthDisableⁱᵐᵖˡ); ("AuthEnable"%go, hasherAdapter__AuthEnableⁱᵐᵖˡ); ("AuthInfoFromCtx"%go, hasherAdapter__AuthInfoFromCtxⁱᵐᵖˡ); ("AuthStatus"%go, hasherAdapter__AuthStatusⁱᵐᵖˡ); ("AuthStore"%go, hasherAdapter__AuthStoreⁱᵐᵖˡ); ("Authenticate"%go, hasherAdapter__Authenticateⁱᵐᵖˡ); ("Backend"%go, hasherAdapter__Backendⁱᵐᵖˡ); ("Cleanup"%go, hasherAdapter__Cleanupⁱᵐᵖˡ); ("ClientCertAuthEnabled"%go, hasherAdapter__ClientCertAuthEnabledⁱᵐᵖˡ); ("Cluster"%go, hasherAdapter__Clusterⁱᵐᵖˡ); ("ClusterVersion"%go, hasherAdapter__ClusterVersionⁱᵐᵖˡ); ("CommittedIndex"%go, hasherAdapter__CommittedIndexⁱᵐᵖˡ); ("Compact"%go, hasherAdapter__Compactⁱᵐᵖˡ); ("Config"%go, hasherAdapter__Configⁱᵐᵖˡ); ("CorruptionChecker"%go, hasherAdapter__CorruptionCheckerⁱᵐᵖˡ); ("CutPeer"%go, hasherAdapter__CutPeerⁱᵐᵖˡ); ("DeleteRange"%go, hasherAdapter__DeleteRangeⁱᵐᵖˡ); ("Downgrade"%go, hasherAdapter__Downgradeⁱᵐᵖˡ); ("DowngradeEnabledHandler"%go, hasherAdapter__DowngradeEnabledHandlerⁱᵐᵖˡ); ("DowngradeInfo"%go, hasherAdapter__DowngradeInfoⁱᵐᵖˡ); ("FeatureEnabled"%go, hasherAdapter__FeatureEnabledⁱᵐᵖˡ); ("FirstCommitInTermNotify"%go, hasherAdapter__FirstCommitInTermNotifyⁱᵐᵖˡ); ("ForceSnapshot"%go, hasherAdapter__ForceSnapshotⁱᵐᵖˡ); ("GoAttach"%go, hasherAdapter__GoAttachⁱᵐᵖˡ); ("HardStop"%go, hasherAdapter__HardStopⁱᵐᵖˡ); ("Hash"%go, hasherAdapter__Hashⁱᵐᵖˡ); ("HashByRev"%go, hasherAdapter__HashByRevⁱᵐᵖˡ); ("HashKVHandler"%go, hasherAdapter__HashKVHandlerⁱᵐᵖˡ); ("Hashes"%go, hasherAdapter__Hashesⁱᵐᵖˡ); ("IsHostWhitelisted"%go, hasherAdapter__IsHostWhitelistedⁱᵐᵖˡ); ("IsIDRemoved"%go, hasherAdapter__IsIDRemovedⁱᵐᵖˡ); ("IsLearner"%go, hasherAdapter__IsLearnerⁱᵐᵖˡ); ("IsMemberExist"%go, hasherAdapter__IsMemberExistⁱᵐᵖˡ); ("KV"%go, hasherAdapter__KVⁱᵐᵖˡ); ("Lead"%go, hasherAdapter__Leadⁱᵐᵖˡ); ("Leader"%go, hasherAdapter__Leaderⁱᵐᵖˡ); ("LeaderChangedNotify"%go, hasherAdapter__LeaderChangedNotifyⁱᵐᵖˡ); ("LeaseGrant"%go, hasherAdapter__LeaseGrantⁱᵐᵖˡ); ("LeaseHandler"%go, hasherAdapter__LeaseHandlerⁱᵐᵖˡ); ("LeaseLeases"%go, hasherAdapter__LeaseLeasesⁱᵐᵖˡ); ("LeaseRenew"%go, hasherAdapter__LeaseRenewⁱᵐᵖˡ); ("LeaseRevoke"%go, hasherAdapter__LeaseRevokeⁱᵐᵖˡ); ("LeaseTimeToLive"%go, hasherAdapter__LeaseTimeToLiveⁱᵐᵖˡ); ("LinearizableReadNotify"%go, hasherAdapter__LinearizableReadNotifyⁱᵐᵖˡ); ("Logger"%go, hasherAdapter__Loggerⁱᵐᵖˡ); ("MemberID"%go, hasherAdapter__MemberIDⁱᵐᵖˡ); ("MemberId"%go, hasherAdapter__MemberIdⁱᵐᵖˡ); ("MendPeer"%go, hasherAdapter__MendPeerⁱᵐᵖˡ); ("MoveLeader"%go, hasherAdapter__MoveLeaderⁱᵐᵖˡ); ("NewUberApplier"%go, hasherAdapter__NewUberApplierⁱᵐᵖˡ); ("OriginAllowed"%go, hasherAdapter__OriginAllowedⁱᵐᵖˡ); ("PauseSending"%go, hasherAdapter__PauseSendingⁱᵐᵖˡ); ("PeerHashByRev"%go, hasherAdapter__PeerHashByRevⁱᵐᵖˡ); ("Process"%go, hasherAdapter__Processⁱᵐᵖˡ); ("PromoteMember"%go, hasherAdapter__PromoteMemberⁱᵐᵖˡ); ("Put"%go, hasherAdapter__Putⁱᵐᵖˡ); ("RaftHandler"%go, hasherAdapter__RaftHandlerⁱᵐᵖˡ); ("Range"%go, hasherAdapter__Rangeⁱᵐᵖˡ); ("ReadyNotify"%go, hasherAdapter__ReadyNotifyⁱᵐᵖˡ); ("RemoveMember"%go, hasherAdapter__RemoveMemberⁱᵐᵖˡ); ("ReportSnapshot"%go, hasherAdapter__ReportSnapshotⁱᵐᵖˡ); ("ReportUnreachable"%go, hasherAdapter__ReportUnreachableⁱᵐᵖˡ); ("ReqTimeout"%go, hasherAdapter__ReqTimeoutⁱᵐᵖˡ); ("ResumeSending"%go, hasherAdapter__ResumeSendingⁱᵐᵖˡ); ("RoleAdd"%go, hasherAdapter__RoleAddⁱᵐᵖˡ); ("RoleDelete"%go, hasherAdapter__RoleDeleteⁱᵐᵖˡ); ("RoleGet"%go, hasherAdapter__RoleGetⁱᵐᵖˡ); ("RoleGrantPermission"%go, hasherAdapter__RoleGrantPermissionⁱᵐᵖˡ); ("RoleList"%go, hasherAdapter__RoleListⁱᵐᵖˡ); ("RoleRevokePermission"%go, hasherAdapter__RoleRevokePermissionⁱᵐᵖˡ); ("Start"%go, hasherAdapter__Startⁱᵐᵖˡ); ("Stop"%go, hasherAdapter__Stopⁱᵐᵖˡ); ("StopNotify"%go, hasherAdapter__StopNotifyⁱᵐᵖˡ); ("StoppingNotify"%go, hasherAdapter__StoppingNotifyⁱᵐᵖˡ); ("StorageVersion"%go, hasherAdapter__StorageVersionⁱᵐᵖˡ); ("Store"%go, hasherAdapter__Storeⁱᵐᵖˡ); ("Term"%go, hasherAdapter__Termⁱᵐᵖˡ); ("TriggerCorruptAlarm"%go, hasherAdapter__TriggerCorruptAlarmⁱᵐᵖˡ); ("TryTransferLeadershipOnShutdown"%go, hasherAdapter__TryTransferLeadershipOnShutdownⁱᵐᵖˡ); ("Txn"%go, hasherAdapter__Txnⁱᵐᵖˡ); ("UpdateMember"%go, hasherAdapter__UpdateMemberⁱᵐᵖˡ); ("UserAdd"%go, hasherAdapter__UserAddⁱᵐᵖˡ); ("UserChangePassword"%go, hasherAdapter__UserChangePasswordⁱᵐᵖˡ); ("UserDelete"%go, hasherAdapter__UserDeleteⁱᵐᵖˡ); ("UserGet"%go, hasherAdapter__UserGetⁱᵐᵖˡ); ("UserGrantRole"%go, hasherAdapter__UserGrantRoleⁱᵐᵖˡ); ("UserList"%go, hasherAdapter__UserListⁱᵐᵖˡ); ("UserRevokeRole"%go, hasherAdapter__UserRevokeRoleⁱᵐᵖˡ); ("Version"%go, hasherAdapter__Versionⁱᵐᵖˡ); ("Watchable"%go, hasherAdapter__Watchableⁱᵐᵖˡ); ("adjustTicks"%go, hasherAdapter__adjustTicksⁱᵐᵖˡ); ("apply"%go, hasherAdapter__applyⁱᵐᵖˡ); ("applyAll"%go, hasherAdapter__applyAllⁱᵐᵖˡ); ("applyConfChange"%go, hasherAdapter__applyConfChangeⁱᵐᵖˡ); ("applyEntries"%go, hasherAdapter__applyEntriesⁱᵐᵖˡ); ("applyEntryNormal"%go, hasherAdapter__applyEntryNormalⁱᵐᵖˡ); ("applyInternalRaftRequest"%go, hasherAdapter__applyInternalRaftRequestⁱᵐᵖˡ); ("applySnapshot"%go, hasherAdapter__applySnapshotⁱᵐᵖˡ); ("checkLeaseTimeToLive"%go, hasherAdapter__checkLeaseTimeToLiveⁱᵐᵖˡ); ("checkMembershipOperationPermission"%go, hasherAdapter__checkMembershipOperationPermissionⁱᵐᵖˡ); ("compactRaftLog"%go, hasherAdapter__compactRaftLogⁱᵐᵖˡ); ("configure"%go, hasherAdapter__configureⁱᵐᵖˡ); ("createMergedSnapshotMessage"%go, hasherAdapter__createMergedSnapshotMessageⁱᵐᵖˡ); ("doSerialize"%go, hasherAdapter__doSerializeⁱᵐᵖˡ); ("downgradeCancel"%go, hasherAdapter__downgradeCancelⁱᵐᵖˡ); ("downgradeEnable"%go, hasherAdapter__downgradeEnableⁱᵐᵖˡ); ("downgradeValidate"%go, hasherAdapter__downgradeValidateⁱᵐᵖˡ); ("ensureLeadership"%go, hasherAdapter__ensureLeadershipⁱᵐᵖˡ); ("getAppliedIndex"%go, hasherAdapter__getAppliedIndexⁱᵐᵖˡ); ("getCommittedIndex"%go, hasherAdapter__getCommittedIndexⁱᵐᵖˡ); ("getLead"%go, hasherAdapter__getLeadⁱᵐᵖˡ); ("getPeerHashKVs"%go, hasherAdapter__getPeerHashKVsⁱᵐᵖˡ); ("getTerm"%go, hasherAdapter__getTermⁱᵐᵖˡ); ("getTxPostLockInsideApplyHook"%go, hasherAdapter__getTxPostLockInsideApplyHookⁱᵐᵖˡ); ("hasMultipleVotingMembers"%go, hasherAdapter__hasMultipleVotingMembersⁱᵐᵖˡ); ("isActive"%go, hasherAdapter__isActiveⁱᵐᵖˡ); ("isLeader"%go, hasherAdapter__isLeaderⁱᵐᵖˡ); ("isLearnerReady"%go, hasherAdapter__isLearnerReadyⁱᵐᵖˡ); ("leaseTimeToLive"%go, hasherAdapter__leaseTimeToLiveⁱᵐᵖˡ); ("linearizableReadLoop"%go, hasherAdapter__linearizableReadLoopⁱᵐᵖˡ); ("linearizableReadNotify"%go, hasherAdapter__linearizableReadNotifyⁱᵐᵖˡ); ("mayAddMember"%go, hasherAdapter__mayAddMemberⁱᵐᵖˡ); ("mayPromoteMember"%go, hasherAdapter__mayPromoteMemberⁱᵐᵖˡ); ("mayRemoveMember"%go, hasherAdapter__mayRemoveMemberⁱᵐᵖˡ); ("monitorClusterVersions"%go, hasherAdapter__monitorClusterVersionsⁱᵐᵖˡ); ("monitorCompactHash"%go, hasherAdapter__monitorCompactHashⁱᵐᵖˡ); ("monitorDowngrade"%go, hasherAdapter__monitorDowngradeⁱᵐᵖˡ); ("monitorKVHash"%go, hasherAdapter__monitorKVHashⁱᵐᵖˡ); ("monitorStorageVersion"%go, hasherAdapter__monitorStorageVersionⁱᵐᵖˡ); ("newHeader"%go, hasherAdapter__newHeaderⁱᵐᵖˡ); ("parseProposeCtxErr"%go, hasherAdapter__parseProposeCtxErrⁱᵐᵖˡ); ("processInternalRaftRequestOnce"%go, hasherAdapter__processInternalRaftRequestOnceⁱᵐᵖˡ); ("promoteMember"%go, hasherAdapter__promoteMemberⁱᵐᵖˡ); ("publishV3"%go, hasherAdapter__publishV3ⁱᵐᵖˡ); ("purgeFile"%go, hasherAdapter__purgeFileⁱᵐᵖˡ); ("raftRequest"%go, hasherAdapter__raftRequestⁱᵐᵖˡ); ("raftRequestOnce"%go, hasherAdapter__raftRequestOnceⁱᵐᵖˡ); ("raftStatus"%go, hasherAdapter__raftStatusⁱᵐᵖˡ); ("requestCurrentIndex"%go, hasherAdapter__requestCurrentIndexⁱᵐᵖˡ); ("restoreAlarms"%go, hasherAdapter__restoreAlarmsⁱᵐᵖˡ); ("revokeExpiredLeases"%go, hasherAdapter__revokeExpiredLeasesⁱᵐᵖˡ); ("run"%go, hasherAdapter__runⁱᵐᵖˡ); ("sendMergedSnap"%go, hasherAdapter__sendMergedSnapⁱᵐᵖˡ); ("sendReadIndex"%go, hasherAdapter__sendReadIndexⁱᵐᵖˡ); ("setAppliedIndex"%go, hasherAdapter__setAppliedIndexⁱᵐᵖˡ); ("setCommittedIndex"%go, hasherAdapter__setCommittedIndexⁱᵐᵖˡ); ("setLead"%go, hasherAdapter__setLeadⁱᵐᵖˡ); ("setTerm"%go, hasherAdapter__setTermⁱᵐᵖˡ); ("shouldSnapshotToDisk"%go, hasherAdapter__shouldSnapshotToDiskⁱᵐᵖˡ); ("shouldSnapshotToMemory"%go, hasherAdapter__shouldSnapshotToMemoryⁱᵐᵖˡ); ("snapshot"%go, hasherAdapter__snapshotⁱᵐᵖˡ); ("snapshotIfNeededAndCompactRaftLog"%go, hasherAdapter__snapshotIfNeededAndCompactRaftLogⁱᵐᵖˡ); ("start"%go, hasherAdapter__startⁱᵐᵖˡ); ("stopWithDelay"%go, hasherAdapter__stopWithDelayⁱᵐᵖˡ); ("triggerCorruptAlarm"%go, hasherAdapter__triggerCorruptAlarmⁱᵐᵖˡ); ("updateClusterVersionV3"%go, hasherAdapter__updateClusterVersionV3ⁱᵐᵖˡ); ("waitAppliedIndex"%go, hasherAdapter__waitAppliedIndexⁱᵐᵖˡ); ("waitLeader"%go, hasherAdapter__waitLeaderⁱᵐᵖˡ)]); (peerInfo.id, []); (ptrT.id peerInfo.id, []); (peerHashKVResp.id, []); (ptrT.id peerHashKVResp.id, []); (hashKVHandler.id, []); (ptrT.id hashKVHandler.id, [("ServeHTTP"%go, hashKVHandler__ServeHTTPⁱᵐᵖˡ)]); (toApply.id, []); (ptrT.id toApply.id, []); (raftNode.id, [("Advance"%go, raftNode__Advanceⁱᵐᵖˡ); ("ApplyConfChange"%go, raftNode__ApplyConfChangeⁱᵐᵖˡ); ("Campaign"%go, raftNode__Campaignⁱᵐᵖˡ); ("ForgetLeader"%go, raftNode__ForgetLeaderⁱᵐᵖˡ); ("Propose"%go, raftNode__Proposeⁱᵐᵖˡ); ("ProposeConfChange"%go, raftNode__ProposeConfChangeⁱᵐᵖˡ); ("ReadIndex"%go, raftNode__ReadIndexⁱᵐᵖˡ); ("Ready"%go, raftNode__Readyⁱᵐᵖˡ); ("ReportSnapshot"%go, raftNode__ReportSnapshotⁱᵐᵖˡ); ("ReportUnreachable"%go, raftNode__ReportUnreachableⁱᵐᵖˡ); ("Status"%go, raftNode__Statusⁱᵐᵖˡ); ("Step"%go, raftNode__Stepⁱᵐᵖˡ); ("Stop"%go, raftNode__Stopⁱᵐᵖˡ); ("Tick"%go, raftNode__Tickⁱᵐᵖˡ); ("TransferLeadership"%go, raftNode__TransferLeadershipⁱᵐᵖˡ)]); (ptrT.id raftNode.id, [("Advance"%go, raftNode__Advanceⁱᵐᵖˡ); ("ApplyConfChange"%go, raftNode__ApplyConfChangeⁱᵐᵖˡ); ("Campaign"%go, raftNode__Campaignⁱᵐᵖˡ); ("ForgetLeader"%go, raftNode__ForgetLeaderⁱᵐᵖˡ); ("Propose"%go, raftNode__Proposeⁱᵐᵖˡ); ("ProposeConfChange"%go, raftNode__ProposeConfChangeⁱᵐᵖˡ); ("ReadIndex"%go, raftNode__ReadIndexⁱᵐᵖˡ); ("Ready"%go, raftNode__Readyⁱᵐᵖˡ); ("ReportSnapshot"%go, raftNode__ReportSnapshotⁱᵐᵖˡ); ("ReportUnreachable"%go, raftNode__ReportUnreachableⁱᵐᵖˡ); ("Status"%go, raftNode__Statusⁱᵐᵖˡ); ("Step"%go, raftNode__Stepⁱᵐᵖˡ); ("Stop"%go, raftNode__Stopⁱᵐᵖˡ); ("Tick"%go, raftNode__Tickⁱᵐᵖˡ); ("TransferLeadership"%go, raftNode__TransferLeadershipⁱᵐᵖˡ); ("advanceTicks"%go, raftNode__advanceTicksⁱᵐᵖˡ); ("apply"%go, raftNode__applyⁱᵐᵖˡ); ("getLatestTickTs"%go, raftNode__getLatestTickTsⁱᵐᵖˡ); ("onStop"%go, raftNode__onStopⁱᵐᵖˡ); ("pauseSending"%go, raftNode__pauseSendingⁱᵐᵖˡ); ("processMessages"%go, raftNode__processMessagesⁱᵐᵖˡ); ("resumeSending"%go, raftNode__resumeSendingⁱᵐᵖˡ); ("start"%go, raftNode__startⁱᵐᵖˡ); ("stop"%go, raftNode__stopⁱᵐᵖˡ); ("tick"%go, raftNode__tickⁱᵐᵖˡ)]); (raftNodeConfig.id, [("Advance"%go, raftNodeConfig__Advanceⁱᵐᵖˡ); ("ApplyConfChange"%go, raftNodeConfig__ApplyConfChangeⁱᵐᵖˡ); ("Campaign"%go, raftNodeConfig__Campaignⁱᵐᵖˡ); ("ForgetLeader"%go, raftNodeConfig__ForgetLeaderⁱᵐᵖˡ); ("Propose"%go, raftNodeConfig__Proposeⁱᵐᵖˡ); ("ProposeConfChange"%go, raftNodeConfig__ProposeConfChangeⁱᵐᵖˡ); ("ReadIndex"%go, raftNodeConfig__ReadIndexⁱᵐᵖˡ); ("Ready"%go, raftNodeConfig__Readyⁱᵐᵖˡ); ("ReportSnapshot"%go, raftNodeConfig__ReportSnapshotⁱᵐᵖˡ); ("ReportUnreachable"%go, raftNodeConfig__ReportUnreachableⁱᵐᵖˡ); ("Status"%go, raftNodeConfig__Statusⁱᵐᵖˡ); ("Step"%go, raftNodeConfig__Stepⁱᵐᵖˡ); ("Stop"%go, raftNodeConfig__Stopⁱᵐᵖˡ); ("Tick"%go, raftNodeConfig__Tickⁱᵐᵖˡ); ("TransferLeadership"%go, raftNodeConfig__TransferLeadershipⁱᵐᵖˡ)]); (ptrT.id raftNodeConfig.id, [("Advance"%go, raftNodeConfig__Advanceⁱᵐᵖˡ); ("ApplyConfChange"%go, raftNodeConfig__ApplyConfChangeⁱᵐᵖˡ); ("Campaign"%go, raftNodeConfig__Campaignⁱᵐᵖˡ); ("ForgetLeader"%go, raftNodeConfig__ForgetLeaderⁱᵐᵖˡ); ("Propose"%go, raftNodeConfig__Proposeⁱᵐᵖˡ); ("ProposeConfChange"%go, raftNodeConfig__ProposeConfChangeⁱᵐᵖˡ); ("ReadIndex"%go, raftNodeConfig__ReadIndexⁱᵐᵖˡ); ("Ready"%go, raftNodeConfig__Readyⁱᵐᵖˡ); ("ReportSnapshot"%go, raftNodeConfig__ReportSnapshotⁱᵐᵖˡ); ("ReportUnreachable"%go, raftNodeConfig__ReportUnreachableⁱᵐᵖˡ); ("Status"%go, raftNodeConfig__Statusⁱᵐᵖˡ); ("Step"%go, raftNodeConfig__Stepⁱᵐᵖˡ); ("Stop"%go, raftNodeConfig__Stopⁱᵐᵖˡ); ("Tick"%go, raftNodeConfig__Tickⁱᵐᵖˡ); ("TransferLeadership"%go, raftNodeConfig__TransferLeadershipⁱᵐᵖˡ)]); (Response.id, []); (ptrT.id Response.id, []); (EtcdServer.id, [("IsHostWhitelisted"%go, EtcdServer__IsHostWhitelistedⁱᵐᵖˡ); ("OriginAllowed"%go, EtcdServer__OriginAllowedⁱᵐᵖˡ)]); (ptrT.id EtcdServer.id, [("AddMember"%go, EtcdServer__AddMemberⁱᵐᵖˡ); ("Alarm"%go, EtcdServer__Alarmⁱᵐᵖˡ); ("Alarms"%go, EtcdServer__Alarmsⁱᵐᵖˡ); ("AppliedIndex"%go, EtcdServer__AppliedIndexⁱᵐᵖˡ); ("ApplyWait"%go, EtcdServer__ApplyWaitⁱᵐᵖˡ); ("AuthDisable"%go, EtcdServer__AuthDisableⁱᵐᵖˡ); ("AuthEnable"%go, EtcdServer__AuthEnableⁱᵐᵖˡ); ("AuthInfoFromCtx"%go, EtcdServer__AuthInfoFromCtxⁱᵐᵖˡ); ("AuthStatus"%go, EtcdServer__AuthStatusⁱᵐᵖˡ); ("AuthStore"%go, EtcdServer__AuthStoreⁱᵐᵖˡ); ("Authenticate"%go, EtcdServer__Authenticateⁱᵐᵖˡ); ("Backend"%go, EtcdServer__Backendⁱᵐᵖˡ); ("Cleanup"%go, EtcdServer__Cleanupⁱᵐᵖˡ); ("ClientCertAuthEnabled"%go, EtcdServer__ClientCertAuthEnabledⁱᵐᵖˡ); ("Cluster"%go, EtcdServer__Clusterⁱᵐᵖˡ); ("ClusterVersion"%go, EtcdServer__ClusterVersionⁱᵐᵖˡ); ("CommittedIndex"%go, EtcdServer__CommittedIndexⁱᵐᵖˡ); ("Compact"%go, EtcdServer__Compactⁱᵐᵖˡ); ("Config"%go, EtcdServer__Configⁱᵐᵖˡ); ("CorruptionChecker"%go, EtcdServer__CorruptionCheckerⁱᵐᵖˡ); ("CutPeer"%go, EtcdServer__CutPeerⁱᵐᵖˡ); ("DeleteRange"%go, EtcdServer__DeleteRangeⁱᵐᵖˡ); ("Downgrade"%go, EtcdServer__Downgradeⁱᵐᵖˡ); ("DowngradeEnabledHandler"%go, EtcdServer__DowngradeEnabledHandlerⁱᵐᵖˡ); ("DowngradeInfo"%go, EtcdServer__DowngradeInfoⁱᵐᵖˡ); ("FeatureEnabled"%go, EtcdServer__FeatureEnabledⁱᵐᵖˡ); ("FirstCommitInTermNotify"%go, EtcdServer__FirstCommitInTermNotifyⁱᵐᵖˡ); ("ForceSnapshot"%go, EtcdServer__ForceSnapshotⁱᵐᵖˡ); ("GoAttach"%go, EtcdServer__GoAttachⁱᵐᵖˡ); ("HardStop"%go, EtcdServer__HardStopⁱᵐᵖˡ); ("HashKVHandler"%go, EtcdServer__HashKVHandlerⁱᵐᵖˡ); ("IsHostWhitelisted"%go, EtcdServer__IsHostWhitelistedⁱᵐᵖˡ); ("IsIDRemoved"%go, EtcdServer__IsIDRemovedⁱᵐᵖˡ); ("IsLearner"%go, EtcdServer__IsLearnerⁱᵐᵖˡ); ("IsMemberExist"%go, EtcdServer__IsMemberExistⁱᵐᵖˡ); ("KV"%go, EtcdServer__KVⁱᵐᵖˡ); ("Lead"%go, EtcdServer__Leadⁱᵐᵖˡ); ("Leader"%go, EtcdServer__Leaderⁱᵐᵖˡ); ("LeaderChangedNotify"%go, EtcdServer__LeaderChangedNotifyⁱᵐᵖˡ); ("LeaseGrant"%go, EtcdServer__LeaseGrantⁱᵐᵖˡ); ("LeaseHandler"%go, EtcdServer__LeaseHandlerⁱᵐᵖˡ); ("LeaseLeases"%go, EtcdServer__LeaseLeasesⁱᵐᵖˡ); ("LeaseRenew"%go, EtcdServer__LeaseRenewⁱᵐᵖˡ); ("LeaseRevoke"%go, EtcdServer__LeaseRevokeⁱᵐᵖˡ); ("LeaseTimeToLive"%go, EtcdServer__LeaseTimeToLiveⁱᵐᵖˡ); ("LinearizableReadNotify"%go, EtcdServer__LinearizableReadNotifyⁱᵐᵖˡ); ("Logger"%go, EtcdServer__Loggerⁱᵐᵖˡ); ("MemberID"%go, EtcdServer__MemberIDⁱᵐᵖˡ); ("MemberId"%go, EtcdServer__MemberIdⁱᵐᵖˡ); ("MendPeer"%go, EtcdServer__MendPeerⁱᵐᵖˡ); ("MoveLeader"%go, EtcdServer__MoveLeaderⁱᵐᵖˡ); ("NewUberApplier"%go, EtcdServer__NewUberApplierⁱᵐᵖˡ); ("OriginAllowed"%go, EtcdServer__OriginAllowedⁱᵐᵖˡ); ("PauseSending"%go, EtcdServer__PauseSendingⁱᵐᵖˡ); ("Process"%go, EtcdServer__Processⁱᵐᵖˡ); ("PromoteMember"%go, EtcdServer__PromoteMemberⁱᵐᵖˡ); ("Put"%go, EtcdServer__Putⁱᵐᵖˡ); ("RaftHandler"%go, EtcdServer__RaftHandlerⁱᵐᵖˡ); ("Range"%go, EtcdServer__Rangeⁱᵐᵖˡ); ("ReadyNotify"%go, EtcdServer__ReadyNotifyⁱᵐᵖˡ); ("RemoveMember"%go, EtcdServer__RemoveMemberⁱᵐᵖˡ); ("ReportSnapshot"%go, EtcdServer__ReportSnapshotⁱᵐᵖˡ); ("ReportUnreachable"%go, EtcdServer__ReportUnreachableⁱᵐᵖˡ); ("ResumeSending"%go, EtcdServer__ResumeSendingⁱᵐᵖˡ); ("RoleAdd"%go, EtcdServer__RoleAddⁱᵐᵖˡ); ("RoleDelete"%go, EtcdServer__RoleDeleteⁱᵐᵖˡ); ("RoleGet"%go, EtcdServer__RoleGetⁱᵐᵖˡ); ("RoleGrantPermission"%go, EtcdServer__RoleGrantPermissionⁱᵐᵖˡ); ("RoleList"%go, EtcdServer__RoleListⁱᵐᵖˡ); ("RoleRevokePermission"%go, EtcdServer__RoleRevokePermissionⁱᵐᵖˡ); ("Start"%go, EtcdServer__Startⁱᵐᵖˡ); ("Stop"%go, EtcdServer__Stopⁱᵐᵖˡ); ("StopNotify"%go, EtcdServer__StopNotifyⁱᵐᵖˡ); ("StoppingNotify"%go, EtcdServer__StoppingNotifyⁱᵐᵖˡ); ("StorageVersion"%go, EtcdServer__StorageVersionⁱᵐᵖˡ); ("Term"%go, EtcdServer__Termⁱᵐᵖˡ); ("TryTransferLeadershipOnShutdown"%go, EtcdServer__TryTransferLeadershipOnShutdownⁱᵐᵖˡ); ("Txn"%go, EtcdServer__Txnⁱᵐᵖˡ); ("UpdateMember"%go, EtcdServer__UpdateMemberⁱᵐᵖˡ); ("UserAdd"%go, EtcdServer__UserAddⁱᵐᵖˡ); ("UserChangePassword"%go, EtcdServer__UserChangePasswordⁱᵐᵖˡ); ("UserDelete"%go, EtcdServer__UserDeleteⁱᵐᵖˡ); ("UserGet"%go, EtcdServer__UserGetⁱᵐᵖˡ); ("UserGrantRole"%go, EtcdServer__UserGrantRoleⁱᵐᵖˡ); ("UserList"%go, EtcdServer__UserListⁱᵐᵖˡ); ("UserRevokeRole"%go, EtcdServer__UserRevokeRoleⁱᵐᵖˡ); ("Version"%go, EtcdServer__Versionⁱᵐᵖˡ); ("Watchable"%go, EtcdServer__Watchableⁱᵐᵖˡ); ("adjustTicks"%go, EtcdServer__adjustTicksⁱᵐᵖˡ); ("apply"%go, EtcdServer__applyⁱᵐᵖˡ); ("applyAll"%go, EtcdServer__applyAllⁱᵐᵖˡ); ("applyConfChange"%go, EtcdServer__applyConfChangeⁱᵐᵖˡ); ("applyEntries"%go, EtcdServer__applyEntriesⁱᵐᵖˡ); ("applyEntryNormal"%go, EtcdServer__applyEntryNormalⁱᵐᵖˡ); ("applyInternalRaftRequest"%go, EtcdServer__applyInternalRaftRequestⁱᵐᵖˡ); ("applySnapshot"%go, EtcdServer__applySnapshotⁱᵐᵖˡ); ("checkLeaseTimeToLive"%go, EtcdServer__checkLeaseTimeToLiveⁱᵐᵖˡ); ("checkMembershipOperationPermission"%go, EtcdServer__checkMembershipOperationPermissionⁱᵐᵖˡ); ("compactRaftLog"%go, EtcdServer__compactRaftLogⁱᵐᵖˡ); ("configure"%go, EtcdServer__configureⁱᵐᵖˡ); ("createMergedSnapshotMessage"%go, EtcdServer__createMergedSnapshotMessageⁱᵐᵖˡ); ("doSerialize"%go, EtcdServer__doSerializeⁱᵐᵖˡ); ("downgradeCancel"%go, EtcdServer__downgradeCancelⁱᵐᵖˡ); ("downgradeEnable"%go, EtcdServer__downgradeEnableⁱᵐᵖˡ); ("downgradeValidate"%go, EtcdServer__downgradeValidateⁱᵐᵖˡ); ("ensureLeadership"%go, EtcdServer__ensureLeadershipⁱᵐᵖˡ); ("getAppliedIndex"%go, EtcdServer__getAppliedIndexⁱᵐᵖˡ); ("getCommittedIndex"%go, EtcdServer__getCommittedIndexⁱᵐᵖˡ); ("getLead"%go, EtcdServer__getLeadⁱᵐᵖˡ); ("getPeerHashKVs"%go, EtcdServer__getPeerHashKVsⁱᵐᵖˡ); ("getTerm"%go, EtcdServer__getTermⁱᵐᵖˡ); ("getTxPostLockInsideApplyHook"%go, EtcdServer__getTxPostLockInsideApplyHookⁱᵐᵖˡ); ("hasMultipleVotingMembers"%go, EtcdServer__hasMultipleVotingMembersⁱᵐᵖˡ); ("isActive"%go, EtcdServer__isActiveⁱᵐᵖˡ); ("isLeader"%go, EtcdServer__isLeaderⁱᵐᵖˡ); ("isLearnerReady"%go, EtcdServer__isLearnerReadyⁱᵐᵖˡ); ("leaseTimeToLive"%go, EtcdServer__leaseTimeToLiveⁱᵐᵖˡ); ("linearizableReadLoop"%go, EtcdServer__linearizableReadLoopⁱᵐᵖˡ); ("linearizableReadNotify"%go, EtcdServer__linearizableReadNotifyⁱᵐᵖˡ); ("mayAddMember"%go, EtcdServer__mayAddMemberⁱᵐᵖˡ); ("mayPromoteMember"%go, EtcdServer__mayPromoteMemberⁱᵐᵖˡ); ("mayRemoveMember"%go, EtcdServer__mayRemoveMemberⁱᵐᵖˡ); ("monitorClusterVersions"%go, EtcdServer__monitorClusterVersionsⁱᵐᵖˡ); ("monitorCompactHash"%go, EtcdServer__monitorCompactHashⁱᵐᵖˡ); ("monitorDowngrade"%go, EtcdServer__monitorDowngradeⁱᵐᵖˡ); ("monitorKVHash"%go, EtcdServer__monitorKVHashⁱᵐᵖˡ); ("monitorStorageVersion"%go, EtcdServer__monitorStorageVersionⁱᵐᵖˡ); ("newHeader"%go, EtcdServer__newHeaderⁱᵐᵖˡ); ("parseProposeCtxErr"%go, EtcdServer__parseProposeCtxErrⁱᵐᵖˡ); ("processInternalRaftRequestOnce"%go, EtcdServer__processInternalRaftRequestOnceⁱᵐᵖˡ); ("promoteMember"%go, EtcdServer__promoteMemberⁱᵐᵖˡ); ("publishV3"%go, EtcdServer__publishV3ⁱᵐᵖˡ); ("purgeFile"%go, EtcdServer__purgeFileⁱᵐᵖˡ); ("raftRequest"%go, EtcdServer__raftRequestⁱᵐᵖˡ); ("raftRequestOnce"%go, EtcdServer__raftRequestOnceⁱᵐᵖˡ); ("raftStatus"%go, EtcdServer__raftStatusⁱᵐᵖˡ); ("requestCurrentIndex"%go, EtcdServer__requestCurrentIndexⁱᵐᵖˡ); ("restoreAlarms"%go, EtcdServer__restoreAlarmsⁱᵐᵖˡ); ("revokeExpiredLeases"%go, EtcdServer__revokeExpiredLeasesⁱᵐᵖˡ); ("run"%go, EtcdServer__runⁱᵐᵖˡ); ("sendMergedSnap"%go, EtcdServer__sendMergedSnapⁱᵐᵖˡ); ("sendReadIndex"%go, EtcdServer__sendReadIndexⁱᵐᵖˡ); ("setAppliedIndex"%go, EtcdServer__setAppliedIndexⁱᵐᵖˡ); ("setCommittedIndex"%go, EtcdServer__setCommittedIndexⁱᵐᵖˡ); ("setLead"%go, EtcdServer__setLeadⁱᵐᵖˡ); ("setTerm"%go, EtcdServer__setTermⁱᵐᵖˡ); ("shouldSnapshotToDisk"%go, EtcdServer__shouldSnapshotToDiskⁱᵐᵖˡ); ("shouldSnapshotToMemory"%go, EtcdServer__shouldSnapshotToMemoryⁱᵐᵖˡ); ("snapshot"%go, EtcdServer__snapshotⁱᵐᵖˡ); ("snapshotIfNeededAndCompactRaftLog"%go, EtcdServer__snapshotIfNeededAndCompactRaftLogⁱᵐᵖˡ); ("start"%go, EtcdServer__startⁱᵐᵖˡ); ("stopWithDelay"%go, EtcdServer__stopWithDelayⁱᵐᵖˡ); ("triggerCorruptAlarm"%go, EtcdServer__triggerCorruptAlarmⁱᵐᵖˡ); ("updateClusterVersionV3"%go, EtcdServer__updateClusterVersionV3ⁱᵐᵖˡ); ("waitAppliedIndex"%go, EtcdServer__waitAppliedIndexⁱᵐᵖˡ); ("waitLeader"%go, EtcdServer__waitLeaderⁱᵐᵖˡ)]); (downgradeEnabledHandler.id, []); (ptrT.id downgradeEnabledHandler.id, [("ServeHTTP"%go, downgradeEnabledHandler__ServeHTTPⁱᵐᵖˡ)]); (etcdProgress.id, []); (ptrT.id etcdProgress.id, []); (raftReadyHandler.id, []); (ptrT.id raftReadyHandler.id, []); (confChangeResponse.id, []); (ptrT.id confChangeResponse.id, []); (AccessController.id, []); (ptrT.id AccessController.id, [("IsHostWhitelisted"%go, AccessController__IsHostWhitelistedⁱᵐᵖˡ); ("OriginAllowed"%go, AccessController__OriginAllowedⁱᵐᵖˡ)]); (notifier.id, []); (ptrT.id notifier.id, [("notify"%go, notifier__notifyⁱᵐᵖˡ)]); (panicAlternativeStringer.id, [("String"%go, panicAlternativeStringer__Stringⁱᵐᵖˡ)]); (ptrT.id panicAlternativeStringer.id, [("String"%go, panicAlternativeStringer__Stringⁱᵐᵖˡ)]); (RequestV2.id, []); (ptrT.id RequestV2.id, [("String"%go, RequestV2__Stringⁱᵐᵖˡ)]); (zapRaftLogger.id, []); (ptrT.id zapRaftLogger.id, [("Debug"%go, zapRaftLogger__Debugⁱᵐᵖˡ); ("Debugf"%go, zapRaftLogger__Debugfⁱᵐᵖˡ); ("Error"%go, zapRaftLogger__Errorⁱᵐᵖˡ); ("Errorf"%go, zapRaftLogger__Errorfⁱᵐᵖˡ); ("Fatal"%go, zapRaftLogger__Fatalⁱᵐᵖˡ); ("Fatalf"%go, zapRaftLogger__Fatalfⁱᵐᵖˡ); ("Info"%go, zapRaftLogger__Infoⁱᵐᵖˡ); ("Infof"%go, zapRaftLogger__Infofⁱᵐᵖˡ); ("Panic"%go, zapRaftLogger__Panicⁱᵐᵖˡ); ("Panicf"%go, zapRaftLogger__Panicfⁱᵐᵖˡ); ("Warning"%go, zapRaftLogger__Warningⁱᵐᵖˡ); ("Warningf"%go, zapRaftLogger__Warningfⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo etcdserver.etcdserver :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [code.context.context; code.go_etcd_io.etcd.api.v3.etcdserverpb.etcdserverpb; code.go_etcd_io.etcd.api.v3.etcdserverpb.etcdserverpb; code.go_etcd_io.etcd.server.v3.config.config; code.go_etcd_io.etcd.server.v3.etcdserver.errors.errors; code.go_etcd_io.etcd.server.v3.etcdserver.errors.errors; code.github_com.prometheus.client_golang.prometheus.prometheus; code.go_etcd_io.etcd.pkg.v3.idutil.idutil; code.go_etcd_io.etcd.pkg.v3.traceutil.traceutil; code.go_etcd_io.etcd.pkg.v3.wait.wait; code.go_etcd_io.etcd.server.v3.auth.auth; code.go_etcd_io.etcd.server.v3.etcdserver.apply.apply; code.github_com.gogo.protobuf.proto.proto; code.go_etcd_io.etcd.server.v3.etcdserver.apply.apply];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #etcdserver.etcdserver (λ: <>,
      exception_do (do:  (apply.initialize' #());;;
      do:  (proto.initialize' #());;;
      do:  (apply.initialize' #());;;
      do:  (auth.initialize' #());;;
      do:  (wait.initialize' #());;;
      do:  (traceutil.initialize' #());;;
      do:  (idutil.initialize' #());;;
      do:  (prometheus.initialize' #());;;
      do:  (errors.initialize' #());;;
      do:  (errors.initialize' #());;;
      do:  (config.initialize' #());;;
      do:  (etcdserverpb.initialize' #());;;
      do:  (etcdserverpb.initialize' #());;;
      do:  (context.initialize' #());;;
      do:  (package.alloc etcdserver.etcdserver #());;;
      do:  (_'init #());;;
      do:  (hasLeader'init #());;;
      do:  (isLeader'init #());;;
      do:  (leaderChanges'init #());;;
      do:  (learnerPromoteFailed'init #());;;
      do:  (learnerPromoteSucceed'init #());;;
      do:  (heartbeatSendFailures'init #());;;
      do:  (applySnapshotInProgress'init #());;;
      do:  (proposalsCommitted'init #());;;
      do:  (proposalsApplied'init #());;;
      do:  (proposalsPending'init #());;;
      do:  (proposalsFailed'init #());;;
      do:  (slowReadIndex'init #());;;
      do:  (readIndexFailed'init #());;;
      do:  (leaseExpired'init #());;;
      do:  (currentVersion'init #());;;
      do:  (currentGoVersion'init #());;;
      do:  (serverID'init #());;;
      do:  (fdUsed'init #());;;
      do:  (fdLimit'init #());;;
      do:  (monitorVersionInterval'init #());;;
      do:  (recommendedMaxRequestBytesString'init #());;;
      do:  (storeMemberAttributeRegexp'init #()))
      ).

End code.
End etcdserver.
