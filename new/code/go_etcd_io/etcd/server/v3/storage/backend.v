(* autogenerated from go.etcd.io/etcd/server/v3/storage/backend *)

From New.golang Require Import defn.
Definition backend : go_string := "go.etcd.io/etcd/server/v3/storage/backend".

Module backend.

Module Backend. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.Backend"%go. End Backend.
Module Snapshot. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.Snapshot"%go. End Snapshot.
Module txReadBufferCache. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.txReadBufferCache"%go. End txReadBufferCache.
Module backend. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.backend"%go. End backend.
Module BackendConfig. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.BackendConfig"%go. End BackendConfig.
Module BackendConfigOption. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.BackendConfigOption"%go. End BackendConfigOption.
Module snapshot. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.snapshot"%go. End snapshot.
Module zapBoltLogger. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.zapBoltLogger"%go. End zapBoltLogger.
Module BucketID. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.BucketID"%go. End BucketID.
Module Bucket. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.Bucket"%go. End Bucket.
Module BatchTx. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.BatchTx"%go. End BatchTx.
Module UnsafeReadWriter. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.UnsafeReadWriter"%go. End UnsafeReadWriter.
Module UnsafeWriter. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.UnsafeWriter"%go. End UnsafeWriter.
Module batchTx. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.batchTx"%go. End batchTx.
Module batchTxBuffered. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.batchTxBuffered"%go. End batchTxBuffered.
Module HookFunc. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.HookFunc"%go. End HookFunc.
Module Hooks. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.Hooks"%go. End Hooks.
Module hooks. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.hooks"%go. End hooks.
Module ReadTx. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.ReadTx"%go. End ReadTx.
Module UnsafeReader. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.UnsafeReader"%go. End UnsafeReader.
Module baseReadTx. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.baseReadTx"%go. End baseReadTx.
Module readTx. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.readTx"%go. End readTx.
Module concurrentReadTx. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.concurrentReadTx"%go. End concurrentReadTx.
Module txBuffer. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.txBuffer"%go. End txBuffer.
Module txWriteBuffer. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.txWriteBuffer"%go. End txWriteBuffer.
Module txReadBuffer. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.txReadBuffer"%go. End txReadBuffer.
Module kv. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.kv"%go. End kv.
Module bucketBuffer. Definition id : go_string := "go.etcd.io/etcd/server/v3/storage/backend.bucketBuffer"%go. End bucketBuffer.

Section code.
Context `{ffi_syntax}.


Definition defaultBatchLimit : go_string := "go.etcd.io/etcd/server/v3/storage/backend.defaultBatchLimit"%go.

Axiom defaultBatchLimit'init : val.

Definition defaultBatchInterval : go_string := "go.etcd.io/etcd/server/v3/storage/backend.defaultBatchInterval"%go.

Axiom defaultBatchInterval'init : val.

Definition defragLimit : go_string := "go.etcd.io/etcd/server/v3/storage/backend.defragLimit"%go.

Axiom defragLimit'init : val.

Definition InitialMmapSize : go_string := "go.etcd.io/etcd/server/v3/storage/backend.InitialMmapSize"%go.

Axiom InitialMmapSize'init : val.

Definition minSnapshotWarningTimeout : go_string := "go.etcd.io/etcd/server/v3/storage/backend.minSnapshotWarningTimeout"%go.

Axiom minSnapshotWarningTimeout'init : val.

Axiom Backend : go_type.

Axiom Snapshot : go_type.

Axiom txReadBufferCache : go_type.

Axiom backend : go_type.

Axiom BackendConfig : go_type.

Axiom BackendConfigOption : go_type.

Definition DefaultBackendConfig : go_string := "go.etcd.io/etcd/server/v3/storage/backend.DefaultBackendConfig"%go.

Definition New : go_string := "go.etcd.io/etcd/server/v3/storage/backend.New"%go.

Definition WithMmapSize : go_string := "go.etcd.io/etcd/server/v3/storage/backend.WithMmapSize"%go.

Definition NewDefaultBackend : go_string := "go.etcd.io/etcd/server/v3/storage/backend.NewDefaultBackend"%go.

Definition newBackend : go_string := "go.etcd.io/etcd/server/v3/storage/backend.newBackend"%go.

Definition defragdb : go_string := "go.etcd.io/etcd/server/v3/storage/backend.defragdb"%go.

Axiom snapshot : go_type.

Definition newBoltLoggerZap : go_string := "go.etcd.io/etcd/server/v3/storage/backend.newBoltLoggerZap"%go.

Axiom zapBoltLogger : go_type.

Axiom BucketID : go_type.

Axiom Bucket : go_type.

Axiom BatchTx : go_type.

Axiom UnsafeReadWriter : go_type.

Axiom UnsafeWriter : go_type.

Axiom batchTx : go_type.

Definition unsafeRange : go_string := "go.etcd.io/etcd/server/v3/storage/backend.unsafeRange"%go.

Definition unsafeForEach : go_string := "go.etcd.io/etcd/server/v3/storage/backend.unsafeForEach"%go.

Axiom batchTxBuffered : go_type.

Definition newBatchTxBuffered : go_string := "go.etcd.io/etcd/server/v3/storage/backend.newBatchTxBuffered"%go.

Definition boltOpenOptions : go_string := "go.etcd.io/etcd/server/v3/storage/backend.boltOpenOptions"%go.

Axiom boltOpenOptions'init : val.

Axiom HookFunc : go_type.

Axiom Hooks : go_type.

Axiom hooks : go_type.

Definition NewHooks : go_string := "go.etcd.io/etcd/server/v3/storage/backend.NewHooks"%go.

Definition commitSec : go_string := "go.etcd.io/etcd/server/v3/storage/backend.commitSec"%go.

Axiom commitSec'init : val.

Definition rebalanceSec : go_string := "go.etcd.io/etcd/server/v3/storage/backend.rebalanceSec"%go.

Axiom rebalanceSec'init : val.

Definition spillSec : go_string := "go.etcd.io/etcd/server/v3/storage/backend.spillSec"%go.

Axiom spillSec'init : val.

Definition writeSec : go_string := "go.etcd.io/etcd/server/v3/storage/backend.writeSec"%go.

Axiom writeSec'init : val.

Definition defragSec : go_string := "go.etcd.io/etcd/server/v3/storage/backend.defragSec"%go.

Axiom defragSec'init : val.

Definition snapshotTransferSec : go_string := "go.etcd.io/etcd/server/v3/storage/backend.snapshotTransferSec"%go.

Axiom snapshotTransferSec'init : val.

Definition isDefragActive : go_string := "go.etcd.io/etcd/server/v3/storage/backend.isDefragActive"%go.

Axiom isDefragActive'init : val.

Definition init : go_string := "go.etcd.io/etcd/server/v3/storage/backend.init"%go.

Axiom ReadTx : go_type.

Axiom UnsafeReader : go_type.

Axiom baseReadTx : go_type.

Axiom readTx : go_type.

Axiom concurrentReadTx : go_type.

Axiom bucketBufferInitialSize : Z.

Axiom txBuffer : go_type.

Axiom txWriteBuffer : go_type.

Axiom txReadBuffer : go_type.

Axiom kv : go_type.

Axiom bucketBuffer : go_type.

Definition newBucketBuffer : go_string := "go.etcd.io/etcd/server/v3/storage/backend.newBucketBuffer"%go.

Axiom EnvVerifyValueLock : expr.

Definition ValidateCalledInsideApply : go_string := "go.etcd.io/etcd/server/v3/storage/backend.ValidateCalledInsideApply"%go.

Definition ValidateCalledOutSideApply : go_string := "go.etcd.io/etcd/server/v3/storage/backend.ValidateCalledOutSideApply"%go.

Definition ValidateCalledInsideUnittest : go_string := "go.etcd.io/etcd/server/v3/storage/backend.ValidateCalledInsideUnittest"%go.

Definition verifyLockEnabled : go_string := "go.etcd.io/etcd/server/v3/storage/backend.verifyLockEnabled"%go.

Definition insideApply : go_string := "go.etcd.io/etcd/server/v3/storage/backend.insideApply"%go.

Definition insideUnittest : go_string := "go.etcd.io/etcd/server/v3/storage/backend.insideUnittest"%go.

Definition VerifyBackendConsistency : go_string := "go.etcd.io/etcd/server/v3/storage/backend.VerifyBackendConsistency"%go.

Definition unsafeVerifyTxConsistency : go_string := "go.etcd.io/etcd/server/v3/storage/backend.unsafeVerifyTxConsistency"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom DefaultBackendConfigⁱᵐᵖˡ : val.

Axiom Newⁱᵐᵖˡ : val.

Axiom WithMmapSizeⁱᵐᵖˡ : val.

Axiom NewDefaultBackendⁱᵐᵖˡ : val.

Axiom newBackendⁱᵐᵖˡ : val.

Axiom defragdbⁱᵐᵖˡ : val.

Axiom newBoltLoggerZapⁱᵐᵖˡ : val.

Axiom unsafeRangeⁱᵐᵖˡ : val.

Axiom unsafeForEachⁱᵐᵖˡ : val.

Axiom newBatchTxBufferedⁱᵐᵖˡ : val.

Axiom NewHooksⁱᵐᵖˡ : val.

Axiom newBucketBufferⁱᵐᵖˡ : val.

Axiom ValidateCalledInsideApplyⁱᵐᵖˡ : val.

Axiom ValidateCalledOutSideApplyⁱᵐᵖˡ : val.

Axiom ValidateCalledInsideUnittestⁱᵐᵖˡ : val.

Axiom verifyLockEnabledⁱᵐᵖˡ : val.

Axiom insideApplyⁱᵐᵖˡ : val.

Axiom insideUnittestⁱᵐᵖˡ : val.

Axiom VerifyBackendConsistencyⁱᵐᵖˡ : val.

Axiom unsafeVerifyTxConsistencyⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(DefaultBackendConfig, DefaultBackendConfigⁱᵐᵖˡ); (New, Newⁱᵐᵖˡ); (WithMmapSize, WithMmapSizeⁱᵐᵖˡ); (NewDefaultBackend, NewDefaultBackendⁱᵐᵖˡ); (newBackend, newBackendⁱᵐᵖˡ); (defragdb, defragdbⁱᵐᵖˡ); (newBoltLoggerZap, newBoltLoggerZapⁱᵐᵖˡ); (unsafeRange, unsafeRangeⁱᵐᵖˡ); (unsafeForEach, unsafeForEachⁱᵐᵖˡ); (newBatchTxBuffered, newBatchTxBufferedⁱᵐᵖˡ); (NewHooks, NewHooksⁱᵐᵖˡ); (newBucketBuffer, newBucketBufferⁱᵐᵖˡ); (ValidateCalledInsideApply, ValidateCalledInsideApplyⁱᵐᵖˡ); (ValidateCalledOutSideApply, ValidateCalledOutSideApplyⁱᵐᵖˡ); (ValidateCalledInsideUnittest, ValidateCalledInsideUnittestⁱᵐᵖˡ); (verifyLockEnabled, verifyLockEnabledⁱᵐᵖˡ); (insideApply, insideApplyⁱᵐᵖˡ); (insideUnittest, insideUnittestⁱᵐᵖˡ); (VerifyBackendConsistency, VerifyBackendConsistencyⁱᵐᵖˡ); (unsafeVerifyTxConsistency, unsafeVerifyTxConsistencyⁱᵐᵖˡ)].

Axiom backend__BatchTxⁱᵐᵖˡ : val.

Axiom backend__Closeⁱᵐᵖˡ : val.

Axiom backend__Commitsⁱᵐᵖˡ : val.

Axiom backend__ConcurrentReadTxⁱᵐᵖˡ : val.

Axiom backend__Defragⁱᵐᵖˡ : val.

Axiom backend__ForceCommitⁱᵐᵖˡ : val.

Axiom backend__Hashⁱᵐᵖˡ : val.

Axiom backend__OpenReadTxNⁱᵐᵖˡ : val.

Axiom backend__ReadTxⁱᵐᵖˡ : val.

Axiom backend__SetTxPostLockInsideApplyHookⁱᵐᵖˡ : val.

Axiom backend__Sizeⁱᵐᵖˡ : val.

Axiom backend__SizeInUseⁱᵐᵖˡ : val.

Axiom backend__Snapshotⁱᵐᵖˡ : val.

Axiom backend__beginⁱᵐᵖˡ : val.

Axiom backend__defragⁱᵐᵖˡ : val.

Axiom backend__runⁱᵐᵖˡ : val.

Axiom backend__unsafeBeginⁱᵐᵖˡ : val.

Axiom BackendConfig__mmapSizeⁱᵐᵖˡ : val.

Axiom snapshot__Bucketⁱᵐᵖˡ : val.

Axiom snapshot__Checkⁱᵐᵖˡ : val.

Axiom snapshot__Closeⁱᵐᵖˡ : val.

Axiom snapshot__Commitⁱᵐᵖˡ : val.

Axiom snapshot__Copyⁱᵐᵖˡ : val.

Axiom snapshot__CopyFileⁱᵐᵖˡ : val.

Axiom snapshot__CreateBucketⁱᵐᵖˡ : val.

Axiom snapshot__CreateBucketIfNotExistsⁱᵐᵖˡ : val.

Axiom snapshot__Cursorⁱᵐᵖˡ : val.

Axiom snapshot__DBⁱᵐᵖˡ : val.

Axiom snapshot__DeleteBucketⁱᵐᵖˡ : val.

Axiom snapshot__ForEachⁱᵐᵖˡ : val.

Axiom snapshot__IDⁱᵐᵖˡ : val.

Axiom snapshot__Inspectⁱᵐᵖˡ : val.

Axiom snapshot__MoveBucketⁱᵐᵖˡ : val.

Axiom snapshot__OnCommitⁱᵐᵖˡ : val.

Axiom snapshot__Pageⁱᵐᵖˡ : val.

Axiom snapshot__Rollbackⁱᵐᵖˡ : val.

Axiom snapshot__Sizeⁱᵐᵖˡ : val.

Axiom snapshot__Statsⁱᵐᵖˡ : val.

Axiom snapshot__Writableⁱᵐᵖˡ : val.

Axiom snapshot__WriteToⁱᵐᵖˡ : val.

Axiom snapshot__allocateⁱᵐᵖˡ : val.

Axiom snapshot__checkⁱᵐᵖˡ : val.

Axiom snapshot__checkInvariantPropertiesⁱᵐᵖˡ : val.

Axiom snapshot__closeⁱᵐᵖˡ : val.

Axiom snapshot__commitFreelistⁱᵐᵖˡ : val.

Axiom snapshot__forEachPageⁱᵐᵖˡ : val.

Axiom snapshot__forEachPageInternalⁱᵐᵖˡ : val.

Axiom snapshot__initⁱᵐᵖˡ : val.

Axiom snapshot__nonPhysicalRollbackⁱᵐᵖˡ : val.

Axiom snapshot__pageⁱᵐᵖˡ : val.

Axiom snapshot__recursivelyCheckBucketⁱᵐᵖˡ : val.

Axiom snapshot__recursivelyCheckBucketInPageⁱᵐᵖˡ : val.

Axiom snapshot__recursivelyCheckPageⁱᵐᵖˡ : val.

Axiom snapshot__recursivelyCheckPageKeyOrderⁱᵐᵖˡ : val.

Axiom snapshot__recursivelyCheckPageKeyOrderInternalⁱᵐᵖˡ : val.

Axiom snapshot__rollbackⁱᵐᵖˡ : val.

Axiom snapshot__writeⁱᵐᵖˡ : val.

Axiom snapshot__writeMetaⁱᵐᵖˡ : val.

Axiom zapBoltLogger__DPanicⁱᵐᵖˡ : val.

Axiom zapBoltLogger__DPanicfⁱᵐᵖˡ : val.

Axiom zapBoltLogger__DPaniclnⁱᵐᵖˡ : val.

Axiom zapBoltLogger__DPanicwⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Debugⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Debugfⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Debuglnⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Debugwⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Desugarⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Errorⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Errorfⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Errorlnⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Errorwⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Fatalⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Fatalfⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Fatallnⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Fatalwⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Infoⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Infofⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Infolnⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Infowⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Levelⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Logⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Logfⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Loglnⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Logwⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Namedⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Panicⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Panicfⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Paniclnⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Panicwⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Syncⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Warnⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Warnfⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Warningⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Warningfⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Warnlnⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Warnwⁱᵐᵖˡ : val.

Axiom zapBoltLogger__Withⁱᵐᵖˡ : val.

Axiom zapBoltLogger__WithLazyⁱᵐᵖˡ : val.

Axiom zapBoltLogger__WithOptionsⁱᵐᵖˡ : val.

Axiom zapBoltLogger__logⁱᵐᵖˡ : val.

Axiom zapBoltLogger__loglnⁱᵐᵖˡ : val.

Axiom zapBoltLogger__sweetenFieldsⁱᵐᵖˡ : val.

Axiom batchTx__Commitⁱᵐᵖˡ : val.

Axiom batchTx__CommitAndStopⁱᵐᵖˡ : val.

Axiom batchTx__Lockⁱᵐᵖˡ : val.

Axiom batchTx__LockInsideApplyⁱᵐᵖˡ : val.

Axiom batchTx__LockOutsideApplyⁱᵐᵖˡ : val.

Axiom batchTx__TryLockⁱᵐᵖˡ : val.

Axiom batchTx__Unlockⁱᵐᵖˡ : val.

Axiom batchTx__UnsafeCreateBucketⁱᵐᵖˡ : val.

Axiom batchTx__UnsafeDeleteⁱᵐᵖˡ : val.

Axiom batchTx__UnsafeDeleteBucketⁱᵐᵖˡ : val.

Axiom batchTx__UnsafeForEachⁱᵐᵖˡ : val.

Axiom batchTx__UnsafePutⁱᵐᵖˡ : val.

Axiom batchTx__UnsafeRangeⁱᵐᵖˡ : val.

Axiom batchTx__UnsafeSeqPutⁱᵐᵖˡ : val.

Axiom batchTx__commitⁱᵐᵖˡ : val.

Axiom batchTx__lockⁱᵐᵖˡ : val.

Axiom batchTx__safePendingⁱᵐᵖˡ : val.

Axiom batchTx__unsafePutⁱᵐᵖˡ : val.

Axiom batchTxBuffered__Commitⁱᵐᵖˡ : val.

Axiom batchTxBuffered__CommitAndStopⁱᵐᵖˡ : val.

Axiom batchTxBuffered__Lockⁱᵐᵖˡ : val.

Axiom batchTxBuffered__LockInsideApplyⁱᵐᵖˡ : val.

Axiom batchTxBuffered__LockOutsideApplyⁱᵐᵖˡ : val.

Axiom batchTxBuffered__TryLockⁱᵐᵖˡ : val.

Axiom batchTxBuffered__Unlockⁱᵐᵖˡ : val.

Axiom batchTxBuffered__UnsafeCreateBucketⁱᵐᵖˡ : val.

Axiom batchTxBuffered__UnsafeDeleteⁱᵐᵖˡ : val.

Axiom batchTxBuffered__UnsafeDeleteBucketⁱᵐᵖˡ : val.

Axiom batchTxBuffered__UnsafeForEachⁱᵐᵖˡ : val.

Axiom batchTxBuffered__UnsafePutⁱᵐᵖˡ : val.

Axiom batchTxBuffered__UnsafeRangeⁱᵐᵖˡ : val.

Axiom batchTxBuffered__UnsafeSeqPutⁱᵐᵖˡ : val.

Axiom batchTxBuffered__commitⁱᵐᵖˡ : val.

Axiom batchTxBuffered__lockⁱᵐᵖˡ : val.

Axiom batchTxBuffered__safePendingⁱᵐᵖˡ : val.

Axiom batchTxBuffered__unsafeCommitⁱᵐᵖˡ : val.

Axiom batchTxBuffered__unsafePutⁱᵐᵖˡ : val.

Axiom hooks__OnPreCommitUnsafeⁱᵐᵖˡ : val.

Axiom baseReadTx__UnsafeForEachⁱᵐᵖˡ : val.

Axiom baseReadTx__UnsafeRangeⁱᵐᵖˡ : val.

Axiom readTx__Lockⁱᵐᵖˡ : val.

Axiom readTx__RLockⁱᵐᵖˡ : val.

Axiom readTx__RUnlockⁱᵐᵖˡ : val.

Axiom readTx__Unlockⁱᵐᵖˡ : val.

Axiom readTx__UnsafeForEachⁱᵐᵖˡ : val.

Axiom readTx__UnsafeRangeⁱᵐᵖˡ : val.

Axiom readTx__resetⁱᵐᵖˡ : val.

Axiom concurrentReadTx__Lockⁱᵐᵖˡ : val.

Axiom concurrentReadTx__RLockⁱᵐᵖˡ : val.

Axiom concurrentReadTx__RUnlockⁱᵐᵖˡ : val.

Axiom concurrentReadTx__Unlockⁱᵐᵖˡ : val.

Axiom concurrentReadTx__UnsafeForEachⁱᵐᵖˡ : val.

Axiom concurrentReadTx__UnsafeRangeⁱᵐᵖˡ : val.

Axiom txBuffer__resetⁱᵐᵖˡ : val.

Axiom txWriteBuffer__putⁱᵐᵖˡ : val.

Axiom txWriteBuffer__putInternalⁱᵐᵖˡ : val.

Axiom txWriteBuffer__putSeqⁱᵐᵖˡ : val.

Axiom txWriteBuffer__resetⁱᵐᵖˡ : val.

Axiom txWriteBuffer__writebackⁱᵐᵖˡ : val.

Axiom txReadBuffer__ForEachⁱᵐᵖˡ : val.

Axiom txReadBuffer__Rangeⁱᵐᵖˡ : val.

Axiom txReadBuffer__resetⁱᵐᵖˡ : val.

Axiom txReadBuffer__unsafeCopyⁱᵐᵖˡ : val.

Axiom bucketBuffer__CopyUsedⁱᵐᵖˡ : val.

Axiom bucketBuffer__ForEachⁱᵐᵖˡ : val.

Axiom bucketBuffer__Lenⁱᵐᵖˡ : val.

Axiom bucketBuffer__Lessⁱᵐᵖˡ : val.

Axiom bucketBuffer__Rangeⁱᵐᵖˡ : val.

Axiom bucketBuffer__Swapⁱᵐᵖˡ : val.

Axiom bucketBuffer__addⁱᵐᵖˡ : val.

Axiom bucketBuffer__dedupeⁱᵐᵖˡ : val.

Axiom bucketBuffer__mergeⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(txReadBufferCache.id, []); (ptrT.id txReadBufferCache.id, []); (backend.id, []); (ptrT.id backend.id, [("BatchTx"%go, backend__BatchTxⁱᵐᵖˡ); ("Close"%go, backend__Closeⁱᵐᵖˡ); ("Commits"%go, backend__Commitsⁱᵐᵖˡ); ("ConcurrentReadTx"%go, backend__ConcurrentReadTxⁱᵐᵖˡ); ("Defrag"%go, backend__Defragⁱᵐᵖˡ); ("ForceCommit"%go, backend__ForceCommitⁱᵐᵖˡ); ("Hash"%go, backend__Hashⁱᵐᵖˡ); ("OpenReadTxN"%go, backend__OpenReadTxNⁱᵐᵖˡ); ("ReadTx"%go, backend__ReadTxⁱᵐᵖˡ); ("SetTxPostLockInsideApplyHook"%go, backend__SetTxPostLockInsideApplyHookⁱᵐᵖˡ); ("Size"%go, backend__Sizeⁱᵐᵖˡ); ("SizeInUse"%go, backend__SizeInUseⁱᵐᵖˡ); ("Snapshot"%go, backend__Snapshotⁱᵐᵖˡ); ("begin"%go, backend__beginⁱᵐᵖˡ); ("defrag"%go, backend__defragⁱᵐᵖˡ); ("run"%go, backend__runⁱᵐᵖˡ); ("unsafeBegin"%go, backend__unsafeBeginⁱᵐᵖˡ)]); (BackendConfig.id, []); (ptrT.id BackendConfig.id, [("mmapSize"%go, BackendConfig__mmapSizeⁱᵐᵖˡ)]); (BackendConfigOption.id, []); (ptrT.id BackendConfigOption.id, []); (snapshot.id, [("Bucket"%go, snapshot__Bucketⁱᵐᵖˡ); ("Check"%go, snapshot__Checkⁱᵐᵖˡ); ("Commit"%go, snapshot__Commitⁱᵐᵖˡ); ("Copy"%go, snapshot__Copyⁱᵐᵖˡ); ("CopyFile"%go, snapshot__CopyFileⁱᵐᵖˡ); ("CreateBucket"%go, snapshot__CreateBucketⁱᵐᵖˡ); ("CreateBucketIfNotExists"%go, snapshot__CreateBucketIfNotExistsⁱᵐᵖˡ); ("Cursor"%go, snapshot__Cursorⁱᵐᵖˡ); ("DB"%go, snapshot__DBⁱᵐᵖˡ); ("DeleteBucket"%go, snapshot__DeleteBucketⁱᵐᵖˡ); ("ForEach"%go, snapshot__ForEachⁱᵐᵖˡ); ("ID"%go, snapshot__IDⁱᵐᵖˡ); ("Inspect"%go, snapshot__Inspectⁱᵐᵖˡ); ("MoveBucket"%go, snapshot__MoveBucketⁱᵐᵖˡ); ("OnCommit"%go, snapshot__OnCommitⁱᵐᵖˡ); ("Page"%go, snapshot__Pageⁱᵐᵖˡ); ("Rollback"%go, snapshot__Rollbackⁱᵐᵖˡ); ("Size"%go, snapshot__Sizeⁱᵐᵖˡ); ("Stats"%go, snapshot__Statsⁱᵐᵖˡ); ("Writable"%go, snapshot__Writableⁱᵐᵖˡ); ("WriteTo"%go, snapshot__WriteToⁱᵐᵖˡ); ("allocate"%go, snapshot__allocateⁱᵐᵖˡ); ("check"%go, snapshot__checkⁱᵐᵖˡ); ("checkInvariantProperties"%go, snapshot__checkInvariantPropertiesⁱᵐᵖˡ); ("close"%go, snapshot__closeⁱᵐᵖˡ); ("commitFreelist"%go, snapshot__commitFreelistⁱᵐᵖˡ); ("forEachPage"%go, snapshot__forEachPageⁱᵐᵖˡ); ("forEachPageInternal"%go, snapshot__forEachPageInternalⁱᵐᵖˡ); ("init"%go, snapshot__initⁱᵐᵖˡ); ("nonPhysicalRollback"%go, snapshot__nonPhysicalRollbackⁱᵐᵖˡ); ("page"%go, snapshot__pageⁱᵐᵖˡ); ("recursivelyCheckBucket"%go, snapshot__recursivelyCheckBucketⁱᵐᵖˡ); ("recursivelyCheckBucketInPage"%go, snapshot__recursivelyCheckBucketInPageⁱᵐᵖˡ); ("recursivelyCheckPage"%go, snapshot__recursivelyCheckPageⁱᵐᵖˡ); ("recursivelyCheckPageKeyOrder"%go, snapshot__recursivelyCheckPageKeyOrderⁱᵐᵖˡ); ("recursivelyCheckPageKeyOrderInternal"%go, snapshot__recursivelyCheckPageKeyOrderInternalⁱᵐᵖˡ); ("rollback"%go, snapshot__rollbackⁱᵐᵖˡ); ("write"%go, snapshot__writeⁱᵐᵖˡ); ("writeMeta"%go, snapshot__writeMetaⁱᵐᵖˡ)]); (ptrT.id snapshot.id, [("Bucket"%go, snapshot__Bucketⁱᵐᵖˡ); ("Check"%go, snapshot__Checkⁱᵐᵖˡ); ("Close"%go, snapshot__Closeⁱᵐᵖˡ); ("Commit"%go, snapshot__Commitⁱᵐᵖˡ); ("Copy"%go, snapshot__Copyⁱᵐᵖˡ); ("CopyFile"%go, snapshot__CopyFileⁱᵐᵖˡ); ("CreateBucket"%go, snapshot__CreateBucketⁱᵐᵖˡ); ("CreateBucketIfNotExists"%go, snapshot__CreateBucketIfNotExistsⁱᵐᵖˡ); ("Cursor"%go, snapshot__Cursorⁱᵐᵖˡ); ("DB"%go, snapshot__DBⁱᵐᵖˡ); ("DeleteBucket"%go, snapshot__DeleteBucketⁱᵐᵖˡ); ("ForEach"%go, snapshot__ForEachⁱᵐᵖˡ); ("ID"%go, snapshot__IDⁱᵐᵖˡ); ("Inspect"%go, snapshot__Inspectⁱᵐᵖˡ); ("MoveBucket"%go, snapshot__MoveBucketⁱᵐᵖˡ); ("OnCommit"%go, snapshot__OnCommitⁱᵐᵖˡ); ("Page"%go, snapshot__Pageⁱᵐᵖˡ); ("Rollback"%go, snapshot__Rollbackⁱᵐᵖˡ); ("Size"%go, snapshot__Sizeⁱᵐᵖˡ); ("Stats"%go, snapshot__Statsⁱᵐᵖˡ); ("Writable"%go, snapshot__Writableⁱᵐᵖˡ); ("WriteTo"%go, snapshot__WriteToⁱᵐᵖˡ); ("allocate"%go, snapshot__allocateⁱᵐᵖˡ); ("check"%go, snapshot__checkⁱᵐᵖˡ); ("checkInvariantProperties"%go, snapshot__checkInvariantPropertiesⁱᵐᵖˡ); ("close"%go, snapshot__closeⁱᵐᵖˡ); ("commitFreelist"%go, snapshot__commitFreelistⁱᵐᵖˡ); ("forEachPage"%go, snapshot__forEachPageⁱᵐᵖˡ); ("forEachPageInternal"%go, snapshot__forEachPageInternalⁱᵐᵖˡ); ("init"%go, snapshot__initⁱᵐᵖˡ); ("nonPhysicalRollback"%go, snapshot__nonPhysicalRollbackⁱᵐᵖˡ); ("page"%go, snapshot__pageⁱᵐᵖˡ); ("recursivelyCheckBucket"%go, snapshot__recursivelyCheckBucketⁱᵐᵖˡ); ("recursivelyCheckBucketInPage"%go, snapshot__recursivelyCheckBucketInPageⁱᵐᵖˡ); ("recursivelyCheckPage"%go, snapshot__recursivelyCheckPageⁱᵐᵖˡ); ("recursivelyCheckPageKeyOrder"%go, snapshot__recursivelyCheckPageKeyOrderⁱᵐᵖˡ); ("recursivelyCheckPageKeyOrderInternal"%go, snapshot__recursivelyCheckPageKeyOrderInternalⁱᵐᵖˡ); ("rollback"%go, snapshot__rollbackⁱᵐᵖˡ); ("write"%go, snapshot__writeⁱᵐᵖˡ); ("writeMeta"%go, snapshot__writeMetaⁱᵐᵖˡ)]); (zapBoltLogger.id, [("DPanic"%go, zapBoltLogger__DPanicⁱᵐᵖˡ); ("DPanicf"%go, zapBoltLogger__DPanicfⁱᵐᵖˡ); ("DPanicln"%go, zapBoltLogger__DPaniclnⁱᵐᵖˡ); ("DPanicw"%go, zapBoltLogger__DPanicwⁱᵐᵖˡ); ("Debug"%go, zapBoltLogger__Debugⁱᵐᵖˡ); ("Debugf"%go, zapBoltLogger__Debugfⁱᵐᵖˡ); ("Debugln"%go, zapBoltLogger__Debuglnⁱᵐᵖˡ); ("Debugw"%go, zapBoltLogger__Debugwⁱᵐᵖˡ); ("Desugar"%go, zapBoltLogger__Desugarⁱᵐᵖˡ); ("Error"%go, zapBoltLogger__Errorⁱᵐᵖˡ); ("Errorf"%go, zapBoltLogger__Errorfⁱᵐᵖˡ); ("Errorln"%go, zapBoltLogger__Errorlnⁱᵐᵖˡ); ("Errorw"%go, zapBoltLogger__Errorwⁱᵐᵖˡ); ("Fatal"%go, zapBoltLogger__Fatalⁱᵐᵖˡ); ("Fatalf"%go, zapBoltLogger__Fatalfⁱᵐᵖˡ); ("Fatalln"%go, zapBoltLogger__Fatallnⁱᵐᵖˡ); ("Fatalw"%go, zapBoltLogger__Fatalwⁱᵐᵖˡ); ("Info"%go, zapBoltLogger__Infoⁱᵐᵖˡ); ("Infof"%go, zapBoltLogger__Infofⁱᵐᵖˡ); ("Infoln"%go, zapBoltLogger__Infolnⁱᵐᵖˡ); ("Infow"%go, zapBoltLogger__Infowⁱᵐᵖˡ); ("Level"%go, zapBoltLogger__Levelⁱᵐᵖˡ); ("Log"%go, zapBoltLogger__Logⁱᵐᵖˡ); ("Logf"%go, zapBoltLogger__Logfⁱᵐᵖˡ); ("Logln"%go, zapBoltLogger__Loglnⁱᵐᵖˡ); ("Logw"%go, zapBoltLogger__Logwⁱᵐᵖˡ); ("Named"%go, zapBoltLogger__Namedⁱᵐᵖˡ); ("Panic"%go, zapBoltLogger__Panicⁱᵐᵖˡ); ("Panicf"%go, zapBoltLogger__Panicfⁱᵐᵖˡ); ("Panicln"%go, zapBoltLogger__Paniclnⁱᵐᵖˡ); ("Panicw"%go, zapBoltLogger__Panicwⁱᵐᵖˡ); ("Sync"%go, zapBoltLogger__Syncⁱᵐᵖˡ); ("Warn"%go, zapBoltLogger__Warnⁱᵐᵖˡ); ("Warnf"%go, zapBoltLogger__Warnfⁱᵐᵖˡ); ("Warnln"%go, zapBoltLogger__Warnlnⁱᵐᵖˡ); ("Warnw"%go, zapBoltLogger__Warnwⁱᵐᵖˡ); ("With"%go, zapBoltLogger__Withⁱᵐᵖˡ); ("WithLazy"%go, zapBoltLogger__WithLazyⁱᵐᵖˡ); ("WithOptions"%go, zapBoltLogger__WithOptionsⁱᵐᵖˡ); ("log"%go, zapBoltLogger__logⁱᵐᵖˡ); ("logln"%go, zapBoltLogger__loglnⁱᵐᵖˡ); ("sweetenFields"%go, zapBoltLogger__sweetenFieldsⁱᵐᵖˡ)]); (ptrT.id zapBoltLogger.id, [("DPanic"%go, zapBoltLogger__DPanicⁱᵐᵖˡ); ("DPanicf"%go, zapBoltLogger__DPanicfⁱᵐᵖˡ); ("DPanicln"%go, zapBoltLogger__DPaniclnⁱᵐᵖˡ); ("DPanicw"%go, zapBoltLogger__DPanicwⁱᵐᵖˡ); ("Debug"%go, zapBoltLogger__Debugⁱᵐᵖˡ); ("Debugf"%go, zapBoltLogger__Debugfⁱᵐᵖˡ); ("Debugln"%go, zapBoltLogger__Debuglnⁱᵐᵖˡ); ("Debugw"%go, zapBoltLogger__Debugwⁱᵐᵖˡ); ("Desugar"%go, zapBoltLogger__Desugarⁱᵐᵖˡ); ("Error"%go, zapBoltLogger__Errorⁱᵐᵖˡ); ("Errorf"%go, zapBoltLogger__Errorfⁱᵐᵖˡ); ("Errorln"%go, zapBoltLogger__Errorlnⁱᵐᵖˡ); ("Errorw"%go, zapBoltLogger__Errorwⁱᵐᵖˡ); ("Fatal"%go, zapBoltLogger__Fatalⁱᵐᵖˡ); ("Fatalf"%go, zapBoltLogger__Fatalfⁱᵐᵖˡ); ("Fatalln"%go, zapBoltLogger__Fatallnⁱᵐᵖˡ); ("Fatalw"%go, zapBoltLogger__Fatalwⁱᵐᵖˡ); ("Info"%go, zapBoltLogger__Infoⁱᵐᵖˡ); ("Infof"%go, zapBoltLogger__Infofⁱᵐᵖˡ); ("Infoln"%go, zapBoltLogger__Infolnⁱᵐᵖˡ); ("Infow"%go, zapBoltLogger__Infowⁱᵐᵖˡ); ("Level"%go, zapBoltLogger__Levelⁱᵐᵖˡ); ("Log"%go, zapBoltLogger__Logⁱᵐᵖˡ); ("Logf"%go, zapBoltLogger__Logfⁱᵐᵖˡ); ("Logln"%go, zapBoltLogger__Loglnⁱᵐᵖˡ); ("Logw"%go, zapBoltLogger__Logwⁱᵐᵖˡ); ("Named"%go, zapBoltLogger__Namedⁱᵐᵖˡ); ("Panic"%go, zapBoltLogger__Panicⁱᵐᵖˡ); ("Panicf"%go, zapBoltLogger__Panicfⁱᵐᵖˡ); ("Panicln"%go, zapBoltLogger__Paniclnⁱᵐᵖˡ); ("Panicw"%go, zapBoltLogger__Panicwⁱᵐᵖˡ); ("Sync"%go, zapBoltLogger__Syncⁱᵐᵖˡ); ("Warn"%go, zapBoltLogger__Warnⁱᵐᵖˡ); ("Warnf"%go, zapBoltLogger__Warnfⁱᵐᵖˡ); ("Warning"%go, zapBoltLogger__Warningⁱᵐᵖˡ); ("Warningf"%go, zapBoltLogger__Warningfⁱᵐᵖˡ); ("Warnln"%go, zapBoltLogger__Warnlnⁱᵐᵖˡ); ("Warnw"%go, zapBoltLogger__Warnwⁱᵐᵖˡ); ("With"%go, zapBoltLogger__Withⁱᵐᵖˡ); ("WithLazy"%go, zapBoltLogger__WithLazyⁱᵐᵖˡ); ("WithOptions"%go, zapBoltLogger__WithOptionsⁱᵐᵖˡ); ("log"%go, zapBoltLogger__logⁱᵐᵖˡ); ("logln"%go, zapBoltLogger__loglnⁱᵐᵖˡ); ("sweetenFields"%go, zapBoltLogger__sweetenFieldsⁱᵐᵖˡ)]); (BucketID.id, []); (ptrT.id BucketID.id, []); (batchTx.id, []); (ptrT.id batchTx.id, [("Commit"%go, batchTx__Commitⁱᵐᵖˡ); ("CommitAndStop"%go, batchTx__CommitAndStopⁱᵐᵖˡ); ("Lock"%go, batchTx__Lockⁱᵐᵖˡ); ("LockInsideApply"%go, batchTx__LockInsideApplyⁱᵐᵖˡ); ("LockOutsideApply"%go, batchTx__LockOutsideApplyⁱᵐᵖˡ); ("TryLock"%go, batchTx__TryLockⁱᵐᵖˡ); ("Unlock"%go, batchTx__Unlockⁱᵐᵖˡ); ("UnsafeCreateBucket"%go, batchTx__UnsafeCreateBucketⁱᵐᵖˡ); ("UnsafeDelete"%go, batchTx__UnsafeDeleteⁱᵐᵖˡ); ("UnsafeDeleteBucket"%go, batchTx__UnsafeDeleteBucketⁱᵐᵖˡ); ("UnsafeForEach"%go, batchTx__UnsafeForEachⁱᵐᵖˡ); ("UnsafePut"%go, batchTx__UnsafePutⁱᵐᵖˡ); ("UnsafeRange"%go, batchTx__UnsafeRangeⁱᵐᵖˡ); ("UnsafeSeqPut"%go, batchTx__UnsafeSeqPutⁱᵐᵖˡ); ("commit"%go, batchTx__commitⁱᵐᵖˡ); ("lock"%go, batchTx__lockⁱᵐᵖˡ); ("safePending"%go, batchTx__safePendingⁱᵐᵖˡ); ("unsafePut"%go, batchTx__unsafePutⁱᵐᵖˡ)]); (batchTxBuffered.id, []); (ptrT.id batchTxBuffered.id, [("Commit"%go, batchTxBuffered__Commitⁱᵐᵖˡ); ("CommitAndStop"%go, batchTxBuffered__CommitAndStopⁱᵐᵖˡ); ("Lock"%go, batchTxBuffered__Lockⁱᵐᵖˡ); ("LockInsideApply"%go, batchTxBuffered__LockInsideApplyⁱᵐᵖˡ); ("LockOutsideApply"%go, batchTxBuffered__LockOutsideApplyⁱᵐᵖˡ); ("TryLock"%go, batchTxBuffered__TryLockⁱᵐᵖˡ); ("Unlock"%go, batchTxBuffered__Unlockⁱᵐᵖˡ); ("UnsafeCreateBucket"%go, batchTxBuffered__UnsafeCreateBucketⁱᵐᵖˡ); ("UnsafeDelete"%go, batchTxBuffered__UnsafeDeleteⁱᵐᵖˡ); ("UnsafeDeleteBucket"%go, batchTxBuffered__UnsafeDeleteBucketⁱᵐᵖˡ); ("UnsafeForEach"%go, batchTxBuffered__UnsafeForEachⁱᵐᵖˡ); ("UnsafePut"%go, batchTxBuffered__UnsafePutⁱᵐᵖˡ); ("UnsafeRange"%go, batchTxBuffered__UnsafeRangeⁱᵐᵖˡ); ("UnsafeSeqPut"%go, batchTxBuffered__UnsafeSeqPutⁱᵐᵖˡ); ("commit"%go, batchTxBuffered__commitⁱᵐᵖˡ); ("lock"%go, batchTxBuffered__lockⁱᵐᵖˡ); ("safePending"%go, batchTxBuffered__safePendingⁱᵐᵖˡ); ("unsafeCommit"%go, batchTxBuffered__unsafeCommitⁱᵐᵖˡ); ("unsafePut"%go, batchTxBuffered__unsafePutⁱᵐᵖˡ)]); (HookFunc.id, []); (ptrT.id HookFunc.id, []); (hooks.id, [("OnPreCommitUnsafe"%go, hooks__OnPreCommitUnsafeⁱᵐᵖˡ)]); (ptrT.id hooks.id, [("OnPreCommitUnsafe"%go, hooks__OnPreCommitUnsafeⁱᵐᵖˡ)]); (baseReadTx.id, []); (ptrT.id baseReadTx.id, [("UnsafeForEach"%go, baseReadTx__UnsafeForEachⁱᵐᵖˡ); ("UnsafeRange"%go, baseReadTx__UnsafeRangeⁱᵐᵖˡ)]); (readTx.id, []); (ptrT.id readTx.id, [("Lock"%go, readTx__Lockⁱᵐᵖˡ); ("RLock"%go, readTx__RLockⁱᵐᵖˡ); ("RUnlock"%go, readTx__RUnlockⁱᵐᵖˡ); ("Unlock"%go, readTx__Unlockⁱᵐᵖˡ); ("UnsafeForEach"%go, readTx__UnsafeForEachⁱᵐᵖˡ); ("UnsafeRange"%go, readTx__UnsafeRangeⁱᵐᵖˡ); ("reset"%go, readTx__resetⁱᵐᵖˡ)]); (concurrentReadTx.id, []); (ptrT.id concurrentReadTx.id, [("Lock"%go, concurrentReadTx__Lockⁱᵐᵖˡ); ("RLock"%go, concurrentReadTx__RLockⁱᵐᵖˡ); ("RUnlock"%go, concurrentReadTx__RUnlockⁱᵐᵖˡ); ("Unlock"%go, concurrentReadTx__Unlockⁱᵐᵖˡ); ("UnsafeForEach"%go, concurrentReadTx__UnsafeForEachⁱᵐᵖˡ); ("UnsafeRange"%go, concurrentReadTx__UnsafeRangeⁱᵐᵖˡ)]); (txBuffer.id, []); (ptrT.id txBuffer.id, [("reset"%go, txBuffer__resetⁱᵐᵖˡ)]); (txWriteBuffer.id, []); (ptrT.id txWriteBuffer.id, [("put"%go, txWriteBuffer__putⁱᵐᵖˡ); ("putInternal"%go, txWriteBuffer__putInternalⁱᵐᵖˡ); ("putSeq"%go, txWriteBuffer__putSeqⁱᵐᵖˡ); ("reset"%go, txWriteBuffer__resetⁱᵐᵖˡ); ("writeback"%go, txWriteBuffer__writebackⁱᵐᵖˡ)]); (txReadBuffer.id, []); (ptrT.id txReadBuffer.id, [("ForEach"%go, txReadBuffer__ForEachⁱᵐᵖˡ); ("Range"%go, txReadBuffer__Rangeⁱᵐᵖˡ); ("reset"%go, txReadBuffer__resetⁱᵐᵖˡ); ("unsafeCopy"%go, txReadBuffer__unsafeCopyⁱᵐᵖˡ)]); (kv.id, []); (ptrT.id kv.id, []); (bucketBuffer.id, []); (ptrT.id bucketBuffer.id, [("CopyUsed"%go, bucketBuffer__CopyUsedⁱᵐᵖˡ); ("ForEach"%go, bucketBuffer__ForEachⁱᵐᵖˡ); ("Len"%go, bucketBuffer__Lenⁱᵐᵖˡ); ("Less"%go, bucketBuffer__Lessⁱᵐᵖˡ); ("Range"%go, bucketBuffer__Rangeⁱᵐᵖˡ); ("Swap"%go, bucketBuffer__Swapⁱᵐᵖˡ); ("add"%go, bucketBuffer__addⁱᵐᵖˡ); ("dedupe"%go, bucketBuffer__dedupeⁱᵐᵖˡ); ("merge"%go, bucketBuffer__mergeⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo backend.backend :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #backend.backend (λ: <>,
      exception_do (do:  (package.alloc backend.backend #());;;
      do:  (defaultBatchLimit'init #());;;
      do:  (defaultBatchInterval'init #());;;
      do:  (defragLimit'init #());;;
      do:  (InitialMmapSize'init #());;;
      do:  (minSnapshotWarningTimeout'init #());;;
      do:  (boltOpenOptions'init #());;;
      do:  (commitSec'init #());;;
      do:  (rebalanceSec'init #());;;
      do:  (spillSec'init #());;;
      do:  (writeSec'init #());;;
      do:  (defragSec'init #());;;
      do:  (snapshotTransferSec'init #());;;
      do:  (isDefragActive'init #()))
      ).

End code.
End backend.
