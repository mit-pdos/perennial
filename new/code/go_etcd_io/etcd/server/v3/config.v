(* autogenerated from go.etcd.io/etcd/server/v3/config *)

From New.golang Require Import defn.
Definition config : go_string := "go.etcd.io/etcd/server/v3/config".

Module config.

Module ServerConfig. Definition id : go_string := "go.etcd.io/etcd/server/v3/config.ServerConfig"%go. End ServerConfig.
Module V2DeprecationEnum. Definition id : go_string := "go.etcd.io/etcd/server/v3/config.V2DeprecationEnum"%go. End V2DeprecationEnum.

Section code.
Context `{ffi_syntax}.


Axiom grpcOverheadBytes : Z.

Axiom ServerConfig : go_type.

Definition CheckDuplicateURL : go_string := "go.etcd.io/etcd/server/v3/config.CheckDuplicateURL"%go.

Axiom V2DeprecationEnum : go_type.

Axiom V2Depr0NotYet : expr.

Axiom V2_DEPR_0_NOT_YET : expr.

Axiom V2Depr1WriteOnly : expr.

Axiom V2_DEPR_1_WRITE_ONLY : expr.

Axiom V2Depr1WriteOnlyDrop : expr.

Axiom V2_DEPR_1_WRITE_ONLY_DROP : expr.

Axiom V2Depr2Gone : expr.

Axiom V2_DEPR_2_GONE : expr.

Axiom V2DeprDefault : expr.

Axiom V2_DEPR_DEFAULT : expr.

Definition vars' : list (go_string * go_type) := [].

Axiom CheckDuplicateURLⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(CheckDuplicateURL, CheckDuplicateURLⁱᵐᵖˡ)].

Axiom ServerConfig__BackendPathⁱᵐᵖˡ : val.

Axiom ServerConfig__BootstrapTimeoutEffectiveⁱᵐᵖˡ : val.

Axiom ServerConfig__ElectionTimeoutⁱᵐᵖˡ : val.

Axiom ServerConfig__MaxRequestBytesWithOverheadⁱᵐᵖˡ : val.

Axiom ServerConfig__MemberDirⁱᵐᵖˡ : val.

Axiom ServerConfig__PeerDialTimeoutⁱᵐᵖˡ : val.

Axiom ServerConfig__ReqTimeoutⁱᵐᵖˡ : val.

Axiom ServerConfig__ShouldDiscoverⁱᵐᵖˡ : val.

Axiom ServerConfig__SnapDirⁱᵐᵖˡ : val.

Axiom ServerConfig__VerifyBootstrapⁱᵐᵖˡ : val.

Axiom ServerConfig__VerifyJoinExistingⁱᵐᵖˡ : val.

Axiom ServerConfig__WALDirⁱᵐᵖˡ : val.

Axiom ServerConfig__advertiseMatchesClusterⁱᵐᵖˡ : val.

Axiom ServerConfig__hasLocalMemberⁱᵐᵖˡ : val.

Axiom V2DeprecationEnum__IsAtLeastⁱᵐᵖˡ : val.

Axiom V2DeprecationEnum__levelⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(ServerConfig.id, []); (ptrT.id ServerConfig.id, [("BackendPath"%go, ServerConfig__BackendPathⁱᵐᵖˡ); ("BootstrapTimeoutEffective"%go, ServerConfig__BootstrapTimeoutEffectiveⁱᵐᵖˡ); ("ElectionTimeout"%go, ServerConfig__ElectionTimeoutⁱᵐᵖˡ); ("MaxRequestBytesWithOverhead"%go, ServerConfig__MaxRequestBytesWithOverheadⁱᵐᵖˡ); ("MemberDir"%go, ServerConfig__MemberDirⁱᵐᵖˡ); ("PeerDialTimeout"%go, ServerConfig__PeerDialTimeoutⁱᵐᵖˡ); ("ReqTimeout"%go, ServerConfig__ReqTimeoutⁱᵐᵖˡ); ("ShouldDiscover"%go, ServerConfig__ShouldDiscoverⁱᵐᵖˡ); ("SnapDir"%go, ServerConfig__SnapDirⁱᵐᵖˡ); ("VerifyBootstrap"%go, ServerConfig__VerifyBootstrapⁱᵐᵖˡ); ("VerifyJoinExisting"%go, ServerConfig__VerifyJoinExistingⁱᵐᵖˡ); ("WALDir"%go, ServerConfig__WALDirⁱᵐᵖˡ); ("advertiseMatchesCluster"%go, ServerConfig__advertiseMatchesClusterⁱᵐᵖˡ); ("hasLocalMember"%go, ServerConfig__hasLocalMemberⁱᵐᵖˡ)]); (V2DeprecationEnum.id, [("IsAtLeast"%go, V2DeprecationEnum__IsAtLeastⁱᵐᵖˡ); ("level"%go, V2DeprecationEnum__levelⁱᵐᵖˡ)]); (ptrT.id V2DeprecationEnum.id, [("IsAtLeast"%go, V2DeprecationEnum__IsAtLeastⁱᵐᵖˡ); ("level"%go, V2DeprecationEnum__levelⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo config.config :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #config.config (λ: <>,
      exception_do (do:  (package.alloc config.config #()))
      ).

End code.
End config.
