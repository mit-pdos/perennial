(* autogenerated from go.etcd.io/etcd/api/v3/etcdserverpb *)
From New.golang Require Import defn.

Definition etcdserverpb : go_string := "go.etcd.io/etcd/api/v3/etcdserverpb".

Module etcdserverpb.
Section code.
Context `{ffi_syntax}.


Axiom fileDescriptor_09ffbeb3bebbce7e'init : val.

Axiom ErrInvalidLengthEtcdserver'init : val.

Axiom ErrIntOverflowEtcdserver'init : val.

Axiom ErrUnexpectedEndOfGroupEtcdserver'init : val.

Axiom fileDescriptor_b4c9a9be0cfca103'init : val.

Axiom ErrInvalidLengthRaftInternal'init : val.

Axiom ErrIntOverflowRaftInternal'init : val.

Axiom ErrUnexpectedEndOfGroupRaftInternal'init : val.

Axiom AlarmType_name'init : val.

Axiom AlarmType_value'init : val.

Axiom RangeRequest_SortOrder_name'init : val.

Axiom RangeRequest_SortOrder_value'init : val.

Axiom RangeRequest_SortTarget_name'init : val.

Axiom RangeRequest_SortTarget_value'init : val.

Definition Compare_CompareResult : go_type := int32T.

Definition Compare_EQUAL : expr := #(W32 0).

Definition Compare_GREATER : expr := #(W32 1).

Definition Compare_LESS : expr := #(W32 2).

Definition Compare_NOT_EQUAL : expr := #(W32 3).

Axiom Compare_CompareResult_name'init : val.

Axiom Compare_CompareResult_value'init : val.

Definition Compare_CompareTarget : go_type := int32T.

Definition Compare_VERSION : expr := #(W32 0).

Definition Compare_CREATE : expr := #(W32 1).

Definition Compare_MOD : expr := #(W32 2).

Definition Compare_VALUE : expr := #(W32 3).

Definition Compare_LEASE : expr := #(W32 4).

Axiom Compare_CompareTarget_name'init : val.

Axiom Compare_CompareTarget_value'init : val.

Axiom WatchCreateRequest_FilterType_name'init : val.

Axiom WatchCreateRequest_FilterType_value'init : val.

Axiom AlarmRequest_AlarmAction_name'init : val.

Axiom AlarmRequest_AlarmAction_value'init : val.

Axiom DowngradeRequest_DowngradeAction_name'init : val.

Axiom DowngradeRequest_DowngradeAction_value'init : val.

Definition ResponseHeader : go_type := structT [
  "ClusterId" :: uint64T;
  "MemberId" :: uint64T;
  "Revision" :: int64T;
  "RaftTerm" :: uint64T;
  "XXX_NoUnkeyedLiteral" :: structT [
  ];
  "XXX_unrecognized" :: sliceT;
  "XXX_sizecache" :: int32T
].

Definition RangeResponse : go_type := structT [
  "Header" :: ptrT;
  "Kvs" :: sliceT;
  "More" :: boolT;
  "Count" :: int64T;
  "XXX_NoUnkeyedLiteral" :: structT [
  ];
  "XXX_unrecognized" :: sliceT;
  "XXX_sizecache" :: int32T
].

Definition PutResponse : go_type := structT [
  "Header" :: ptrT;
  "PrevKv" :: ptrT;
  "XXX_NoUnkeyedLiteral" :: structT [
  ];
  "XXX_unrecognized" :: sliceT;
  "XXX_sizecache" :: int32T
].

Definition DeleteRangeResponse : go_type := structT [
  "Header" :: ptrT;
  "Deleted" :: int64T;
  "PrevKvs" :: sliceT;
  "XXX_NoUnkeyedLiteral" :: structT [
  ];
  "XXX_unrecognized" :: sliceT;
  "XXX_sizecache" :: int32T
].

Definition isResponseOp_Response : go_type := interfaceT.

Definition ResponseOp : go_type := structT [
  "Response" :: isResponseOp_Response;
  "XXX_NoUnkeyedLiteral" :: structT [
  ];
  "XXX_unrecognized" :: sliceT;
  "XXX_sizecache" :: int32T
].

Definition ResponseOp_ResponseRange : go_type := structT [
  "ResponseRange" :: ptrT
].

Definition ResponseOp_ResponsePut : go_type := structT [
  "ResponsePut" :: ptrT
].

Definition ResponseOp_ResponseDeleteRange : go_type := structT [
  "ResponseDeleteRange" :: ptrT
].

Definition ResponseOp_ResponseTxn : go_type := structT [
  "ResponseTxn" :: ptrT
].

Definition isCompare_TargetUnion : go_type := interfaceT.

Definition Compare : go_type := structT [
  "Result" :: Compare_CompareResult;
  "Target" :: Compare_CompareTarget;
  "Key" :: sliceT;
  "TargetUnion" :: isCompare_TargetUnion;
  "RangeEnd" :: sliceT;
  "XXX_NoUnkeyedLiteral" :: structT [
  ];
  "XXX_unrecognized" :: sliceT;
  "XXX_sizecache" :: int32T
].

Definition Compare_Version : go_type := structT [
  "Version" :: int64T
].

Definition Compare_CreateRevision : go_type := structT [
  "CreateRevision" :: int64T
].

Definition Compare_ModRevision : go_type := structT [
  "ModRevision" :: int64T
].

Definition Compare_Value : go_type := structT [
  "Value" :: sliceT
].

Definition Compare_Lease : go_type := structT [
  "Lease" :: int64T
].

Definition TxnResponse : go_type := structT [
  "Header" :: ptrT;
  "Succeeded" :: boolT;
  "Responses" :: sliceT;
  "XXX_NoUnkeyedLiteral" :: structT [
  ];
  "XXX_unrecognized" :: sliceT;
  "XXX_sizecache" :: int32T
].

Axiom fileDescriptor_77a6da22d6a3feb1'init : val.

Axiom _KV_serviceDesc'init : val.

Axiom _Watch_serviceDesc'init : val.

Axiom _Lease_serviceDesc'init : val.

Axiom _Cluster_serviceDesc'init : val.

Axiom _Maintenance_serviceDesc'init : val.

Axiom _Auth_serviceDesc'init : val.

Axiom ErrInvalidLengthRpc'init : val.

Axiom ErrIntOverflowRpc'init : val.

Axiom ErrUnexpectedEndOfGroupRpc'init : val.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [("Compare_CompareResult"%go, []); ("Compare_CompareResult'ptr"%go, []); ("Compare_CompareTarget"%go, []); ("Compare_CompareTarget'ptr"%go, []); ("ResponseHeader"%go, []); ("ResponseHeader'ptr"%go, []); ("RangeResponse"%go, []); ("RangeResponse'ptr"%go, []); ("PutResponse"%go, []); ("PutResponse'ptr"%go, []); ("DeleteRangeResponse"%go, []); ("DeleteRangeResponse'ptr"%go, []); ("ResponseOp"%go, []); ("ResponseOp'ptr"%go, []); ("ResponseOp_ResponseRange"%go, []); ("ResponseOp_ResponseRange'ptr"%go, []); ("ResponseOp_ResponsePut"%go, []); ("ResponseOp_ResponsePut'ptr"%go, []); ("ResponseOp_ResponseDeleteRange"%go, []); ("ResponseOp_ResponseDeleteRange'ptr"%go, []); ("ResponseOp_ResponseTxn"%go, []); ("ResponseOp_ResponseTxn'ptr"%go, []); ("Compare"%go, []); ("Compare'ptr"%go, []); ("Compare_Version"%go, []); ("Compare_Version'ptr"%go, []); ("Compare_CreateRevision"%go, []); ("Compare_CreateRevision'ptr"%go, []); ("Compare_ModRevision"%go, []); ("Compare_ModRevision'ptr"%go, []); ("Compare_Value"%go, []); ("Compare_Value'ptr"%go, []); ("Compare_Lease"%go, []); ("Compare_Lease'ptr"%go, []); ("TxnResponse"%go, []); ("TxnResponse'ptr"%go, [])].

#[global] Instance info' : PkgInfo etcdserverpb.etcdserverpb :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init etcdserverpb.etcdserverpb (Î»: <>,
      exception_do (do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (fileDescriptor_09ffbeb3bebbce7e'init #());;;
      do:  (ErrInvalidLengthEtcdserver'init #());;;
      do:  (ErrIntOverflowEtcdserver'init #());;;
      do:  (ErrUnexpectedEndOfGroupEtcdserver'init #());;;
      do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (fileDescriptor_b4c9a9be0cfca103'init #());;;
      do:  (ErrInvalidLengthRaftInternal'init #());;;
      do:  (ErrIntOverflowRaftInternal'init #());;;
      do:  (ErrUnexpectedEndOfGroupRaftInternal'init #());;;
      do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (AlarmType_name'init #());;;
      do:  (AlarmType_value'init #());;;
      do:  (RangeRequest_SortOrder_name'init #());;;
      do:  (RangeRequest_SortOrder_value'init #());;;
      do:  (RangeRequest_SortTarget_name'init #());;;
      do:  (RangeRequest_SortTarget_value'init #());;;
      do:  (Compare_CompareResult_name'init #());;;
      do:  (Compare_CompareResult_value'init #());;;
      do:  (Compare_CompareTarget_name'init #());;;
      do:  (Compare_CompareTarget_value'init #());;;
      do:  (WatchCreateRequest_FilterType_name'init #());;;
      do:  (WatchCreateRequest_FilterType_value'init #());;;
      do:  (AlarmRequest_AlarmAction_name'init #());;;
      do:  (AlarmRequest_AlarmAction_value'init #());;;
      do:  (DowngradeRequest_DowngradeAction_name'init #());;;
      do:  (DowngradeRequest_DowngradeAction_value'init #());;;
      do:  (fileDescriptor_77a6da22d6a3feb1'init #());;;
      do:  (_KV_serviceDesc'init #());;;
      do:  (_Watch_serviceDesc'init #());;;
      do:  (_Lease_serviceDesc'init #());;;
      do:  (_Cluster_serviceDesc'init #());;;
      do:  (_Maintenance_serviceDesc'init #());;;
      do:  (_Auth_serviceDesc'init #());;;
      do:  (ErrInvalidLengthRpc'init #());;;
      do:  (ErrIntOverflowRpc'init #());;;
      do:  (ErrUnexpectedEndOfGroupRpc'init #()))
      ).

End code.
End etcdserverpb.
