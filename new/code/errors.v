(* autogenerated from errors *)

From New.golang Require Import defn.
Definition errors : go_string := "errors".

Module errors.

Module errorString. Definition id : go_string := "errors.errorString"%go. End errorString.
Module joinError. Definition id : go_string := "errors.joinError"%go. End joinError.

Section code.
Context `{ffi_syntax}.


Definition New : go_string := "errors.New"%go.

Axiom Newⁱᵐᵖˡ : val.

Axiom errorString : go_type.

Axiom errorString__Errorⁱᵐᵖˡ : val.

Definition ErrUnsupported : go_string := "errors.ErrUnsupported"%go.

Axiom ErrUnsupported'init : val.

Definition Join : go_string := "errors.Join"%go.

Axiom Joinⁱᵐᵖˡ : val.

Axiom joinError : go_type.

Axiom joinError__Errorⁱᵐᵖˡ : val.

Axiom joinError__Unwrapⁱᵐᵖˡ : val.

Definition Unwrap : go_string := "errors.Unwrap"%go.

Axiom Unwrapⁱᵐᵖˡ : val.

Definition Is : go_string := "errors.Is"%go.

Axiom Isⁱᵐᵖˡ : val.

Definition is' : go_string := "errors.is"%go.

Axiom isⁱᵐᵖˡ : val.

Definition As : go_string := "errors.As"%go.

Axiom Asⁱᵐᵖˡ : val.

Definition as' : go_string := "errors.as"%go.

Axiom asⁱᵐᵖˡ : val.

Definition errorType : go_string := "errors.errorType"%go.

Axiom errorType'init : val.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(New, Newⁱᵐᵖˡ); (Join, Joinⁱᵐᵖˡ); (Unwrap, Unwrapⁱᵐᵖˡ); (Is, Isⁱᵐᵖˡ); (is', isⁱᵐᵖˡ); (As, Asⁱᵐᵖˡ); (as', asⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(errorString.id, []); (ptrT.id errorString.id, [("Error"%go, errorString__Errorⁱᵐᵖˡ)]); (joinError.id, []); (ptrT.id joinError.id, [("Error"%go, joinError__Errorⁱᵐᵖˡ); ("Unwrap"%go, joinError__Unwrapⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo errors.errors :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #errors.errors (λ: <>,
      exception_do (do:  (package.alloc errors.errors #());;;
      do:  (ErrUnsupported'init #());;;
      do:  (errorType'init #()))
      ).

End code.
End errors.
