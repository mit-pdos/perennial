(* autogenerated from github.com/mit-pdos/tulip/tulip *)
From New.golang Require Import defn.
Require Export New.code.github_com.mit_pdos.gokv.grove_ffi.

Definition tulip : go_string := "github.com/mit-pdos/tulip/tulip".

From New Require Import grove_prelude.
Module tulip.
Section code.


Definition Value : go_type := structT [
  "Present" :: boolT;
  "Content" :: stringT
].

Definition WriteEntry : go_type := structT [
  "Key" :: stringT;
  "Value" :: Value
].

Definition Version : go_type := structT [
  "Timestamp" :: uint64T;
  "Value" :: Value
].

Definition PrepareProposal : go_type := structT [
  "Rank" :: uint64T;
  "Prepared" :: boolT
].

Definition CoordID : go_type := structT [
  "GroupID" :: uint64T;
  "ReplicaID" :: uint64T
].

Definition KVMap : go_type := mapT stringT Value.

Definition AddressMap : go_type := mapT uint64T uint64T.

Definition AddressMaps : go_type := mapT uint64T AddressMap.

Definition TXN_PREPARED : expr := #(W64 0).

Definition TXN_COMMITTED : expr := #(W64 1).

Definition TXN_ABORTED : expr := #(W64 2).

Definition REPLICA_OK : expr := #(W64 0).

Definition REPLICA_COMMITTED_TXN : expr := #(W64 1).

Definition REPLICA_ABORTED_TXN : expr := #(W64 2).

Definition REPLICA_STALE_COORDINATOR : expr := #(W64 3).

Definition REPLICA_FAILED_VALIDATION : expr := #(W64 4).

Definition REPLICA_INVALID_RANK : expr := #(W64 5).

Definition REPLICA_WRONG_LEADER : expr := #(W64 6).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [("Value"%go, []); ("Value'ptr"%go, []); ("WriteEntry"%go, []); ("WriteEntry'ptr"%go, []); ("Version"%go, []); ("Version'ptr"%go, []); ("PrepareProposal"%go, []); ("PrepareProposal'ptr"%go, []); ("CoordID"%go, []); ("CoordID'ptr"%go, []); ("KVMap"%go, []); ("KVMap'ptr"%go, []); ("AddressMap"%go, []); ("AddressMap'ptr"%go, []); ("AddressMaps"%go, []); ("AddressMaps'ptr"%go, [])].

#[global] Instance info' : PkgInfo tulip.tulip :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [grove_ffi.grove_ffi];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init tulip.tulip (Î»: <>,
      exception_do (do:  grove_ffi.initialize')
      ).

End code.
End tulip.
