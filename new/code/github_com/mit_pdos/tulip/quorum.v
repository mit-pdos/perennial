(* autogenerated from github.com/mit-pdos/tulip/quorum *)
From New.golang Require Import defn.

Definition quorum : go_string := "github.com/mit-pdos/tulip/quorum".

Module quorum.
Section code.
Context `{ffi_syntax}.


(* go: quorum.go:3:6 *)
Definition FastQuorum : val :=
  rec: "FastQuorum" "n" :=
    exception_do (let: "n" := (mem.alloc "n") in
    return: (((#(W64 3) * (![#uint64T] "n")) + #(W64 3)) `quot` #(W64 4))).

(* go: quorum.go:8:6 *)
Definition ClassicQuorum : val :=
  rec: "ClassicQuorum" "n" :=
    exception_do (let: "n" := (mem.alloc "n") in
    return: (((![#uint64T] "n") `quot` #(W64 2)) + #(W64 1))).

(* go: quorum.go:13:6 *)
Definition Half : val :=
  rec: "Half" "n" :=
    exception_do (let: "n" := (mem.alloc "n") in
    return: (((![#uint64T] "n") + #(W64 1)) `quot` #(W64 2))).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("FastQuorum"%go, FastQuorum); ("ClassicQuorum"%go, ClassicQuorum); ("Half"%go, Half)].

Definition msets' : list (go_string * (list (go_string * val))) := [].

#[global] Instance info' : PkgInfo quorum.quorum :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init quorum.quorum (Î»: <>,
      exception_do (do:  #())
      ).

End code.
End quorum.
