(* autogenerated from github.com/mit-pdos/gokv/reconfig/replica/becomereplicaargs_gk *)
Require Export New.code.github_com.mit_pdos.gokv.reconfig.replica.logentry_gk.
Require Export New.code.github_com.tchajed.marshal.

From New.golang Require Import defn.
Definition becomereplicaargs_gk : go_string := "github.com/mit-pdos/gokv/reconfig/replica/becomereplicaargs_gk".

Module becomereplicaargs_gk.

Module S. Definition id : go_string := "github.com/mit-pdos/gokv/reconfig/replica/becomereplicaargs_gk.S"%go. End S.

Section code.
Context `{ffi_syntax}.


Definition S : go_type := structT [
  "Epoch" :: uint64T;
  "StartIndex" :: uint64T;
  "Log" :: sliceT
].

Definition Marshal : go_string := "github.com/mit-pdos/gokv/reconfig/replica/becomereplicaargs_gk.Marshal"%go.

(* go: becomereplicaargs_gk.go:20:6 *)
Definition Marshalⁱᵐᵖˡ : val :=
  λ: "enc" "b",
    exception_do (let: "b" := (mem.alloc "b") in
    let: "enc" := (mem.alloc "enc") in
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint64T] (struct.field_ref #S #"Epoch"%go "b")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint64T] (struct.field_ref #S #"StartIndex"%go "b")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (s_to_w64 (let: "$a0" := (![#sliceT] (struct.field_ref #S #"Log"%go "b")) in
    slice.len "$a0")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#sliceT] (struct.field_ref #S #"Log"%go "b")) in
    let: "$a2" := (func_call #logentry_gk.Marshal) in
    (func_call #marshal.WriteSlice #logentry_gk.S) "$a0" "$a1" "$a2") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

Definition Unmarshal : go_string := "github.com/mit-pdos/gokv/reconfig/replica/becomereplicaargs_gk.Unmarshal"%go.

(* go: becomereplicaargs_gk.go:30:6 *)
Definition Unmarshalⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "epoch" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("epoch" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "startIndex" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("startIndex" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "logLen" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("logLen" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "log" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    let: "$a1" := (![#uint64T] "logLen") in
    let: "$a2" := (func_call #logentry_gk.Unmarshal) in
    (func_call #marshal.ReadSlice #logentry_gk.S) "$a0" "$a1" "$a2") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("log" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    return: (let: "$Epoch" := (![#uint64T] "epoch") in
     let: "$StartIndex" := (![#uint64T] "startIndex") in
     let: "$Log" := (![#sliceT] "log") in
     struct.make #S [{
       "Epoch" ::= "$Epoch";
       "StartIndex" ::= "$StartIndex";
       "Log" ::= "$Log"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(Marshal, Marshalⁱᵐᵖˡ); (Unmarshal, Unmarshalⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(S.id, []); (ptrT.id S.id, [])].

#[global] Instance info' : PkgInfo becomereplicaargs_gk.becomereplicaargs_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [code.github_com.tchajed.marshal.marshal; code.github_com.mit_pdos.gokv.reconfig.replica.logentry_gk.logentry_gk];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #becomereplicaargs_gk.becomereplicaargs_gk (λ: <>,
      exception_do (do:  (logentry_gk.initialize' #());;;
      do:  (marshal.initialize' #());;;
      do:  (package.alloc becomereplicaargs_gk.becomereplicaargs_gk #()))
      ).

End code.
End becomereplicaargs_gk.
