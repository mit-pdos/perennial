(* autogenerated from github.com/mit-pdos/gokv/lockservice *)
Require Export New.code.github_com.mit_pdos.gokv.kv.

From New.golang Require Import defn.
Definition lockservice : go_string := "github.com/mit-pdos/gokv/lockservice".

Module lockservice.

Module LockClerk. Definition id : go_string := "github.com/mit-pdos/gokv/lockservice.LockClerk"%go. End LockClerk.

Section code.
Context `{ffi_syntax}.


Definition LockClerk : go_type := structT [
  "kv" :: kv.KvCput
].

(* go: lock_clerk.go:11:22 *)
Definition LockClerk__Lockⁱᵐᵖˡ : val :=
  λ: "ck" "key",
    exception_do (let: "ck" := (mem.alloc "ck") in
    let: "key" := (mem.alloc "key") in
    (for: (λ: <>, (let: "$a0" := (![#stringT] "key") in
    let: "$a1" := #""%go in
    let: "$a2" := #"1"%go in
    (interface.get #"ConditionalPut"%go (![#kv.KvCput] (struct.field_ref #LockClerk #"kv"%go (![#ptrT] "ck")))) "$a0" "$a1" "$a2") ≠ #"ok"%go); (λ: <>, #()) := λ: <>,
      do:  #());;;
    return: #()).

(* go: lock_clerk.go:16:22 *)
Definition LockClerk__Unlockⁱᵐᵖˡ : val :=
  λ: "ck" "key",
    exception_do (let: "ck" := (mem.alloc "ck") in
    let: "key" := (mem.alloc "key") in
    do:  (let: "$a0" := (![#stringT] "key") in
    let: "$a1" := #""%go in
    (interface.get #"Put"%go (![#kv.KvCput] (struct.field_ref #LockClerk #"kv"%go (![#ptrT] "ck")))) "$a0" "$a1");;;
    return: #()).

Definition MakeLockClerk : go_string := "github.com/mit-pdos/gokv/lockservice.MakeLockClerk"%go.

(* go: lock_clerk.go:20:6 *)
Definition MakeLockClerkⁱᵐᵖˡ : val :=
  λ: "kv",
    exception_do (let: "kv" := (mem.alloc "kv") in
    return: (mem.alloc (let: "$kv" := (![#kv.KvCput] "kv") in
     struct.make #LockClerk [{
       "kv" ::= "$kv"
     }]))).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(MakeLockClerk, MakeLockClerkⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(LockClerk.id, []); (ptrT.id LockClerk.id, [("Lock"%go, LockClerk__Lockⁱᵐᵖˡ); ("Unlock"%go, LockClerk__Unlockⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo lockservice.lockservice :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [kv.kv];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #lockservice.lockservice (λ: <>,
      exception_do (do:  (kv.initialize' #());;;
      do:  (package.alloc lockservice.lockservice #()))
      ).

End code.
End lockservice.
