(* autogenerated from github.com/mit-pdos/gokv/lockservice *)
From New.golang Require Import defn.
From New.code Require github_com.mit_pdos.gokv.kv.

Section code.
Context `{ffi_syntax}.

Definition LockClerk : go_type := structT [
  "kv" :: kv.KvCput
].

Definition LockClerk__mset : list (string * val) := [
].

(* go: lock_clerk.go:11:22 *)
Definition LockClerk__Lock : val :=
  rec: "LockClerk__Lock" "ck" "key" :=
    exception_do (let: "ck" := (ref_ty ptrT "ck") in
    let: "key" := (ref_ty stringT "key") in
    (for: (λ: <>, (let: "$a0" := (![stringT] "key") in
    let: "$a1" := #"" in
    let: "$a2" := #"1" in
    (interface.get "ConditionalPut" (![kv.KvCput] (struct.field_ref LockClerk "kv" (![ptrT] "ck")))) "$a0" "$a1" "$a2") ≠ #"ok"); (λ: <>, Skip) := λ: <>,
      do:  #())).

(* go: lock_clerk.go:16:22 *)
Definition LockClerk__Unlock : val :=
  rec: "LockClerk__Unlock" "ck" "key" :=
    exception_do (let: "ck" := (ref_ty ptrT "ck") in
    let: "key" := (ref_ty stringT "key") in
    do:  (let: "$a0" := (![stringT] "key") in
    let: "$a1" := #"" in
    (interface.get "Put" (![kv.KvCput] (struct.field_ref LockClerk "kv" (![ptrT] "ck")))) "$a0" "$a1")).

Definition LockClerk__mset_ptr : list (string * val) := [
  ("Lock", LockClerk__Lock%V);
  ("Unlock", LockClerk__Unlock%V)
].

(* go: lock_clerk.go:20:6 *)
Definition MakeLockClerk : val :=
  rec: "MakeLockClerk" "kv" :=
    exception_do (let: "kv" := (ref_ty kv.KvCput "kv") in
    return: (ref_ty LockClerk (struct.make LockClerk [{
       "kv" ::= ![kv.KvCput] "kv"
     }]))).

End code.
