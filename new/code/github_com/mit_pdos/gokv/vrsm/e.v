(* autogenerated from github.com/mit-pdos/gokv/vrsm/e *)
From New.golang Require Import defn.
Require Export New.code.github_com.tchajed.marshal.

Definition e : go_string := "github.com/mit-pdos/gokv/vrsm/e".

Module e.
Section code.
Context `{ffi_syntax}.


Definition Error : go_type := uint64T.

Definition None : expr := #(W64 0).

Definition Stale : expr := #(W64 1).

Definition OutOfOrder : expr := #(W64 2).

Definition Timeout : expr := #(W64 3).

Definition EmptyConfig : expr := #(W64 4).

Definition NotLeader : expr := #(W64 5).

Definition Sealed : expr := #(W64 6).

Definition LeaseExpired : expr := #(W64 7).

Definition Leased : expr := #(W64 8).

(* go: error.go:21:6 *)
Definition EncodeError : val :=
  rec: "EncodeError" "err" :=
    exception_do (let: "err" := (mem.alloc "err") in
    return: (let: "$a0" := (slice.make3 #byteT #(W64 0) #(W64 8)) in
     let: "$a1" := (![#uint64T] "err") in
     (func_call #marshal.marshal #"WriteInt"%go) "$a0" "$a1")).

(* go: error.go:25:6 *)
Definition DecodeError : val :=
  rec: "DecodeError" "enc" :=
    exception_do (let: "enc" := (mem.alloc "enc") in
    let: "err" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "enc") in
    (func_call #marshal.marshal #"ReadInt"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("err" <-[#uint64T] "$r0");;;
    do:  "$r1";;;
    return: (![#uint64T] "err")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("EncodeError"%go, EncodeError); ("DecodeError"%go, DecodeError)].

Definition msets' : list (go_string * (list (go_string * val))) := [].

#[global] Instance info' : PkgInfo e.e :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [marshal.marshal];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init e.e (Î»: <>,
      exception_do (do:  marshal.initialize')
      ).

End code.
End e.
