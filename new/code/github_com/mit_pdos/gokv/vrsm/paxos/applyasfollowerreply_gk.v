(* autogenerated from github.com/mit-pdos/gokv/vrsm/paxos/applyasfollowerreply_gk *)
Require Export New.code.github_com.mit_pdos.gokv.vrsm.paxos.error_gk.

From New.golang Require Import defn.
Definition applyasfollowerreply_gk : go_string := "github.com/mit-pdos/gokv/vrsm/paxos/applyasfollowerreply_gk".

Module applyasfollowerreply_gk.

Module S. Definition id : go_string := "github.com/mit-pdos/gokv/vrsm/paxos/applyasfollowerreply_gk.S"%go. End S.

Section code.
Context `{ffi_syntax}.


Definition S : go_type := structT [
  "Err" :: error_gk.E
].
#[global] Typeclasses Opaque S.
#[global] Opaque S.

Definition Marshal : go_string := "github.com/mit-pdos/gokv/vrsm/paxos/applyasfollowerreply_gk.Marshal"%go.

(* go: applyasfollowerreply_gk.go:16:6 *)
Definition Marshalⁱᵐᵖˡ : val :=
  λ: "enc" "a",
    exception_do (let: "a" := (mem.alloc "a") in
    let: "enc" := (mem.alloc "enc") in
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#error_gk.E] (struct.field_ref #S #"Err"%go "a")) in
    (func_call #error_gk.Marshal) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

Definition Unmarshal : go_string := "github.com/mit-pdos/gokv/vrsm/paxos/applyasfollowerreply_gk.Unmarshal"%go.

(* go: applyasfollowerreply_gk.go:22:6 *)
Definition Unmarshalⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "err" := (mem.alloc (type.zero_val #error_gk.E)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #error_gk.Unmarshal) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("err" <-[#error_gk.E] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    return: (let: "$Err" := (![#error_gk.E] "err") in
     struct.make #S [{
       "Err" ::= "$Err"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(Marshal, Marshalⁱᵐᵖˡ); (Unmarshal, Unmarshalⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(S.id, []); (ptrT.id S.id, [])].

#[global] Instance info' : PkgInfo applyasfollowerreply_gk.applyasfollowerreply_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [code.github_com.mit_pdos.gokv.vrsm.paxos.error_gk.error_gk];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #applyasfollowerreply_gk.applyasfollowerreply_gk (λ: <>,
      exception_do (do:  (error_gk.initialize' #());;;
      do:  (package.alloc applyasfollowerreply_gk.applyasfollowerreply_gk #()))
      ).

End code.
End applyasfollowerreply_gk.
