(* autogenerated from github.com/mit-pdos/gokv/vrsm/replica/getstatereply_gk *)
Require Export New.code.github_com.goose_lang.std.
Require Export New.code.github_com.mit_pdos.gokv.vrsm.replica.err_gk.
Require Export New.code.github_com.tchajed.marshal.

From New.golang Require Import defn.
Definition getstatereply_gk : go_string := "github.com/mit-pdos/gokv/vrsm/replica/getstatereply_gk".

Module getstatereply_gk.

Module S. Definition id : go_string := "github.com/mit-pdos/gokv/vrsm/replica/getstatereply_gk.S"%go. End S.

Section code.
Context `{ffi_syntax}.


Definition S : go_type := structT [
  "Err" :: err_gk.E;
  "NextIndex" :: uint64T;
  "CommittedNextIndex" :: uint64T;
  "State" :: sliceT
].
#[global] Typeclasses Opaque S.
#[global] Opaque S.

Definition Marshal : go_string := "github.com/mit-pdos/gokv/vrsm/replica/getstatereply_gk.Marshal"%go.

(* go: getstatereply_gk.go:22:6 *)
Definition Marshalⁱᵐᵖˡ : val :=
  λ: "enc" "g",
    exception_do (let: "g" := (mem.alloc "g") in
    let: "enc" := (mem.alloc "enc") in
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#err_gk.E] (struct.field_ref #S #"Err"%go "g")) in
    (func_call #err_gk.Marshal) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint64T] (struct.field_ref #S #"NextIndex"%go "g")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint64T] (struct.field_ref #S #"CommittedNextIndex"%go "g")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (s_to_w64 (let: "$a0" := (![#sliceT] (struct.field_ref #S #"State"%go "g")) in
    slice.len "$a0")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#sliceT] (struct.field_ref #S #"State"%go "g")) in
    (func_call #marshal.WriteBytes) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

Definition Unmarshal : go_string := "github.com/mit-pdos/gokv/vrsm/replica/getstatereply_gk.Unmarshal"%go.

(* go: getstatereply_gk.go:32:6 *)
Definition Unmarshalⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "err" := (mem.alloc (type.zero_val #err_gk.E)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #err_gk.Unmarshal) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("err" <-[#err_gk.E] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "nextIndex" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("nextIndex" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "committedNextIndex" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("committedNextIndex" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "stateBytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadLenPrefixedBytes) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("stateBytes" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "state" := (mem.alloc (type.zero_val #sliceT)) in
    let: "$r0" := (let: "$a0" := (![#sliceT] "stateBytes") in
    (func_call #std.BytesClone) "$a0") in
    do:  ("state" <-[#sliceT] "$r0");;;
    return: (let: "$Err" := (![#err_gk.E] "err") in
     let: "$NextIndex" := (![#uint64T] "nextIndex") in
     let: "$CommittedNextIndex" := (![#uint64T] "committedNextIndex") in
     let: "$State" := (![#sliceT] "state") in
     struct.make #S [{
       "Err" ::= "$Err";
       "NextIndex" ::= "$NextIndex";
       "CommittedNextIndex" ::= "$CommittedNextIndex";
       "State" ::= "$State"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(Marshal, Marshalⁱᵐᵖˡ); (Unmarshal, Unmarshalⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(S.id, []); (ptrT.id S.id, [])].

#[global] Instance info' : PkgInfo getstatereply_gk.getstatereply_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [code.github_com.goose_lang.std.std; code.github_com.tchajed.marshal.marshal; code.github_com.mit_pdos.gokv.vrsm.replica.err_gk.err_gk];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #getstatereply_gk.getstatereply_gk (λ: <>,
      exception_do (do:  (err_gk.initialize' #());;;
      do:  (marshal.initialize' #());;;
      do:  (std.initialize' #());;;
      do:  (package.alloc getstatereply_gk.getstatereply_gk #()))
      ).

End code.
End getstatereply_gk.
