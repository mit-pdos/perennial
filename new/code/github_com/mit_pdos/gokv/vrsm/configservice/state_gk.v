(* autogenerated from github.com/mit-pdos/gokv/vrsm/configservice/state_gk *)
Require Export New.code.github_com.tchajed.marshal.

From New.golang Require Import defn.
Definition state_gk : go_string := "github.com/mit-pdos/gokv/vrsm/configservice/state_gk".

Module state_gk.

Module S. Definition id : go_string := "github.com/mit-pdos/gokv/vrsm/configservice/state_gk.S"%go. End S.

Section code.
Context `{ffi_syntax}.


Definition S : go_type := structT [
  "Epoch" :: uint64T;
  "ReservedEpoch" :: uint64T;
  "LeaseExpiration" :: uint64T;
  "WantLeaseToExpire" :: boolT;
  "Config" :: sliceT
].
#[global] Typeclasses Opaque S.
#[global] Opaque S.

Definition Marshal : go_string := "github.com/mit-pdos/gokv/vrsm/configservice/state_gk.Marshal"%go.

(* go: state_gk.go:20:6 *)
Definition Marshalⁱᵐᵖˡ : val :=
  λ: "enc" "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "enc" := (mem.alloc "enc") in
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint64T] (struct.field_ref #S #"Epoch"%go "s")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint64T] (struct.field_ref #S #"ReservedEpoch"%go "s")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint64T] (struct.field_ref #S #"LeaseExpiration"%go "s")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#boolT] (struct.field_ref #S #"WantLeaseToExpire"%go "s")) in
    (func_call #marshal.WriteBool) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (s_to_w64 (let: "$a0" := (![#sliceT] (struct.field_ref #S #"Config"%go "s")) in
    slice.len "$a0")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#sliceT] (struct.field_ref #S #"Config"%go "s")) in
    let: "$a2" := (func_call #marshal.WriteInt) in
    (func_call #marshal.WriteSlice #uint64T) "$a0" "$a1" "$a2") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

Definition Unmarshal : go_string := "github.com/mit-pdos/gokv/vrsm/configservice/state_gk.Unmarshal"%go.

(* go: state_gk.go:32:6 *)
Definition Unmarshalⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "epoch" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("epoch" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "reservedEpoch" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("reservedEpoch" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "leaseExpiration" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("leaseExpiration" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "wantLeaseToExpire" := (mem.alloc (type.zero_val #boolT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadBool) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("wantLeaseToExpire" <-[#boolT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "configLen" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("configLen" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "config" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    let: "$a1" := (![#uint64T] "configLen") in
    let: "$a2" := (func_call #marshal.ReadInt) in
    (func_call #marshal.ReadSlice #uint64T) "$a0" "$a1" "$a2") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("config" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    return: (let: "$Epoch" := (![#uint64T] "epoch") in
     let: "$ReservedEpoch" := (![#uint64T] "reservedEpoch") in
     let: "$LeaseExpiration" := (![#uint64T] "leaseExpiration") in
     let: "$WantLeaseToExpire" := (![#boolT] "wantLeaseToExpire") in
     let: "$Config" := (![#sliceT] "config") in
     struct.make #S [{
       "Epoch" ::= "$Epoch";
       "ReservedEpoch" ::= "$ReservedEpoch";
       "LeaseExpiration" ::= "$LeaseExpiration";
       "WantLeaseToExpire" ::= "$WantLeaseToExpire";
       "Config" ::= "$Config"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(Marshal, Marshalⁱᵐᵖˡ); (Unmarshal, Unmarshalⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(S.id, []); (ptrT.id S.id, [])].

#[global] Instance info' : PkgInfo state_gk.state_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [code.github_com.tchajed.marshal.marshal];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #state_gk.state_gk (λ: <>,
      exception_do (do:  (marshal.initialize' #());;;
      do:  (package.alloc state_gk.state_gk #()))
      ).

End code.
End state_gk.
