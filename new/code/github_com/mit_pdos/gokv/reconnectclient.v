(* autogenerated from github.com/mit-pdos/gokv/reconnectclient *)
From New.golang Require Import defn.
Require Export New.code.github_com.goose_lang.primitive.
Require Export New.code.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.code.github_com.mit_pdos.gokv.urpc.
Require Export New.code.sync.

Definition reconnectclient : go_string := "github.com/mit-pdos/gokv/reconnectclient".

From New Require Import grove_prelude.
Module reconnectclient.
Section code.


Definition ReconnectingClient : go_type := structT [
  "mu" :: ptrT;
  "valid" :: boolT;
  "urpcCl" :: ptrT;
  "addr" :: uint64T
].

(* go: client.go:20:6 *)
Definition MakeReconnectingClient : val :=
  rec: "MakeReconnectingClient" "addr" :=
    exception_do (let: "addr" := (alloc "addr") in
    let: "r" := (alloc (type.zero_val #ptrT)) in
    let: "$r0" := (alloc (type.zero_val #ReconnectingClient)) in
    do:  ("r" <-[#ptrT] "$r0");;;
    let: "$r0" := (alloc (type.zero_val #sync.Mutex)) in
    do:  ((struct.field_ref #ReconnectingClient #"mu"%go (![#ptrT] "r")) <-[#ptrT] "$r0");;;
    let: "$r0" := #false in
    do:  ((struct.field_ref #ReconnectingClient #"valid"%go (![#ptrT] "r")) <-[#boolT] "$r0");;;
    let: "$r0" := (![#uint64T] "addr") in
    do:  ((struct.field_ref #ReconnectingClient #"addr"%go (![#ptrT] "r")) <-[#uint64T] "$r0");;;
    return: (![#ptrT] "r")).

(* go: client.go:30:31 *)
Definition ReconnectingClient__getClient : val :=
  rec: "ReconnectingClient__getClient" "cl" <> :=
    exception_do (let: "cl" := (alloc "cl") in
    do:  ((method_call #sync #"Mutex'ptr" #"Lock" (![#ptrT] (struct.field_ref #ReconnectingClient #"mu"%go (![#ptrT] "cl")))) #());;;
    (if: ![#boolT] (struct.field_ref #ReconnectingClient #"valid"%go (![#ptrT] "cl"))
    then
      let: "ret" := (alloc (type.zero_val #ptrT)) in
      let: "$r0" := (![#ptrT] (struct.field_ref #ReconnectingClient #"urpcCl"%go (![#ptrT] "cl"))) in
      do:  ("ret" <-[#ptrT] "$r0");;;
      do:  ((method_call #sync #"Mutex'ptr" #"Unlock" (![#ptrT] (struct.field_ref #ReconnectingClient #"mu"%go (![#ptrT] "cl")))) #());;;
      return: (#(W64 0), ![#ptrT] "ret")
    else do:  #());;;
    do:  ((method_call #sync #"Mutex'ptr" #"Unlock" (![#ptrT] (struct.field_ref #ReconnectingClient #"mu"%go (![#ptrT] "cl")))) #());;;
    let: "newRpcCl" := (alloc (type.zero_val #ptrT)) in
    let: "err" := (alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#uint64T] (struct.field_ref #ReconnectingClient #"addr"%go (![#ptrT] "cl"))) in
    (func_call #urpc #"TryMakeClient"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("err" <-[#uint64T] "$r0");;;
    do:  ("newRpcCl" <-[#ptrT] "$r1");;;
    (if: (![#uint64T] "err") ≠ #(W64 0)
    then
      do:  (let: "$a0" := #(W64 10000000) in
      (func_call #primitive #"Sleep"%go) "$a0")
    else do:  #());;;
    do:  ((method_call #sync #"Mutex'ptr" #"Lock" (![#ptrT] (struct.field_ref #ReconnectingClient #"mu"%go (![#ptrT] "cl")))) #());;;
    (if: (![#uint64T] "err") = #(W64 0)
    then
      let: "$r0" := (![#ptrT] "newRpcCl") in
      do:  ((struct.field_ref #ReconnectingClient #"urpcCl"%go (![#ptrT] "cl")) <-[#ptrT] "$r0");;;
      let: "$r0" := #true in
      do:  ((struct.field_ref #ReconnectingClient #"valid"%go (![#ptrT] "cl")) <-[#boolT] "$r0")
    else do:  #());;;
    do:  ((method_call #sync #"Mutex'ptr" #"Unlock" (![#ptrT] (struct.field_ref #ReconnectingClient #"mu"%go (![#ptrT] "cl")))) #());;;
    return: (![#uint64T] "err", ![#ptrT] "newRpcCl")).

(* go: client.go:63:31 *)
Definition ReconnectingClient__Call : val :=
  rec: "ReconnectingClient__Call" "cl" "rpcid" "args" "reply" "timeout_ms" :=
    exception_do (let: "cl" := (alloc "cl") in
    let: "timeout_ms" := (alloc "timeout_ms") in
    let: "reply" := (alloc "reply") in
    let: "args" := (alloc "args") in
    let: "rpcid" := (alloc "rpcid") in
    let: "urpcCl" := (alloc (type.zero_val #ptrT)) in
    let: "err1" := (alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := ((method_call #reconnectclient.reconnectclient #"ReconnectingClient'ptr" #"getClient" (![#ptrT] "cl")) #()) in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("err1" <-[#uint64T] "$r0");;;
    do:  ("urpcCl" <-[#ptrT] "$r1");;;
    (if: (![#uint64T] "err1") ≠ #(W64 0)
    then return: (![#uint64T] "err1")
    else do:  #());;;
    let: "err" := (alloc (type.zero_val #uint64T)) in
    let: "$r0" := (let: "$a0" := (![#uint64T] "rpcid") in
    let: "$a1" := (![#sliceT] "args") in
    let: "$a2" := (![#ptrT] "reply") in
    let: "$a3" := (![#uint64T] "timeout_ms") in
    (method_call #urpc #"Client'ptr" #"Call" (![#ptrT] "urpcCl")) "$a0" "$a1" "$a2" "$a3") in
    do:  ("err" <-[#uint64T] "$r0");;;
    (if: (![#uint64T] "err") = urpc.ErrDisconnect
    then
      do:  ((method_call #sync #"Mutex'ptr" #"Lock" (![#ptrT] (struct.field_ref #ReconnectingClient #"mu"%go (![#ptrT] "cl")))) #());;;
      let: "$r0" := #false in
      do:  ((struct.field_ref #ReconnectingClient #"valid"%go (![#ptrT] "cl")) <-[#boolT] "$r0");;;
      do:  ((method_call #sync #"Mutex'ptr" #"Unlock" (![#ptrT] (struct.field_ref #ReconnectingClient #"mu"%go (![#ptrT] "cl")))) #())
    else do:  #());;;
    return: (![#uint64T] "err")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("MakeReconnectingClient"%go, MakeReconnectingClient)].

Definition msets' : list (go_string * (list (go_string * val))) := [("ReconnectingClient"%go, []); ("ReconnectingClient'ptr"%go, [("Call"%go, ReconnectingClient__Call); ("getClient"%go, ReconnectingClient__getClient)])].

#[global] Instance info' : PkgInfo reconnectclient.reconnectclient :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [sync; primitive; grove_ffi; urpc];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init reconnectclient.reconnectclient (λ: <>,
      exception_do (do:  urpc.initialize';;;
      do:  grove_ffi.initialize';;;
      do:  primitive.initialize';;;
      do:  sync.initialize')
      ).

End code.
End reconnectclient.
