(* autogenerated from github.com/mit-pdos/gokv/memkv/conditionalputrequest_gk *)
Require Export New.code.github_com.goose_lang.std.
Require Export New.code.github_com.tchajed.marshal.

From New.golang Require Import defn.
Definition conditionalputrequest_gk : go_string := "github.com/mit-pdos/gokv/memkv/conditionalputrequest_gk".

Module conditionalputrequest_gk.

Module S. Definition id : go_string := "github.com/mit-pdos/gokv/memkv/conditionalputrequest_gk.S"%go. End S.

Section code.
Context `{ffi_syntax}.


Definition S : go_type := structT [
  "Key" :: uint64T;
  "ExpectedValue" :: sliceT;
  "NewValue" :: sliceT
].

Definition Marshal : go_string := "github.com/mit-pdos/gokv/memkv/conditionalputrequest_gk.Marshal"%go.

(* go: conditionalputrequest_gk.go:19:6 *)
Definition Marshalⁱᵐᵖˡ : val :=
  λ: "enc" "c",
    exception_do (let: "c" := (mem.alloc "c") in
    let: "enc" := (mem.alloc "enc") in
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint64T] (struct.field_ref #S #"Key"%go "c")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (s_to_w64 (let: "$a0" := (![#sliceT] (struct.field_ref #S #"ExpectedValue"%go "c")) in
    slice.len "$a0")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#sliceT] (struct.field_ref #S #"ExpectedValue"%go "c")) in
    (func_call #marshal.WriteBytes) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (s_to_w64 (let: "$a0" := (![#sliceT] (struct.field_ref #S #"NewValue"%go "c")) in
    slice.len "$a0")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#sliceT] (struct.field_ref #S #"NewValue"%go "c")) in
    (func_call #marshal.WriteBytes) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

Definition Unmarshal : go_string := "github.com/mit-pdos/gokv/memkv/conditionalputrequest_gk.Unmarshal"%go.

(* go: conditionalputrequest_gk.go:29:6 *)
Definition Unmarshalⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "key" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("key" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "expectedValueBytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadLenPrefixedBytes) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("expectedValueBytes" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "expectedValue" := (mem.alloc (type.zero_val #sliceT)) in
    let: "$r0" := (let: "$a0" := (![#sliceT] "expectedValueBytes") in
    (func_call #std.BytesClone) "$a0") in
    do:  ("expectedValue" <-[#sliceT] "$r0");;;
    let: "newValueBytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadLenPrefixedBytes) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("newValueBytes" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "newValue" := (mem.alloc (type.zero_val #sliceT)) in
    let: "$r0" := (let: "$a0" := (![#sliceT] "newValueBytes") in
    (func_call #std.BytesClone) "$a0") in
    do:  ("newValue" <-[#sliceT] "$r0");;;
    return: (let: "$Key" := (![#uint64T] "key") in
     let: "$ExpectedValue" := (![#sliceT] "expectedValue") in
     let: "$NewValue" := (![#sliceT] "newValue") in
     struct.make #S [{
       "Key" ::= "$Key";
       "ExpectedValue" ::= "$ExpectedValue";
       "NewValue" ::= "$NewValue"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(Marshal, Marshalⁱᵐᵖˡ); (Unmarshal, Unmarshalⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(S.id, []); (ptrT.id S.id, [])].

#[global] Instance info' : PkgInfo conditionalputrequest_gk.conditionalputrequest_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [code.github_com.goose_lang.std.std; code.github_com.tchajed.marshal.marshal];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #conditionalputrequest_gk.conditionalputrequest_gk (λ: <>,
      exception_do (do:  (marshal.initialize' #());;;
      do:  (std.initialize' #());;;
      do:  (package.alloc conditionalputrequest_gk.conditionalputrequest_gk #()))
      ).

End code.
End conditionalputrequest_gk.
