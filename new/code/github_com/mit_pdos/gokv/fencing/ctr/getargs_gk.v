(* autogenerated from github.com/mit-pdos/gokv/fencing/ctr/getargs_gk *)
Require Export New.code.github_com.tchajed.marshal.

From New.golang Require Import defn.
Definition getargs_gk : go_string := "github.com/mit-pdos/gokv/fencing/ctr/getargs_gk".

Module getargs_gk.

Module S. Definition id : go_string := "github.com/mit-pdos/gokv/fencing/ctr/getargs_gk.S"%go. End S.

Section code.
Context `{ffi_syntax}.


Definition S : go_type := structT [
  "Epoch" :: uint64T
].

Definition Marshal : go_string := "github.com/mit-pdos/gokv/fencing/ctr/getargs_gk.Marshal"%go.

(* go: getargs_gk.go:16:6 *)
Definition Marshalⁱᵐᵖˡ : val :=
  λ: "enc" "g",
    exception_do (let: "g" := (mem.alloc "g") in
    let: "enc" := (mem.alloc "enc") in
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint64T] (struct.field_ref #S #"Epoch"%go "g")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

Definition Unmarshal : go_string := "github.com/mit-pdos/gokv/fencing/ctr/getargs_gk.Unmarshal"%go.

(* go: getargs_gk.go:22:6 *)
Definition Unmarshalⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "epoch" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("epoch" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    return: (let: "$Epoch" := (![#uint64T] "epoch") in
     struct.make #S [{
       "Epoch" ::= "$Epoch"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(Marshal, Marshalⁱᵐᵖˡ); (Unmarshal, Unmarshalⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(S.id, []); (ptrT.id S.id, [])].

#[global] Instance info' : PkgInfo getargs_gk.getargs_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [code.github_com.tchajed.marshal.marshal];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #getargs_gk.getargs_gk (λ: <>,
      exception_do (do:  (marshal.initialize' #());;;
      do:  (package.alloc getargs_gk.getargs_gk #()))
      ).

End code.
End getargs_gk.
