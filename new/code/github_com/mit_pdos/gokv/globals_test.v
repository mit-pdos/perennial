(* autogenerated from github.com/mit-pdos/gokv/globals_test *)

From New.golang Require Import defn.
Definition main : go_string := "github.com/mit-pdos/gokv/globals_test".

Module main.

Section code.
Context `{ffi_syntax}.


Definition foo : go_string := "github.com/mit-pdos/gokv/globals_test.foo"%go.

(* go: globals.go:3:6 *)
Definition fooⁱᵐᵖˡ : val :=
  λ: <>,
    exception_do (return: (#(W64 10))).

Definition GlobalX : go_string := "github.com/mit-pdos/gokv/globals_test.GlobalX"%go.

Definition globalY : go_string := "github.com/mit-pdos/gokv/globals_test.globalY"%go.

Definition globalA : go_string := "github.com/mit-pdos/gokv/globals_test.globalA"%go.

Definition globalB : go_string := "github.com/mit-pdos/gokv/globals_test.globalB"%go.

Definition other : go_string := "github.com/mit-pdos/gokv/globals_test.other"%go.

(* go: globals.go:12:6 *)
Definition otherⁱᵐᵖˡ : val :=
  λ: <>,
    exception_do (let: "$r0" := #"ok"%go in
    do:  ((globals.get #globalY) <-[stringT] "$r0");;;
    return: #()).

Definition bar : go_string := "github.com/mit-pdos/gokv/globals_test.bar"%go.

(* go: globals.go:16:6 *)
Definition barⁱᵐᵖˡ : val :=
  λ: <>,
    exception_do (do:  ((func_call #other) #());;;
    (if: ((![uint64T] (globals.get #GlobalX)) ≠ #(W64 10)) || ((![stringT] (globals.get #globalY)) ≠ #"ok"%go)
    then
      do:  (let: "$a0" := (interface.make #stringT.id #"bad"%go) in
      Panic "$a0")
    else do:  #());;;
    return: #()).

Definition main : go_string := "github.com/mit-pdos/gokv/globals_test.main"%go.

(* go: globals.go:31:6 *)
Definition mainⁱᵐᵖˡ : val :=
  λ: <>,
    exception_do (do:  ((func_call #bar) #());;;
    return: #()).

Definition vars' : list (go_string * go_type) := [(GlobalX, uint64T); (globalY, stringT); (globalA, stringT); (globalB, stringT)].

Definition functions' : list (go_string * val) := [(foo, fooⁱᵐᵖˡ); (other, otherⁱᵐᵖˡ); (bar, barⁱᵐᵖˡ); (main, mainⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [].

#[global] Instance info' : PkgInfo globals_test.main :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #globals_test.main (λ: <>,
      exception_do (do:  (package.alloc globals_test.main #());;;
      let: "$r0" := ((func_call #foo) #()) in
      do:  ((globals.get #GlobalX) <-[uint64T] "$r0");;;
      let: "$r0" := #"a"%go in
      do:  ((globals.get #globalA) <-[stringT] "$r0");;;
      let: "$r0" := #"b"%go in
      do:  ((globals.get #globalB) <-[stringT] "$r0");;;
      do:  ((λ: <>,
        exception_do (let: "$r0" := ((![uint64T] (globals.get #GlobalX)) + #(W64 0)) in
        do:  ((globals.get #GlobalX) <-[uint64T] "$r0");;;
        return: #())
        ) #());;;
      do:  ((λ: <>,
        exception_do (let: "$r0" := #""%go in
        do:  ((globals.get #globalY) <-[stringT] "$r0");;;
        return: #())
        ) #()))
      ).

End code.
End main.
