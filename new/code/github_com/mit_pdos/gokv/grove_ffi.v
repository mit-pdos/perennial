(* autogenerated from github.com/mit-pdos/gokv/grove_ffi *)
From New.golang Require Import defn.

Require Export New.trusted_code.github_com.mit_pdos.gokv.grove_ffi.
Import grove_ffi.
From New Require Import grove_prelude.
Module grove_ffi.
Section code.


Definition pkg_name' : go_string := "github.com/mit-pdos/gokv/grove_ffi".

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("FileWrite"%go, FileWrite); ("FileRead"%go, FileRead); ("FileAppend"%go, FileAppend); ("Listen"%go, Listen); ("Accept"%go, Accept); ("Connect"%go, Connect); ("Send"%go, Send); ("Receive"%go, Receive); ("GetTimeRange"%go, GetTimeRange); ("GetTSC"%go, GetTSC)].

Definition msets' : list (go_string * (list (go_string * val))) := [("Listener"%go, []); ("Listener'ptr"%go, []); ("Connection"%go, []); ("Connection'ptr"%go, []); ("ConnectRet"%go, []); ("ConnectRet'ptr"%go, []); ("ReceiveRet"%go, []); ("ReceiveRet'ptr"%go, [])].

Definition info' : pkg_info.t := {|
             pkg_info.vars := vars';
             pkg_info.functions := functions';
             pkg_info.msets := msets';
             pkg_info.imported_pkgs := [];
           |}.

#[global] Instance  : PkgInfo pkg_name' info' :=
  {}.

Axiom _'init : val.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init pkg_name' (Î»: <>,
      exception_do (do:  #())
      ).

End code.
End grove_ffi.
