(* autogenerated from github.com/mit-pdos/gokv/paxi/reconf/error_gk *)
Require Export New.code.github_com.tchajed.marshal.

From New.golang Require Import defn.
Definition error_gk : go_string := "github.com/mit-pdos/gokv/paxi/reconf/error_gk".

Module error_gk.

Module E. Definition id : go_string := "github.com/mit-pdos/gokv/paxi/reconf/error_gk.E"%go. End E.

Section code.
Context `{ffi_syntax}.


Definition E : go_type := uint32T.

Definition ENone : expr := #(W32 0).

Definition ETermStale : expr := #(W32 1).

Definition ENotLeader : expr := #(W32 2).

Definition EQuorumFailed : expr := #(W32 3).

Definition Marshal : go_string := "github.com/mit-pdos/gokv/paxi/reconf/error_gk.Marshal"%go.

(* go: error_gk.go:14:6 *)
Definition Marshalⁱᵐᵖˡ : val :=
  λ: "enc" "e",
    exception_do (let: "e" := (mem.alloc "e") in
    let: "enc" := (mem.alloc "enc") in
    return: (let: "$a0" := (![#sliceT] "enc") in
     let: "$a1" := (![#E] "e") in
     (func_call #marshal.WriteInt32) "$a0" "$a1")).

Definition Unmarshal : go_string := "github.com/mit-pdos/gokv/paxi/reconf/error_gk.Unmarshal"%go.

(* go: error_gk.go:18:6 *)
Definition Unmarshalⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "e_raw" := (mem.alloc (type.zero_val #uint32T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt32) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("e_raw" <-[#uint32T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    return: (![#uint32T] "e_raw", ![#sliceT] "s")).

Definition Name : go_string := "github.com/mit-pdos/gokv/paxi/reconf/error_gk.Name"%go.

Definition Value : go_string := "github.com/mit-pdos/gokv/paxi/reconf/error_gk.Value"%go.

(* go: error_gk.go:37:12 *)
Definition E__Stringⁱᵐᵖˡ : val :=
  λ: "e" <>,
    exception_do (let: "e" := (mem.alloc "e") in
    return: (Fst (map.get (![type.mapT #uint32T #stringT] (globals.get #Name)) (![#E] "e")))).

Definition vars' : list (go_string * go_type) := [(Name, mapT uint32T stringT); (Value, mapT stringT uint32T)].

Definition functions' : list (go_string * val) := [(Marshal, Marshalⁱᵐᵖˡ); (Unmarshal, Unmarshalⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(E.id, [("String"%go, E__Stringⁱᵐᵖˡ)]); (ptrT.id E.id, [("String"%go, (λ: "$r",
                 method_call #E.id #"String"%go (![#E] "$r")
                 )%V)])].

#[global] Instance info' : PkgInfo error_gk.error_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [code.github_com.tchajed.marshal.marshal];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #error_gk.error_gk (λ: <>,
      exception_do (do:  (marshal.initialize' #());;;
      do:  (package.alloc error_gk.error_gk #());;;
      let: "$r0" := ((let: "$v0" := #"ENone"%go in
      let: "$k0" := #(W32 0) in
      let: "$v1" := #"ETermStale"%go in
      let: "$k1" := #(W32 1) in
      let: "$v2" := #"ENotLeader"%go in
      let: "$k2" := #(W32 2) in
      let: "$v3" := #"EQuorumFailed"%go in
      let: "$k3" := #(W32 3) in
      map.literal #uint32T #stringT [map.kv_entry "$k0" "$v0"; map.kv_entry "$k1" "$v1"; map.kv_entry "$k2" "$v2"; map.kv_entry "$k3" "$v3"])) in
      do:  ((globals.get #Name) <-[type.mapT #uint32T #stringT] "$r0");;;
      let: "$r0" := ((let: "$v0" := #(W32 0) in
      let: "$k0" := #"ENone"%go in
      let: "$v1" := #(W32 1) in
      let: "$k1" := #"ETermStale"%go in
      let: "$v2" := #(W32 2) in
      let: "$k2" := #"ENotLeader"%go in
      let: "$v3" := #(W32 3) in
      let: "$k3" := #"EQuorumFailed"%go in
      map.literal #stringT #uint32T [map.kv_entry "$k0" "$v0"; map.kv_entry "$k1" "$v1"; map.kv_entry "$k2" "$v2"; map.kv_entry "$k3" "$v3"])) in
      do:  ((globals.get #Value) <-[type.mapT #stringT #uint32T] "$r0"))
      ).

End code.
End error_gk.
