(* autogenerated from github.com/mit-pdos/go-journal/jrnl_replication *)
From New.golang Require Import defn.
Require Export New.code.github_com.goose_lang.primitive.disk.
Require Export New.code.github_com.mit_pdos.go_journal.addr.
Require Export New.code.github_com.mit_pdos.go_journal.common.
Require Export New.code.github_com.mit_pdos.go_journal.jrnl.
Require Export New.code.github_com.mit_pdos.go_journal.obj.
Require Export New.code.github_com.mit_pdos.go_journal.util.
Require Export New.code.sync.

Definition replicated_block : go_string := "github.com/mit-pdos/go-journal/jrnl_replication".

From New Require Import disk_prelude.
Module replicated_block.
Section code.


Definition RepBlock : go_type := structT [
  "txn" :: ptrT;
  "m" :: ptrT;
  "a0" :: addr.Addr;
  "a1" :: addr.Addr
].

(* go: jrnl_replication.go:23:6 *)
Definition Open : val :=
  rec: "Open" "txn" "a" :=
    exception_do (let: "a" := (mem.alloc "a") in
    let: "txn" := (mem.alloc "txn") in
    return: (mem.alloc (let: "$txn" := (![#ptrT] "txn") in
     let: "$m" := (mem.alloc (type.zero_val #sync.Mutex)) in
     let: "$a0" := (let: "$a0" := (![#uint64T] "a") in
     let: "$a1" := #(W64 0) in
     (func_call #addr.addr #"MkAddr"%go) "$a0" "$a1") in
     let: "$a1" := (let: "$a0" := ((![#uint64T] "a") + #(W64 1)) in
     let: "$a1" := #(W64 0) in
     (func_call #addr.addr #"MkAddr"%go) "$a0" "$a1") in
     struct.make #RepBlock [{
       "txn" ::= "$txn";
       "m" ::= "$m";
       "a0" ::= "$a0";
       "a1" ::= "$a1"
     }]))).

(* can fail in principle if CommitWait fails,
   but that's really impossible since it's an empty transaction

   go: jrnl_replication.go:34:21 *)
Definition RepBlock__Read : val :=
  rec: "RepBlock__Read" "rb" <> :=
    exception_do (let: "rb" := (mem.alloc "rb") in
    do:  ((method_call #sync #"Mutex'ptr" #"Lock" (![#ptrT] (struct.field_ref #RepBlock #"m"%go (![#ptrT] "rb")))) #());;;
    let: "tx" := (mem.alloc (type.zero_val #ptrT)) in
    let: "$r0" := (let: "$a0" := (![#ptrT] (struct.field_ref #RepBlock #"txn"%go (![#ptrT] "rb"))) in
    (func_call #jrnl.jrnl #"Begin"%go) "$a0") in
    do:  ("tx" <-[#ptrT] "$r0");;;
    let: "buf" := (mem.alloc (type.zero_val #ptrT)) in
    let: "$r0" := (let: "$a0" := (![#addr.Addr] (struct.field_ref #RepBlock #"a0"%go (![#ptrT] "rb"))) in
    let: "$a1" := (#(W64 8) * disk.BlockSize) in
    (method_call #jrnl #"Op'ptr" #"ReadBuf" (![#ptrT] "tx")) "$a0" "$a1") in
    do:  ("buf" <-[#ptrT] "$r0");;;
    let: "b" := (mem.alloc (type.zero_val #sliceT)) in
    let: "$r0" := (let: "$a0" := (![#sliceT] (struct.field_ref #buf.Buf #"Data"%go (![#ptrT] "buf"))) in
    (func_call #util.util #"CloneByteSlice"%go) "$a0") in
    do:  ("b" <-[#sliceT] "$r0");;;
    let: "ok" := (mem.alloc (type.zero_val #boolT)) in
    let: "$r0" := (let: "$a0" := #true in
    (method_call #jrnl #"Op'ptr" #"CommitWait" (![#ptrT] "tx")) "$a0") in
    do:  ("ok" <-[#boolT] "$r0");;;
    do:  ((method_call #sync #"Mutex'ptr" #"Unlock" (![#ptrT] (struct.field_ref #RepBlock #"m"%go (![#ptrT] "rb")))) #());;;
    return: (![#sliceT] "b", ![#boolT] "ok")).

(* go: jrnl_replication.go:45:21 *)
Definition RepBlock__Write : val :=
  rec: "RepBlock__Write" "rb" "b" :=
    exception_do (let: "rb" := (mem.alloc "rb") in
    let: "b" := (mem.alloc "b") in
    do:  ((method_call #sync #"Mutex'ptr" #"Lock" (![#ptrT] (struct.field_ref #RepBlock #"m"%go (![#ptrT] "rb")))) #());;;
    let: "tx" := (mem.alloc (type.zero_val #ptrT)) in
    let: "$r0" := (let: "$a0" := (![#ptrT] (struct.field_ref #RepBlock #"txn"%go (![#ptrT] "rb"))) in
    (func_call #jrnl.jrnl #"Begin"%go) "$a0") in
    do:  ("tx" <-[#ptrT] "$r0");;;
    do:  (let: "$a0" := (![#addr.Addr] (struct.field_ref #RepBlock #"a0"%go (![#ptrT] "rb"))) in
    let: "$a1" := (#(W64 8) * disk.BlockSize) in
    let: "$a2" := (![#sliceT] "b") in
    (method_call #jrnl #"Op'ptr" #"OverWrite" (![#ptrT] "tx")) "$a0" "$a1" "$a2");;;
    do:  (let: "$a0" := (![#addr.Addr] (struct.field_ref #RepBlock #"a1"%go (![#ptrT] "rb"))) in
    let: "$a1" := (#(W64 8) * disk.BlockSize) in
    let: "$a2" := (![#sliceT] "b") in
    (method_call #jrnl #"Op'ptr" #"OverWrite" (![#ptrT] "tx")) "$a0" "$a1" "$a2");;;
    let: "ok" := (mem.alloc (type.zero_val #boolT)) in
    let: "$r0" := (let: "$a0" := #true in
    (method_call #jrnl #"Op'ptr" #"CommitWait" (![#ptrT] "tx")) "$a0") in
    do:  ("ok" <-[#boolT] "$r0");;;
    do:  ((method_call #sync #"Mutex'ptr" #"Unlock" (![#ptrT] (struct.field_ref #RepBlock #"m"%go (![#ptrT] "rb")))) #());;;
    return: (![#boolT] "ok")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("Open"%go, Open)].

Definition msets' : list (go_string * (list (go_string * val))) := [("RepBlock"%go, []); ("RepBlock'ptr"%go, [("Read"%go, RepBlock__Read); ("Write"%go, RepBlock__Write)])].

#[global] Instance info' : PkgInfo jrnl_replication.replicated_block :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [sync.sync; disk.disk; addr.addr; common.common; jrnl.jrnl; obj.obj; util.util];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init jrnl_replication.replicated_block (Î»: <>,
      exception_do (do:  util.initialize';;;
      do:  obj.initialize';;;
      do:  jrnl.initialize';;;
      do:  common.initialize';;;
      do:  addr.initialize';;;
      do:  disk.initialize';;;
      do:  sync.initialize')
      ).

End code.
End replicated_block.
