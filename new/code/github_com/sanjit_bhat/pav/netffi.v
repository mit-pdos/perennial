(* autogenerated from github.com/sanjit-bhat/pav/netffi *)

From New.golang Require Import defn.
Definition netffi : go_string := "github.com/sanjit-bhat/pav/netffi".

Module netffi.

Module Conn. Definition id : go_string := "github.com/sanjit-bhat/pav/netffi.Conn"%go. End Conn.
Module Listener. Definition id : go_string := "github.com/sanjit-bhat/pav/netffi.Listener"%go. End Listener.

Section code.
Context `{ffi_syntax}.


Definition addrToStr : go_string := "github.com/sanjit-bhat/pav/netffi.addrToStr"%go.

Axiom Conn : go_type.

Definition Dial : go_string := "github.com/sanjit-bhat/pav/netffi.Dial"%go.

Definition newConn : go_string := "github.com/sanjit-bhat/pav/netffi.newConn"%go.

Axiom Listener : go_type.

Definition Listen : go_string := "github.com/sanjit-bhat/pav/netffi.Listen"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom addrToStrⁱᵐᵖˡ : val.

Axiom Dialⁱᵐᵖˡ : val.

Axiom newConnⁱᵐᵖˡ : val.

Axiom Listenⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(addrToStr, addrToStrⁱᵐᵖˡ); (Dial, Dialⁱᵐᵖˡ); (newConn, newConnⁱᵐᵖˡ); (Listen, Listenⁱᵐᵖˡ)].

Axiom Conn__Receiveⁱᵐᵖˡ : val.

Axiom Conn__Sendⁱᵐᵖˡ : val.

Axiom Listener__Acceptⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(Conn.id, []); (ptrT.id Conn.id, [("Receive"%go, Conn__Receiveⁱᵐᵖˡ); ("Send"%go, Conn__Sendⁱᵐᵖˡ)]); (Listener.id, []); (ptrT.id Listener.id, [("Accept"%go, Listener__Acceptⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo netffi.netffi :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #netffi.netffi (λ: <>,
      exception_do (do:  (package.alloc netffi.netffi #()))
      ).

End code.
End netffi.
