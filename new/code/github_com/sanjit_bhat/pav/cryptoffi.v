(* autogenerated from github.com/sanjit-bhat/pav/cryptoffi *)

From New.golang Require Import defn.
Definition cryptoffi : go_string := "github.com/sanjit-bhat/pav/cryptoffi".

Module cryptoffi.

Module Hasher. Definition id : go_string := "github.com/sanjit-bhat/pav/cryptoffi.Hasher"%go. End Hasher.
Module SigPrivateKey. Definition id : go_string := "github.com/sanjit-bhat/pav/cryptoffi.SigPrivateKey"%go. End SigPrivateKey.
Module SigPublicKey. Definition id : go_string := "github.com/sanjit-bhat/pav/cryptoffi.SigPublicKey"%go. End SigPublicKey.
Module VrfPrivateKey. Definition id : go_string := "github.com/sanjit-bhat/pav/cryptoffi.VrfPrivateKey"%go. End VrfPrivateKey.
Module VrfPublicKey. Definition id : go_string := "github.com/sanjit-bhat/pav/cryptoffi.VrfPublicKey"%go. End VrfPublicKey.

Section code.
Context `{ffi_syntax}.


Definition HashLen : expr := #(W64 32).

Axiom Hasher : go_type.

Definition NewHasher : go_string := "github.com/sanjit-bhat/pav/cryptoffi.NewHasher"%go.

Axiom NewHasherⁱᵐᵖˡ : val.

Axiom Hasher__Writeⁱᵐᵖˡ : val.

Axiom Hasher__Sumⁱᵐᵖˡ : val.

Axiom SigPrivateKey : go_type.

Axiom SigPublicKey : go_type.

Definition SigGenerateKey : go_string := "github.com/sanjit-bhat/pav/cryptoffi.SigGenerateKey"%go.

Axiom SigGenerateKeyⁱᵐᵖˡ : val.

Axiom SigPrivateKey__Signⁱᵐᵖˡ : val.

Axiom SigPublicKey__Verifyⁱᵐᵖˡ : val.

Axiom VrfPrivateKey : go_type.

Axiom VrfPublicKey : go_type.

Definition VrfGenerateKey : go_string := "github.com/sanjit-bhat/pav/cryptoffi.VrfGenerateKey"%go.

Axiom VrfGenerateKeyⁱᵐᵖˡ : val.

Axiom VrfPrivateKey__Proveⁱᵐᵖˡ : val.

Axiom VrfPrivateKey__Evaluateⁱᵐᵖˡ : val.

Axiom VrfPublicKey__Verifyⁱᵐᵖˡ : val.

Axiom VrfPrivateKey__PublicKeyⁱᵐᵖˡ : val.

Definition VrfPublicKeyEncode : go_string := "github.com/sanjit-bhat/pav/cryptoffi.VrfPublicKeyEncode"%go.

Axiom VrfPublicKeyEncodeⁱᵐᵖˡ : val.

Definition VrfPublicKeyDecode : go_string := "github.com/sanjit-bhat/pav/cryptoffi.VrfPublicKeyDecode"%go.

Axiom VrfPublicKeyDecodeⁱᵐᵖˡ : val.

Definition RandBytes : go_string := "github.com/sanjit-bhat/pav/cryptoffi.RandBytes"%go.

Axiom RandBytesⁱᵐᵖˡ : val.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(NewHasher, NewHasherⁱᵐᵖˡ); (SigGenerateKey, SigGenerateKeyⁱᵐᵖˡ); (VrfGenerateKey, VrfGenerateKeyⁱᵐᵖˡ); (VrfPublicKeyEncode, VrfPublicKeyEncodeⁱᵐᵖˡ); (VrfPublicKeyDecode, VrfPublicKeyDecodeⁱᵐᵖˡ); (RandBytes, RandBytesⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(Hasher.id, []); (ptrT.id Hasher.id, [("Sum"%go, Hasher__Sumⁱᵐᵖˡ); ("Write"%go, Hasher__Writeⁱᵐᵖˡ)]); (SigPrivateKey.id, []); (ptrT.id SigPrivateKey.id, [("Sign"%go, SigPrivateKey__Signⁱᵐᵖˡ)]); (SigPublicKey.id, [("Verify"%go, SigPublicKey__Verifyⁱᵐᵖˡ)]); (ptrT.id SigPublicKey.id, [("Verify"%go, (λ: "$r",
                 method_call #SigPublicKey.id #"Verify"%go (![#SigPublicKey] "$r")
                 )%V)]); (VrfPrivateKey.id, []); (ptrT.id VrfPrivateKey.id, [("Evaluate"%go, VrfPrivateKey__Evaluateⁱᵐᵖˡ); ("Prove"%go, VrfPrivateKey__Proveⁱᵐᵖˡ); ("PublicKey"%go, VrfPrivateKey__PublicKeyⁱᵐᵖˡ)]); (VrfPublicKey.id, []); (ptrT.id VrfPublicKey.id, [("Verify"%go, VrfPublicKey__Verifyⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo cryptoffi.cryptoffi :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #cryptoffi.cryptoffi (λ: <>,
      exception_do (do:  (package.alloc cryptoffi.cryptoffi #()))
      ).

End code.
End cryptoffi.
