(* autogenerated from github.com/stretchr/testify/assert *)
From New.golang Require Import defn.

Definition assert : go_string := "github.com/stretchr/testify/assert".

Module assert.
Section code.
Context `{ffi_syntax}.


Axiom intType'init : val.

Axiom int8Type'init : val.

Axiom int16Type'init : val.

Axiom int32Type'init : val.

Axiom int64Type'init : val.

Axiom uintType'init : val.

Axiom uint8Type'init : val.

Axiom uint16Type'init : val.

Axiom uint32Type'init : val.

Axiom uint64Type'init : val.

Axiom uintptrType'init : val.

Axiom float32Type'init : val.

Axiom float64Type'init : val.

Axiom stringType'init : val.

Axiom timeType'init : val.

Axiom bytesType'init : val.

Axiom spewConfig'init : val.

Axiom spewConfigStringerEnabled'init : val.

Axiom AnError'init : val.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [].

#[global] Instance info' : PkgInfo assert.assert :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init assert.assert (Î»: <>,
      exception_do (do:  (intType'init #());;;
      do:  (int8Type'init #());;;
      do:  (int16Type'init #());;;
      do:  (int32Type'init #());;;
      do:  (int64Type'init #());;;
      do:  (uintType'init #());;;
      do:  (uint8Type'init #());;;
      do:  (uint16Type'init #());;;
      do:  (uint32Type'init #());;;
      do:  (uint64Type'init #());;;
      do:  (uintptrType'init #());;;
      do:  (float32Type'init #());;;
      do:  (float64Type'init #());;;
      do:  (stringType'init #());;;
      do:  (timeType'init #());;;
      do:  (bytesType'init #());;;
      do:  (spewConfig'init #());;;
      do:  (spewConfigStringerEnabled'init #());;;
      do:  (AnError'init #()))
      ).

End code.
End assert.
