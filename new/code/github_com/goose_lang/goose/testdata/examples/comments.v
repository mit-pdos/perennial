(* autogenerated from github.com/goose-lang/goose/testdata/examples/comments *)

From New.golang Require Import defn.
Definition comments : go_string := "github.com/goose-lang/goose/testdata/examples/comments".

Module comments.

Module Foo. Definition id : go_string := "github.com/goose-lang/goose/testdata/examples/comments.Foo"%go. End Foo.

Section code.
Context `{ffi_syntax}.


Definition ONE : val := #(W64 1).

Definition TWO : val := #(W64 2).

Definition Foo : go_type := structT [
  "a" :: boolT
].
#[global] Typeclasses Opaque Foo.
#[global] Opaque Foo.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [(Foo.id, []); (ptrT.id Foo.id, [])].

#[global] Instance info' : PkgInfo comments.comments :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #comments.comments (λ: <>,
      exception_do (do:  (package.alloc comments.comments #()))
      ).

End code.
End comments.
