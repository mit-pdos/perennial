(* autogenerated from github.com/goose-lang/goose/testdata/examples/interfacerecursion *)

From New.golang Require Import defn.
Definition interfacerecursion : go_string := "github.com/goose-lang/goose/testdata/examples/interfacerecursion".

Module interfacerecursion.

Module A. Definition id : go_string := "github.com/goose-lang/goose/testdata/examples/interfacerecursion.A"%go. End A.
Module B. Definition id : go_string := "github.com/goose-lang/goose/testdata/examples/interfacerecursion.B"%go. End B.
Module c. Definition id : go_string := "github.com/goose-lang/goose/testdata/examples/interfacerecursion.c"%go. End c.

Section code.
Context `{ffi_syntax}.


Definition A : go_type := interfaceT.
#[global] Typeclasses Opaque A.
#[global] Opaque A.

Definition B : go_type := interfaceT.
#[global] Typeclasses Opaque B.
#[global] Opaque B.

Definition c : go_type := structT [
].
#[global] Typeclasses Opaque c.
#[global] Opaque c.

(* go: x.go:14:13 *)
Definition c__Fooⁱᵐᵖˡ : val :=
  λ: "c" <>,
    exception_do (let: "c" := (mem.alloc "c") in
    let: "y" := (mem.alloc (type.zero_val #B)) in
    let: "$r0" := (interface.make #(ptrT.id c.id) (![#ptrT] "c")) in
    do:  ("y" <-[#B] "$r0");;;
    do:  ((interface.get #"Bar"%go (![#B] "y")) #());;;
    return: #()).

(* go: x.go:19:13 *)
Definition c__Barⁱᵐᵖˡ : val :=
  λ: "c" <>,
    exception_do (let: "c" := (mem.alloc "c") in
    let: "y" := (mem.alloc (type.zero_val #A)) in
    let: "$r0" := (interface.make #(ptrT.id c.id) (![#ptrT] "c")) in
    do:  ("y" <-[#A] "$r0");;;
    do:  ((interface.get #"Foo"%go (![#A] "y")) #());;;
    return: #()).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [(c.id, []); (ptrT.id c.id, [("Bar"%go, c__Barⁱᵐᵖˡ); ("Foo"%go, c__Fooⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo interfacerecursion.interfacerecursion :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #interfacerecursion.interfacerecursion (λ: <>,
      exception_do (do:  (package.alloc interfacerecursion.interfacerecursion #()))
      ).

End code.
End interfacerecursion.
