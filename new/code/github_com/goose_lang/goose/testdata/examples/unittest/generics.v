(* autogenerated from github.com/goose-lang/goose/testdata/examples/unittest/generics *)
From New.golang Require Import defn.

Definition generics : go_string := "github.com/goose-lang/goose/testdata/examples/unittest/generics".

Module generics.
Section code.
Context `{ffi_syntax}.


Definition Box : val :=
  λ: "T", type.structT [
    (#"Value"%go, "T")
  ].

Definition Container : val :=
  λ: "T", type.structT [
    (#"X"%go, "T");
    (#"Y"%go, type.mapT #intT "T");
    (#"Z"%go, #ptrT);
    (#"W"%go, #uint64T)
  ].

Definition UseContainer : val :=
  λ: <>, type.structT [
    (#"X"%go, Container #uint64T)
  ].

Definition OnlyIndirect : val :=
  λ: "T", type.structT [
    (#"X"%go, #sliceT);
    (#"Y"%go, #ptrT)
  ].

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [("Box"%go, []); ("Box'ptr"%go, []); ("Container"%go, []); ("Container'ptr"%go, []); ("UseContainer"%go, []); ("UseContainer'ptr"%go, []); ("OnlyIndirect"%go, []); ("OnlyIndirect'ptr"%go, [])].

#[global] Instance info' : PkgInfo generics.generics :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init generics.generics (λ: <>,
      exception_do (do:  #())
      ).

End code.
End generics.
