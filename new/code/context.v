(* autogenerated from context *)
Require Export New.code.time.

From New.golang Require Import defn.
Definition context : go_string := "context".

Module context.

Module Context. Definition id : go_string := "context.Context"%go. End Context.
Module deadlineExceededError. Definition id : go_string := "context.deadlineExceededError"%go. End deadlineExceededError.
Module emptyCtx. Definition id : go_string := "context.emptyCtx"%go. End emptyCtx.
Module backgroundCtx. Definition id : go_string := "context.backgroundCtx"%go. End backgroundCtx.
Module todoCtx. Definition id : go_string := "context.todoCtx"%go. End todoCtx.
Module CancelFunc. Definition id : go_string := "context.CancelFunc"%go. End CancelFunc.
Module CancelCauseFunc. Definition id : go_string := "context.CancelCauseFunc"%go. End CancelCauseFunc.
Module afterFuncer. Definition id : go_string := "context.afterFuncer"%go. End afterFuncer.
Module afterFuncCtx. Definition id : go_string := "context.afterFuncCtx"%go. End afterFuncCtx.
Module stopCtx. Definition id : go_string := "context.stopCtx"%go. End stopCtx.
Module canceler. Definition id : go_string := "context.canceler"%go. End canceler.
Module cancelCtx. Definition id : go_string := "context.cancelCtx"%go. End cancelCtx.
Module stringer. Definition id : go_string := "context.stringer"%go. End stringer.
Module withoutCancelCtx. Definition id : go_string := "context.withoutCancelCtx"%go. End withoutCancelCtx.
Module timerCtx. Definition id : go_string := "context.timerCtx"%go. End timerCtx.
Module valueCtx. Definition id : go_string := "context.valueCtx"%go. End valueCtx.

Section code.
Context `{ffi_syntax}.


Definition Context : go_type := interfaceT.
#[global] Typeclasses Opaque Context.
#[global] Opaque Context.

Definition Canceled : go_string := "context.Canceled"%go.

Axiom Canceled'init : val.

Definition DeadlineExceeded : go_string := "context.DeadlineExceeded"%go.

Axiom DeadlineExceeded'init : val.

Axiom deadlineExceededError : go_type.

Axiom emptyCtx : go_type.

Axiom backgroundCtx : go_type.

Axiom todoCtx : go_type.

Definition Background : go_string := "context.Background"%go.

Definition TODO : go_string := "context.TODO"%go.

Axiom CancelFunc : go_type.

Definition WithCancel : go_string := "context.WithCancel"%go.

Axiom CancelCauseFunc : go_type.

Definition WithCancelCause : go_string := "context.WithCancelCause"%go.

Definition withCancel : go_string := "context.withCancel"%go.

Definition Cause : go_string := "context.Cause"%go.

Definition AfterFunc : go_string := "context.AfterFunc"%go.

Axiom afterFuncer : go_type.

Axiom afterFuncCtx : go_type.

Axiom stopCtx : go_type.

Definition goroutines : go_string := "context.goroutines"%go.

Definition cancelCtxKey : go_string := "context.cancelCtxKey"%go.

Definition parentCancelCtx : go_string := "context.parentCancelCtx"%go.

Definition removeChild : go_string := "context.removeChild"%go.

Axiom canceler : go_type.

Definition closedchan : go_string := "context.closedchan"%go.

Axiom closedchan'init : val.

Definition init : go_string := "context.init"%go.

Axiom cancelCtx : go_type.

Axiom stringer : go_type.

Definition contextName : go_string := "context.contextName"%go.

Definition WithoutCancel : go_string := "context.WithoutCancel"%go.

Axiom withoutCancelCtx : go_type.

Definition WithDeadline : go_string := "context.WithDeadline"%go.

Definition WithDeadlineCause : go_string := "context.WithDeadlineCause"%go.

Axiom timerCtx : go_type.

Definition WithTimeout : go_string := "context.WithTimeout"%go.

Definition WithTimeoutCause : go_string := "context.WithTimeoutCause"%go.

Definition WithValue : go_string := "context.WithValue"%go.

Axiom valueCtx : go_type.

Definition stringify : go_string := "context.stringify"%go.

Definition value : go_string := "context.value"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom Backgroundⁱᵐᵖˡ : val.

Axiom TODOⁱᵐᵖˡ : val.

Axiom WithCancelⁱᵐᵖˡ : val.

Axiom WithCancelCauseⁱᵐᵖˡ : val.

Axiom withCancelⁱᵐᵖˡ : val.

Axiom Causeⁱᵐᵖˡ : val.

Axiom AfterFuncⁱᵐᵖˡ : val.

Axiom parentCancelCtxⁱᵐᵖˡ : val.

Axiom removeChildⁱᵐᵖˡ : val.

Axiom contextNameⁱᵐᵖˡ : val.

Axiom WithoutCancelⁱᵐᵖˡ : val.

Axiom WithDeadlineⁱᵐᵖˡ : val.

Axiom WithDeadlineCauseⁱᵐᵖˡ : val.

Axiom WithTimeoutⁱᵐᵖˡ : val.

Axiom WithTimeoutCauseⁱᵐᵖˡ : val.

Axiom WithValueⁱᵐᵖˡ : val.

Axiom stringifyⁱᵐᵖˡ : val.

Axiom valueⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(Background, Backgroundⁱᵐᵖˡ); (TODO, TODOⁱᵐᵖˡ); (WithCancel, WithCancelⁱᵐᵖˡ); (WithCancelCause, WithCancelCauseⁱᵐᵖˡ); (withCancel, withCancelⁱᵐᵖˡ); (Cause, Causeⁱᵐᵖˡ); (AfterFunc, AfterFuncⁱᵐᵖˡ); (parentCancelCtx, parentCancelCtxⁱᵐᵖˡ); (removeChild, removeChildⁱᵐᵖˡ); (contextName, contextNameⁱᵐᵖˡ); (WithoutCancel, WithoutCancelⁱᵐᵖˡ); (WithDeadline, WithDeadlineⁱᵐᵖˡ); (WithDeadlineCause, WithDeadlineCauseⁱᵐᵖˡ); (WithTimeout, WithTimeoutⁱᵐᵖˡ); (WithTimeoutCause, WithTimeoutCauseⁱᵐᵖˡ); (WithValue, WithValueⁱᵐᵖˡ); (stringify, stringifyⁱᵐᵖˡ); (value, valueⁱᵐᵖˡ)].

Axiom deadlineExceededError__Errorⁱᵐᵖˡ : val.

Axiom deadlineExceededError__Temporaryⁱᵐᵖˡ : val.

Axiom deadlineExceededError__Timeoutⁱᵐᵖˡ : val.

Axiom emptyCtx__Deadlineⁱᵐᵖˡ : val.

Axiom emptyCtx__Doneⁱᵐᵖˡ : val.

Axiom emptyCtx__Errⁱᵐᵖˡ : val.

Axiom emptyCtx__Valueⁱᵐᵖˡ : val.

Axiom backgroundCtx__Deadlineⁱᵐᵖˡ : val.

Axiom backgroundCtx__Doneⁱᵐᵖˡ : val.

Axiom backgroundCtx__Errⁱᵐᵖˡ : val.

Axiom backgroundCtx__Stringⁱᵐᵖˡ : val.

Axiom backgroundCtx__Valueⁱᵐᵖˡ : val.

Axiom todoCtx__Deadlineⁱᵐᵖˡ : val.

Axiom todoCtx__Doneⁱᵐᵖˡ : val.

Axiom todoCtx__Errⁱᵐᵖˡ : val.

Axiom todoCtx__Stringⁱᵐᵖˡ : val.

Axiom todoCtx__Valueⁱᵐᵖˡ : val.

Axiom afterFuncCtx__Deadlineⁱᵐᵖˡ : val.

Axiom afterFuncCtx__Doneⁱᵐᵖˡ : val.

Axiom afterFuncCtx__Errⁱᵐᵖˡ : val.

Axiom afterFuncCtx__Stringⁱᵐᵖˡ : val.

Axiom afterFuncCtx__Valueⁱᵐᵖˡ : val.

Axiom afterFuncCtx__cancelⁱᵐᵖˡ : val.

Axiom afterFuncCtx__propagateCancelⁱᵐᵖˡ : val.

Axiom stopCtx__Deadlineⁱᵐᵖˡ : val.

Axiom stopCtx__Doneⁱᵐᵖˡ : val.

Axiom stopCtx__Errⁱᵐᵖˡ : val.

Axiom stopCtx__Valueⁱᵐᵖˡ : val.

Axiom cancelCtx__Deadlineⁱᵐᵖˡ : val.

Axiom cancelCtx__Doneⁱᵐᵖˡ : val.

Axiom cancelCtx__Errⁱᵐᵖˡ : val.

Axiom cancelCtx__Stringⁱᵐᵖˡ : val.

Axiom cancelCtx__Valueⁱᵐᵖˡ : val.

Axiom cancelCtx__cancelⁱᵐᵖˡ : val.

Axiom cancelCtx__propagateCancelⁱᵐᵖˡ : val.

Axiom withoutCancelCtx__Deadlineⁱᵐᵖˡ : val.

Axiom withoutCancelCtx__Doneⁱᵐᵖˡ : val.

Axiom withoutCancelCtx__Errⁱᵐᵖˡ : val.

Axiom withoutCancelCtx__Stringⁱᵐᵖˡ : val.

Axiom withoutCancelCtx__Valueⁱᵐᵖˡ : val.

Axiom timerCtx__Deadlineⁱᵐᵖˡ : val.

Axiom timerCtx__Doneⁱᵐᵖˡ : val.

Axiom timerCtx__Errⁱᵐᵖˡ : val.

Axiom timerCtx__Stringⁱᵐᵖˡ : val.

Axiom timerCtx__Valueⁱᵐᵖˡ : val.

Axiom timerCtx__cancelⁱᵐᵖˡ : val.

Axiom timerCtx__propagateCancelⁱᵐᵖˡ : val.

Axiom valueCtx__Deadlineⁱᵐᵖˡ : val.

Axiom valueCtx__Doneⁱᵐᵖˡ : val.

Axiom valueCtx__Errⁱᵐᵖˡ : val.

Axiom valueCtx__Stringⁱᵐᵖˡ : val.

Axiom valueCtx__Valueⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(deadlineExceededError.id, [("Error"%go, deadlineExceededError__Errorⁱᵐᵖˡ); ("Temporary"%go, deadlineExceededError__Temporaryⁱᵐᵖˡ); ("Timeout"%go, deadlineExceededError__Timeoutⁱᵐᵖˡ)]); (ptrT.id deadlineExceededError.id, [("Error"%go, deadlineExceededError__Errorⁱᵐᵖˡ); ("Temporary"%go, deadlineExceededError__Temporaryⁱᵐᵖˡ); ("Timeout"%go, deadlineExceededError__Timeoutⁱᵐᵖˡ)]); (emptyCtx.id, [("Deadline"%go, emptyCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, emptyCtx__Doneⁱᵐᵖˡ); ("Err"%go, emptyCtx__Errⁱᵐᵖˡ); ("Value"%go, emptyCtx__Valueⁱᵐᵖˡ)]); (ptrT.id emptyCtx.id, [("Deadline"%go, emptyCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, emptyCtx__Doneⁱᵐᵖˡ); ("Err"%go, emptyCtx__Errⁱᵐᵖˡ); ("Value"%go, emptyCtx__Valueⁱᵐᵖˡ)]); (backgroundCtx.id, [("Deadline"%go, backgroundCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, backgroundCtx__Doneⁱᵐᵖˡ); ("Err"%go, backgroundCtx__Errⁱᵐᵖˡ); ("String"%go, backgroundCtx__Stringⁱᵐᵖˡ); ("Value"%go, backgroundCtx__Valueⁱᵐᵖˡ)]); (ptrT.id backgroundCtx.id, [("Deadline"%go, backgroundCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, backgroundCtx__Doneⁱᵐᵖˡ); ("Err"%go, backgroundCtx__Errⁱᵐᵖˡ); ("String"%go, backgroundCtx__Stringⁱᵐᵖˡ); ("Value"%go, backgroundCtx__Valueⁱᵐᵖˡ)]); (todoCtx.id, [("Deadline"%go, todoCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, todoCtx__Doneⁱᵐᵖˡ); ("Err"%go, todoCtx__Errⁱᵐᵖˡ); ("String"%go, todoCtx__Stringⁱᵐᵖˡ); ("Value"%go, todoCtx__Valueⁱᵐᵖˡ)]); (ptrT.id todoCtx.id, [("Deadline"%go, todoCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, todoCtx__Doneⁱᵐᵖˡ); ("Err"%go, todoCtx__Errⁱᵐᵖˡ); ("String"%go, todoCtx__Stringⁱᵐᵖˡ); ("Value"%go, todoCtx__Valueⁱᵐᵖˡ)]); (CancelFunc.id, []); (ptrT.id CancelFunc.id, []); (CancelCauseFunc.id, []); (ptrT.id CancelCauseFunc.id, []); (afterFuncCtx.id, [("Deadline"%go, afterFuncCtx__Deadlineⁱᵐᵖˡ)]); (ptrT.id afterFuncCtx.id, [("Deadline"%go, afterFuncCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, afterFuncCtx__Doneⁱᵐᵖˡ); ("Err"%go, afterFuncCtx__Errⁱᵐᵖˡ); ("String"%go, afterFuncCtx__Stringⁱᵐᵖˡ); ("Value"%go, afterFuncCtx__Valueⁱᵐᵖˡ); ("cancel"%go, afterFuncCtx__cancelⁱᵐᵖˡ); ("propagateCancel"%go, afterFuncCtx__propagateCancelⁱᵐᵖˡ)]); (stopCtx.id, [("Deadline"%go, stopCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, stopCtx__Doneⁱᵐᵖˡ); ("Err"%go, stopCtx__Errⁱᵐᵖˡ); ("Value"%go, stopCtx__Valueⁱᵐᵖˡ)]); (ptrT.id stopCtx.id, [("Deadline"%go, stopCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, stopCtx__Doneⁱᵐᵖˡ); ("Err"%go, stopCtx__Errⁱᵐᵖˡ); ("Value"%go, stopCtx__Valueⁱᵐᵖˡ)]); (cancelCtx.id, [("Deadline"%go, cancelCtx__Deadlineⁱᵐᵖˡ)]); (ptrT.id cancelCtx.id, [("Deadline"%go, cancelCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, cancelCtx__Doneⁱᵐᵖˡ); ("Err"%go, cancelCtx__Errⁱᵐᵖˡ); ("String"%go, cancelCtx__Stringⁱᵐᵖˡ); ("Value"%go, cancelCtx__Valueⁱᵐᵖˡ); ("cancel"%go, cancelCtx__cancelⁱᵐᵖˡ); ("propagateCancel"%go, cancelCtx__propagateCancelⁱᵐᵖˡ)]); (withoutCancelCtx.id, [("Deadline"%go, withoutCancelCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, withoutCancelCtx__Doneⁱᵐᵖˡ); ("Err"%go, withoutCancelCtx__Errⁱᵐᵖˡ); ("String"%go, withoutCancelCtx__Stringⁱᵐᵖˡ); ("Value"%go, withoutCancelCtx__Valueⁱᵐᵖˡ)]); (ptrT.id withoutCancelCtx.id, [("Deadline"%go, withoutCancelCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, withoutCancelCtx__Doneⁱᵐᵖˡ); ("Err"%go, withoutCancelCtx__Errⁱᵐᵖˡ); ("String"%go, withoutCancelCtx__Stringⁱᵐᵖˡ); ("Value"%go, withoutCancelCtx__Valueⁱᵐᵖˡ)]); (timerCtx.id, []); (ptrT.id timerCtx.id, [("Deadline"%go, timerCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, timerCtx__Doneⁱᵐᵖˡ); ("Err"%go, timerCtx__Errⁱᵐᵖˡ); ("String"%go, timerCtx__Stringⁱᵐᵖˡ); ("Value"%go, timerCtx__Valueⁱᵐᵖˡ); ("cancel"%go, timerCtx__cancelⁱᵐᵖˡ); ("propagateCancel"%go, timerCtx__propagateCancelⁱᵐᵖˡ)]); (valueCtx.id, [("Deadline"%go, valueCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, valueCtx__Doneⁱᵐᵖˡ); ("Err"%go, valueCtx__Errⁱᵐᵖˡ)]); (ptrT.id valueCtx.id, [("Deadline"%go, valueCtx__Deadlineⁱᵐᵖˡ); ("Done"%go, valueCtx__Doneⁱᵐᵖˡ); ("Err"%go, valueCtx__Errⁱᵐᵖˡ); ("String"%go, valueCtx__Stringⁱᵐᵖˡ); ("Value"%go, valueCtx__Valueⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo context.context :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [code.time.time];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #context.context (λ: <>,
      exception_do (do:  (time.initialize' #());;;
      do:  (package.alloc context.context #());;;
      do:  (Canceled'init #());;;
      do:  (DeadlineExceeded'init #());;;
      do:  (closedchan'init #()))
      ).

End code.
End context.
