(* autogenerated from context *)
From New.golang Require Import defn.

Definition context : go_string := "context".

Module context.
Section code.
Context `{ffi_syntax}.


Definition Contextⁱᵈ : go_string := "context.Context"%go.

Definition Context : go_type := interfaceT.

Definition Canceled : go_string := "context.Canceled"%go.

Axiom Canceled'init : val.

Definition DeadlineExceeded : go_string := "context.DeadlineExceeded"%go.

Axiom DeadlineExceeded'init : val.

Definition Background : go_string := "context.Background"%go.

Definition TODO : go_string := "context.TODO"%go.

Definition CancelFuncⁱᵈ : go_string := "context.CancelFunc"%go.

Definition CancelFunc : go_type := funcT.

Definition WithCancel : go_string := "context.WithCancel"%go.

Definition WithCancelCause : go_string := "context.WithCancelCause"%go.

Definition withCancel : go_string := "context.withCancel"%go.

Definition Cause : go_string := "context.Cause"%go.

Definition AfterFunc : go_string := "context.AfterFunc"%go.

Definition goroutines : go_string := "context.goroutines"%go.

Definition cancelCtxKey : go_string := "context.cancelCtxKey"%go.

Definition parentCancelCtx : go_string := "context.parentCancelCtx"%go.

Definition removeChild : go_string := "context.removeChild"%go.

Definition closedchan : go_string := "context.closedchan"%go.

Axiom closedchan'init : val.

Definition init : go_string := "context.init"%go.

Definition contextName : go_string := "context.contextName"%go.

Definition WithoutCancel : go_string := "context.WithoutCancel"%go.

Definition WithDeadline : go_string := "context.WithDeadline"%go.

Definition WithDeadlineCause : go_string := "context.WithDeadlineCause"%go.

Definition WithTimeout : go_string := "context.WithTimeout"%go.

Definition WithTimeoutCause : go_string := "context.WithTimeoutCause"%go.

Definition WithValue : go_string := "context.WithValue"%go.

Definition stringify : go_string := "context.stringify"%go.

Definition value : go_string := "context.value"%go.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [("CancelFunc"%go, []); ("CancelFunc'ptr"%go, [])].

#[global] Instance info' : PkgInfo context.context :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #context.context (λ: <>,
      exception_do (do:  (package.alloc context.context #());;;
      do:  (Canceled'init #());;;
      do:  (DeadlineExceeded'init #());;;
      do:  (closedchan'init #()))
      ).

End code.
End context.
