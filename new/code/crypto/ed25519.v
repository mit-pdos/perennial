(* autogenerated from crypto/ed25519 *)

From New.golang Require Import defn.
Definition ed25519 : go_string := "crypto/ed25519".

Module ed25519.

Module PublicKey. Definition id : go_string := "crypto/ed25519.PublicKey"%go. End PublicKey.
Module PrivateKey. Definition id : go_string := "crypto/ed25519.PrivateKey"%go. End PrivateKey.
Module Options. Definition id : go_string := "crypto/ed25519.Options"%go. End Options.

Section code.
Context `{ffi_syntax}.


Axiom PublicKeySize : Z.

Axiom PrivateKeySize : Z.

Axiom SignatureSize : Z.

Axiom SeedSize : Z.

Definition PublicKey : go_type := sliceT.
#[global] Typeclasses Opaque PublicKey.
#[global] Opaque PublicKey.

Axiom PrivateKey : go_type.

Axiom Options : go_type.

Definition GenerateKey : go_string := "crypto/ed25519.GenerateKey"%go.

Definition NewKeyFromSeed : go_string := "crypto/ed25519.NewKeyFromSeed"%go.

Definition newKeyFromSeed : go_string := "crypto/ed25519.newKeyFromSeed"%go.

Definition Sign : go_string := "crypto/ed25519.Sign"%go.

Definition sign : go_string := "crypto/ed25519.sign"%go.

Definition Verify : go_string := "crypto/ed25519.Verify"%go.

Definition VerifyWithOptions : go_string := "crypto/ed25519.VerifyWithOptions"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom GenerateKeyⁱᵐᵖˡ : val.

Axiom NewKeyFromSeedⁱᵐᵖˡ : val.

Axiom newKeyFromSeedⁱᵐᵖˡ : val.

Axiom Signⁱᵐᵖˡ : val.

Axiom signⁱᵐᵖˡ : val.

Axiom Verifyⁱᵐᵖˡ : val.

Axiom VerifyWithOptionsⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(GenerateKey, GenerateKeyⁱᵐᵖˡ); (NewKeyFromSeed, NewKeyFromSeedⁱᵐᵖˡ); (newKeyFromSeed, newKeyFromSeedⁱᵐᵖˡ); (Sign, Signⁱᵐᵖˡ); (sign, signⁱᵐᵖˡ); (Verify, Verifyⁱᵐᵖˡ); (VerifyWithOptions, VerifyWithOptionsⁱᵐᵖˡ)].

Axiom PublicKey__Equalⁱᵐᵖˡ : val.

Axiom PrivateKey__Equalⁱᵐᵖˡ : val.

Axiom PrivateKey__Publicⁱᵐᵖˡ : val.

Axiom PrivateKey__Seedⁱᵐᵖˡ : val.

Axiom PrivateKey__Signⁱᵐᵖˡ : val.

Axiom Options__HashFuncⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(PublicKey.id, [("Equal"%go, PublicKey__Equalⁱᵐᵖˡ)]); (ptrT.id PublicKey.id, [("Equal"%go, PublicKey__Equalⁱᵐᵖˡ)]); (PrivateKey.id, [("Equal"%go, PrivateKey__Equalⁱᵐᵖˡ); ("Public"%go, PrivateKey__Publicⁱᵐᵖˡ); ("Seed"%go, PrivateKey__Seedⁱᵐᵖˡ); ("Sign"%go, PrivateKey__Signⁱᵐᵖˡ)]); (ptrT.id PrivateKey.id, [("Equal"%go, PrivateKey__Equalⁱᵐᵖˡ); ("Public"%go, PrivateKey__Publicⁱᵐᵖˡ); ("Seed"%go, PrivateKey__Seedⁱᵐᵖˡ); ("Sign"%go, PrivateKey__Signⁱᵐᵖˡ)]); (Options.id, []); (ptrT.id Options.id, [("HashFunc"%go, Options__HashFuncⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo ed25519.ed25519 :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #ed25519.ed25519 (λ: <>,
      exception_do (do:  (package.alloc ed25519.ed25519 #()))
      ).

End code.
End ed25519.
