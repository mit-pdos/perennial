(* autogenerated from crypto/rand *)

From New.golang Require Import defn.
Definition rand : go_string := "crypto/rand".

Module rand.

Module reader. Definition id : go_string := "crypto/rand.reader"%go. End reader.

Section code.
Context `{ffi_syntax}.


Definition Reader : go_string := "crypto/rand.Reader"%go.

Definition init : go_string := "crypto/rand.init"%go.

Axiom initⁱᵐᵖˡ : val.

Axiom reader : go_type.

Axiom reader__Readⁱᵐᵖˡ : val.

Definition fatal : go_string := "crypto/rand.fatal"%go.

Axiom fatalⁱᵐᵖˡ : val.

Definition Read : go_string := "crypto/rand.Read"%go.

Axiom Readⁱᵐᵖˡ : val.

Axiom base32alphabet : go_string.

Definition Text : go_string := "crypto/rand.Text"%go.

Axiom Textⁱᵐᵖˡ : val.

Definition Prime : go_string := "crypto/rand.Prime"%go.

Axiom Primeⁱᵐᵖˡ : val.

Definition Int : go_string := "crypto/rand.Int"%go.

Axiom Intⁱᵐᵖˡ : val.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(init, initⁱᵐᵖˡ); (fatal, fatalⁱᵐᵖˡ); (Read, Readⁱᵐᵖˡ); (Text, Textⁱᵐᵖˡ); (Prime, Primeⁱᵐᵖˡ); (Int, Intⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(reader.id, [("defaultReader"%go, (λ: "$r",
                 method_call #drbg.DefaultReader.id #"defaultReader"%go (struct.field_get #reader #"DefaultReader"%go "$r")
                 )%V)]); (ptrT.id reader.id, [("Read"%go, reader__Readⁱᵐᵖˡ); ("defaultReader"%go, (λ: "$r",
                 method_call #(ptrT.id drbg.DefaultReader.id) #"defaultReader"%go (struct.field_ref #reader #"DefaultReader"%go "$r")
                 )%V)])].

#[global] Instance info' : PkgInfo rand.rand :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #rand.rand (λ: <>,
      exception_do (do:  (package.alloc rand.rand #()))
      ).

End code.
End rand.
