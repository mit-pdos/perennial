(* autogenerated from log *)
From New.golang Require Import defn.

Require Export New.trusted_code.log.
Import log.
Definition log : go_string := "log".

Module log.
Section code.
Context `{ffi_syntax}.


(* the date in the local time zone: 2009/01/23 *)
Definition Ldate : Z := 1.

(* the time in the local time zone: 01:23:23 *)
Definition Ltime : Z := 2.

(* initial values for the standard logger *)
Definition LstdFlags : Z := 3.

Definition Loggerⁱᵈ : go_string := "log.Logger"%go.

Axiom Logger : go_type.

Definition New : go_string := "log.New"%go.

Definition std : go_string := "log.std"%go.

Axiom std'init : val.

Definition Default : go_string := "log.Default"%go.

Definition itoa : go_string := "log.itoa"%go.

Definition formatHeader : go_string := "log.formatHeader"%go.

Definition bufferPool : go_string := "log.bufferPool"%go.

Axiom bufferPool'init : val.

Definition getBuffer : go_string := "log.getBuffer"%go.

Definition putBuffer : go_string := "log.putBuffer"%go.

Definition init : go_string := "log.init"%go.

Definition SetOutput : go_string := "log.SetOutput"%go.

Definition Flags : go_string := "log.Flags"%go.

Definition SetFlags : go_string := "log.SetFlags"%go.

Definition Prefix : go_string := "log.Prefix"%go.

Definition SetPrefix : go_string := "log.SetPrefix"%go.

Definition Writer : go_string := "log.Writer"%go.

Definition Print : go_string := "log.Print"%go.

Definition Printf : go_string := "log.Printf"%go.

Definition Println : go_string := "log.Println"%go.

Definition Fatal : go_string := "log.Fatal"%go.

Definition Fatalf : go_string := "log.Fatalf"%go.

Definition Fatalln : go_string := "log.Fatalln"%go.

Definition Panic : go_string := "log.Panic"%go.

Definition Panicf : go_string := "log.Panicf"%go.

Definition Panicln : go_string := "log.Panicln"%go.

Definition Output : go_string := "log.Output"%go.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(Printf, Printfⁱᵐᵖˡ); (Println, Printlnⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(Loggerⁱᵈ, []); (ptrTⁱᵈ Loggerⁱᵈ, [])].

#[global] Instance info' : PkgInfo log.log :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #log.log (λ: <>,
      exception_do (do:  (package.alloc log.log #());;;
      do:  (std'init #());;;
      do:  (bufferPool'init #()))
      ).

End code.
End log.
