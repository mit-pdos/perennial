(* autogenerated from io *)
Require Export New.code.errors.
Require Export New.code.sync.

From New.golang Require Import defn.
Definition io : go_string := "io".

Module io.

Module Reader. Definition id : go_string := "io.Reader"%go. End Reader.
Module Writer. Definition id : go_string := "io.Writer"%go. End Writer.
Module Closer. Definition id : go_string := "io.Closer"%go. End Closer.
Module Seeker. Definition id : go_string := "io.Seeker"%go. End Seeker.
Module ReadWriter. Definition id : go_string := "io.ReadWriter"%go. End ReadWriter.
Module ReadCloser. Definition id : go_string := "io.ReadCloser"%go. End ReadCloser.
Module WriteCloser. Definition id : go_string := "io.WriteCloser"%go. End WriteCloser.
Module ReadWriteCloser. Definition id : go_string := "io.ReadWriteCloser"%go. End ReadWriteCloser.
Module ReadSeeker. Definition id : go_string := "io.ReadSeeker"%go. End ReadSeeker.
Module ReadSeekCloser. Definition id : go_string := "io.ReadSeekCloser"%go. End ReadSeekCloser.
Module WriteSeeker. Definition id : go_string := "io.WriteSeeker"%go. End WriteSeeker.
Module ReadWriteSeeker. Definition id : go_string := "io.ReadWriteSeeker"%go. End ReadWriteSeeker.
Module ReaderFrom. Definition id : go_string := "io.ReaderFrom"%go. End ReaderFrom.
Module WriterTo. Definition id : go_string := "io.WriterTo"%go. End WriterTo.
Module ReaderAt. Definition id : go_string := "io.ReaderAt"%go. End ReaderAt.
Module WriterAt. Definition id : go_string := "io.WriterAt"%go. End WriterAt.
Module ByteReader. Definition id : go_string := "io.ByteReader"%go. End ByteReader.
Module ByteScanner. Definition id : go_string := "io.ByteScanner"%go. End ByteScanner.
Module ByteWriter. Definition id : go_string := "io.ByteWriter"%go. End ByteWriter.
Module RuneReader. Definition id : go_string := "io.RuneReader"%go. End RuneReader.
Module RuneScanner. Definition id : go_string := "io.RuneScanner"%go. End RuneScanner.
Module StringWriter. Definition id : go_string := "io.StringWriter"%go. End StringWriter.
Module LimitedReader. Definition id : go_string := "io.LimitedReader"%go. End LimitedReader.
Module SectionReader. Definition id : go_string := "io.SectionReader"%go. End SectionReader.
Module OffsetWriter. Definition id : go_string := "io.OffsetWriter"%go. End OffsetWriter.
Module teeReader. Definition id : go_string := "io.teeReader"%go. End teeReader.
Module discard. Definition id : go_string := "io.discard"%go. End discard.
Module nopCloser. Definition id : go_string := "io.nopCloser"%go. End nopCloser.
Module nopCloserWriterTo. Definition id : go_string := "io.nopCloserWriterTo"%go. End nopCloserWriterTo.
Module eofReader. Definition id : go_string := "io.eofReader"%go. End eofReader.
Module multiReader. Definition id : go_string := "io.multiReader"%go. End multiReader.
Module multiWriter. Definition id : go_string := "io.multiWriter"%go. End multiWriter.
Module onceError. Definition id : go_string := "io.onceError"%go. End onceError.
Module pipe. Definition id : go_string := "io.pipe"%go. End pipe.
Module PipeReader. Definition id : go_string := "io.PipeReader"%go. End PipeReader.
Module PipeWriter. Definition id : go_string := "io.PipeWriter"%go. End PipeWriter.

Section code.
Context `{ffi_syntax}.


Axiom SeekStart : Z.

Axiom SeekCurrent : Z.

Axiom SeekEnd : Z.

Definition ErrShortWrite : go_string := "io.ErrShortWrite"%go.

Axiom ErrShortWrite'init : val.

Definition errInvalidWrite : go_string := "io.errInvalidWrite"%go.

Axiom errInvalidWrite'init : val.

Definition ErrShortBuffer : go_string := "io.ErrShortBuffer"%go.

Axiom ErrShortBuffer'init : val.

Definition EOF : go_string := "io.EOF"%go.

Axiom EOF'init : val.

Definition ErrUnexpectedEOF : go_string := "io.ErrUnexpectedEOF"%go.

Axiom ErrUnexpectedEOF'init : val.

Definition ErrNoProgress : go_string := "io.ErrNoProgress"%go.

Axiom ErrNoProgress'init : val.

Definition Reader : go_type := interfaceT.

Definition Writer : go_type := interfaceT.

Axiom Closer : go_type.

Axiom Seeker : go_type.

Axiom ReadWriter : go_type.

Axiom ReadCloser : go_type.

Axiom WriteCloser : go_type.

Axiom ReadWriteCloser : go_type.

Axiom ReadSeeker : go_type.

Axiom ReadSeekCloser : go_type.

Axiom WriteSeeker : go_type.

Axiom ReadWriteSeeker : go_type.

Axiom ReaderFrom : go_type.

Axiom WriterTo : go_type.

Axiom ReaderAt : go_type.

Axiom WriterAt : go_type.

Axiom ByteReader : go_type.

Axiom ByteScanner : go_type.

Axiom ByteWriter : go_type.

Axiom RuneReader : go_type.

Axiom RuneScanner : go_type.

Axiom StringWriter : go_type.

Definition WriteString : go_string := "io.WriteString"%go.

Definition ReadAtLeast : go_string := "io.ReadAtLeast"%go.

Definition ReadFull : go_string := "io.ReadFull"%go.

Definition CopyN : go_string := "io.CopyN"%go.

Definition Copy : go_string := "io.Copy"%go.

Definition CopyBuffer : go_string := "io.CopyBuffer"%go.

Definition copyBuffer : go_string := "io.copyBuffer"%go.

Definition LimitReader : go_string := "io.LimitReader"%go.

Axiom LimitedReader : go_type.

Definition NewSectionReader : go_string := "io.NewSectionReader"%go.

Axiom SectionReader : go_type.

Definition errWhence : go_string := "io.errWhence"%go.

Axiom errWhence'init : val.

Definition errOffset : go_string := "io.errOffset"%go.

Axiom errOffset'init : val.

Axiom OffsetWriter : go_type.

Definition NewOffsetWriter : go_string := "io.NewOffsetWriter"%go.

Definition TeeReader : go_string := "io.TeeReader"%go.

Axiom teeReader : go_type.

Definition Discard : go_string := "io.Discard"%go.

Axiom Discard'init : val.

Axiom discard : go_type.

Definition blackHolePool : go_string := "io.blackHolePool"%go.

Axiom blackHolePool'init : val.

Definition NopCloser : go_string := "io.NopCloser"%go.

Axiom nopCloser : go_type.

Axiom nopCloserWriterTo : go_type.

Definition ReadAll : go_string := "io.ReadAll"%go.

Axiom eofReader : go_type.

Axiom multiReader : go_type.

Definition MultiReader : go_string := "io.MultiReader"%go.

Axiom multiWriter : go_type.

Definition MultiWriter : go_string := "io.MultiWriter"%go.

Axiom onceError : go_type.

Definition ErrClosedPipe : go_string := "io.ErrClosedPipe"%go.

Axiom ErrClosedPipe'init : val.

Axiom pipe : go_type.

Axiom PipeReader : go_type.

Axiom PipeWriter : go_type.

Definition Pipe : go_string := "io.Pipe"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom WriteStringⁱᵐᵖˡ : val.

Axiom ReadAtLeastⁱᵐᵖˡ : val.

Axiom ReadFullⁱᵐᵖˡ : val.

Axiom CopyNⁱᵐᵖˡ : val.

Axiom Copyⁱᵐᵖˡ : val.

Axiom CopyBufferⁱᵐᵖˡ : val.

Axiom copyBufferⁱᵐᵖˡ : val.

Axiom LimitReaderⁱᵐᵖˡ : val.

Axiom NewSectionReaderⁱᵐᵖˡ : val.

Axiom NewOffsetWriterⁱᵐᵖˡ : val.

Axiom TeeReaderⁱᵐᵖˡ : val.

Axiom NopCloserⁱᵐᵖˡ : val.

Axiom ReadAllⁱᵐᵖˡ : val.

Axiom MultiReaderⁱᵐᵖˡ : val.

Axiom MultiWriterⁱᵐᵖˡ : val.

Axiom Pipeⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(WriteString, WriteStringⁱᵐᵖˡ); (ReadAtLeast, ReadAtLeastⁱᵐᵖˡ); (ReadFull, ReadFullⁱᵐᵖˡ); (CopyN, CopyNⁱᵐᵖˡ); (Copy, Copyⁱᵐᵖˡ); (CopyBuffer, CopyBufferⁱᵐᵖˡ); (copyBuffer, copyBufferⁱᵐᵖˡ); (LimitReader, LimitReaderⁱᵐᵖˡ); (NewSectionReader, NewSectionReaderⁱᵐᵖˡ); (NewOffsetWriter, NewOffsetWriterⁱᵐᵖˡ); (TeeReader, TeeReaderⁱᵐᵖˡ); (NopCloser, NopCloserⁱᵐᵖˡ); (ReadAll, ReadAllⁱᵐᵖˡ); (MultiReader, MultiReaderⁱᵐᵖˡ); (MultiWriter, MultiWriterⁱᵐᵖˡ); (Pipe, Pipeⁱᵐᵖˡ)].

Axiom LimitedReader__Readⁱᵐᵖˡ : val.

Axiom SectionReader__Outerⁱᵐᵖˡ : val.

Axiom SectionReader__Readⁱᵐᵖˡ : val.

Axiom SectionReader__ReadAtⁱᵐᵖˡ : val.

Axiom SectionReader__Seekⁱᵐᵖˡ : val.

Axiom SectionReader__Sizeⁱᵐᵖˡ : val.

Axiom OffsetWriter__Seekⁱᵐᵖˡ : val.

Axiom OffsetWriter__Writeⁱᵐᵖˡ : val.

Axiom OffsetWriter__WriteAtⁱᵐᵖˡ : val.

Axiom teeReader__Readⁱᵐᵖˡ : val.

Axiom discard__ReadFromⁱᵐᵖˡ : val.

Axiom discard__Writeⁱᵐᵖˡ : val.

Axiom discard__WriteStringⁱᵐᵖˡ : val.

Axiom nopCloser__Closeⁱᵐᵖˡ : val.

Axiom nopCloser__Readⁱᵐᵖˡ : val.

Axiom nopCloserWriterTo__Closeⁱᵐᵖˡ : val.

Axiom nopCloserWriterTo__Readⁱᵐᵖˡ : val.

Axiom nopCloserWriterTo__WriteToⁱᵐᵖˡ : val.

Axiom eofReader__Readⁱᵐᵖˡ : val.

Axiom multiReader__Readⁱᵐᵖˡ : val.

Axiom multiReader__WriteToⁱᵐᵖˡ : val.

Axiom multiReader__writeToWithBufferⁱᵐᵖˡ : val.

Axiom multiWriter__Writeⁱᵐᵖˡ : val.

Axiom multiWriter__WriteStringⁱᵐᵖˡ : val.

Axiom onceError__Loadⁱᵐᵖˡ : val.

Axiom onceError__Lockⁱᵐᵖˡ : val.

Axiom onceError__Storeⁱᵐᵖˡ : val.

Axiom onceError__TryLockⁱᵐᵖˡ : val.

Axiom onceError__Unlockⁱᵐᵖˡ : val.

Axiom pipe__closeReadⁱᵐᵖˡ : val.

Axiom pipe__closeWriteⁱᵐᵖˡ : val.

Axiom pipe__readⁱᵐᵖˡ : val.

Axiom pipe__readCloseErrorⁱᵐᵖˡ : val.

Axiom pipe__writeⁱᵐᵖˡ : val.

Axiom pipe__writeCloseErrorⁱᵐᵖˡ : val.

Axiom PipeReader__Closeⁱᵐᵖˡ : val.

Axiom PipeReader__CloseWithErrorⁱᵐᵖˡ : val.

Axiom PipeReader__Readⁱᵐᵖˡ : val.

Axiom PipeReader__closeReadⁱᵐᵖˡ : val.

Axiom PipeReader__closeWriteⁱᵐᵖˡ : val.

Axiom PipeReader__readⁱᵐᵖˡ : val.

Axiom PipeReader__readCloseErrorⁱᵐᵖˡ : val.

Axiom PipeReader__writeⁱᵐᵖˡ : val.

Axiom PipeReader__writeCloseErrorⁱᵐᵖˡ : val.

Axiom PipeWriter__Closeⁱᵐᵖˡ : val.

Axiom PipeWriter__CloseWithErrorⁱᵐᵖˡ : val.

Axiom PipeWriter__Writeⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(LimitedReader.id, []); (ptrT.id LimitedReader.id, [("Read"%go, LimitedReader__Readⁱᵐᵖˡ)]); (SectionReader.id, []); (ptrT.id SectionReader.id, [("Outer"%go, SectionReader__Outerⁱᵐᵖˡ); ("Read"%go, SectionReader__Readⁱᵐᵖˡ); ("ReadAt"%go, SectionReader__ReadAtⁱᵐᵖˡ); ("Seek"%go, SectionReader__Seekⁱᵐᵖˡ); ("Size"%go, SectionReader__Sizeⁱᵐᵖˡ)]); (OffsetWriter.id, []); (ptrT.id OffsetWriter.id, [("Seek"%go, OffsetWriter__Seekⁱᵐᵖˡ); ("Write"%go, OffsetWriter__Writeⁱᵐᵖˡ); ("WriteAt"%go, OffsetWriter__WriteAtⁱᵐᵖˡ)]); (teeReader.id, []); (ptrT.id teeReader.id, [("Read"%go, teeReader__Readⁱᵐᵖˡ)]); (discard.id, [("ReadFrom"%go, discard__ReadFromⁱᵐᵖˡ); ("Write"%go, discard__Writeⁱᵐᵖˡ); ("WriteString"%go, discard__WriteStringⁱᵐᵖˡ)]); (ptrT.id discard.id, [("ReadFrom"%go, discard__ReadFromⁱᵐᵖˡ); ("Write"%go, discard__Writeⁱᵐᵖˡ); ("WriteString"%go, discard__WriteStringⁱᵐᵖˡ)]); (nopCloser.id, [("Close"%go, nopCloser__Closeⁱᵐᵖˡ); ("Read"%go, nopCloser__Readⁱᵐᵖˡ)]); (ptrT.id nopCloser.id, [("Close"%go, nopCloser__Closeⁱᵐᵖˡ); ("Read"%go, nopCloser__Readⁱᵐᵖˡ)]); (nopCloserWriterTo.id, [("Close"%go, nopCloserWriterTo__Closeⁱᵐᵖˡ); ("Read"%go, nopCloserWriterTo__Readⁱᵐᵖˡ); ("WriteTo"%go, nopCloserWriterTo__WriteToⁱᵐᵖˡ)]); (ptrT.id nopCloserWriterTo.id, [("Close"%go, nopCloserWriterTo__Closeⁱᵐᵖˡ); ("Read"%go, nopCloserWriterTo__Readⁱᵐᵖˡ); ("WriteTo"%go, nopCloserWriterTo__WriteToⁱᵐᵖˡ)]); (eofReader.id, [("Read"%go, eofReader__Readⁱᵐᵖˡ)]); (ptrT.id eofReader.id, [("Read"%go, eofReader__Readⁱᵐᵖˡ)]); (multiReader.id, []); (ptrT.id multiReader.id, [("Read"%go, multiReader__Readⁱᵐᵖˡ); ("WriteTo"%go, multiReader__WriteToⁱᵐᵖˡ); ("writeToWithBuffer"%go, multiReader__writeToWithBufferⁱᵐᵖˡ)]); (multiWriter.id, []); (ptrT.id multiWriter.id, [("Write"%go, multiWriter__Writeⁱᵐᵖˡ); ("WriteString"%go, multiWriter__WriteStringⁱᵐᵖˡ)]); (onceError.id, []); (ptrT.id onceError.id, [("Load"%go, onceError__Loadⁱᵐᵖˡ); ("Lock"%go, onceError__Lockⁱᵐᵖˡ); ("Store"%go, onceError__Storeⁱᵐᵖˡ); ("TryLock"%go, onceError__TryLockⁱᵐᵖˡ); ("Unlock"%go, onceError__Unlockⁱᵐᵖˡ)]); (pipe.id, []); (ptrT.id pipe.id, [("closeRead"%go, pipe__closeReadⁱᵐᵖˡ); ("closeWrite"%go, pipe__closeWriteⁱᵐᵖˡ); ("read"%go, pipe__readⁱᵐᵖˡ); ("readCloseError"%go, pipe__readCloseErrorⁱᵐᵖˡ); ("write"%go, pipe__writeⁱᵐᵖˡ); ("writeCloseError"%go, pipe__writeCloseErrorⁱᵐᵖˡ)]); (PipeReader.id, []); (ptrT.id PipeReader.id, [("Close"%go, PipeReader__Closeⁱᵐᵖˡ); ("CloseWithError"%go, PipeReader__CloseWithErrorⁱᵐᵖˡ); ("Read"%go, PipeReader__Readⁱᵐᵖˡ); ("closeRead"%go, PipeReader__closeReadⁱᵐᵖˡ); ("closeWrite"%go, PipeReader__closeWriteⁱᵐᵖˡ); ("read"%go, PipeReader__readⁱᵐᵖˡ); ("readCloseError"%go, PipeReader__readCloseErrorⁱᵐᵖˡ); ("write"%go, PipeReader__writeⁱᵐᵖˡ); ("writeCloseError"%go, PipeReader__writeCloseErrorⁱᵐᵖˡ)]); (PipeWriter.id, []); (ptrT.id PipeWriter.id, [("Close"%go, PipeWriter__Closeⁱᵐᵖˡ); ("CloseWithError"%go, PipeWriter__CloseWithErrorⁱᵐᵖˡ); ("Write"%go, PipeWriter__Writeⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo io.io :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [code.errors.errors; code.sync.sync];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #io.io (λ: <>,
      exception_do (do:  (sync.initialize' #());;;
      do:  (errors.initialize' #());;;
      do:  (package.alloc io.io #());;;
      do:  (ErrShortWrite'init #());;;
      do:  (errInvalidWrite'init #());;;
      do:  (ErrShortBuffer'init #());;;
      do:  (EOF'init #());;;
      do:  (ErrUnexpectedEOF'init #());;;
      do:  (ErrNoProgress'init #());;;
      do:  (errWhence'init #());;;
      do:  (errOffset'init #());;;
      do:  (Discard'init #());;;
      do:  (_'init #());;;
      do:  (blackHolePool'init #());;;
      do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (ErrClosedPipe'init #()))
      ).

End code.
End io.
