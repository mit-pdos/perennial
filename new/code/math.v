(* autogenerated from math *)
From New.golang Require Import defn.

Definition math : go_string := "math".

Module math.
Section code.
Context `{ffi_syntax}.


(* 9223372036854775807 *)
Definition MaxInt64 : Z := 9223372036854775808 - 1.

(* 18446744073709551615 *)
Definition MaxUint64 : Z := 18446744073709551616 - 1.

Axiom useFMA'init : val.

Axiom _gamP'init : val.

Axiom _gamQ'init : val.

Axiom _gamS'init : val.

Axiom p0R8'init : val.

Axiom p0S8'init : val.

Axiom p0R5'init : val.

Axiom p0S5'init : val.

Axiom p0R3'init : val.

Axiom p0S3'init : val.

Axiom p0R2'init : val.

Axiom p0S2'init : val.

Axiom q0R8'init : val.

Axiom q0S8'init : val.

Axiom q0R5'init : val.

Axiom q0S5'init : val.

Axiom q0R3'init : val.

Axiom q0S3'init : val.

Axiom q0R2'init : val.

Axiom q0S2'init : val.

Axiom p1R8'init : val.

Axiom p1S8'init : val.

Axiom p1R5'init : val.

Axiom p1S5'init : val.

Axiom p1R3'init : val.

Axiom p1S3'init : val.

Axiom p1R2'init : val.

Axiom p1S2'init : val.

Axiom q1R8'init : val.

Axiom q1S8'init : val.

Axiom q1R5'init : val.

Axiom q1S5'init : val.

Axiom q1R3'init : val.

Axiom q1S3'init : val.

Axiom q1R2'init : val.

Axiom q1S2'init : val.

Axiom _lgamA'init : val.

Axiom _lgamR'init : val.

Axiom _lgamS'init : val.

Axiom _lgamT'init : val.

Axiom _lgamU'init : val.

Axiom _lgamV'init : val.

Axiom _lgamW'init : val.

Axiom pow10tab'init : val.

Axiom pow10postab32'init : val.

Axiom pow10negtab32'init : val.

Axiom _sin'init : val.

Axiom _cos'init : val.

Axiom _tanP'init : val.

Axiom _tanQ'init : val.

Axiom tanhP'init : val.

Axiom tanhQ'init : val.

Axiom mPi4'init : val.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [].

#[global] Instance info' : PkgInfo math.math :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init math.math (Î»: <>,
      exception_do (do:  (useFMA'init #());;;
      do:  (_gamP'init #());;;
      do:  (_gamQ'init #());;;
      do:  (_gamS'init #());;;
      do:  (p0R8'init #());;;
      do:  (p0S8'init #());;;
      do:  (p0R5'init #());;;
      do:  (p0S5'init #());;;
      do:  (p0R3'init #());;;
      do:  (p0S3'init #());;;
      do:  (p0R2'init #());;;
      do:  (p0S2'init #());;;
      do:  (q0R8'init #());;;
      do:  (q0S8'init #());;;
      do:  (q0R5'init #());;;
      do:  (q0S5'init #());;;
      do:  (q0R3'init #());;;
      do:  (q0S3'init #());;;
      do:  (q0R2'init #());;;
      do:  (q0S2'init #());;;
      do:  (p1R8'init #());;;
      do:  (p1S8'init #());;;
      do:  (p1R5'init #());;;
      do:  (p1S5'init #());;;
      do:  (p1R3'init #());;;
      do:  (p1S3'init #());;;
      do:  (p1R2'init #());;;
      do:  (p1S2'init #());;;
      do:  (q1R8'init #());;;
      do:  (q1S8'init #());;;
      do:  (q1R5'init #());;;
      do:  (q1S5'init #());;;
      do:  (q1R3'init #());;;
      do:  (q1S3'init #());;;
      do:  (q1R2'init #());;;
      do:  (q1S2'init #());;;
      do:  (_lgamA'init #());;;
      do:  (_lgamR'init #());;;
      do:  (_lgamS'init #());;;
      do:  (_lgamT'init #());;;
      do:  (_lgamU'init #());;;
      do:  (_lgamV'init #());;;
      do:  (_lgamW'init #());;;
      do:  (pow10tab'init #());;;
      do:  (pow10postab32'init #());;;
      do:  (pow10negtab32'init #());;;
      do:  (_sin'init #());;;
      do:  (_cos'init #());;;
      do:  (_tanP'init #());;;
      do:  (_tanQ'init #());;;
      do:  (tanhP'init #());;;
      do:  (tanhQ'init #());;;
      do:  (mPi4'init #()))
      ).

End code.
End math.
