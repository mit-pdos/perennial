(* autogenerated from slices *)

From New.golang Require Import defn.
Definition slices : go_string := "slices".

Module slices.

Module sortedHint. Definition id : go_string := "slices.sortedHint"%go. End sortedHint.
Module xorshift. Definition id : go_string := "slices.xorshift"%go. End xorshift.

Section code.
Context `{ffi_syntax}.


Definition All : go_string := "slices.All"%go.

Definition Backward : go_string := "slices.Backward"%go.

Definition Values : go_string := "slices.Values"%go.

Definition AppendSeq : go_string := "slices.AppendSeq"%go.

Definition Collect : go_string := "slices.Collect"%go.

Definition Sorted : go_string := "slices.Sorted"%go.

Definition SortedFunc : go_string := "slices.SortedFunc"%go.

Definition SortedStableFunc : go_string := "slices.SortedStableFunc"%go.

Definition Chunk : go_string := "slices.Chunk"%go.

Definition Equal : go_string := "slices.Equal"%go.

Definition EqualFunc : go_string := "slices.EqualFunc"%go.

Definition Compare : go_string := "slices.Compare"%go.

Definition CompareFunc : go_string := "slices.CompareFunc"%go.

Definition Index : go_string := "slices.Index"%go.

Definition IndexFunc : go_string := "slices.IndexFunc"%go.

Definition Contains : go_string := "slices.Contains"%go.

Definition ContainsFunc : go_string := "slices.ContainsFunc"%go.

Definition Insert : go_string := "slices.Insert"%go.

Definition Delete : go_string := "slices.Delete"%go.

Definition DeleteFunc : go_string := "slices.DeleteFunc"%go.

Definition Replace : go_string := "slices.Replace"%go.

Definition Clone : go_string := "slices.Clone"%go.

Definition Compact : go_string := "slices.Compact"%go.

Definition CompactFunc : go_string := "slices.CompactFunc"%go.

Definition Grow : go_string := "slices.Grow"%go.

Definition Clip : go_string := "slices.Clip"%go.

Definition rotateLeft : go_string := "slices.rotateLeft"%go.

Definition rotateRight : go_string := "slices.rotateRight"%go.

Definition overlaps : go_string := "slices.overlaps"%go.

Definition startIdx : go_string := "slices.startIdx"%go.

Definition Reverse : go_string := "slices.Reverse"%go.

Definition Concat : go_string := "slices.Concat"%go.

Definition Repeat : go_string := "slices.Repeat"%go.

Definition Sort : go_string := "slices.Sort"%go.

Definition SortFunc : go_string := "slices.SortFunc"%go.

Definition SortStableFunc : go_string := "slices.SortStableFunc"%go.

Definition IsSorted : go_string := "slices.IsSorted"%go.

Definition IsSortedFunc : go_string := "slices.IsSortedFunc"%go.

Definition Min : go_string := "slices.Min"%go.

Definition MinFunc : go_string := "slices.MinFunc"%go.

Definition Max : go_string := "slices.Max"%go.

Definition MaxFunc : go_string := "slices.MaxFunc"%go.

Definition BinarySearch : go_string := "slices.BinarySearch"%go.

Definition BinarySearchFunc : go_string := "slices.BinarySearchFunc"%go.

Axiom sortedHint : go_type.

Axiom unknownHint : val.

Axiom increasingHint : val.

Axiom decreasingHint : val.

Axiom xorshift : go_type.

Definition nextPowerOfTwo : go_string := "slices.nextPowerOfTwo"%go.

Definition isNaN : go_string := "slices.isNaN"%go.

Definition insertionSortCmpFunc : go_string := "slices.insertionSortCmpFunc"%go.

Definition siftDownCmpFunc : go_string := "slices.siftDownCmpFunc"%go.

Definition heapSortCmpFunc : go_string := "slices.heapSortCmpFunc"%go.

Definition pdqsortCmpFunc : go_string := "slices.pdqsortCmpFunc"%go.

Definition partitionCmpFunc : go_string := "slices.partitionCmpFunc"%go.

Definition partitionEqualCmpFunc : go_string := "slices.partitionEqualCmpFunc"%go.

Definition partialInsertionSortCmpFunc : go_string := "slices.partialInsertionSortCmpFunc"%go.

Definition breakPatternsCmpFunc : go_string := "slices.breakPatternsCmpFunc"%go.

Definition choosePivotCmpFunc : go_string := "slices.choosePivotCmpFunc"%go.

Definition order2CmpFunc : go_string := "slices.order2CmpFunc"%go.

Definition medianCmpFunc : go_string := "slices.medianCmpFunc"%go.

Definition medianAdjacentCmpFunc : go_string := "slices.medianAdjacentCmpFunc"%go.

Definition reverseRangeCmpFunc : go_string := "slices.reverseRangeCmpFunc"%go.

Definition swapRangeCmpFunc : go_string := "slices.swapRangeCmpFunc"%go.

Definition stableCmpFunc : go_string := "slices.stableCmpFunc"%go.

Definition symMergeCmpFunc : go_string := "slices.symMergeCmpFunc"%go.

Definition rotateCmpFunc : go_string := "slices.rotateCmpFunc"%go.

Definition insertionSortOrdered : go_string := "slices.insertionSortOrdered"%go.

Definition siftDownOrdered : go_string := "slices.siftDownOrdered"%go.

Definition heapSortOrdered : go_string := "slices.heapSortOrdered"%go.

Definition pdqsortOrdered : go_string := "slices.pdqsortOrdered"%go.

Definition partitionOrdered : go_string := "slices.partitionOrdered"%go.

Definition partitionEqualOrdered : go_string := "slices.partitionEqualOrdered"%go.

Definition partialInsertionSortOrdered : go_string := "slices.partialInsertionSortOrdered"%go.

Definition breakPatternsOrdered : go_string := "slices.breakPatternsOrdered"%go.

Definition choosePivotOrdered : go_string := "slices.choosePivotOrdered"%go.

Definition order2Ordered : go_string := "slices.order2Ordered"%go.

Definition medianOrdered : go_string := "slices.medianOrdered"%go.

Definition medianAdjacentOrdered : go_string := "slices.medianAdjacentOrdered"%go.

Definition reverseRangeOrdered : go_string := "slices.reverseRangeOrdered"%go.

Definition swapRangeOrdered : go_string := "slices.swapRangeOrdered"%go.

Definition stableOrdered : go_string := "slices.stableOrdered"%go.

Definition symMergeOrdered : go_string := "slices.symMergeOrdered"%go.

Definition rotateOrdered : go_string := "slices.rotateOrdered"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom Allⁱᵐᵖˡ : val.

Axiom Backwardⁱᵐᵖˡ : val.

Axiom Valuesⁱᵐᵖˡ : val.

Axiom AppendSeqⁱᵐᵖˡ : val.

Axiom Collectⁱᵐᵖˡ : val.

Axiom Sortedⁱᵐᵖˡ : val.

Axiom SortedFuncⁱᵐᵖˡ : val.

Axiom SortedStableFuncⁱᵐᵖˡ : val.

Axiom Chunkⁱᵐᵖˡ : val.

Axiom Equalⁱᵐᵖˡ : val.

Axiom EqualFuncⁱᵐᵖˡ : val.

Axiom Compareⁱᵐᵖˡ : val.

Axiom CompareFuncⁱᵐᵖˡ : val.

Axiom Indexⁱᵐᵖˡ : val.

Axiom IndexFuncⁱᵐᵖˡ : val.

Axiom Containsⁱᵐᵖˡ : val.

Axiom ContainsFuncⁱᵐᵖˡ : val.

Axiom Insertⁱᵐᵖˡ : val.

Axiom Deleteⁱᵐᵖˡ : val.

Axiom DeleteFuncⁱᵐᵖˡ : val.

Axiom Replaceⁱᵐᵖˡ : val.

Axiom Cloneⁱᵐᵖˡ : val.

Axiom Compactⁱᵐᵖˡ : val.

Axiom CompactFuncⁱᵐᵖˡ : val.

Axiom Growⁱᵐᵖˡ : val.

Axiom Clipⁱᵐᵖˡ : val.

Axiom rotateLeftⁱᵐᵖˡ : val.

Axiom rotateRightⁱᵐᵖˡ : val.

Axiom overlapsⁱᵐᵖˡ : val.

Axiom startIdxⁱᵐᵖˡ : val.

Axiom Reverseⁱᵐᵖˡ : val.

Axiom Concatⁱᵐᵖˡ : val.

Axiom Repeatⁱᵐᵖˡ : val.

Axiom Sortⁱᵐᵖˡ : val.

Axiom SortFuncⁱᵐᵖˡ : val.

Axiom SortStableFuncⁱᵐᵖˡ : val.

Axiom IsSortedⁱᵐᵖˡ : val.

Axiom IsSortedFuncⁱᵐᵖˡ : val.

Axiom Minⁱᵐᵖˡ : val.

Axiom MinFuncⁱᵐᵖˡ : val.

Axiom Maxⁱᵐᵖˡ : val.

Axiom MaxFuncⁱᵐᵖˡ : val.

Axiom BinarySearchⁱᵐᵖˡ : val.

Axiom BinarySearchFuncⁱᵐᵖˡ : val.

Axiom nextPowerOfTwoⁱᵐᵖˡ : val.

Axiom isNaNⁱᵐᵖˡ : val.

Axiom insertionSortCmpFuncⁱᵐᵖˡ : val.

Axiom siftDownCmpFuncⁱᵐᵖˡ : val.

Axiom heapSortCmpFuncⁱᵐᵖˡ : val.

Axiom pdqsortCmpFuncⁱᵐᵖˡ : val.

Axiom partitionCmpFuncⁱᵐᵖˡ : val.

Axiom partitionEqualCmpFuncⁱᵐᵖˡ : val.

Axiom partialInsertionSortCmpFuncⁱᵐᵖˡ : val.

Axiom breakPatternsCmpFuncⁱᵐᵖˡ : val.

Axiom choosePivotCmpFuncⁱᵐᵖˡ : val.

Axiom order2CmpFuncⁱᵐᵖˡ : val.

Axiom medianCmpFuncⁱᵐᵖˡ : val.

Axiom medianAdjacentCmpFuncⁱᵐᵖˡ : val.

Axiom reverseRangeCmpFuncⁱᵐᵖˡ : val.

Axiom swapRangeCmpFuncⁱᵐᵖˡ : val.

Axiom stableCmpFuncⁱᵐᵖˡ : val.

Axiom symMergeCmpFuncⁱᵐᵖˡ : val.

Axiom rotateCmpFuncⁱᵐᵖˡ : val.

Axiom insertionSortOrderedⁱᵐᵖˡ : val.

Axiom siftDownOrderedⁱᵐᵖˡ : val.

Axiom heapSortOrderedⁱᵐᵖˡ : val.

Axiom pdqsortOrderedⁱᵐᵖˡ : val.

Axiom partitionOrderedⁱᵐᵖˡ : val.

Axiom partitionEqualOrderedⁱᵐᵖˡ : val.

Axiom partialInsertionSortOrderedⁱᵐᵖˡ : val.

Axiom breakPatternsOrderedⁱᵐᵖˡ : val.

Axiom choosePivotOrderedⁱᵐᵖˡ : val.

Axiom order2Orderedⁱᵐᵖˡ : val.

Axiom medianOrderedⁱᵐᵖˡ : val.

Axiom medianAdjacentOrderedⁱᵐᵖˡ : val.

Axiom reverseRangeOrderedⁱᵐᵖˡ : val.

Axiom swapRangeOrderedⁱᵐᵖˡ : val.

Axiom stableOrderedⁱᵐᵖˡ : val.

Axiom symMergeOrderedⁱᵐᵖˡ : val.

Axiom rotateOrderedⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(All, Allⁱᵐᵖˡ); (Backward, Backwardⁱᵐᵖˡ); (Values, Valuesⁱᵐᵖˡ); (AppendSeq, AppendSeqⁱᵐᵖˡ); (Collect, Collectⁱᵐᵖˡ); (Sorted, Sortedⁱᵐᵖˡ); (SortedFunc, SortedFuncⁱᵐᵖˡ); (SortedStableFunc, SortedStableFuncⁱᵐᵖˡ); (Chunk, Chunkⁱᵐᵖˡ); (Equal, Equalⁱᵐᵖˡ); (EqualFunc, EqualFuncⁱᵐᵖˡ); (Compare, Compareⁱᵐᵖˡ); (CompareFunc, CompareFuncⁱᵐᵖˡ); (Index, Indexⁱᵐᵖˡ); (IndexFunc, IndexFuncⁱᵐᵖˡ); (Contains, Containsⁱᵐᵖˡ); (ContainsFunc, ContainsFuncⁱᵐᵖˡ); (Insert, Insertⁱᵐᵖˡ); (Delete, Deleteⁱᵐᵖˡ); (DeleteFunc, DeleteFuncⁱᵐᵖˡ); (Replace, Replaceⁱᵐᵖˡ); (Clone, Cloneⁱᵐᵖˡ); (Compact, Compactⁱᵐᵖˡ); (CompactFunc, CompactFuncⁱᵐᵖˡ); (Grow, Growⁱᵐᵖˡ); (Clip, Clipⁱᵐᵖˡ); (rotateLeft, rotateLeftⁱᵐᵖˡ); (rotateRight, rotateRightⁱᵐᵖˡ); (overlaps, overlapsⁱᵐᵖˡ); (startIdx, startIdxⁱᵐᵖˡ); (Reverse, Reverseⁱᵐᵖˡ); (Concat, Concatⁱᵐᵖˡ); (Repeat, Repeatⁱᵐᵖˡ); (Sort, Sortⁱᵐᵖˡ); (SortFunc, SortFuncⁱᵐᵖˡ); (SortStableFunc, SortStableFuncⁱᵐᵖˡ); (IsSorted, IsSortedⁱᵐᵖˡ); (IsSortedFunc, IsSortedFuncⁱᵐᵖˡ); (Min, Minⁱᵐᵖˡ); (MinFunc, MinFuncⁱᵐᵖˡ); (Max, Maxⁱᵐᵖˡ); (MaxFunc, MaxFuncⁱᵐᵖˡ); (BinarySearch, BinarySearchⁱᵐᵖˡ); (BinarySearchFunc, BinarySearchFuncⁱᵐᵖˡ); (nextPowerOfTwo, nextPowerOfTwoⁱᵐᵖˡ); (isNaN, isNaNⁱᵐᵖˡ); (insertionSortCmpFunc, insertionSortCmpFuncⁱᵐᵖˡ); (siftDownCmpFunc, siftDownCmpFuncⁱᵐᵖˡ); (heapSortCmpFunc, heapSortCmpFuncⁱᵐᵖˡ); (pdqsortCmpFunc, pdqsortCmpFuncⁱᵐᵖˡ); (partitionCmpFunc, partitionCmpFuncⁱᵐᵖˡ); (partitionEqualCmpFunc, partitionEqualCmpFuncⁱᵐᵖˡ); (partialInsertionSortCmpFunc, partialInsertionSortCmpFuncⁱᵐᵖˡ); (breakPatternsCmpFunc, breakPatternsCmpFuncⁱᵐᵖˡ); (choosePivotCmpFunc, choosePivotCmpFuncⁱᵐᵖˡ); (order2CmpFunc, order2CmpFuncⁱᵐᵖˡ); (medianCmpFunc, medianCmpFuncⁱᵐᵖˡ); (medianAdjacentCmpFunc, medianAdjacentCmpFuncⁱᵐᵖˡ); (reverseRangeCmpFunc, reverseRangeCmpFuncⁱᵐᵖˡ); (swapRangeCmpFunc, swapRangeCmpFuncⁱᵐᵖˡ); (stableCmpFunc, stableCmpFuncⁱᵐᵖˡ); (symMergeCmpFunc, symMergeCmpFuncⁱᵐᵖˡ); (rotateCmpFunc, rotateCmpFuncⁱᵐᵖˡ); (insertionSortOrdered, insertionSortOrderedⁱᵐᵖˡ); (siftDownOrdered, siftDownOrderedⁱᵐᵖˡ); (heapSortOrdered, heapSortOrderedⁱᵐᵖˡ); (pdqsortOrdered, pdqsortOrderedⁱᵐᵖˡ); (partitionOrdered, partitionOrderedⁱᵐᵖˡ); (partitionEqualOrdered, partitionEqualOrderedⁱᵐᵖˡ); (partialInsertionSortOrdered, partialInsertionSortOrderedⁱᵐᵖˡ); (breakPatternsOrdered, breakPatternsOrderedⁱᵐᵖˡ); (choosePivotOrdered, choosePivotOrderedⁱᵐᵖˡ); (order2Ordered, order2Orderedⁱᵐᵖˡ); (medianOrdered, medianOrderedⁱᵐᵖˡ); (medianAdjacentOrdered, medianAdjacentOrderedⁱᵐᵖˡ); (reverseRangeOrdered, reverseRangeOrderedⁱᵐᵖˡ); (swapRangeOrdered, swapRangeOrderedⁱᵐᵖˡ); (stableOrdered, stableOrderedⁱᵐᵖˡ); (symMergeOrdered, symMergeOrderedⁱᵐᵖˡ); (rotateOrdered, rotateOrderedⁱᵐᵖˡ)].

Axiom xorshift__Nextⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(sortedHint.id, []); (ptrT.id sortedHint.id, []); (xorshift.id, []); (ptrT.id xorshift.id, [("Next"%go, xorshift__Nextⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo slices.slices :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #slices.slices (λ: <>,
      exception_do (do:  (package.alloc slices.slices #()))
      ).

End code.
End slices.
