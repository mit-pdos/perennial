(* autogenerated from internal/synctest *)

From New.golang Require Import defn.
Definition synctest : go_string := "internal/synctest".

Module synctest.

Module Association. Definition id : go_string := "internal/synctest.Association"%go. End Association.
Module Bubble. Definition id : go_string := "internal/synctest.Bubble"%go. End Bubble.

Section code.
Context `{ffi_syntax}.


Definition Run : go_string := "internal/synctest.Run"%go.

Definition Wait : go_string := "internal/synctest.Wait"%go.

Definition IsInBubble : go_string := "internal/synctest.IsInBubble"%go.

Axiom Association : go_type.

Axiom Unbubbled : val.

Axiom CurrentBubble : val.

Axiom OtherBubble : val.

Definition Associate : go_string := "internal/synctest.Associate"%go.

Definition associate : go_string := "internal/synctest.associate"%go.

Definition Disassociate : go_string := "internal/synctest.Disassociate"%go.

Definition disassociate : go_string := "internal/synctest.disassociate"%go.

Definition IsAssociated : go_string := "internal/synctest.IsAssociated"%go.

Definition isAssociated : go_string := "internal/synctest.isAssociated"%go.

Definition acquire : go_string := "internal/synctest.acquire"%go.

Definition release : go_string := "internal/synctest.release"%go.

Definition inBubble : go_string := "internal/synctest.inBubble"%go.

Axiom Bubble : go_type.

Definition Acquire : go_string := "internal/synctest.Acquire"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom Runⁱᵐᵖˡ : val.

Axiom Waitⁱᵐᵖˡ : val.

Axiom IsInBubbleⁱᵐᵖˡ : val.

Axiom Associateⁱᵐᵖˡ : val.

Axiom associateⁱᵐᵖˡ : val.

Axiom Disassociateⁱᵐᵖˡ : val.

Axiom disassociateⁱᵐᵖˡ : val.

Axiom IsAssociatedⁱᵐᵖˡ : val.

Axiom isAssociatedⁱᵐᵖˡ : val.

Axiom acquireⁱᵐᵖˡ : val.

Axiom releaseⁱᵐᵖˡ : val.

Axiom inBubbleⁱᵐᵖˡ : val.

Axiom Acquireⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(Run, Runⁱᵐᵖˡ); (Wait, Waitⁱᵐᵖˡ); (IsInBubble, IsInBubbleⁱᵐᵖˡ); (Associate, Associateⁱᵐᵖˡ); (associate, associateⁱᵐᵖˡ); (Disassociate, Disassociateⁱᵐᵖˡ); (disassociate, disassociateⁱᵐᵖˡ); (IsAssociated, IsAssociatedⁱᵐᵖˡ); (isAssociated, isAssociatedⁱᵐᵖˡ); (acquire, acquireⁱᵐᵖˡ); (release, releaseⁱᵐᵖˡ); (inBubble, inBubbleⁱᵐᵖˡ); (Acquire, Acquireⁱᵐᵖˡ)].

Axiom Bubble__Releaseⁱᵐᵖˡ : val.

Axiom Bubble__Runⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(Association.id, []); (ptrT.id Association.id, []); (Bubble.id, []); (ptrT.id Bubble.id, [("Release"%go, Bubble__Releaseⁱᵐᵖˡ); ("Run"%go, Bubble__Runⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo synctest.synctest :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #synctest.synctest (λ: <>,
      exception_do (do:  (package.alloc synctest.synctest #()))
      ).

End code.
End synctest.
