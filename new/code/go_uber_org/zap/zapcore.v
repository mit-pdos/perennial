(* autogenerated from go.uber.org/zap/zapcore *)
From New.golang Require Import defn.

Definition zapcore : go_string := "go.uber.org/zap/zapcore".

Module zapcore.
Section code.
Context `{ffi_syntax}.


Axiom DefaultClock'init : val.

Axiom _sliceEncoderPool'init : val.

Axiom _cePool'init : val.

Axiom _errArrayElemPool'init : val.

Definition FieldType : go_type := uint8T.

Definition Field : go_type := structT [
  "Key" :: stringT;
  "Type" :: FieldType;
  "Integer" :: int64T;
  "String" :: stringT;
  "Interface" :: interfaceT
].

Axiom _jsonPool'init : val.

Axiom nullLiteralBytes'init : val.

Axiom errUnmarshalNilLevel'init : val.

Axiom _levelToColor'init : val.

Axiom _unknownLevelColor'init : val.

Axiom _levelToLowercaseColorString'init : val.

Axiom _levelToCapitalColorString'init : val.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [("FieldType"%go, []); ("FieldType'ptr"%go, []); ("Field"%go, []); ("Field'ptr"%go, [])].

#[global] Instance info' : PkgInfo zapcore.zapcore :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init zapcore.zapcore (Î»: <>,
      exception_do (do:  (DefaultClock'init #());;;
      do:  (_sliceEncoderPool'init #());;;
      do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (_cePool'init #());;;
      do:  (_'init #());;;
      do:  (_errArrayElemPool'init #());;;
      do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (_jsonPool'init #());;;
      do:  (nullLiteralBytes'init #());;;
      do:  (errUnmarshalNilLevel'init #());;;
      do:  (_levelToColor'init #());;;
      do:  (_unknownLevelColor'init #());;;
      do:  (_levelToLowercaseColorString'init #());;;
      do:  (_levelToCapitalColorString'init #());;;
      do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (_'init #()))
      ).

End code.
End zapcore.
