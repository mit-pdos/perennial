(* autogenerated from os *)

From New.golang Require Import defn.
Definition os : go_string := "os".

Module os.

Module readdirMode. Definition id : go_string := "os.readdirMode"%go. End readdirMode.
Module DirEntry. Axiom id : go_string. End DirEntry.
Module dirInfo. Definition id : go_string := "os.dirInfo"%go. End dirInfo.
Module timeout. Definition id : go_string := "os.timeout"%go. End timeout.
Module PathError. Axiom id : go_string. End PathError.
Module SyscallError. Definition id : go_string := "os.SyscallError"%go. End SyscallError.
Module syscallErrorType. Axiom id : go_string. End syscallErrorType.
Module processMode. Definition id : go_string := "os.processMode"%go. End processMode.
Module processStatus. Definition id : go_string := "os.processStatus"%go. End processStatus.
Module Process. Definition id : go_string := "os.Process"%go. End Process.
Module ProcAttr. Definition id : go_string := "os.ProcAttr"%go. End ProcAttr.
Module Signal. Definition id : go_string := "os.Signal"%go. End Signal.
Module ProcessState. Definition id : go_string := "os.ProcessState"%go. End ProcessState.
Module LinkError. Definition id : go_string := "os.LinkError"%go. End LinkError.
Module noReadFrom. Definition id : go_string := "os.noReadFrom"%go. End noReadFrom.
Module fileWithoutReadFrom. Definition id : go_string := "os.fileWithoutReadFrom"%go. End fileWithoutReadFrom.
Module noWriteTo. Definition id : go_string := "os.noWriteTo"%go. End noWriteTo.
Module fileWithoutWriteTo. Definition id : go_string := "os.fileWithoutWriteTo"%go. End fileWithoutWriteTo.
Module dirFS. Definition id : go_string := "os.dirFS"%go. End dirFS.
Module file. Definition id : go_string := "os.file"%go. End file.
Module newFileKind. Definition id : go_string := "os.newFileKind"%go. End newFileKind.
Module unixDirent. Definition id : go_string := "os.unixDirent"%go. End unixDirent.
Module rawConn. Definition id : go_string := "os.rawConn"%go. End rawConn.
Module Root. Definition id : go_string := "os.Root"%go. End Root.
Module rootFS. Definition id : go_string := "os.rootFS"%go. End rootFS.
Module root. Definition id : go_string := "os.root"%go. End root.
Module errSymlink. Definition id : go_string := "os.errSymlink"%go. End errSymlink.
Module sysfdType. Axiom id : go_string. End sysfdType.
Module File. Definition id : go_string := "os.File"%go. End File.
Module FileInfo. Axiom id : go_string. End FileInfo.
Module FileMode. Axiom id : go_string. End FileMode.
Module fileStat. Definition id : go_string := "os.fileStat"%go. End fileStat.

Section code.
Context `{ffi_syntax}.


Axiom readdirMode : go_type.

Axiom readdirName : expr.

Axiom readdirDirEntry : expr.

Axiom readdirFileInfo : expr.

Axiom DirEntry : go_type.

Definition testingForceReadDirLstat : go_string := "os.testingForceReadDirLstat"%go.

Definition ReadDir : go_string := "os.ReadDir"%go.

Definition CopyFS : go_string := "os.CopyFS"%go.

Axiom dirInfo : go_type.

Axiom blockSize : Z.

Definition dirBufPool : go_string := "os.dirBufPool"%go.

Axiom dirBufPool'init : val.

Definition readInt : go_string := "os.readInt"%go.

Definition readIntBE : go_string := "os.readIntBE"%go.

Definition readIntLE : go_string := "os.readIntLE"%go.

Definition direntIno : go_string := "os.direntIno"%go.

Definition direntReclen : go_string := "os.direntReclen"%go.

Definition direntNamlen : go_string := "os.direntNamlen"%go.

Definition direntType : go_string := "os.direntType"%go.

Definition isNoFollowErr : go_string := "os.isNoFollowErr"%go.

Definition Expand : go_string := "os.Expand"%go.

Definition ExpandEnv : go_string := "os.ExpandEnv"%go.

Definition isShellSpecialVar : go_string := "os.isShellSpecialVar"%go.

Definition isAlphaNum : go_string := "os.isAlphaNum"%go.

Definition getShellName : go_string := "os.getShellName"%go.

Definition Getenv : go_string := "os.Getenv"%go.

Definition LookupEnv : go_string := "os.LookupEnv"%go.

Definition Setenv : go_string := "os.Setenv"%go.

Definition Unsetenv : go_string := "os.Unsetenv"%go.

Definition Clearenv : go_string := "os.Clearenv"%go.

Definition Environ : go_string := "os.Environ"%go.

Definition ErrInvalid : go_string := "os.ErrInvalid"%go.

Axiom ErrInvalid'init : val.

Definition ErrPermission : go_string := "os.ErrPermission"%go.

Axiom ErrPermission'init : val.

Definition ErrExist : go_string := "os.ErrExist"%go.

Axiom ErrExist'init : val.

Definition ErrNotExist : go_string := "os.ErrNotExist"%go.

Axiom ErrNotExist'init : val.

Definition ErrClosed : go_string := "os.ErrClosed"%go.

Axiom ErrClosed'init : val.

Definition ErrNoDeadline : go_string := "os.ErrNoDeadline"%go.

Axiom ErrNoDeadline'init : val.

Definition ErrDeadlineExceeded : go_string := "os.ErrDeadlineExceeded"%go.

Axiom ErrDeadlineExceeded'init : val.

Definition errNoDeadline : go_string := "os.errNoDeadline"%go.

Definition errDeadlineExceeded : go_string := "os.errDeadlineExceeded"%go.

Axiom timeout : go_type.

Axiom PathError : go_type.

Axiom SyscallError : go_type.

Definition NewSyscallError : go_string := "os.NewSyscallError"%go.

Definition IsExist : go_string := "os.IsExist"%go.

Definition IsNotExist : go_string := "os.IsNotExist"%go.

Definition IsPermission : go_string := "os.IsPermission"%go.

Definition IsTimeout : go_string := "os.IsTimeout"%go.

Definition underlyingErrorIs : go_string := "os.underlyingErrorIs"%go.

Definition underlyingError : go_string := "os.underlyingError"%go.

Axiom syscallErrorType : go_type.

Axiom errENOSYS : expr.

Axiom errERANGE : expr.

Axiom errENOMEM : expr.

Definition ErrProcessDone : go_string := "os.ErrProcessDone"%go.

Axiom ErrProcessDone'init : val.

Axiom processMode : go_type.

Axiom modePID : expr.

Axiom modeHandle : expr.

Axiom processStatus : go_type.

Axiom statusOK : expr.

Axiom statusDone : expr.

Axiom statusReleased : expr.

Axiom processStatusMask : Z.

Axiom Process : go_type.

Definition newPIDProcess : go_string := "os.newPIDProcess"%go.

Definition newHandleProcess : go_string := "os.newHandleProcess"%go.

Definition newDoneProcess : go_string := "os.newDoneProcess"%go.

Axiom ProcAttr : go_type.

Axiom Signal : go_type.

Definition Getpid : go_string := "os.Getpid"%go.

Definition Getppid : go_string := "os.Getppid"%go.

Definition FindProcess : go_string := "os.FindProcess"%go.

Definition StartProcess : go_string := "os.StartProcess"%go.

Definition Interrupt : go_string := "os.Interrupt"%go.

Axiom Interrupt'init : val.

Definition Kill : go_string := "os.Kill"%go.

Axiom Kill'init : val.

Definition startProcess : go_string := "os.startProcess"%go.

Axiom ProcessState : go_type.

Axiom pidUnset : Z.

Axiom pidReleased : Z.

Definition convertESRCH : go_string := "os.convertESRCH"%go.

Definition findProcess : go_string := "os.findProcess"%go.

Definition Executable : go_string := "os.Executable"%go.

Definition executable : go_string := "os.executable"%go.

Definition Stdin : go_string := "os.Stdin"%go.

Axiom Stdin'init : val.

Definition Stdout : go_string := "os.Stdout"%go.

Axiom Stdout'init : val.

Definition Stderr : go_string := "os.Stderr"%go.

Axiom Stderr'init : val.

Axiom O_RDONLY : expr.

Axiom O_WRONLY : expr.

Axiom O_RDWR : expr.

Axiom O_APPEND : expr.

Axiom O_CREATE : expr.

Axiom O_EXCL : expr.

Axiom O_SYNC : expr.

Axiom O_TRUNC : expr.

Axiom SEEK_SET : expr.

Axiom SEEK_CUR : expr.

Axiom SEEK_END : expr.

Axiom LinkError : go_type.

Axiom noReadFrom : go_type.

Axiom fileWithoutReadFrom : go_type.

Definition genericReadFrom : go_string := "os.genericReadFrom"%go.

Definition errWriteAtInAppendMode : go_string := "os.errWriteAtInAppendMode"%go.

Axiom errWriteAtInAppendMode'init : val.

Axiom noWriteTo : go_type.

Axiom fileWithoutWriteTo : go_type.

Definition genericWriteTo : go_string := "os.genericWriteTo"%go.

Definition Mkdir : go_string := "os.Mkdir"%go.

Definition setStickyBit : go_string := "os.setStickyBit"%go.

Definition Chdir : go_string := "os.Chdir"%go.

Definition Open : go_string := "os.Open"%go.

Definition Create : go_string := "os.Create"%go.

Definition OpenFile : go_string := "os.OpenFile"%go.

Definition errPathEscapes : go_string := "os.errPathEscapes"%go.

Axiom errPathEscapes'init : val.

Definition openDir : go_string := "os.openDir"%go.

Definition lstat : go_string := "os.lstat"%go.

Axiom lstat'init : val.

Definition Rename : go_string := "os.Rename"%go.

Definition Readlink : go_string := "os.Readlink"%go.

Definition fixCount : go_string := "os.fixCount"%go.

Definition checkWrapErr : go_string := "os.checkWrapErr"%go.

Axiom checkWrapErr'init : val.

Definition TempDir : go_string := "os.TempDir"%go.

Definition UserCacheDir : go_string := "os.UserCacheDir"%go.

Definition UserConfigDir : go_string := "os.UserConfigDir"%go.

Definition UserHomeDir : go_string := "os.UserHomeDir"%go.

Definition Chmod : go_string := "os.Chmod"%go.

Definition DirFS : go_string := "os.DirFS"%go.

Axiom dirFS : go_type.

Definition ReadFile : go_string := "os.ReadFile"%go.

Definition readFileContents : go_string := "os.readFileContents"%go.

Definition WriteFile : go_string := "os.WriteFile"%go.

Definition open : go_string := "os.open"%go.

Definition syscallMode : go_string := "os.syscallMode"%go.

Definition chmod : go_string := "os.chmod"%go.

Definition Chown : go_string := "os.Chown"%go.

Definition Lchown : go_string := "os.Lchown"%go.

Definition Chtimes : go_string := "os.Chtimes"%go.

Definition ignoringEINTR : go_string := "os.ignoringEINTR"%go.

Definition ignoringEINTR2 : go_string := "os.ignoringEINTR2"%go.

Axiom _UTIME_OMIT : Z.

Definition fixLongPath : go_string := "os.fixLongPath"%go.

Definition rename : go_string := "os.rename"%go.

Axiom file : go_type.

Definition NewFile : go_string := "os.NewFile"%go.

Definition net_newUnixFile : go_string := "os.net_newUnixFile"%go.

Axiom newFileKind : go_type.

Axiom kindNewFile : expr.

Axiom kindOpenFile : expr.

Axiom kindPipe : expr.

Axiom kindSock : expr.

Axiom kindNoPoll : expr.

Definition newFile : go_string := "os.newFile"%go.

Definition sigpipe : go_string := "os.sigpipe"%go.

Definition epipecheck : go_string := "os.epipecheck"%go.

Axiom DevNull : go_string.

Definition openFileNolog : go_string := "os.openFileNolog"%go.

Definition openDirNolog : go_string := "os.openDirNolog"%go.

Definition Truncate : go_string := "os.Truncate"%go.

Definition Remove : go_string := "os.Remove"%go.

Definition tempDir : go_string := "os.tempDir"%go.

Definition Link : go_string := "os.Link"%go.

Definition Symlink : go_string := "os.Symlink"%go.

Definition readlink : go_string := "os.readlink"%go.

Axiom unixDirent : go_type.

Definition newUnixDirent : go_string := "os.newUnixDirent"%go.

Definition getwdCache : go_string := "os.getwdCache"%go.

Definition Getwd : go_string := "os.Getwd"%go.

Definition MkdirAll : go_string := "os.MkdirAll"%go.

Definition RemoveAll : go_string := "os.RemoveAll"%go.

Definition endsWithDot : go_string := "os.endsWithDot"%go.

Axiom PathSeparator : expr.

Axiom PathListSeparator : expr.

Definition IsPathSeparator : go_string := "os.IsPathSeparator"%go.

Definition splitPath : go_string := "os.splitPath"%go.

Definition ensurePidfd : go_string := "os.ensurePidfd"%go.

Definition getPidfd : go_string := "os.getPidfd"%go.

Definition pidfdFind : go_string := "os.pidfdFind"%go.

Definition pidfdWorks : go_string := "os.pidfdWorks"%go.

Definition checkPidfdOnce : go_string := "os.checkPidfdOnce"%go.

Axiom checkPidfdOnce'init : val.

Definition checkPidfd : go_string := "os.checkPidfd"%go.

Definition checkClonePidfd : go_string := "os.checkClonePidfd"%go.

Definition ignoreSIGSYS : go_string := "os.ignoreSIGSYS"%go.

Definition restoreSIGSYS : go_string := "os.restoreSIGSYS"%go.

Definition Pipe : go_string := "os.Pipe"%go.

Definition Args : go_string := "os.Args"%go.

Definition init : go_string := "os.init"%go.

Definition runtime_args : go_string := "os.runtime_args"%go.

Definition Getuid : go_string := "os.Getuid"%go.

Definition Geteuid : go_string := "os.Geteuid"%go.

Definition Getgid : go_string := "os.Getgid"%go.

Definition Getegid : go_string := "os.Getegid"%go.

Definition Getgroups : go_string := "os.Getgroups"%go.

Definition Exit : go_string := "os.Exit"%go.

Definition runtime_beforeExit : go_string := "os.runtime_beforeExit"%go.

Axiom rawConn : go_type.

Definition newRawConn : go_string := "os.newRawConn"%go.

Definition removeAll : go_string := "os.removeAll"%go.

Definition removeAllFrom : go_string := "os.removeAllFrom"%go.

Definition openDirAt : go_string := "os.openDirAt"%go.

Definition OpenInRoot : go_string := "os.OpenInRoot"%go.

Axiom Root : go_type.

Axiom rootMaxSymlinks : Z.

Definition OpenRoot : go_string := "os.OpenRoot"%go.

Definition splitPathInRoot : go_string := "os.splitPathInRoot"%go.

Axiom rootFS : go_type.

Definition isValidRootFSPath : go_string := "os.isValidRootFSPath"%go.

Definition rootCleanPath : go_string := "os.rootCleanPath"%go.

Axiom root : go_type.

Definition rootMkdir : go_string := "os.rootMkdir"%go.

Definition rootRemove : go_string := "os.rootRemove"%go.

Definition doInRoot : go_string := "os.doInRoot"%go.

Axiom errSymlink : go_type.

Axiom sysfdType : go_type.

Definition openRootNolog : go_string := "os.openRootNolog"%go.

Definition newRoot : go_string := "os.newRoot"%go.

Definition openRootInRoot : go_string := "os.openRootInRoot"%go.

Definition rootOpenFileNolog : go_string := "os.rootOpenFileNolog"%go.

Definition rootOpenDir : go_string := "os.rootOpenDir"%go.

Definition rootStat : go_string := "os.rootStat"%go.

Definition mkdirat : go_string := "os.mkdirat"%go.

Definition removeat : go_string := "os.removeat"%go.

Definition checkSymlink : go_string := "os.checkSymlink"%go.

Definition readlinkat : go_string := "os.readlinkat"%go.

Definition Stat : go_string := "os.Stat"%go.

Definition Lstat : go_string := "os.Lstat"%go.

Definition fillFileStatFromSys : go_string := "os.fillFileStatFromSys"%go.

Definition atime : go_string := "os.atime"%go.

Definition statNolog : go_string := "os.statNolog"%go.

Definition lstatNolog : go_string := "os.lstatNolog"%go.

Axiom supportsCreateWithStickyBit : expr.

Definition Hostname : go_string := "os.Hostname"%go.

Definition hostname : go_string := "os.hostname"%go.

Axiom supportsCloseOnExec : expr.

Definition runtime_rand : go_string := "os.runtime_rand"%go.

Definition nextRandom : go_string := "os.nextRandom"%go.

Definition CreateTemp : go_string := "os.CreateTemp"%go.

Definition errPatternHasSeparator : go_string := "os.errPatternHasSeparator"%go.

Axiom errPatternHasSeparator'init : val.

Definition prefixAndSuffix : go_string := "os.prefixAndSuffix"%go.

Definition MkdirTemp : go_string := "os.MkdirTemp"%go.

Definition joinPath : go_string := "os.joinPath"%go.

Definition Getpagesize : go_string := "os.Getpagesize"%go.

Axiom File : go_type.

Axiom FileInfo : go_type.

Axiom FileMode : go_type.

Axiom ModeDir : expr.

Axiom ModeAppend : expr.

Axiom ModeExclusive : expr.

Axiom ModeTemporary : expr.

Axiom ModeSymlink : expr.

Axiom ModeDevice : expr.

Axiom ModeNamedPipe : expr.

Axiom ModeSocket : expr.

Axiom ModeSetuid : expr.

Axiom ModeSetgid : expr.

Axiom ModeCharDevice : expr.

Axiom ModeSticky : expr.

Axiom ModeIrregular : expr.

Axiom ModeType : expr.

Axiom ModePerm : expr.

Definition SameFile : go_string := "os.SameFile"%go.

Axiom fileStat : go_type.

Definition sameFile : go_string := "os.sameFile"%go.

Definition pollCopyFileRange : go_string := "os.pollCopyFileRange"%go.

Axiom pollCopyFileRange'init : val.

Definition pollSplice : go_string := "os.pollSplice"%go.

Axiom pollSplice'init : val.

Definition getPollFDAndNetwork : go_string := "os.getPollFDAndNetwork"%go.

Definition isUnixOrTCP : go_string := "os.isUnixOrTCP"%go.

Definition wrapSyscallError : go_string := "os.wrapSyscallError"%go.

Definition tryLimitedReader : go_string := "os.tryLimitedReader"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom ReadDirⁱᵐᵖˡ : val.

Axiom CopyFSⁱᵐᵖˡ : val.

Axiom readIntⁱᵐᵖˡ : val.

Axiom readIntBEⁱᵐᵖˡ : val.

Axiom readIntLEⁱᵐᵖˡ : val.

Axiom direntInoⁱᵐᵖˡ : val.

Axiom direntReclenⁱᵐᵖˡ : val.

Axiom direntNamlenⁱᵐᵖˡ : val.

Axiom direntTypeⁱᵐᵖˡ : val.

Axiom isNoFollowErrⁱᵐᵖˡ : val.

Axiom Expandⁱᵐᵖˡ : val.

Axiom ExpandEnvⁱᵐᵖˡ : val.

Axiom isShellSpecialVarⁱᵐᵖˡ : val.

Axiom isAlphaNumⁱᵐᵖˡ : val.

Axiom getShellNameⁱᵐᵖˡ : val.

Axiom Getenvⁱᵐᵖˡ : val.

Axiom LookupEnvⁱᵐᵖˡ : val.

Axiom Setenvⁱᵐᵖˡ : val.

Axiom Unsetenvⁱᵐᵖˡ : val.

Axiom Clearenvⁱᵐᵖˡ : val.

Axiom Environⁱᵐᵖˡ : val.

Axiom errNoDeadlineⁱᵐᵖˡ : val.

Axiom errDeadlineExceededⁱᵐᵖˡ : val.

Axiom NewSyscallErrorⁱᵐᵖˡ : val.

Axiom IsExistⁱᵐᵖˡ : val.

Axiom IsNotExistⁱᵐᵖˡ : val.

Axiom IsPermissionⁱᵐᵖˡ : val.

Axiom IsTimeoutⁱᵐᵖˡ : val.

Axiom underlyingErrorIsⁱᵐᵖˡ : val.

Axiom underlyingErrorⁱᵐᵖˡ : val.

Axiom newPIDProcessⁱᵐᵖˡ : val.

Axiom newHandleProcessⁱᵐᵖˡ : val.

Axiom newDoneProcessⁱᵐᵖˡ : val.

Axiom Getpidⁱᵐᵖˡ : val.

Axiom Getppidⁱᵐᵖˡ : val.

Axiom FindProcessⁱᵐᵖˡ : val.

Axiom StartProcessⁱᵐᵖˡ : val.

Axiom startProcessⁱᵐᵖˡ : val.

Axiom convertESRCHⁱᵐᵖˡ : val.

Axiom findProcessⁱᵐᵖˡ : val.

Axiom Executableⁱᵐᵖˡ : val.

Axiom executableⁱᵐᵖˡ : val.

Axiom genericReadFromⁱᵐᵖˡ : val.

Axiom genericWriteToⁱᵐᵖˡ : val.

Axiom Mkdirⁱᵐᵖˡ : val.

Axiom setStickyBitⁱᵐᵖˡ : val.

Axiom Chdirⁱᵐᵖˡ : val.

Axiom Openⁱᵐᵖˡ : val.

Axiom Createⁱᵐᵖˡ : val.

Axiom OpenFileⁱᵐᵖˡ : val.

Axiom openDirⁱᵐᵖˡ : val.

Axiom Renameⁱᵐᵖˡ : val.

Axiom Readlinkⁱᵐᵖˡ : val.

Axiom fixCountⁱᵐᵖˡ : val.

Axiom TempDirⁱᵐᵖˡ : val.

Axiom UserCacheDirⁱᵐᵖˡ : val.

Axiom UserConfigDirⁱᵐᵖˡ : val.

Axiom UserHomeDirⁱᵐᵖˡ : val.

Axiom Chmodⁱᵐᵖˡ : val.

Axiom DirFSⁱᵐᵖˡ : val.

Axiom ReadFileⁱᵐᵖˡ : val.

Axiom readFileContentsⁱᵐᵖˡ : val.

Axiom WriteFileⁱᵐᵖˡ : val.

Axiom openⁱᵐᵖˡ : val.

Axiom syscallModeⁱᵐᵖˡ : val.

Axiom chmodⁱᵐᵖˡ : val.

Axiom Chownⁱᵐᵖˡ : val.

Axiom Lchownⁱᵐᵖˡ : val.

Axiom Chtimesⁱᵐᵖˡ : val.

Axiom ignoringEINTRⁱᵐᵖˡ : val.

Axiom ignoringEINTR2ⁱᵐᵖˡ : val.

Axiom fixLongPathⁱᵐᵖˡ : val.

Axiom renameⁱᵐᵖˡ : val.

Axiom NewFileⁱᵐᵖˡ : val.

Axiom net_newUnixFileⁱᵐᵖˡ : val.

Axiom newFileⁱᵐᵖˡ : val.

Axiom sigpipeⁱᵐᵖˡ : val.

Axiom epipecheckⁱᵐᵖˡ : val.

Axiom openFileNologⁱᵐᵖˡ : val.

Axiom openDirNologⁱᵐᵖˡ : val.

Axiom Truncateⁱᵐᵖˡ : val.

Axiom Removeⁱᵐᵖˡ : val.

Axiom tempDirⁱᵐᵖˡ : val.

Axiom Linkⁱᵐᵖˡ : val.

Axiom Symlinkⁱᵐᵖˡ : val.

Axiom readlinkⁱᵐᵖˡ : val.

Axiom newUnixDirentⁱᵐᵖˡ : val.

Axiom Getwdⁱᵐᵖˡ : val.

Axiom MkdirAllⁱᵐᵖˡ : val.

Axiom RemoveAllⁱᵐᵖˡ : val.

Axiom endsWithDotⁱᵐᵖˡ : val.

Axiom IsPathSeparatorⁱᵐᵖˡ : val.

Axiom splitPathⁱᵐᵖˡ : val.

Axiom ensurePidfdⁱᵐᵖˡ : val.

Axiom getPidfdⁱᵐᵖˡ : val.

Axiom pidfdFindⁱᵐᵖˡ : val.

Axiom pidfdWorksⁱᵐᵖˡ : val.

Axiom checkPidfdⁱᵐᵖˡ : val.

Axiom checkClonePidfdⁱᵐᵖˡ : val.

Axiom ignoreSIGSYSⁱᵐᵖˡ : val.

Axiom restoreSIGSYSⁱᵐᵖˡ : val.

Axiom Pipeⁱᵐᵖˡ : val.

Axiom runtime_argsⁱᵐᵖˡ : val.

Axiom Getuidⁱᵐᵖˡ : val.

Axiom Geteuidⁱᵐᵖˡ : val.

Axiom Getgidⁱᵐᵖˡ : val.

Axiom Getegidⁱᵐᵖˡ : val.

Axiom Getgroupsⁱᵐᵖˡ : val.

Axiom Exitⁱᵐᵖˡ : val.

Axiom runtime_beforeExitⁱᵐᵖˡ : val.

Axiom newRawConnⁱᵐᵖˡ : val.

Axiom removeAllⁱᵐᵖˡ : val.

Axiom removeAllFromⁱᵐᵖˡ : val.

Axiom openDirAtⁱᵐᵖˡ : val.

Axiom OpenInRootⁱᵐᵖˡ : val.

Axiom OpenRootⁱᵐᵖˡ : val.

Axiom splitPathInRootⁱᵐᵖˡ : val.

Axiom isValidRootFSPathⁱᵐᵖˡ : val.

Axiom rootCleanPathⁱᵐᵖˡ : val.

Axiom rootMkdirⁱᵐᵖˡ : val.

Axiom rootRemoveⁱᵐᵖˡ : val.

Axiom doInRootⁱᵐᵖˡ : val.

Axiom openRootNologⁱᵐᵖˡ : val.

Axiom newRootⁱᵐᵖˡ : val.

Axiom openRootInRootⁱᵐᵖˡ : val.

Axiom rootOpenFileNologⁱᵐᵖˡ : val.

Axiom rootOpenDirⁱᵐᵖˡ : val.

Axiom rootStatⁱᵐᵖˡ : val.

Axiom mkdiratⁱᵐᵖˡ : val.

Axiom removeatⁱᵐᵖˡ : val.

Axiom checkSymlinkⁱᵐᵖˡ : val.

Axiom readlinkatⁱᵐᵖˡ : val.

Axiom Statⁱᵐᵖˡ : val.

Axiom Lstatⁱᵐᵖˡ : val.

Axiom fillFileStatFromSysⁱᵐᵖˡ : val.

Axiom atimeⁱᵐᵖˡ : val.

Axiom statNologⁱᵐᵖˡ : val.

Axiom lstatNologⁱᵐᵖˡ : val.

Axiom Hostnameⁱᵐᵖˡ : val.

Axiom hostnameⁱᵐᵖˡ : val.

Axiom runtime_randⁱᵐᵖˡ : val.

Axiom nextRandomⁱᵐᵖˡ : val.

Axiom CreateTempⁱᵐᵖˡ : val.

Axiom prefixAndSuffixⁱᵐᵖˡ : val.

Axiom MkdirTempⁱᵐᵖˡ : val.

Axiom joinPathⁱᵐᵖˡ : val.

Axiom Getpagesizeⁱᵐᵖˡ : val.

Axiom SameFileⁱᵐᵖˡ : val.

Axiom sameFileⁱᵐᵖˡ : val.

Axiom getPollFDAndNetworkⁱᵐᵖˡ : val.

Axiom isUnixOrTCPⁱᵐᵖˡ : val.

Axiom wrapSyscallErrorⁱᵐᵖˡ : val.

Axiom tryLimitedReaderⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(ReadDir, ReadDirⁱᵐᵖˡ); (CopyFS, CopyFSⁱᵐᵖˡ); (readInt, readIntⁱᵐᵖˡ); (readIntBE, readIntBEⁱᵐᵖˡ); (readIntLE, readIntLEⁱᵐᵖˡ); (direntIno, direntInoⁱᵐᵖˡ); (direntReclen, direntReclenⁱᵐᵖˡ); (direntNamlen, direntNamlenⁱᵐᵖˡ); (direntType, direntTypeⁱᵐᵖˡ); (isNoFollowErr, isNoFollowErrⁱᵐᵖˡ); (Expand, Expandⁱᵐᵖˡ); (ExpandEnv, ExpandEnvⁱᵐᵖˡ); (isShellSpecialVar, isShellSpecialVarⁱᵐᵖˡ); (isAlphaNum, isAlphaNumⁱᵐᵖˡ); (getShellName, getShellNameⁱᵐᵖˡ); (Getenv, Getenvⁱᵐᵖˡ); (LookupEnv, LookupEnvⁱᵐᵖˡ); (Setenv, Setenvⁱᵐᵖˡ); (Unsetenv, Unsetenvⁱᵐᵖˡ); (Clearenv, Clearenvⁱᵐᵖˡ); (Environ, Environⁱᵐᵖˡ); (errNoDeadline, errNoDeadlineⁱᵐᵖˡ); (errDeadlineExceeded, errDeadlineExceededⁱᵐᵖˡ); (NewSyscallError, NewSyscallErrorⁱᵐᵖˡ); (IsExist, IsExistⁱᵐᵖˡ); (IsNotExist, IsNotExistⁱᵐᵖˡ); (IsPermission, IsPermissionⁱᵐᵖˡ); (IsTimeout, IsTimeoutⁱᵐᵖˡ); (underlyingErrorIs, underlyingErrorIsⁱᵐᵖˡ); (underlyingError, underlyingErrorⁱᵐᵖˡ); (newPIDProcess, newPIDProcessⁱᵐᵖˡ); (newHandleProcess, newHandleProcessⁱᵐᵖˡ); (newDoneProcess, newDoneProcessⁱᵐᵖˡ); (Getpid, Getpidⁱᵐᵖˡ); (Getppid, Getppidⁱᵐᵖˡ); (FindProcess, FindProcessⁱᵐᵖˡ); (StartProcess, StartProcessⁱᵐᵖˡ); (startProcess, startProcessⁱᵐᵖˡ); (convertESRCH, convertESRCHⁱᵐᵖˡ); (findProcess, findProcessⁱᵐᵖˡ); (Executable, Executableⁱᵐᵖˡ); (executable, executableⁱᵐᵖˡ); (genericReadFrom, genericReadFromⁱᵐᵖˡ); (genericWriteTo, genericWriteToⁱᵐᵖˡ); (Mkdir, Mkdirⁱᵐᵖˡ); (setStickyBit, setStickyBitⁱᵐᵖˡ); (Chdir, Chdirⁱᵐᵖˡ); (Open, Openⁱᵐᵖˡ); (Create, Createⁱᵐᵖˡ); (OpenFile, OpenFileⁱᵐᵖˡ); (openDir, openDirⁱᵐᵖˡ); (Rename, Renameⁱᵐᵖˡ); (Readlink, Readlinkⁱᵐᵖˡ); (fixCount, fixCountⁱᵐᵖˡ); (TempDir, TempDirⁱᵐᵖˡ); (UserCacheDir, UserCacheDirⁱᵐᵖˡ); (UserConfigDir, UserConfigDirⁱᵐᵖˡ); (UserHomeDir, UserHomeDirⁱᵐᵖˡ); (Chmod, Chmodⁱᵐᵖˡ); (DirFS, DirFSⁱᵐᵖˡ); (ReadFile, ReadFileⁱᵐᵖˡ); (readFileContents, readFileContentsⁱᵐᵖˡ); (WriteFile, WriteFileⁱᵐᵖˡ); (open, openⁱᵐᵖˡ); (syscallMode, syscallModeⁱᵐᵖˡ); (chmod, chmodⁱᵐᵖˡ); (Chown, Chownⁱᵐᵖˡ); (Lchown, Lchownⁱᵐᵖˡ); (Chtimes, Chtimesⁱᵐᵖˡ); (ignoringEINTR, ignoringEINTRⁱᵐᵖˡ); (ignoringEINTR2, ignoringEINTR2ⁱᵐᵖˡ); (fixLongPath, fixLongPathⁱᵐᵖˡ); (rename, renameⁱᵐᵖˡ); (NewFile, NewFileⁱᵐᵖˡ); (net_newUnixFile, net_newUnixFileⁱᵐᵖˡ); (newFile, newFileⁱᵐᵖˡ); (sigpipe, sigpipeⁱᵐᵖˡ); (epipecheck, epipecheckⁱᵐᵖˡ); (openFileNolog, openFileNologⁱᵐᵖˡ); (openDirNolog, openDirNologⁱᵐᵖˡ); (Truncate, Truncateⁱᵐᵖˡ); (Remove, Removeⁱᵐᵖˡ); (tempDir, tempDirⁱᵐᵖˡ); (Link, Linkⁱᵐᵖˡ); (Symlink, Symlinkⁱᵐᵖˡ); (readlink, readlinkⁱᵐᵖˡ); (newUnixDirent, newUnixDirentⁱᵐᵖˡ); (Getwd, Getwdⁱᵐᵖˡ); (MkdirAll, MkdirAllⁱᵐᵖˡ); (RemoveAll, RemoveAllⁱᵐᵖˡ); (endsWithDot, endsWithDotⁱᵐᵖˡ); (IsPathSeparator, IsPathSeparatorⁱᵐᵖˡ); (splitPath, splitPathⁱᵐᵖˡ); (ensurePidfd, ensurePidfdⁱᵐᵖˡ); (getPidfd, getPidfdⁱᵐᵖˡ); (pidfdFind, pidfdFindⁱᵐᵖˡ); (pidfdWorks, pidfdWorksⁱᵐᵖˡ); (checkPidfd, checkPidfdⁱᵐᵖˡ); (checkClonePidfd, checkClonePidfdⁱᵐᵖˡ); (ignoreSIGSYS, ignoreSIGSYSⁱᵐᵖˡ); (restoreSIGSYS, restoreSIGSYSⁱᵐᵖˡ); (Pipe, Pipeⁱᵐᵖˡ); (runtime_args, runtime_argsⁱᵐᵖˡ); (Getuid, Getuidⁱᵐᵖˡ); (Geteuid, Geteuidⁱᵐᵖˡ); (Getgid, Getgidⁱᵐᵖˡ); (Getegid, Getegidⁱᵐᵖˡ); (Getgroups, Getgroupsⁱᵐᵖˡ); (Exit, Exitⁱᵐᵖˡ); (runtime_beforeExit, runtime_beforeExitⁱᵐᵖˡ); (newRawConn, newRawConnⁱᵐᵖˡ); (removeAll, removeAllⁱᵐᵖˡ); (removeAllFrom, removeAllFromⁱᵐᵖˡ); (openDirAt, openDirAtⁱᵐᵖˡ); (OpenInRoot, OpenInRootⁱᵐᵖˡ); (OpenRoot, OpenRootⁱᵐᵖˡ); (splitPathInRoot, splitPathInRootⁱᵐᵖˡ); (isValidRootFSPath, isValidRootFSPathⁱᵐᵖˡ); (rootCleanPath, rootCleanPathⁱᵐᵖˡ); (rootMkdir, rootMkdirⁱᵐᵖˡ); (rootRemove, rootRemoveⁱᵐᵖˡ); (doInRoot, doInRootⁱᵐᵖˡ); (openRootNolog, openRootNologⁱᵐᵖˡ); (newRoot, newRootⁱᵐᵖˡ); (openRootInRoot, openRootInRootⁱᵐᵖˡ); (rootOpenFileNolog, rootOpenFileNologⁱᵐᵖˡ); (rootOpenDir, rootOpenDirⁱᵐᵖˡ); (rootStat, rootStatⁱᵐᵖˡ); (mkdirat, mkdiratⁱᵐᵖˡ); (removeat, removeatⁱᵐᵖˡ); (checkSymlink, checkSymlinkⁱᵐᵖˡ); (readlinkat, readlinkatⁱᵐᵖˡ); (Stat, Statⁱᵐᵖˡ); (Lstat, Lstatⁱᵐᵖˡ); (fillFileStatFromSys, fillFileStatFromSysⁱᵐᵖˡ); (atime, atimeⁱᵐᵖˡ); (statNolog, statNologⁱᵐᵖˡ); (lstatNolog, lstatNologⁱᵐᵖˡ); (Hostname, Hostnameⁱᵐᵖˡ); (hostname, hostnameⁱᵐᵖˡ); (runtime_rand, runtime_randⁱᵐᵖˡ); (nextRandom, nextRandomⁱᵐᵖˡ); (CreateTemp, CreateTempⁱᵐᵖˡ); (prefixAndSuffix, prefixAndSuffixⁱᵐᵖˡ); (MkdirTemp, MkdirTempⁱᵐᵖˡ); (joinPath, joinPathⁱᵐᵖˡ); (Getpagesize, Getpagesizeⁱᵐᵖˡ); (SameFile, SameFileⁱᵐᵖˡ); (sameFile, sameFileⁱᵐᵖˡ); (getPollFDAndNetwork, getPollFDAndNetworkⁱᵐᵖˡ); (isUnixOrTCP, isUnixOrTCPⁱᵐᵖˡ); (wrapSyscallError, wrapSyscallErrorⁱᵐᵖˡ); (tryLimitedReader, tryLimitedReaderⁱᵐᵖˡ)].

Axiom dirInfo__closeⁱᵐᵖˡ : val.

Axiom SyscallError__Errorⁱᵐᵖˡ : val.

Axiom SyscallError__Timeoutⁱᵐᵖˡ : val.

Axiom SyscallError__Unwrapⁱᵐᵖˡ : val.

Axiom Process__Killⁱᵐᵖˡ : val.

Axiom Process__Releaseⁱᵐᵖˡ : val.

Axiom Process__Signalⁱᵐᵖˡ : val.

Axiom Process__Waitⁱᵐᵖˡ : val.

Axiom Process__blockUntilWaitableⁱᵐᵖˡ : val.

Axiom Process__closeHandleⁱᵐᵖˡ : val.

Axiom Process__handlePersistentReleaseⁱᵐᵖˡ : val.

Axiom Process__handleTransientAcquireⁱᵐᵖˡ : val.

Axiom Process__handleTransientReleaseⁱᵐᵖˡ : val.

Axiom Process__killⁱᵐᵖˡ : val.

Axiom Process__pidDeactivateⁱᵐᵖˡ : val.

Axiom Process__pidSignalⁱᵐᵖˡ : val.

Axiom Process__pidStatusⁱᵐᵖˡ : val.

Axiom Process__pidWaitⁱᵐᵖˡ : val.

Axiom Process__pidfdSendSignalⁱᵐᵖˡ : val.

Axiom Process__pidfdWaitⁱᵐᵖˡ : val.

Axiom Process__releaseⁱᵐᵖˡ : val.

Axiom Process__signalⁱᵐᵖˡ : val.

Axiom Process__waitⁱᵐᵖˡ : val.

Axiom ProcessState__ExitCodeⁱᵐᵖˡ : val.

Axiom ProcessState__Exitedⁱᵐᵖˡ : val.

Axiom ProcessState__Pidⁱᵐᵖˡ : val.

Axiom ProcessState__Stringⁱᵐᵖˡ : val.

Axiom ProcessState__Successⁱᵐᵖˡ : val.

Axiom ProcessState__Sysⁱᵐᵖˡ : val.

Axiom ProcessState__SysUsageⁱᵐᵖˡ : val.

Axiom ProcessState__SystemTimeⁱᵐᵖˡ : val.

Axiom ProcessState__UserTimeⁱᵐᵖˡ : val.

Axiom ProcessState__exitedⁱᵐᵖˡ : val.

Axiom ProcessState__successⁱᵐᵖˡ : val.

Axiom ProcessState__sysⁱᵐᵖˡ : val.

Axiom ProcessState__sysUsageⁱᵐᵖˡ : val.

Axiom ProcessState__systemTimeⁱᵐᵖˡ : val.

Axiom ProcessState__userTimeⁱᵐᵖˡ : val.

Axiom LinkError__Errorⁱᵐᵖˡ : val.

Axiom LinkError__Unwrapⁱᵐᵖˡ : val.

Axiom noReadFrom__ReadFromⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Chdirⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Chmodⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Chownⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Closeⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Fdⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Nameⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Readⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__ReadAtⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__ReadDirⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Readdirⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Readdirnamesⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Seekⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__SetDeadlineⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__SetReadDeadlineⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__SetWriteDeadlineⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Statⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Syncⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__SyscallConnⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Truncateⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__Writeⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__WriteAtⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__WriteStringⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__WriteToⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__checkValidⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__chmodⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__closeⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__copyFileRangeⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__preadⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__pwriteⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__readⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__readFromⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__readdirⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__seekⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__setDeadlineⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__setReadDeadlineⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__setWriteDeadlineⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__spliceToFileⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__wrapErrⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__writeⁱᵐᵖˡ : val.

Axiom fileWithoutReadFrom__writeToⁱᵐᵖˡ : val.

Axiom noWriteTo__WriteToⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Chdirⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Chmodⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Chownⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Closeⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Fdⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Nameⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Readⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__ReadAtⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__ReadDirⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__ReadFromⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Readdirⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Readdirnamesⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Seekⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__SetDeadlineⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__SetReadDeadlineⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__SetWriteDeadlineⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Statⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Syncⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__SyscallConnⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Truncateⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__Writeⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__WriteAtⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__WriteStringⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__checkValidⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__chmodⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__closeⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__copyFileRangeⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__preadⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__pwriteⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__readⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__readFromⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__readdirⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__seekⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__setDeadlineⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__setReadDeadlineⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__setWriteDeadlineⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__spliceToFileⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__wrapErrⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__writeⁱᵐᵖˡ : val.

Axiom fileWithoutWriteTo__writeToⁱᵐᵖˡ : val.

Axiom dirFS__Openⁱᵐᵖˡ : val.

Axiom dirFS__ReadDirⁱᵐᵖˡ : val.

Axiom dirFS__ReadFileⁱᵐᵖˡ : val.

Axiom dirFS__Statⁱᵐᵖˡ : val.

Axiom dirFS__joinⁱᵐᵖˡ : val.

Axiom file__closeⁱᵐᵖˡ : val.

Axiom unixDirent__Infoⁱᵐᵖˡ : val.

Axiom unixDirent__IsDirⁱᵐᵖˡ : val.

Axiom unixDirent__Nameⁱᵐᵖˡ : val.

Axiom unixDirent__Stringⁱᵐᵖˡ : val.

Axiom unixDirent__Typeⁱᵐᵖˡ : val.

Axiom rawConn__Controlⁱᵐᵖˡ : val.

Axiom rawConn__Readⁱᵐᵖˡ : val.

Axiom rawConn__Writeⁱᵐᵖˡ : val.

Axiom Root__Closeⁱᵐᵖˡ : val.

Axiom Root__Createⁱᵐᵖˡ : val.

Axiom Root__FSⁱᵐᵖˡ : val.

Axiom Root__Lstatⁱᵐᵖˡ : val.

Axiom Root__Mkdirⁱᵐᵖˡ : val.

Axiom Root__Nameⁱᵐᵖˡ : val.

Axiom Root__Openⁱᵐᵖˡ : val.

Axiom Root__OpenFileⁱᵐᵖˡ : val.

Axiom Root__OpenRootⁱᵐᵖˡ : val.

Axiom Root__Removeⁱᵐᵖˡ : val.

Axiom Root__Statⁱᵐᵖˡ : val.

Axiom Root__logOpenⁱᵐᵖˡ : val.

Axiom Root__logStatⁱᵐᵖˡ : val.

Axiom rootFS__Openⁱᵐᵖˡ : val.

Axiom rootFS__ReadDirⁱᵐᵖˡ : val.

Axiom rootFS__ReadFileⁱᵐᵖˡ : val.

Axiom rootFS__Statⁱᵐᵖˡ : val.

Axiom root__Closeⁱᵐᵖˡ : val.

Axiom root__Nameⁱᵐᵖˡ : val.

Axiom root__decrefⁱᵐᵖˡ : val.

Axiom root__increfⁱᵐᵖˡ : val.

Axiom errSymlink__Errorⁱᵐᵖˡ : val.

Axiom File__Chdirⁱᵐᵖˡ : val.

Axiom File__Chmodⁱᵐᵖˡ : val.

Axiom File__Chownⁱᵐᵖˡ : val.

Axiom File__Closeⁱᵐᵖˡ : val.

Axiom File__Fdⁱᵐᵖˡ : val.

Axiom File__Nameⁱᵐᵖˡ : val.

Axiom File__Readⁱᵐᵖˡ : val.

Axiom File__ReadAtⁱᵐᵖˡ : val.

Axiom File__ReadDirⁱᵐᵖˡ : val.

Axiom File__ReadFromⁱᵐᵖˡ : val.

Axiom File__Readdirⁱᵐᵖˡ : val.

Axiom File__Readdirnamesⁱᵐᵖˡ : val.

Axiom File__Seekⁱᵐᵖˡ : val.

Axiom File__SetDeadlineⁱᵐᵖˡ : val.

Axiom File__SetReadDeadlineⁱᵐᵖˡ : val.

Axiom File__SetWriteDeadlineⁱᵐᵖˡ : val.

Axiom File__Statⁱᵐᵖˡ : val.

Axiom File__Syncⁱᵐᵖˡ : val.

Axiom File__SyscallConnⁱᵐᵖˡ : val.

Axiom File__Truncateⁱᵐᵖˡ : val.

Axiom File__Writeⁱᵐᵖˡ : val.

Axiom File__WriteAtⁱᵐᵖˡ : val.

Axiom File__WriteStringⁱᵐᵖˡ : val.

Axiom File__WriteToⁱᵐᵖˡ : val.

Axiom File__checkValidⁱᵐᵖˡ : val.

Axiom File__chmodⁱᵐᵖˡ : val.

Axiom File__closeⁱᵐᵖˡ : val.

Axiom File__copyFileRangeⁱᵐᵖˡ : val.

Axiom File__preadⁱᵐᵖˡ : val.

Axiom File__pwriteⁱᵐᵖˡ : val.

Axiom File__readⁱᵐᵖˡ : val.

Axiom File__readFromⁱᵐᵖˡ : val.

Axiom File__readdirⁱᵐᵖˡ : val.

Axiom File__seekⁱᵐᵖˡ : val.

Axiom File__setDeadlineⁱᵐᵖˡ : val.

Axiom File__setReadDeadlineⁱᵐᵖˡ : val.

Axiom File__setWriteDeadlineⁱᵐᵖˡ : val.

Axiom File__spliceToFileⁱᵐᵖˡ : val.

Axiom File__wrapErrⁱᵐᵖˡ : val.

Axiom File__writeⁱᵐᵖˡ : val.

Axiom File__writeToⁱᵐᵖˡ : val.

Axiom fileStat__IsDirⁱᵐᵖˡ : val.

Axiom fileStat__ModTimeⁱᵐᵖˡ : val.

Axiom fileStat__Modeⁱᵐᵖˡ : val.

Axiom fileStat__Nameⁱᵐᵖˡ : val.

Axiom fileStat__Sizeⁱᵐᵖˡ : val.

Axiom fileStat__Sysⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(readdirMode.id, []); (ptrT.id readdirMode.id, []); (dirInfo.id, []); (ptrT.id dirInfo.id, [("close"%go, dirInfo__closeⁱᵐᵖˡ)]); (SyscallError.id, []); (ptrT.id SyscallError.id, [("Error"%go, SyscallError__Errorⁱᵐᵖˡ); ("Timeout"%go, SyscallError__Timeoutⁱᵐᵖˡ); ("Unwrap"%go, SyscallError__Unwrapⁱᵐᵖˡ)]); (processMode.id, []); (ptrT.id processMode.id, []); (processStatus.id, []); (ptrT.id processStatus.id, []); (Process.id, []); (ptrT.id Process.id, [("Kill"%go, Process__Killⁱᵐᵖˡ); ("Release"%go, Process__Releaseⁱᵐᵖˡ); ("Signal"%go, Process__Signalⁱᵐᵖˡ); ("Wait"%go, Process__Waitⁱᵐᵖˡ); ("blockUntilWaitable"%go, Process__blockUntilWaitableⁱᵐᵖˡ); ("closeHandle"%go, Process__closeHandleⁱᵐᵖˡ); ("handlePersistentRelease"%go, Process__handlePersistentReleaseⁱᵐᵖˡ); ("handleTransientAcquire"%go, Process__handleTransientAcquireⁱᵐᵖˡ); ("handleTransientRelease"%go, Process__handleTransientReleaseⁱᵐᵖˡ); ("kill"%go, Process__killⁱᵐᵖˡ); ("pidDeactivate"%go, Process__pidDeactivateⁱᵐᵖˡ); ("pidSignal"%go, Process__pidSignalⁱᵐᵖˡ); ("pidStatus"%go, Process__pidStatusⁱᵐᵖˡ); ("pidWait"%go, Process__pidWaitⁱᵐᵖˡ); ("pidfdSendSignal"%go, Process__pidfdSendSignalⁱᵐᵖˡ); ("pidfdWait"%go, Process__pidfdWaitⁱᵐᵖˡ); ("release"%go, Process__releaseⁱᵐᵖˡ); ("signal"%go, Process__signalⁱᵐᵖˡ); ("wait"%go, Process__waitⁱᵐᵖˡ)]); (ProcAttr.id, []); (ptrT.id ProcAttr.id, []); (ProcessState.id, []); (ptrT.id ProcessState.id, [("ExitCode"%go, ProcessState__ExitCodeⁱᵐᵖˡ); ("Exited"%go, ProcessState__Exitedⁱᵐᵖˡ); ("Pid"%go, ProcessState__Pidⁱᵐᵖˡ); ("String"%go, ProcessState__Stringⁱᵐᵖˡ); ("Success"%go, ProcessState__Successⁱᵐᵖˡ); ("Sys"%go, ProcessState__Sysⁱᵐᵖˡ); ("SysUsage"%go, ProcessState__SysUsageⁱᵐᵖˡ); ("SystemTime"%go, ProcessState__SystemTimeⁱᵐᵖˡ); ("UserTime"%go, ProcessState__UserTimeⁱᵐᵖˡ); ("exited"%go, ProcessState__exitedⁱᵐᵖˡ); ("success"%go, ProcessState__successⁱᵐᵖˡ); ("sys"%go, ProcessState__sysⁱᵐᵖˡ); ("sysUsage"%go, ProcessState__sysUsageⁱᵐᵖˡ); ("systemTime"%go, ProcessState__systemTimeⁱᵐᵖˡ); ("userTime"%go, ProcessState__userTimeⁱᵐᵖˡ)]); (LinkError.id, []); (ptrT.id LinkError.id, [("Error"%go, LinkError__Errorⁱᵐᵖˡ); ("Unwrap"%go, LinkError__Unwrapⁱᵐᵖˡ)]); (noReadFrom.id, [("ReadFrom"%go, noReadFrom__ReadFromⁱᵐᵖˡ)]); (ptrT.id noReadFrom.id, [("ReadFrom"%go, (λ: "$r",
                 method_call #noReadFrom.id #"ReadFrom"%go (![#noReadFrom] "$r")
                 )%V)]); (fileWithoutReadFrom.id, [("Chdir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Chdir"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("Chmod"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Chmod"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("Chown"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Chown"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("Close"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Close"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("Fd"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Fd"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("Name"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Name"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("Read"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Read"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("ReadAt"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"ReadAt"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("ReadDir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"ReadDir"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("Readdir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Readdir"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("Readdirnames"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Readdirnames"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("Seek"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Seek"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("SetDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SetDeadline"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("SetReadDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SetReadDeadline"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("SetWriteDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SetWriteDeadline"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("Stat"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Stat"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("Sync"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Sync"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("SyscallConn"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SyscallConn"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("Truncate"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Truncate"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("Write"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Write"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("WriteAt"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"WriteAt"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("WriteString"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"WriteString"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("WriteTo"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"WriteTo"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("checkValid"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"checkValid"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("chmod"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"chmod"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("close"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"close"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("copyFileRange"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"copyFileRange"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("pread"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"pread"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("pwrite"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"pwrite"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("read"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"read"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("readFrom"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"readFrom"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("readdir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"readdir"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("seek"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"seek"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("setDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"setDeadline"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("setReadDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"setReadDeadline"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("setWriteDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"setWriteDeadline"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("spliceToFile"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"spliceToFile"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("wrapErr"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"wrapErr"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("write"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"write"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V); ("writeTo"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"writeTo"%go (struct.field_get #fileWithoutReadFrom #"File"%go "$r")
                 )%V)]); (ptrT.id fileWithoutReadFrom.id, [("Chdir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Chdir"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("Chmod"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Chmod"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("Chown"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Chown"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("Close"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Close"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("Fd"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Fd"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("Name"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Name"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("Read"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Read"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("ReadAt"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"ReadAt"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("ReadDir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"ReadDir"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("Readdir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Readdir"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("Readdirnames"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Readdirnames"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("Seek"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Seek"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("SetDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SetDeadline"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("SetReadDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SetReadDeadline"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("SetWriteDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SetWriteDeadline"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("Stat"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Stat"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("Sync"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Sync"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("SyscallConn"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SyscallConn"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("Truncate"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Truncate"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("Write"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Write"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("WriteAt"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"WriteAt"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("WriteString"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"WriteString"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("WriteTo"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"WriteTo"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("checkValid"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"checkValid"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("chmod"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"chmod"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("close"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"close"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("copyFileRange"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"copyFileRange"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("pread"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"pread"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("pwrite"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"pwrite"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("read"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"read"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("readFrom"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"readFrom"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("readdir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"readdir"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("seek"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"seek"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("setDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"setDeadline"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("setReadDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"setReadDeadline"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("setWriteDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"setWriteDeadline"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("spliceToFile"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"spliceToFile"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("wrapErr"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"wrapErr"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("write"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"write"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V); ("writeTo"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"writeTo"%go (![#ptrT] (struct.field_ref #fileWithoutReadFrom #"File"%go "$r"))
                 )%V)]); (noWriteTo.id, [("WriteTo"%go, noWriteTo__WriteToⁱᵐᵖˡ)]); (ptrT.id noWriteTo.id, [("WriteTo"%go, (λ: "$r",
                 method_call #noWriteTo.id #"WriteTo"%go (![#noWriteTo] "$r")
                 )%V)]); (fileWithoutWriteTo.id, [("Chdir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Chdir"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("Chmod"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Chmod"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("Chown"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Chown"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("Close"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Close"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("Fd"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Fd"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("Name"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Name"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("Read"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Read"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("ReadAt"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"ReadAt"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("ReadDir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"ReadDir"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("ReadFrom"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"ReadFrom"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("Readdir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Readdir"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("Readdirnames"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Readdirnames"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("Seek"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Seek"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("SetDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SetDeadline"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("SetReadDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SetReadDeadline"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("SetWriteDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SetWriteDeadline"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("Stat"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Stat"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("Sync"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Sync"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("SyscallConn"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SyscallConn"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("Truncate"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Truncate"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("Write"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Write"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("WriteAt"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"WriteAt"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("WriteString"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"WriteString"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("checkValid"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"checkValid"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("chmod"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"chmod"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("close"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"close"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("copyFileRange"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"copyFileRange"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("pread"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"pread"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("pwrite"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"pwrite"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("read"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"read"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("readFrom"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"readFrom"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("readdir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"readdir"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("seek"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"seek"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("setDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"setDeadline"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("setReadDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"setReadDeadline"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("setWriteDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"setWriteDeadline"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("spliceToFile"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"spliceToFile"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("wrapErr"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"wrapErr"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("write"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"write"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V); ("writeTo"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"writeTo"%go (struct.field_get #fileWithoutWriteTo #"File"%go "$r")
                 )%V)]); (ptrT.id fileWithoutWriteTo.id, [("Chdir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Chdir"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("Chmod"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Chmod"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("Chown"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Chown"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("Close"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Close"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("Fd"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Fd"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("Name"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Name"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("Read"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Read"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("ReadAt"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"ReadAt"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("ReadDir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"ReadDir"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("ReadFrom"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"ReadFrom"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("Readdir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Readdir"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("Readdirnames"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Readdirnames"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("Seek"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Seek"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("SetDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SetDeadline"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("SetReadDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SetReadDeadline"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("SetWriteDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SetWriteDeadline"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("Stat"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Stat"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("Sync"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Sync"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("SyscallConn"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"SyscallConn"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("Truncate"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Truncate"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("Write"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"Write"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("WriteAt"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"WriteAt"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("WriteString"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"WriteString"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("checkValid"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"checkValid"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("chmod"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"chmod"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("close"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"close"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("copyFileRange"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"copyFileRange"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("pread"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"pread"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("pwrite"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"pwrite"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("read"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"read"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("readFrom"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"readFrom"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("readdir"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"readdir"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("seek"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"seek"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("setDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"setDeadline"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("setReadDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"setReadDeadline"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("setWriteDeadline"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"setWriteDeadline"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("spliceToFile"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"spliceToFile"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("wrapErr"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"wrapErr"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("write"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"write"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V); ("writeTo"%go, (λ: "$r",
                 method_call #(ptrT.id File.id) #"writeTo"%go (![#ptrT] (struct.field_ref #fileWithoutWriteTo #"File"%go "$r"))
                 )%V)]); (dirFS.id, [("Open"%go, dirFS__Openⁱᵐᵖˡ); ("ReadDir"%go, dirFS__ReadDirⁱᵐᵖˡ); ("ReadFile"%go, dirFS__ReadFileⁱᵐᵖˡ); ("Stat"%go, dirFS__Statⁱᵐᵖˡ); ("join"%go, dirFS__joinⁱᵐᵖˡ)]); (ptrT.id dirFS.id, [("Open"%go, (λ: "$r",
                 method_call #dirFS.id #"Open"%go (![#dirFS] "$r")
                 )%V); ("ReadDir"%go, (λ: "$r",
                 method_call #dirFS.id #"ReadDir"%go (![#dirFS] "$r")
                 )%V); ("ReadFile"%go, (λ: "$r",
                 method_call #dirFS.id #"ReadFile"%go (![#dirFS] "$r")
                 )%V); ("Stat"%go, (λ: "$r",
                 method_call #dirFS.id #"Stat"%go (![#dirFS] "$r")
                 )%V); ("join"%go, (λ: "$r",
                 method_call #dirFS.id #"join"%go (![#dirFS] "$r")
                 )%V)]); (file.id, []); (ptrT.id file.id, [("close"%go, file__closeⁱᵐᵖˡ)]); (newFileKind.id, []); (ptrT.id newFileKind.id, []); (unixDirent.id, []); (ptrT.id unixDirent.id, [("Info"%go, unixDirent__Infoⁱᵐᵖˡ); ("IsDir"%go, unixDirent__IsDirⁱᵐᵖˡ); ("Name"%go, unixDirent__Nameⁱᵐᵖˡ); ("String"%go, unixDirent__Stringⁱᵐᵖˡ); ("Type"%go, unixDirent__Typeⁱᵐᵖˡ)]); (rawConn.id, []); (ptrT.id rawConn.id, [("Control"%go, rawConn__Controlⁱᵐᵖˡ); ("Read"%go, rawConn__Readⁱᵐᵖˡ); ("Write"%go, rawConn__Writeⁱᵐᵖˡ)]); (Root.id, []); (ptrT.id Root.id, [("Close"%go, Root__Closeⁱᵐᵖˡ); ("Create"%go, Root__Createⁱᵐᵖˡ); ("FS"%go, Root__FSⁱᵐᵖˡ); ("Lstat"%go, Root__Lstatⁱᵐᵖˡ); ("Mkdir"%go, Root__Mkdirⁱᵐᵖˡ); ("Name"%go, Root__Nameⁱᵐᵖˡ); ("Open"%go, Root__Openⁱᵐᵖˡ); ("OpenFile"%go, Root__OpenFileⁱᵐᵖˡ); ("OpenRoot"%go, Root__OpenRootⁱᵐᵖˡ); ("Remove"%go, Root__Removeⁱᵐᵖˡ); ("Stat"%go, Root__Statⁱᵐᵖˡ); ("logOpen"%go, Root__logOpenⁱᵐᵖˡ); ("logStat"%go, Root__logStatⁱᵐᵖˡ)]); (rootFS.id, []); (ptrT.id rootFS.id, [("Open"%go, rootFS__Openⁱᵐᵖˡ); ("ReadDir"%go, rootFS__ReadDirⁱᵐᵖˡ); ("ReadFile"%go, rootFS__ReadFileⁱᵐᵖˡ); ("Stat"%go, rootFS__Statⁱᵐᵖˡ)]); (root.id, []); (ptrT.id root.id, [("Close"%go, root__Closeⁱᵐᵖˡ); ("Name"%go, root__Nameⁱᵐᵖˡ); ("decref"%go, root__decrefⁱᵐᵖˡ); ("incref"%go, root__increfⁱᵐᵖˡ)]); (errSymlink.id, [("Error"%go, errSymlink__Errorⁱᵐᵖˡ)]); (ptrT.id errSymlink.id, [("Error"%go, (λ: "$r",
                 method_call #errSymlink.id #"Error"%go (![#errSymlink] "$r")
                 )%V)]); (File.id, [("close"%go, (λ: "$r",
                 method_call #(ptrT.id file.id) #"close"%go (struct.field_get #File #"file"%go "$r")
                 )%V)]); (ptrT.id File.id, [("Chdir"%go, File__Chdirⁱᵐᵖˡ); ("Chmod"%go, File__Chmodⁱᵐᵖˡ); ("Chown"%go, File__Chownⁱᵐᵖˡ); ("Close"%go, File__Closeⁱᵐᵖˡ); ("Fd"%go, File__Fdⁱᵐᵖˡ); ("Name"%go, File__Nameⁱᵐᵖˡ); ("Read"%go, File__Readⁱᵐᵖˡ); ("ReadAt"%go, File__ReadAtⁱᵐᵖˡ); ("ReadDir"%go, File__ReadDirⁱᵐᵖˡ); ("ReadFrom"%go, File__ReadFromⁱᵐᵖˡ); ("Readdir"%go, File__Readdirⁱᵐᵖˡ); ("Readdirnames"%go, File__Readdirnamesⁱᵐᵖˡ); ("Seek"%go, File__Seekⁱᵐᵖˡ); ("SetDeadline"%go, File__SetDeadlineⁱᵐᵖˡ); ("SetReadDeadline"%go, File__SetReadDeadlineⁱᵐᵖˡ); ("SetWriteDeadline"%go, File__SetWriteDeadlineⁱᵐᵖˡ); ("Stat"%go, File__Statⁱᵐᵖˡ); ("Sync"%go, File__Syncⁱᵐᵖˡ); ("SyscallConn"%go, File__SyscallConnⁱᵐᵖˡ); ("Truncate"%go, File__Truncateⁱᵐᵖˡ); ("Write"%go, File__Writeⁱᵐᵖˡ); ("WriteAt"%go, File__WriteAtⁱᵐᵖˡ); ("WriteString"%go, File__WriteStringⁱᵐᵖˡ); ("WriteTo"%go, File__WriteToⁱᵐᵖˡ); ("checkValid"%go, File__checkValidⁱᵐᵖˡ); ("chmod"%go, File__chmodⁱᵐᵖˡ); ("close"%go, (λ: "$r",
                 method_call #(ptrT.id file.id) #"close"%go (![#ptrT] (struct.field_ref #File #"file"%go "$r"))
                 )%V); ("copyFileRange"%go, File__copyFileRangeⁱᵐᵖˡ); ("pread"%go, File__preadⁱᵐᵖˡ); ("pwrite"%go, File__pwriteⁱᵐᵖˡ); ("read"%go, File__readⁱᵐᵖˡ); ("readFrom"%go, File__readFromⁱᵐᵖˡ); ("readdir"%go, File__readdirⁱᵐᵖˡ); ("seek"%go, File__seekⁱᵐᵖˡ); ("setDeadline"%go, File__setDeadlineⁱᵐᵖˡ); ("setReadDeadline"%go, File__setReadDeadlineⁱᵐᵖˡ); ("setWriteDeadline"%go, File__setWriteDeadlineⁱᵐᵖˡ); ("spliceToFile"%go, File__spliceToFileⁱᵐᵖˡ); ("wrapErr"%go, File__wrapErrⁱᵐᵖˡ); ("write"%go, File__writeⁱᵐᵖˡ); ("writeTo"%go, File__writeToⁱᵐᵖˡ)]); (fileStat.id, []); (ptrT.id fileStat.id, [("IsDir"%go, fileStat__IsDirⁱᵐᵖˡ); ("ModTime"%go, fileStat__ModTimeⁱᵐᵖˡ); ("Mode"%go, fileStat__Modeⁱᵐᵖˡ); ("Name"%go, fileStat__Nameⁱᵐᵖˡ); ("Size"%go, fileStat__Sizeⁱᵐᵖˡ); ("Sys"%go, fileStat__Sysⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo os.os :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #os.os (λ: <>,
      exception_do (do:  (package.alloc os.os #());;;
      do:  (dirBufPool'init #());;;
      do:  (ErrInvalid'init #());;;
      do:  (ErrPermission'init #());;;
      do:  (ErrExist'init #());;;
      do:  (ErrNotExist'init #());;;
      do:  (ErrClosed'init #());;;
      do:  (ErrNoDeadline'init #());;;
      do:  (ErrDeadlineExceeded'init #());;;
      do:  (ErrProcessDone'init #());;;
      do:  (Interrupt'init #());;;
      do:  (Kill'init #());;;
      do:  (Stdin'init #());;;
      do:  (Stdout'init #());;;
      do:  (Stderr'init #());;;
      do:  (errWriteAtInAppendMode'init #());;;
      do:  (errPathEscapes'init #());;;
      do:  (lstat'init #());;;
      do:  (checkWrapErr'init #());;;
      do:  (checkPidfdOnce'init #());;;
      do:  (errPatternHasSeparator'init #());;;
      do:  (pollCopyFileRange'init #());;;
      do:  (pollSplice'init #()))
      ).

End code.
End os.
