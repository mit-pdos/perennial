(* autogenerated from os *)
From New.golang Require Import defn.

Definition os : go_string := "os".

Module os.
Section code.
Context `{ffi_syntax}.


Axiom dirBufPool'init : val.

Axiom ErrInvalid'init : val.

Axiom ErrPermission'init : val.

Axiom ErrExist'init : val.

Axiom ErrNotExist'init : val.

Axiom ErrClosed'init : val.

Axiom ErrNoDeadline'init : val.

Axiom ErrDeadlineExceeded'init : val.

Axiom ErrProcessDone'init : val.

Axiom Interrupt'init : val.

Axiom Kill'init : val.

Axiom Stdin'init : val.

Axiom Stdout'init : val.

Axiom Stderr'init : val.

Axiom errWriteAtInAppendMode'init : val.

Axiom errPathEscapes'init : val.

Axiom lstat'init : val.

Axiom checkWrapErr'init : val.

Axiom checkPidfdOnce'init : val.

Axiom errPatternHasSeparator'init : val.

Axiom pollCopyFileRange'init : val.

Axiom pollSplice'init : val.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [].

#[global] Instance info' : PkgInfo os.os :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init os.os (Î»: <>,
      exception_do (do:  (dirBufPool'init #());;;
      do:  (ErrInvalid'init #());;;
      do:  (ErrPermission'init #());;;
      do:  (ErrExist'init #());;;
      do:  (ErrNotExist'init #());;;
      do:  (ErrClosed'init #());;;
      do:  (ErrNoDeadline'init #());;;
      do:  (ErrDeadlineExceeded'init #());;;
      do:  (ErrProcessDone'init #());;;
      do:  (Interrupt'init #());;;
      do:  (Kill'init #());;;
      do:  (Stdin'init #());;;
      do:  (Stdout'init #());;;
      do:  (Stderr'init #());;;
      do:  (errWriteAtInAppendMode'init #());;;
      do:  (errPathEscapes'init #());;;
      do:  (lstat'init #());;;
      do:  (checkWrapErr'init #());;;
      do:  (checkPidfdOnce'init #());;;
      do:  (errPatternHasSeparator'init #());;;
      do:  (pollCopyFileRange'init #());;;
      do:  (pollSplice'init #()))
      ).

End code.
End os.
