(* autogenerated from google.golang.org/grpc/codes *)

From New.golang Require Import defn.
Definition codes : go_string := "google.golang.org/grpc/codes".

Module codes.

Module Code. Definition id : go_string := "google.golang.org/grpc/codes.Code"%go. End Code.

Section code.
Context `{ffi_syntax}.


Definition init : go_string := "google.golang.org/grpc/codes.init"%go.

Definition canonicalString : go_string := "google.golang.org/grpc/codes.canonicalString"%go.

Definition Code : go_type := uint32T.

Axiom OK : expr.

Definition Canceled : expr := #(W32 1).

Axiom Unknown : expr.

Definition InvalidArgument : expr := #(W32 3).

Definition DeadlineExceeded : expr := #(W32 4).

Definition NotFound : expr := #(W32 5).

Axiom AlreadyExists : expr.

Definition PermissionDenied : expr := #(W32 7).

Definition ResourceExhausted : expr := #(W32 8).

Definition FailedPrecondition : expr := #(W32 9).

Axiom Aborted : expr.

Definition OutOfRange : expr := #(W32 11).

Axiom Unimplemented : expr.

Axiom Internal : expr.

Definition Unavailable : expr := #(W32 14).

Definition DataLoss : expr := #(W32 15).

Definition Unauthenticated : expr := #(W32 16).

Axiom _maxCode : Z.

Definition strToCode : go_string := "google.golang.org/grpc/codes.strToCode"%go.

Axiom strToCode'init : val.

Definition vars' : list (go_string * go_type) := [].

Axiom canonicalStringⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(canonicalString, canonicalStringⁱᵐᵖˡ)].

Axiom Code__Stringⁱᵐᵖˡ : val.

Axiom Code__UnmarshalJSONⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(Code.id, [("String"%go, Code__Stringⁱᵐᵖˡ)]); (ptrT.id Code.id, [("String"%go, Code__Stringⁱᵐᵖˡ); ("UnmarshalJSON"%go, Code__UnmarshalJSONⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo codes.codes :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #codes.codes (λ: <>,
      exception_do (do:  (package.alloc codes.codes #());;;
      do:  (strToCode'init #()))
      ).

End code.
End codes.
