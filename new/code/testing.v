(* autogenerated from testing *)
From New.golang Require Import defn.

Definition testing : go_string := "testing".

Module testing.
Section code.
Context `{ffi_syntax}.


Definition AllocsPerRun : go_string := "testing.AllocsPerRun"%go.

Definition initBenchmarkFlags : go_string := "testing.initBenchmarkFlags"%go.

Definition matchBenchmarks : go_string := "testing.matchBenchmarks"%go.

Definition benchmarkMemory : go_string := "testing.benchmarkMemory"%go.

Definition benchTime : go_string := "testing.benchTime"%go.

Axiom benchTime'init : val.

Definition benchmarkLock : go_string := "testing.benchmarkLock"%go.

Definition memStats : go_string := "testing.memStats"%go.

Definition labelsOnce : go_string := "testing.labelsOnce"%go.

Definition predictN : go_string := "testing.predictN"%go.

Definition prettyPrint : go_string := "testing.prettyPrint"%go.

Definition benchmarkName : go_string := "testing.benchmarkName"%go.

Definition RunBenchmarks : go_string := "testing.RunBenchmarks"%go.

Definition runBenchmarks : go_string := "testing.runBenchmarks"%go.

Definition hideStdoutForTesting : go_string := "testing.hideStdoutForTesting"%go.

Axiom hideStdoutForTesting'init : val.

Definition Benchmark : go_string := "testing.Benchmark"%go.

Definition cover : go_string := "testing.cover"%go.

Definition Coverage : go_string := "testing.Coverage"%go.

Definition RegisterCover : go_string := "testing.RegisterCover"%go.

Definition mustBeNil : go_string := "testing.mustBeNil"%go.

Definition coverReport : go_string := "testing.coverReport"%go.

Definition RunExamples : go_string := "testing.RunExamples"%go.

Definition runExamples : go_string := "testing.runExamples"%go.

Definition sortLines : go_string := "testing.sortLines"%go.

Definition initFuzzFlags : go_string := "testing.initFuzzFlags"%go.

Definition matchFuzz : go_string := "testing.matchFuzz"%go.

Definition fuzzDuration : go_string := "testing.fuzzDuration"%go.

Definition minimizeDuration : go_string := "testing.minimizeDuration"%go.

Axiom minimizeDuration'init : val.

Definition fuzzCacheDir : go_string := "testing.fuzzCacheDir"%go.

Definition isFuzzWorker : go_string := "testing.isFuzzWorker"%go.

Definition corpusDir : go_string := "testing.corpusDir"%go.

Axiom corpusDir'init : val.

Definition supportedTypes : go_string := "testing.supportedTypes"%go.

Axiom supportedTypes'init : val.

Definition runFuzzTests : go_string := "testing.runFuzzTests"%go.

Definition runFuzzing : go_string := "testing.runFuzzing"%go.

Definition fRunner : go_string := "testing.fRunner"%go.

Definition matchMutex : go_string := "testing.matchMutex"%go.

Definition allMatcher : go_string := "testing.allMatcher"%go.

Definition newMatcher : go_string := "testing.newMatcher"%go.

Definition splitRegexp : go_string := "testing.splitRegexp"%go.

Definition parseSubtestNumber : go_string := "testing.parseSubtestNumber"%go.

Definition rewrite : go_string := "testing.rewrite"%go.

Definition isSpace : go_string := "testing.isSpace"%go.

Definition cover2 : go_string := "testing.cover2"%go.

Definition registerCover2 : go_string := "testing.registerCover2"%go.

Definition coverReport2 : go_string := "testing.coverReport2"%go.

Definition coverage2 : go_string := "testing.coverage2"%go.

Definition runExample : go_string := "testing.runExample"%go.

Definition initRan : go_string := "testing.initRan"%go.

Definition Init : go_string := "testing.Init"%go.

Definition short : go_string := "testing.short"%go.

Definition failFast : go_string := "testing.failFast"%go.

Definition outputDir : go_string := "testing.outputDir"%go.

Definition chatty : go_string := "testing.chatty"%go.

Definition count : go_string := "testing.count"%go.

Definition coverProfile : go_string := "testing.coverProfile"%go.

Definition gocoverdir : go_string := "testing.gocoverdir"%go.

Definition matchList : go_string := "testing.matchList"%go.

Definition match' : go_string := "testing.match"%go.

Definition skip : go_string := "testing.skip"%go.

Definition memProfile : go_string := "testing.memProfile"%go.

Definition memProfileRate : go_string := "testing.memProfileRate"%go.

Definition cpuProfile : go_string := "testing.cpuProfile"%go.

Definition blockProfile : go_string := "testing.blockProfile"%go.

Definition blockProfileRate : go_string := "testing.blockProfileRate"%go.

Definition mutexProfile : go_string := "testing.mutexProfile"%go.

Definition mutexProfileFraction : go_string := "testing.mutexProfileFraction"%go.

Definition panicOnExit0 : go_string := "testing.panicOnExit0"%go.

Definition traceFile : go_string := "testing.traceFile"%go.

Definition timeout : go_string := "testing.timeout"%go.

Definition cpuListStr : go_string := "testing.cpuListStr"%go.

Definition parallel : go_string := "testing.parallel"%go.

Definition shuffle : go_string := "testing.shuffle"%go.

Definition testlog : go_string := "testing.testlog"%go.

Definition fullPath : go_string := "testing.fullPath"%go.

Definition haveExamples : go_string := "testing.haveExamples"%go.

Definition cpuList : go_string := "testing.cpuList"%go.

Definition testlogFile : go_string := "testing.testlogFile"%go.

Definition numFailed : go_string := "testing.numFailed"%go.

Definition running : go_string := "testing.running"%go.

Definition newChattyPrinter : go_string := "testing.newChattyPrinter"%go.

Definition Short : go_string := "testing.Short"%go.

Definition testBinary : go_string := "testing.testBinary"%go.

Axiom testBinary'init : val.

Definition Testing : go_string := "testing.Testing"%go.

Definition CoverMode : go_string := "testing.CoverMode"%go.

Definition Verbose : go_string := "testing.Verbose"%go.

Definition fmtDuration : go_string := "testing.fmtDuration"%go.

Definition Tⁱᵈ : go_string := "testing.T"%go.

Axiom T : go_type.

Definition removeAll : go_string := "testing.removeAll"%go.

Definition callerName : go_string := "testing.callerName"%go.

Definition pcToName : go_string := "testing.pcToName"%go.

Definition errNilPanicOrGoexit : go_string := "testing.errNilPanicOrGoexit"%go.

Axiom errNilPanicOrGoexit'init : val.

Definition tRunner : go_string := "testing.tRunner"%go.

Definition newTestState : go_string := "testing.newTestState"%go.

Definition errMain : go_string := "testing.errMain"%go.

Axiom errMain'init : val.

Definition Main : go_string := "testing.Main"%go.

Definition MainStart : go_string := "testing.MainStart"%go.

Definition testingTesting : go_string := "testing.testingTesting"%go.

Definition realStderr : go_string := "testing.realStderr"%go.

Definition listTests : go_string := "testing.listTests"%go.

Definition RunTests : go_string := "testing.RunTests"%go.

Definition runTests : go_string := "testing.runTests"%go.

Definition toOutputDir : go_string := "testing.toOutputDir"%go.

Definition runningList : go_string := "testing.runningList"%go.

Definition parseCpuList : go_string := "testing.parseCpuList"%go.

Definition shouldFailFast : go_string := "testing.shouldFailFast"%go.

Definition isWindowsRetryable : go_string := "testing.isWindowsRetryable"%go.

Definition highPrecisionTimeNow : go_string := "testing.highPrecisionTimeNow"%go.

Definition highPrecisionTimeSince : go_string := "testing.highPrecisionTimeSince"%go.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [(Tⁱᵈ, []); (ptrTⁱᵈ Tⁱᵈ, [])].

#[global] Instance info' : PkgInfo testing.testing :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #testing.testing (λ: <>,
      exception_do (do:  (package.alloc testing.testing #());;;
      do:  (benchTime'init #());;;
      do:  (hideStdoutForTesting'init #());;;
      do:  (minimizeDuration'init #());;;
      do:  (corpusDir'init #());;;
      do:  (_'init #());;;
      do:  (supportedTypes'init #());;;
      do:  (testBinary'init #());;;
      do:  (_'init #());;;
      do:  (_'init #());;;
      do:  (errNilPanicOrGoexit'init #());;;
      do:  (errMain'init #()))
      ).

End code.
End testing.
