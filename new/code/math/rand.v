(* autogenerated from math/rand *)

From New.golang Require Import defn.
Definition rand : go_string := "math/rand".

Module rand.

Section code.
Context `{ffi_syntax}.


Definition ke : go_string := "math/rand.ke"%go.

Axiom ke'init : val.

Definition we : go_string := "math/rand.we"%go.

Axiom we'init : val.

Definition fe : go_string := "math/rand.fe"%go.

Axiom fe'init : val.

Definition absInt32 : go_string := "math/rand.absInt32"%go.

Definition kn : go_string := "math/rand.kn"%go.

Axiom kn'init : val.

Definition wn : go_string := "math/rand.wn"%go.

Axiom wn'init : val.

Definition fn : go_string := "math/rand.fn"%go.

Axiom fn'init : val.

Definition NewSource : go_string := "math/rand.NewSource"%go.

Definition newSource : go_string := "math/rand.newSource"%go.

Definition New : go_string := "math/rand.New"%go.

Definition read : go_string := "math/rand.read"%go.

Definition globalRandGenerator : go_string := "math/rand.globalRandGenerator"%go.

Definition randautoseed : go_string := "math/rand.randautoseed"%go.

Axiom randautoseed'init : val.

Definition randseednop : go_string := "math/rand.randseednop"%go.

Axiom randseednop'init : val.

Definition globalRand : go_string := "math/rand.globalRand"%go.

Definition runtime_rand : go_string := "math/rand.runtime_rand"%go.

Definition Seed : go_string := "math/rand.Seed"%go.

Definition Int63 : go_string := "math/rand.Int63"%go.

Definition Uint32 : go_string := "math/rand.Uint32"%go.

Definition Uint64 : go_string := "math/rand.Uint64"%go.

Definition Int31 : go_string := "math/rand.Int31"%go.

Definition Int : go_string := "math/rand.Int"%go.

Definition Int63n : go_string := "math/rand.Int63n"%go.

Definition Int31n : go_string := "math/rand.Int31n"%go.

Definition Intn : go_string := "math/rand.Intn"%go.

Definition Float64 : go_string := "math/rand.Float64"%go.

Definition Float32 : go_string := "math/rand.Float32"%go.

Definition Perm : go_string := "math/rand.Perm"%go.

Definition Shuffle : go_string := "math/rand.Shuffle"%go.

Definition Read : go_string := "math/rand.Read"%go.

Definition NormFloat64 : go_string := "math/rand.NormFloat64"%go.

Definition ExpFloat64 : go_string := "math/rand.ExpFloat64"%go.

Definition rngCooked : go_string := "math/rand.rngCooked"%go.

Axiom rngCooked'init : val.

Definition seedrand : go_string := "math/rand.seedrand"%go.

Definition NewZipf : go_string := "math/rand.NewZipf"%go.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [].

#[global] Instance info' : PkgInfo rand.rand :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #rand.rand (λ: <>,
      exception_do (do:  (package.alloc rand.rand #());;;
      do:  (ke'init #());;;
      do:  (we'init #());;;
      do:  (fe'init #());;;
      do:  (kn'init #());;;
      do:  (wn'init #());;;
      do:  (fn'init #());;;
      do:  (randautoseed'init #());;;
      do:  (randseednop'init #());;;
      do:  (rngCooked'init #()))
      ).

End code.
End rand.
