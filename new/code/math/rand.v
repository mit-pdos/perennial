(* autogenerated from math/rand *)

From New.golang Require Import defn.
Definition rand : go_string := "math/rand".

Module rand.

Module Source. Definition id : go_string := "math/rand.Source"%go. End Source.
Module Source64. Definition id : go_string := "math/rand.Source64"%go. End Source64.
Module Rand. Definition id : go_string := "math/rand.Rand"%go. End Rand.
Module runtimeSource. Definition id : go_string := "math/rand.runtimeSource"%go. End runtimeSource.
Module lockedSource. Definition id : go_string := "math/rand.lockedSource"%go. End lockedSource.
Module rngSource. Definition id : go_string := "math/rand.rngSource"%go. End rngSource.
Module Zipf. Definition id : go_string := "math/rand.Zipf"%go. End Zipf.

Section code.
Context `{ffi_syntax}.


Axiom re : expr.

Definition ke : go_string := "math/rand.ke"%go.

Axiom ke'init : val.

Definition we : go_string := "math/rand.we"%go.

Axiom we'init : val.

Definition fe : go_string := "math/rand.fe"%go.

Axiom fe'init : val.

Axiom rn : expr.

Definition absInt32 : go_string := "math/rand.absInt32"%go.

Definition kn : go_string := "math/rand.kn"%go.

Axiom kn'init : val.

Definition wn : go_string := "math/rand.wn"%go.

Axiom wn'init : val.

Definition fn : go_string := "math/rand.fn"%go.

Axiom fn'init : val.

Axiom Source : go_type.

Axiom Source64 : go_type.

Definition NewSource : go_string := "math/rand.NewSource"%go.

Definition newSource : go_string := "math/rand.newSource"%go.

Axiom Rand : go_type.

Definition New : go_string := "math/rand.New"%go.

Definition read : go_string := "math/rand.read"%go.

Definition globalRandGenerator : go_string := "math/rand.globalRandGenerator"%go.

Definition randautoseed : go_string := "math/rand.randautoseed"%go.

Axiom randautoseed'init : val.

Definition randseednop : go_string := "math/rand.randseednop"%go.

Axiom randseednop'init : val.

Definition globalRand : go_string := "math/rand.globalRand"%go.

Definition runtime_rand : go_string := "math/rand.runtime_rand"%go.

Axiom runtimeSource : go_type.

Definition Seed : go_string := "math/rand.Seed"%go.

Definition Int63 : go_string := "math/rand.Int63"%go.

Definition Uint32 : go_string := "math/rand.Uint32"%go.

Definition Uint64 : go_string := "math/rand.Uint64"%go.

Definition Int31 : go_string := "math/rand.Int31"%go.

Definition Int : go_string := "math/rand.Int"%go.

Definition Int63n : go_string := "math/rand.Int63n"%go.

Definition Int31n : go_string := "math/rand.Int31n"%go.

Definition Intn : go_string := "math/rand.Intn"%go.

Definition Float64 : go_string := "math/rand.Float64"%go.

Definition Float32 : go_string := "math/rand.Float32"%go.

Definition Perm : go_string := "math/rand.Perm"%go.

Definition Shuffle : go_string := "math/rand.Shuffle"%go.

Definition Read : go_string := "math/rand.Read"%go.

Definition NormFloat64 : go_string := "math/rand.NormFloat64"%go.

Definition ExpFloat64 : go_string := "math/rand.ExpFloat64"%go.

Axiom lockedSource : go_type.

Axiom rngLen : Z.

Axiom rngTap : Z.

Axiom rngMax : Z.

Axiom rngMask : Z.

Axiom int32max : Z.

Definition rngCooked : go_string := "math/rand.rngCooked"%go.

Axiom rngCooked'init : val.

Axiom rngSource : go_type.

Definition seedrand : go_string := "math/rand.seedrand"%go.

Axiom Zipf : go_type.

Definition NewZipf : go_string := "math/rand.NewZipf"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom absInt32ⁱᵐᵖˡ : val.

Axiom NewSourceⁱᵐᵖˡ : val.

Axiom newSourceⁱᵐᵖˡ : val.

Axiom Newⁱᵐᵖˡ : val.

Axiom readⁱᵐᵖˡ : val.

Axiom globalRandⁱᵐᵖˡ : val.

Axiom runtime_randⁱᵐᵖˡ : val.

Axiom Seedⁱᵐᵖˡ : val.

Axiom Int63ⁱᵐᵖˡ : val.

Axiom Uint32ⁱᵐᵖˡ : val.

Axiom Uint64ⁱᵐᵖˡ : val.

Axiom Int31ⁱᵐᵖˡ : val.

Axiom Intⁱᵐᵖˡ : val.

Axiom Int63nⁱᵐᵖˡ : val.

Axiom Int31nⁱᵐᵖˡ : val.

Axiom Intnⁱᵐᵖˡ : val.

Axiom Float64ⁱᵐᵖˡ : val.

Axiom Float32ⁱᵐᵖˡ : val.

Axiom Permⁱᵐᵖˡ : val.

Axiom Shuffleⁱᵐᵖˡ : val.

Axiom Readⁱᵐᵖˡ : val.

Axiom NormFloat64ⁱᵐᵖˡ : val.

Axiom ExpFloat64ⁱᵐᵖˡ : val.

Axiom seedrandⁱᵐᵖˡ : val.

Axiom NewZipfⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(absInt32, absInt32ⁱᵐᵖˡ); (NewSource, NewSourceⁱᵐᵖˡ); (newSource, newSourceⁱᵐᵖˡ); (New, Newⁱᵐᵖˡ); (read, readⁱᵐᵖˡ); (globalRand, globalRandⁱᵐᵖˡ); (runtime_rand, runtime_randⁱᵐᵖˡ); (Seed, Seedⁱᵐᵖˡ); (Int63, Int63ⁱᵐᵖˡ); (Uint32, Uint32ⁱᵐᵖˡ); (Uint64, Uint64ⁱᵐᵖˡ); (Int31, Int31ⁱᵐᵖˡ); (Int, Intⁱᵐᵖˡ); (Int63n, Int63nⁱᵐᵖˡ); (Int31n, Int31nⁱᵐᵖˡ); (Intn, Intnⁱᵐᵖˡ); (Float64, Float64ⁱᵐᵖˡ); (Float32, Float32ⁱᵐᵖˡ); (Perm, Permⁱᵐᵖˡ); (Shuffle, Shuffleⁱᵐᵖˡ); (Read, Readⁱᵐᵖˡ); (NormFloat64, NormFloat64ⁱᵐᵖˡ); (ExpFloat64, ExpFloat64ⁱᵐᵖˡ); (seedrand, seedrandⁱᵐᵖˡ); (NewZipf, NewZipfⁱᵐᵖˡ)].

Axiom Rand__ExpFloat64ⁱᵐᵖˡ : val.

Axiom Rand__Float32ⁱᵐᵖˡ : val.

Axiom Rand__Float64ⁱᵐᵖˡ : val.

Axiom Rand__Intⁱᵐᵖˡ : val.

Axiom Rand__Int31ⁱᵐᵖˡ : val.

Axiom Rand__Int31nⁱᵐᵖˡ : val.

Axiom Rand__Int63ⁱᵐᵖˡ : val.

Axiom Rand__Int63nⁱᵐᵖˡ : val.

Axiom Rand__Intnⁱᵐᵖˡ : val.

Axiom Rand__NormFloat64ⁱᵐᵖˡ : val.

Axiom Rand__Permⁱᵐᵖˡ : val.

Axiom Rand__Readⁱᵐᵖˡ : val.

Axiom Rand__Seedⁱᵐᵖˡ : val.

Axiom Rand__Shuffleⁱᵐᵖˡ : val.

Axiom Rand__Uint32ⁱᵐᵖˡ : val.

Axiom Rand__Uint64ⁱᵐᵖˡ : val.

Axiom Rand__int31nⁱᵐᵖˡ : val.

Axiom runtimeSource__Int63ⁱᵐᵖˡ : val.

Axiom runtimeSource__Seedⁱᵐᵖˡ : val.

Axiom runtimeSource__Uint64ⁱᵐᵖˡ : val.

Axiom runtimeSource__readⁱᵐᵖˡ : val.

Axiom lockedSource__Int63ⁱᵐᵖˡ : val.

Axiom lockedSource__Seedⁱᵐᵖˡ : val.

Axiom lockedSource__Uint64ⁱᵐᵖˡ : val.

Axiom lockedSource__readⁱᵐᵖˡ : val.

Axiom lockedSource__seedⁱᵐᵖˡ : val.

Axiom lockedSource__seedPosⁱᵐᵖˡ : val.

Axiom rngSource__Int63ⁱᵐᵖˡ : val.

Axiom rngSource__Seedⁱᵐᵖˡ : val.

Axiom rngSource__Uint64ⁱᵐᵖˡ : val.

Axiom Zipf__Uint64ⁱᵐᵖˡ : val.

Axiom Zipf__hⁱᵐᵖˡ : val.

Axiom Zipf__hinvⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(Rand.id, []); (ptrT.id Rand.id, [("ExpFloat64"%go, Rand__ExpFloat64ⁱᵐᵖˡ); ("Float32"%go, Rand__Float32ⁱᵐᵖˡ); ("Float64"%go, Rand__Float64ⁱᵐᵖˡ); ("Int"%go, Rand__Intⁱᵐᵖˡ); ("Int31"%go, Rand__Int31ⁱᵐᵖˡ); ("Int31n"%go, Rand__Int31nⁱᵐᵖˡ); ("Int63"%go, Rand__Int63ⁱᵐᵖˡ); ("Int63n"%go, Rand__Int63nⁱᵐᵖˡ); ("Intn"%go, Rand__Intnⁱᵐᵖˡ); ("NormFloat64"%go, Rand__NormFloat64ⁱᵐᵖˡ); ("Perm"%go, Rand__Permⁱᵐᵖˡ); ("Read"%go, Rand__Readⁱᵐᵖˡ); ("Seed"%go, Rand__Seedⁱᵐᵖˡ); ("Shuffle"%go, Rand__Shuffleⁱᵐᵖˡ); ("Uint32"%go, Rand__Uint32ⁱᵐᵖˡ); ("Uint64"%go, Rand__Uint64ⁱᵐᵖˡ); ("int31n"%go, Rand__int31nⁱᵐᵖˡ)]); (runtimeSource.id, []); (ptrT.id runtimeSource.id, [("Int63"%go, runtimeSource__Int63ⁱᵐᵖˡ); ("Seed"%go, runtimeSource__Seedⁱᵐᵖˡ); ("Uint64"%go, runtimeSource__Uint64ⁱᵐᵖˡ); ("read"%go, runtimeSource__readⁱᵐᵖˡ)]); (lockedSource.id, []); (ptrT.id lockedSource.id, [("Int63"%go, lockedSource__Int63ⁱᵐᵖˡ); ("Seed"%go, lockedSource__Seedⁱᵐᵖˡ); ("Uint64"%go, lockedSource__Uint64ⁱᵐᵖˡ); ("read"%go, lockedSource__readⁱᵐᵖˡ); ("seed"%go, lockedSource__seedⁱᵐᵖˡ); ("seedPos"%go, lockedSource__seedPosⁱᵐᵖˡ)]); (rngSource.id, []); (ptrT.id rngSource.id, [("Int63"%go, rngSource__Int63ⁱᵐᵖˡ); ("Seed"%go, rngSource__Seedⁱᵐᵖˡ); ("Uint64"%go, rngSource__Uint64ⁱᵐᵖˡ)]); (Zipf.id, []); (ptrT.id Zipf.id, [("Uint64"%go, Zipf__Uint64ⁱᵐᵖˡ); ("h"%go, Zipf__hⁱᵐᵖˡ); ("hinv"%go, Zipf__hinvⁱᵐᵖˡ)])].

#[global] Instance info' : PkgInfo rand.rand :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #rand.rand (λ: <>,
      exception_do (do:  (package.alloc rand.rand #());;;
      do:  (ke'init #());;;
      do:  (we'init #());;;
      do:  (fe'init #());;;
      do:  (kn'init #());;;
      do:  (wn'init #());;;
      do:  (fn'init #());;;
      do:  (randautoseed'init #());;;
      do:  (randseednop'init #());;;
      do:  (rngCooked'init #()))
      ).

End code.
End rand.
