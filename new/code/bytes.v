(* autogenerated from bytes *)
From New.golang Require Import defn.

Definition bytes : go_string := "bytes".

Module bytes.
Section code.
Context `{ffi_syntax}.


Axiom Buffer : go_type.

Axiom ErrTooLarge'init : val.

Axiom errNegativeRead'init : val.

Axiom errUnreadByte'init : val.

(* Equal reports whether a and b
   are the same length and contain the same bytes.
   A nil argument is equivalent to an empty slice.

   go: bytes.go:20:6 *)
Definition Equal : val :=
  rec: "Equal" "a" "b" :=
    exception_do (let: "b" := (mem.alloc "b") in
    let: "a" := (mem.alloc "a") in
    return: ((string.from_bytes (![#sliceT] "a")) = (string.from_bytes (![#sliceT] "b")))).

Axiom asciiSpace'init : val.

(* Clone returns a copy of b[:len(b)].
   The result may have additional unused capacity.
   Clone(nil) returns nil.

   go: bytes.go:1408:6 *)
Definition Clone : val :=
  rec: "Clone" "b" :=
    exception_do (let: "b" := (mem.alloc "b") in
    (if: (![#sliceT] "b") = #slice.nil
    then return: (#slice.nil)
    else do:  #());;;
    return: (let: "$a0" := #slice.nil in
     let: "$a1" := (![#sliceT] "b") in
     (slice.append #byteT) "$a0" "$a1")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("Equal"%go, Equal); ("Clone"%go, Clone)].

Definition msets' : list (go_string * (list (go_string * val))) := [("Buffer"%go, []); ("Buffer'ptr"%go, [])].

#[global] Instance info' : PkgInfo bytes.bytes :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init bytes.bytes (Î»: <>,
      exception_do (do:  (ErrTooLarge'init #());;;
      do:  (errNegativeRead'init #());;;
      do:  (errUnreadByte'init #());;;
      do:  (asciiSpace'init #()))
      ).

End code.
End bytes.
