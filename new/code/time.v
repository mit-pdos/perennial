(* autogenerated from time *)
From New.golang Require Import defn.

Require Export New.trusted_code.time.
Import time.
Definition time : go_string := "time".

Module time.
Section code.
Context `{ffi_syntax}.


Axiom std0x'init : val.

Axiom longDayNames'init : val.

Axiom shortDayNames'init : val.

Axiom shortMonthNames'init : val.

Axiom longMonthNames'init : val.

Axiom errAtoi'init : val.

Axiom errBad'init : val.

Axiom errLeadingInt'init : val.

Axiom unitMap'init : val.

Axiom asynctimerchan'init : val.

Definition Time : go_type := structT [
  "wall" :: uint64T;
  "ext" :: int64T;
  "loc" :: ptrT
].

Definition Timer : go_type := structT [
  "C" :: chanT Time;
  "initTimer" :: boolT
].

Definition Duration : go_type := int64T.

Definition Nanosecond : expr := #(W64 1).

Definition Microsecond : expr := #(W64 1000).

Definition Millisecond : expr := #(W64 1000000).

Definition Second : expr := #(W64 1000000000).

Axiom startNano'init : val.

Axiom UTC'init : val.

Axiom utcLoc'init : val.

Axiom Local'init : val.

Axiom errLocation'init : val.

Axiom errBadData'init : val.

Axiom platformZoneSources'init : val.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("syncTimer"%go, syncTimer); ("newTimer"%go, newTimer); ("After"%go, After); ("runtimeNano"%go, runtimeNano)].

Definition msets' : list (go_string * (list (go_string * val))) := [("Timer"%go, []); ("Timer'ptr"%go, []); ("Time"%go, []); ("Time'ptr"%go, []); ("Duration"%go, []); ("Duration'ptr"%go, [])].

#[global] Instance info' : PkgInfo time.time :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init time.time (Î»: <>,
      exception_do (do:  (std0x'init #());;;
      do:  (longDayNames'init #());;;
      do:  (shortDayNames'init #());;;
      do:  (shortMonthNames'init #());;;
      do:  (longMonthNames'init #());;;
      do:  (errAtoi'init #());;;
      do:  (errBad'init #());;;
      do:  (errLeadingInt'init #());;;
      do:  (unitMap'init #());;;
      do:  (asynctimerchan'init #());;;
      do:  (startNano'init #());;;
      do:  (utcLoc'init #());;;
      do:  (UTC'init #());;;
      do:  (Local'init #());;;
      do:  (errLocation'init #());;;
      do:  (errBadData'init #());;;
      do:  (platformZoneSources'init #()))
      ).

End code.
End time.
