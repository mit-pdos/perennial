(* autogenerated from time *)
From New.golang Require Import defn.

Require Export New.trusted_code.time.
Import time.
Definition time : go_string := "time".

Module time.
Section code.
Context `{ffi_syntax}.


Definition std0x : go_string := "time.std0x"%go.

Axiom std0x'init : val.

Definition startsWithLowerCase : go_string := "time.startsWithLowerCase"%go.

Definition nextStdChunk : go_string := "time.nextStdChunk"%go.

Definition longDayNames : go_string := "time.longDayNames"%go.

Axiom longDayNames'init : val.

Definition shortDayNames : go_string := "time.shortDayNames"%go.

Axiom shortDayNames'init : val.

Definition shortMonthNames : go_string := "time.shortMonthNames"%go.

Axiom shortMonthNames'init : val.

Definition longMonthNames : go_string := "time.longMonthNames"%go.

Axiom longMonthNames'init : val.

Definition match' : go_string := "time.match"%go.

Definition lookup' : go_string := "time.lookup"%go.

Definition appendInt : go_string := "time.appendInt"%go.

Definition errAtoi : go_string := "time.errAtoi"%go.

Axiom errAtoi'init : val.

Definition atoi : go_string := "time.atoi"%go.

Definition stdFracSecond : go_string := "time.stdFracSecond"%go.

Definition digitsLen : go_string := "time.digitsLen"%go.

Definition separator : go_string := "time.separator"%go.

Definition appendNano : go_string := "time.appendNano"%go.

Definition errBad : go_string := "time.errBad"%go.

Axiom errBad'init : val.

Definition newParseError : go_string := "time.newParseError"%go.

Definition quote : go_string := "time.quote"%go.

Definition isDigit : go_string := "time.isDigit"%go.

Definition getnum : go_string := "time.getnum"%go.

Definition getnum3 : go_string := "time.getnum3"%go.

Definition cutspace : go_string := "time.cutspace"%go.

Definition skip : go_string := "time.skip"%go.

Definition Parse : go_string := "time.Parse"%go.

Definition ParseInLocation : go_string := "time.ParseInLocation"%go.

Definition parse : go_string := "time.parse"%go.

Definition parseTimeZone : go_string := "time.parseTimeZone"%go.

Definition parseGMT : go_string := "time.parseGMT"%go.

Definition parseSignedOffset : go_string := "time.parseSignedOffset"%go.

Definition commaOrPeriod : go_string := "time.commaOrPeriod"%go.

Definition parseNanoseconds : go_string := "time.parseNanoseconds"%go.

Definition errLeadingInt : go_string := "time.errLeadingInt"%go.

Axiom errLeadingInt'init : val.

Definition leadingInt : go_string := "time.leadingInt"%go.

Definition leadingFraction : go_string := "time.leadingFraction"%go.

Definition unitMap : go_string := "time.unitMap"%go.

Axiom unitMap'init : val.

Definition ParseDuration : go_string := "time.ParseDuration"%go.

Definition parseRFC3339 : go_string := "time.parseRFC3339"%go.

Definition parseStrictRFC3339 : go_string := "time.parseStrictRFC3339"%go.

Definition Sleep : go_string := "time.Sleep"%go.

Definition asynctimerchan : go_string := "time.asynctimerchan"%go.

Axiom asynctimerchan'init : val.

Definition syncTimer : go_string := "time.syncTimer"%go.

Definition when : go_string := "time.when"%go.

Definition newTimer : go_string := "time.newTimer"%go.

Definition stopTimer : go_string := "time.stopTimer"%go.

Definition resetTimer : go_string := "time.resetTimer"%go.

Definition Timerⁱᵈ : go_string := "time.Timer"%go.

Definition Time : go_type := structT [
  "wall" :: uint64T;
  "ext" :: int64T;
  "loc" :: ptrT
].

Definition Timer : go_type := structT [
  "C" :: chanT Time;
  "initTimer" :: boolT
].

Definition NewTimer : go_string := "time.NewTimer"%go.

Definition sendTime : go_string := "time.sendTime"%go.

Definition After : go_string := "time.After"%go.

Definition AfterFunc : go_string := "time.AfterFunc"%go.

Definition goFunc : go_string := "time.goFunc"%go.

Definition interrupt : go_string := "time.interrupt"%go.

Definition open : go_string := "time.open"%go.

Definition read : go_string := "time.read"%go.

Definition closefd : go_string := "time.closefd"%go.

Definition preadn : go_string := "time.preadn"%go.

Definition NewTicker : go_string := "time.NewTicker"%go.

Definition Tick : go_string := "time.Tick"%go.

Definition Timeⁱᵈ : go_string := "time.Time"%go.

Definition dateToAbsDays : go_string := "time.dateToAbsDays"%go.

Definition Durationⁱᵈ : go_string := "time.Duration"%go.

Definition Duration : go_type := int64T.

Definition Nanosecond : expr := #(W64 1).

Definition Microsecond : expr := #(W64 1000).

Definition Millisecond : expr := #(W64 1000000).

Definition Second : expr := #(W64 1000000000).

Definition fmtFrac : go_string := "time.fmtFrac"%go.

Definition fmtInt : go_string := "time.fmtInt"%go.

Definition lessThanHalf : go_string := "time.lessThanHalf"%go.

Definition subMono : go_string := "time.subMono"%go.

Definition Since : go_string := "time.Since"%go.

Definition Until : go_string := "time.Until"%go.

Definition daysBefore : go_string := "time.daysBefore"%go.

Definition daysIn : go_string := "time.daysIn"%go.

Definition now : go_string := "time.now"%go.

Definition runtimeNow : go_string := "time.runtimeNow"%go.

Definition runtimeNano : go_string := "time.runtimeNano"%go.

Definition startNano : go_string := "time.startNano"%go.

Axiom startNano'init : val.

Definition Now : go_string := "time.Now"%go.

Definition unixTime : go_string := "time.unixTime"%go.

Definition Unix : go_string := "time.Unix"%go.

Definition UnixMilli : go_string := "time.UnixMilli"%go.

Definition UnixMicro : go_string := "time.UnixMicro"%go.

Definition isLeap : go_string := "time.isLeap"%go.

Definition norm : go_string := "time.norm"%go.

Definition Date : go_string := "time.Date"%go.

Definition div : go_string := "time.div"%go.

Definition legacyTimeTimeAbs : go_string := "time.legacyTimeTimeAbs"%go.

Definition legacyAbsClock : go_string := "time.legacyAbsClock"%go.

Definition legacyAbsDate : go_string := "time.legacyAbsDate"%go.

Definition UTC : go_string := "time.UTC"%go.

Axiom UTC'init : val.

Definition utcLoc : go_string := "time.utcLoc"%go.

Axiom utcLoc'init : val.

Definition Local : go_string := "time.Local"%go.

Axiom Local'init : val.

Definition localLoc : go_string := "time.localLoc"%go.

Definition localOnce : go_string := "time.localOnce"%go.

Definition unnamedFixedZones : go_string := "time.unnamedFixedZones"%go.

Definition unnamedFixedZonesOnce : go_string := "time.unnamedFixedZonesOnce"%go.

Definition FixedZone : go_string := "time.FixedZone"%go.

Definition fixedZone : go_string := "time.fixedZone"%go.

Definition tzset : go_string := "time.tzset"%go.

Definition tzsetName : go_string := "time.tzsetName"%go.

Definition tzsetOffset : go_string := "time.tzsetOffset"%go.

Definition tzsetRule : go_string := "time.tzsetRule"%go.

Definition tzsetNum : go_string := "time.tzsetNum"%go.

Definition tzruleTime : go_string := "time.tzruleTime"%go.

Definition errLocation : go_string := "time.errLocation"%go.

Axiom errLocation'init : val.

Definition zoneinfo : go_string := "time.zoneinfo"%go.

Definition zoneinfoOnce : go_string := "time.zoneinfoOnce"%go.

Definition LoadLocation : go_string := "time.LoadLocation"%go.

Definition containsDotDot : go_string := "time.containsDotDot"%go.

Definition gorootZoneSource : go_string := "time.gorootZoneSource"%go.

Definition registerLoadFromEmbeddedTZData : go_string := "time.registerLoadFromEmbeddedTZData"%go.

Definition loadFromEmbeddedTZData : go_string := "time.loadFromEmbeddedTZData"%go.

Definition byteString : go_string := "time.byteString"%go.

Definition errBadData : go_string := "time.errBadData"%go.

Axiom errBadData'init : val.

Definition LoadLocationFromTZData : go_string := "time.LoadLocationFromTZData"%go.

Definition findZone : go_string := "time.findZone"%go.

Definition loadTzinfoFromDirOrZip : go_string := "time.loadTzinfoFromDirOrZip"%go.

Definition get4 : go_string := "time.get4"%go.

Definition get2 : go_string := "time.get2"%go.

Definition loadTzinfoFromZip : go_string := "time.loadTzinfoFromZip"%go.

Definition loadTzinfoFromTzdata : go_string := "time.loadTzinfoFromTzdata"%go.

Definition loadTzinfo : go_string := "time.loadTzinfo"%go.

Definition loadLocation : go_string := "time.loadLocation"%go.

Definition readFile : go_string := "time.readFile"%go.

Definition platformZoneSources : go_string := "time.platformZoneSources"%go.

Axiom platformZoneSources'init : val.

Definition initLocal : go_string := "time.initLocal"%go.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(syncTimer, syncTimerⁱᵐᵖˡ); (newTimer, newTimerⁱᵐᵖˡ); (After, Afterⁱᵐᵖˡ); (runtimeNano, runtimeNanoⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(Timerⁱᵈ, []); (ptrTⁱᵈ Timerⁱᵈ, []); (Timeⁱᵈ, []); (ptrTⁱᵈ Timeⁱᵈ, []); (Durationⁱᵈ, []); (ptrTⁱᵈ Durationⁱᵈ, [])].

#[global] Instance info' : PkgInfo time.time :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #time.time (λ: <>,
      exception_do (do:  (package.alloc time.time #());;;
      do:  (std0x'init #());;;
      do:  (longDayNames'init #());;;
      do:  (shortDayNames'init #());;;
      do:  (shortMonthNames'init #());;;
      do:  (longMonthNames'init #());;;
      do:  (errAtoi'init #());;;
      do:  (errBad'init #());;;
      do:  (errLeadingInt'init #());;;
      do:  (unitMap'init #());;;
      do:  (asynctimerchan'init #());;;
      do:  (startNano'init #());;;
      do:  (utcLoc'init #());;;
      do:  (UTC'init #());;;
      do:  (Local'init #());;;
      do:  (errLocation'init #());;;
      do:  (errBadData'init #());;;
      do:  (platformZoneSources'init #()))
      ).

End code.
End time.
