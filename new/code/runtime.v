(* autogenerated from runtime *)

From New.golang Require Import defn.
Require Export New.trusted_code.runtime.
Import runtime.
Definition runtime : go_string := "runtime".

Module runtime.

Module userArena. Definition id : go_string := "runtime.userArena"%go. End userArena.
Module liveUserArenaChunk. Definition id : go_string := "runtime.liveUserArenaChunk"%go. End liveUserArenaChunk.
Module writeUserArenaHeapBits. Definition id : go_string := "runtime.writeUserArenaHeapBits"%go. End writeUserArenaHeapBits.
Module cgoCallers. Definition id : go_string := "runtime.cgoCallers"%go. End cgoCallers.
Module argset. Definition id : go_string := "runtime.argset"%go. End argset.
Module hchan. Definition id : go_string := "runtime.hchan"%go. End hchan.
Module waitq. Definition id : go_string := "runtime.waitq"%go. End waitq.
Module coro. Definition id : go_string := "runtime.coro"%go. End coro.
Module cpuProfile. Definition id : go_string := "runtime.cpuProfile"%go. End cpuProfile.
Module debugCallWrapArgs. Definition id : go_string := "runtime.debugCallWrapArgs"%go. End debugCallWrapArgs.
Module dloggerImpl. Definition id : go_string := "runtime.dloggerImpl"%go. End dloggerImpl.
Module dloggerFake. Definition id : go_string := "runtime.dloggerFake"%go. End dloggerFake.
Module debugLogWriter. Definition id : go_string := "runtime.debugLogWriter"%go. End debugLogWriter.
Module debugLogBuf. Definition id : go_string := "runtime.debugLogBuf"%go. End debugLogBuf.
Module debugLogReader. Definition id : go_string := "runtime.debugLogReader"%go. End debugLogReader.
Module dlogger. Axiom id : go_string. End dlogger.
Module dlogPerM. Definition id : go_string := "runtime.dlogPerM"%go. End dlogPerM.
Module timespec. Definition id : go_string := "runtime.timespec"%go. End timespec.
Module timeval. Definition id : go_string := "runtime.timeval"%go. End timeval.
Module sigactiont. Definition id : go_string := "runtime.sigactiont"%go. End sigactiont.
Module siginfoFields. Definition id : go_string := "runtime.siginfoFields"%go. End siginfoFields.
Module siginfo. Definition id : go_string := "runtime.siginfo"%go. End siginfo.
Module itimerspec. Definition id : go_string := "runtime.itimerspec"%go. End itimerspec.
Module itimerval. Definition id : go_string := "runtime.itimerval"%go. End itimerval.
Module sigeventFields. Definition id : go_string := "runtime.sigeventFields"%go. End sigeventFields.
Module sigevent. Definition id : go_string := "runtime.sigevent"%go. End sigevent.
Module usigset. Definition id : go_string := "runtime.usigset"%go. End usigset.
Module fpxreg. Definition id : go_string := "runtime.fpxreg"%go. End fpxreg.
Module xmmreg. Definition id : go_string := "runtime.xmmreg"%go. End xmmreg.
Module fpstate. Definition id : go_string := "runtime.fpstate"%go. End fpstate.
Module fpxreg1. Definition id : go_string := "runtime.fpxreg1"%go. End fpxreg1.
Module xmmreg1. Definition id : go_string := "runtime.xmmreg1"%go. End xmmreg1.
Module fpstate1. Definition id : go_string := "runtime.fpstate1"%go. End fpstate1.
Module fpreg1. Definition id : go_string := "runtime.fpreg1"%go. End fpreg1.
Module stackt. Definition id : go_string := "runtime.stackt"%go. End stackt.
Module mcontext. Definition id : go_string := "runtime.mcontext"%go. End mcontext.
Module ucontext. Definition id : go_string := "runtime.ucontext"%go. End ucontext.
Module sigcontext. Definition id : go_string := "runtime.sigcontext"%go. End sigcontext.
Module sockaddr_un. Definition id : go_string := "runtime.sockaddr_un"%go. End sockaddr_un.
Module Error. Definition id : go_string := "runtime.Error"%go. End Error.
Module TypeAssertionError. Definition id : go_string := "runtime.TypeAssertionError"%go. End TypeAssertionError.
Module errorString. Definition id : go_string := "runtime.errorString"%go. End errorString.
Module errorAddressString. Definition id : go_string := "runtime.errorAddressString"%go. End errorAddressString.
Module plainError. Definition id : go_string := "runtime.plainError"%go. End plainError.
Module boundsError. Definition id : go_string := "runtime.boundsError"%go. End boundsError.
Module boundsErrorCode. Definition id : go_string := "runtime.boundsErrorCode"%go. End boundsErrorCode.
Module stringer. Definition id : go_string := "runtime.stringer"%go. End stringer.
Module typeCacheBucket. Definition id : go_string := "runtime.typeCacheBucket"%go. End typeCacheBucket.
Module childInfo. Definition id : go_string := "runtime.childInfo"%go. End childInfo.
Module timeHistogram. Definition id : go_string := "runtime.timeHistogram"%go. End timeHistogram.
Module itabTableType. Definition id : go_string := "runtime.itabTableType"%go. End itabTableType.
Module uint16InterfacePtr. Definition id : go_string := "runtime.uint16InterfacePtr"%go. End uint16InterfacePtr.
Module uint32InterfacePtr. Definition id : go_string := "runtime.uint32InterfacePtr"%go. End uint32InterfacePtr.
Module uint64InterfacePtr. Definition id : go_string := "runtime.uint64InterfacePtr"%go. End uint64InterfacePtr.
Module stringInterfacePtr. Definition id : go_string := "runtime.stringInterfacePtr"%go. End stringInterfacePtr.
Module sliceInterfacePtr. Definition id : go_string := "runtime.sliceInterfacePtr"%go. End sliceInterfacePtr.
Module lfstack. Definition id : go_string := "runtime.lfstack"%go. End lfstack.
Module linknameIter. Definition id : go_string := "runtime.linknameIter"%go. End linknameIter.
Module mWaitList. Definition id : go_string := "runtime.mWaitList"%go. End mWaitList.
Module lockRank. Definition id : go_string := "runtime.lockRank"%go. End lockRank.
Module lockRankStruct. Definition id : go_string := "runtime.lockRankStruct"%go. End lockRankStruct.
Module persistentAlloc. Definition id : go_string := "runtime.persistentAlloc"%go. End persistentAlloc.
Module linearAlloc. Definition id : go_string := "runtime.linearAlloc"%go. End linearAlloc.
Module notInHeap. Definition id : go_string := "runtime.notInHeap"%go. End notInHeap.
Module maptype. Axiom id : go_string. End maptype.
Module typePointers. Definition id : go_string := "runtime.typePointers"%go. End typePointers.
Module markBits. Definition id : go_string := "runtime.markBits"%go. End markBits.
Module mcache. Definition id : go_string := "runtime.mcache"%go. End mcache.
Module gclink. Definition id : go_string := "runtime.gclink"%go. End gclink.
Module gclinkptr. Definition id : go_string := "runtime.gclinkptr"%go. End gclinkptr.
Module stackfreelist. Definition id : go_string := "runtime.stackfreelist"%go. End stackfreelist.
Module mcentral. Definition id : go_string := "runtime.mcentral"%go. End mcentral.
Module checkmarksMap. Definition id : go_string := "runtime.checkmarksMap"%go. End checkmarksMap.
Module Cleanup. Definition id : go_string := "runtime.Cleanup"%go. End Cleanup.
Module metricData. Definition id : go_string := "runtime.metricData"%go. End metricData.
Module metricReader. Definition id : go_string := "runtime.metricReader"%go. End metricReader.
Module statDep. Definition id : go_string := "runtime.statDep"%go. End statDep.
Module statDepSet. Definition id : go_string := "runtime.statDepSet"%go. End statDepSet.
Module heapStatsAggregate. Definition id : go_string := "runtime.heapStatsAggregate"%go. End heapStatsAggregate.
Module sysStatsAggregate. Definition id : go_string := "runtime.sysStatsAggregate"%go. End sysStatsAggregate.
Module cpuStatsAggregate. Definition id : go_string := "runtime.cpuStatsAggregate"%go. End cpuStatsAggregate.
Module gcStatsAggregate. Definition id : go_string := "runtime.gcStatsAggregate"%go. End gcStatsAggregate.
Module statAggregate. Definition id : go_string := "runtime.statAggregate"%go. End statAggregate.
Module metricKind. Definition id : go_string := "runtime.metricKind"%go. End metricKind.
Module metricSample. Definition id : go_string := "runtime.metricSample"%go. End metricSample.
Module metricValue. Definition id : go_string := "runtime.metricValue"%go. End metricValue.
Module metricFloat64Histogram. Definition id : go_string := "runtime.metricFloat64Histogram"%go. End metricFloat64Histogram.
Module metricName. Definition id : go_string := "runtime.metricName"%go. End metricName.
Module finblock. Definition id : go_string := "runtime.finblock"%go. End finblock.
Module finalizer. Definition id : go_string := "runtime.finalizer"%go. End finalizer.
Module fixalloc. Definition id : go_string := "runtime.fixalloc"%go. End fixalloc.
Module mlink. Definition id : go_string := "runtime.mlink"%go. End mlink.
Module gcMarkWorkerMode. Definition id : go_string := "runtime.gcMarkWorkerMode"%go. End gcMarkWorkerMode.
Module workType. Definition id : go_string := "runtime.workType"%go. End workType.
Module gcMode. Definition id : go_string := "runtime.gcMode"%go. End gcMode.
Module gcTrigger. Definition id : go_string := "runtime.gcTrigger"%go. End gcTrigger.
Module gcTriggerKind. Definition id : go_string := "runtime.gcTriggerKind"%go. End gcTriggerKind.
Module gcBgMarkWorkerNode. Definition id : go_string := "runtime.gcBgMarkWorkerNode"%go. End gcBgMarkWorkerNode.
Module gcCPULimiterState. Definition id : go_string := "runtime.gcCPULimiterState"%go. End gcCPULimiterState.
Module limiterEventType. Definition id : go_string := "runtime.limiterEventType"%go. End limiterEventType.
Module limiterEventStamp. Definition id : go_string := "runtime.limiterEventStamp"%go. End limiterEventStamp.
Module limiterEvent. Definition id : go_string := "runtime.limiterEvent"%go. End limiterEvent.
Module gcDrainFlags. Definition id : go_string := "runtime.gcDrainFlags"%go. End gcDrainFlags.
Module gcControllerState. Definition id : go_string := "runtime.gcControllerState"%go. End gcControllerState.
Module scavengerState. Definition id : go_string := "runtime.scavengerState"%go. End scavengerState.
Module scavengeIndex. Definition id : go_string := "runtime.scavengeIndex"%go. End scavengeIndex.
Module atomicScavChunkData. Definition id : go_string := "runtime.atomicScavChunkData"%go. End atomicScavChunkData.
Module scavChunkData. Definition id : go_string := "runtime.scavChunkData"%go. End scavChunkData.
Module scavChunkFlags. Definition id : go_string := "runtime.scavChunkFlags"%go. End scavChunkFlags.
Module piController. Definition id : go_string := "runtime.piController"%go. End piController.
Module stackWorkBuf. Definition id : go_string := "runtime.stackWorkBuf"%go. End stackWorkBuf.
Module stackWorkBufHdr. Definition id : go_string := "runtime.stackWorkBufHdr"%go. End stackWorkBufHdr.
Module stackObjectBuf. Definition id : go_string := "runtime.stackObjectBuf"%go. End stackObjectBuf.
Module stackObjectBufHdr. Definition id : go_string := "runtime.stackObjectBufHdr"%go. End stackObjectBufHdr.
Module stackObject. Definition id : go_string := "runtime.stackObject"%go. End stackObject.
Module stackScanState. Definition id : go_string := "runtime.stackScanState"%go. End stackScanState.
Module sweepdata. Definition id : go_string := "runtime.sweepdata"%go. End sweepdata.
Module sweepClass. Definition id : go_string := "runtime.sweepClass"%go. End sweepClass.
Module activeSweep. Definition id : go_string := "runtime.activeSweep"%go. End activeSweep.
Module sweepLocker. Definition id : go_string := "runtime.sweepLocker"%go. End sweepLocker.
Module sweepLocked. Definition id : go_string := "runtime.sweepLocked"%go. End sweepLocked.
Module gcWork. Definition id : go_string := "runtime.gcWork"%go. End gcWork.
Module workbufhdr. Definition id : go_string := "runtime.workbufhdr"%go. End workbufhdr.
Module workbuf. Definition id : go_string := "runtime.workbuf"%go. End workbuf.
Module mheap. Definition id : go_string := "runtime.mheap"%go. End mheap.
Module heapArena. Definition id : go_string := "runtime.heapArena"%go. End heapArena.
Module arenaHint. Definition id : go_string := "runtime.arenaHint"%go. End arenaHint.
Module mSpanState. Definition id : go_string := "runtime.mSpanState"%go. End mSpanState.
Module mSpanStateBox. Definition id : go_string := "runtime.mSpanStateBox"%go. End mSpanStateBox.
Module mSpanList. Definition id : go_string := "runtime.mSpanList"%go. End mSpanList.
Module mspan. Definition id : go_string := "runtime.mspan"%go. End mspan.
Module spanClass. Definition id : go_string := "runtime.spanClass"%go. End spanClass.
Module arenaIdx. Definition id : go_string := "runtime.arenaIdx"%go. End arenaIdx.
Module spanAllocType. Definition id : go_string := "runtime.spanAllocType"%go. End spanAllocType.
Module special. Definition id : go_string := "runtime.special"%go. End special.
Module specialfinalizer. Definition id : go_string := "runtime.specialfinalizer"%go. End specialfinalizer.
Module specialCleanup. Definition id : go_string := "runtime.specialCleanup"%go. End specialCleanup.
Module specialWeakHandle. Definition id : go_string := "runtime.specialWeakHandle"%go. End specialWeakHandle.
Module specialprofile. Definition id : go_string := "runtime.specialprofile"%go. End specialprofile.
Module specialReachable. Definition id : go_string := "runtime.specialReachable"%go. End specialReachable.
Module specialPinCounter. Definition id : go_string := "runtime.specialPinCounter"%go. End specialPinCounter.
Module specialsIter. Definition id : go_string := "runtime.specialsIter"%go. End specialsIter.
Module gcBits. Definition id : go_string := "runtime.gcBits"%go. End gcBits.
Module gcBitsHeader. Definition id : go_string := "runtime.gcBitsHeader"%go. End gcBitsHeader.
Module gcBitsArena. Definition id : go_string := "runtime.gcBitsArena"%go. End gcBitsArena.
Module floaty. Definition id : go_string := "runtime.floaty"%go. End floaty.
Module chunkIdx. Definition id : go_string := "runtime.chunkIdx"%go. End chunkIdx.
Module pageAlloc. Definition id : go_string := "runtime.pageAlloc"%go. End pageAlloc.
Module pallocSum. Definition id : go_string := "runtime.pallocSum"%go. End pallocSum.
Module pageCache. Definition id : go_string := "runtime.pageCache"%go. End pageCache.
Module pageBits. Definition id : go_string := "runtime.pageBits"%go. End pageBits.
Module pallocBits. Definition id : go_string := "runtime.pallocBits"%go. End pallocBits.
Module pallocData. Definition id : go_string := "runtime.pallocData"%go. End pallocData.
Module bucketType. Definition id : go_string := "runtime.bucketType"%go. End bucketType.
Module bucket. Definition id : go_string := "runtime.bucket"%go. End bucket.
Module memRecord. Definition id : go_string := "runtime.memRecord"%go. End memRecord.
Module memRecordCycle. Definition id : go_string := "runtime.memRecordCycle"%go. End memRecordCycle.
Module blockRecord. Definition id : go_string := "runtime.blockRecord"%go. End blockRecord.
Module buckhashArray. Definition id : go_string := "runtime.buckhashArray"%go. End buckhashArray.
Module mProfCycleHolder. Definition id : go_string := "runtime.mProfCycleHolder"%go. End mProfCycleHolder.
Module lockTimer. Definition id : go_string := "runtime.lockTimer"%go. End lockTimer.
Module mLockProfile. Definition id : go_string := "runtime.mLockProfile"%go. End mLockProfile.
Module StackRecord. Definition id : go_string := "runtime.StackRecord"%go. End StackRecord.
Module MemProfileRecord. Definition id : go_string := "runtime.MemProfileRecord"%go. End MemProfileRecord.
Module BlockProfileRecord. Definition id : go_string := "runtime.BlockProfileRecord"%go. End BlockProfileRecord.
Module goroutineProfileState. Definition id : go_string := "runtime.goroutineProfileState"%go. End goroutineProfileState.
Module goroutineProfileStateHolder. Definition id : go_string := "runtime.goroutineProfileStateHolder"%go. End goroutineProfileStateHolder.
Module addrRange. Definition id : go_string := "runtime.addrRange"%go. End addrRange.
Module offAddr. Definition id : go_string := "runtime.offAddr"%go. End offAddr.
Module atomicOffAddr. Definition id : go_string := "runtime.atomicOffAddr"%go. End atomicOffAddr.
Module addrRanges. Definition id : go_string := "runtime.addrRanges"%go. End addrRanges.
Module spanSet. Definition id : go_string := "runtime.spanSet"%go. End spanSet.
Module spanSetBlock. Definition id : go_string := "runtime.spanSetBlock"%go. End spanSetBlock.
Module atomicSpanSetSpinePointer. Definition id : go_string := "runtime.atomicSpanSetSpinePointer"%go. End atomicSpanSetSpinePointer.
Module spanSetSpinePointer. Definition id : go_string := "runtime.spanSetSpinePointer"%go. End spanSetSpinePointer.
Module spanSetBlockAlloc. Definition id : go_string := "runtime.spanSetBlockAlloc"%go. End spanSetBlockAlloc.
Module headTailIndex. Definition id : go_string := "runtime.headTailIndex"%go. End headTailIndex.
Module atomicHeadTailIndex. Definition id : go_string := "runtime.atomicHeadTailIndex"%go. End atomicHeadTailIndex.
Module atomicMSpanPointer. Definition id : go_string := "runtime.atomicMSpanPointer"%go. End atomicMSpanPointer.
Module mstats. Definition id : go_string := "runtime.mstats"%go. End mstats.
Module MemStats. Definition id : go_string := "runtime.MemStats"%go. End MemStats.
Module sysMemStat. Definition id : go_string := "runtime.sysMemStat"%go. End sysMemStat.
Module heapStatsDelta. Definition id : go_string := "runtime.heapStatsDelta"%go. End heapStatsDelta.
Module consistentHeapStats. Definition id : go_string := "runtime.consistentHeapStats"%go. End consistentHeapStats.
Module cpuStats. Definition id : go_string := "runtime.cpuStats"%go. End cpuStats.
Module wbBuf. Definition id : go_string := "runtime.wbBuf"%go. End wbBuf.
Module pollDesc. Definition id : go_string := "runtime.pollDesc"%go. End pollDesc.
Module pollInfo. Definition id : go_string := "runtime.pollInfo"%go. End pollInfo.
Module pollCache. Definition id : go_string := "runtime.pollCache"%go. End pollCache.
Module winlibcall. Definition id : go_string := "runtime.winlibcall"%go. End winlibcall.
Module note. Definition id : go_string := "runtime.note"%go. End note.
Module mOS. Definition id : go_string := "runtime.mOS"%go. End mOS.
Module perThreadSyscallArgs. Definition id : go_string := "runtime.perThreadSyscallArgs"%go. End perThreadSyscallArgs.
Module sigset. Definition id : go_string := "runtime.sigset"%go. End sigset.
Module throwType. Definition id : go_string := "runtime.throwType"%go. End throwType.
Module PanicNilError. Definition id : go_string := "runtime.PanicNilError"%go. End PanicNilError.
Module Pinner. Definition id : go_string := "runtime.Pinner"%go. End Pinner.
Module pinner. Definition id : go_string := "runtime.pinner"%go. End pinner.
Module pinState. Definition id : go_string := "runtime.pinState"%go. End pinState.
Module pinnerBits. Definition id : go_string := "runtime.pinnerBits"%go. End pinnerBits.
Module ptabEntry. Definition id : go_string := "runtime.ptabEntry"%go. End ptabEntry.
Module suspendGState. Definition id : go_string := "runtime.suspendGState"%go. End suspendGState.
Module hex. Definition id : go_string := "runtime.hex"%go. End hex.
Module stwReason. Definition id : go_string := "runtime.stwReason"%go. End stwReason.
Module worldStop. Definition id : go_string := "runtime.worldStop"%go. End worldStop.
Module cgothreadstart. Definition id : go_string := "runtime.cgothreadstart"%go. End cgothreadstart.
Module sysmontick. Definition id : go_string := "runtime.sysmontick"%go. End sysmontick.
Module pMask. Definition id : go_string := "runtime.pMask"%go. End pMask.
Module gQueue. Definition id : go_string := "runtime.gQueue"%go. End gQueue.
Module gList. Definition id : go_string := "runtime.gList"%go. End gList.
Module randomOrder. Definition id : go_string := "runtime.randomOrder"%go. End randomOrder.
Module randomEnum. Definition id : go_string := "runtime.randomEnum"%go. End randomEnum.
Module initTask. Definition id : go_string := "runtime.initTask"%go. End initTask.
Module tracestat. Definition id : go_string := "runtime.tracestat"%go. End tracestat.
Module profBuf. Definition id : go_string := "runtime.profBuf"%go. End profBuf.
Module profAtomic. Definition id : go_string := "runtime.profAtomic"%go. End profAtomic.
Module profIndex. Definition id : go_string := "runtime.profIndex"%go. End profIndex.
Module profBufReadMode. Definition id : go_string := "runtime.profBufReadMode"%go. End profBufReadMode.
Module ticksType. Definition id : go_string := "runtime.ticksType"%go. End ticksType.
Module godebugInc. Definition id : go_string := "runtime.godebugInc"%go. End godebugInc.
Module dbgVar. Definition id : go_string := "runtime.dbgVar"%go. End dbgVar.
Module mutex. Definition id : go_string := "runtime.mutex"%go. End mutex.
Module funcval. Definition id : go_string := "runtime.funcval"%go. End funcval.
Module iface. Definition id : go_string := "runtime.iface"%go. End iface.
Module eface. Definition id : go_string := "runtime.eface"%go. End eface.
Module guintptr. Definition id : go_string := "runtime.guintptr"%go. End guintptr.
Module puintptr. Definition id : go_string := "runtime.puintptr"%go. End puintptr.
Module muintptr. Definition id : go_string := "runtime.muintptr"%go. End muintptr.
Module gobuf. Definition id : go_string := "runtime.gobuf"%go. End gobuf.
Module sudog. Definition id : go_string := "runtime.sudog"%go. End sudog.
Module libcall. Definition id : go_string := "runtime.libcall"%go. End libcall.
Module stack. Definition id : go_string := "runtime.stack"%go. End stack.
Module heldLockInfo. Definition id : go_string := "runtime.heldLockInfo"%go. End heldLockInfo.
Module g. Definition id : go_string := "runtime.g"%go. End g.
Module m. Definition id : go_string := "runtime.m"%go. End m.
Module p. Definition id : go_string := "runtime.p"%go. End p.
Module schedt. Definition id : go_string := "runtime.schedt"%go. End schedt.
Module _func. Definition id : go_string := "runtime._func"%go. End _func.
Module funcinl. Definition id : go_string := "runtime.funcinl"%go. End funcinl.
Module itab. Axiom id : go_string. End itab.
Module lfnode. Definition id : go_string := "runtime.lfnode"%go. End lfnode.
Module forcegcstate. Definition id : go_string := "runtime.forcegcstate"%go. End forcegcstate.
Module _defer. Definition id : go_string := "runtime._defer"%go. End _defer.
Module _panic. Definition id : go_string := "runtime._panic"%go. End _panic.
Module savedOpenDeferState. Definition id : go_string := "runtime.savedOpenDeferState"%go. End savedOpenDeferState.
Module ancestorInfo. Definition id : go_string := "runtime.ancestorInfo"%go. End ancestorInfo.
Module waitReason. Definition id : go_string := "runtime.waitReason"%go. End waitReason.
Module rwmutex. Definition id : go_string := "runtime.rwmutex"%go. End rwmutex.
Module scase. Definition id : go_string := "runtime.scase"%go. End scase.
Module runtimeSelect. Definition id : go_string := "runtime.runtimeSelect"%go. End runtimeSelect.
Module selectDir. Definition id : go_string := "runtime.selectDir"%go. End selectDir.
Module semaRoot. Definition id : go_string := "runtime.semaRoot"%go. End semaRoot.
Module semTable. Definition id : go_string := "runtime.semTable"%go. End semTable.
Module semaProfileFlags. Definition id : go_string := "runtime.semaProfileFlags"%go. End semaProfileFlags.
Module notifyList. Definition id : go_string := "runtime.notifyList"%go. End notifyList.
Module sigctxt. Definition id : go_string := "runtime.sigctxt"%go. End sigctxt.
Module sigTabT. Definition id : go_string := "runtime.sigTabT"%go. End sigTabT.
Module gsignalStack. Definition id : go_string := "runtime.gsignalStack"%go. End gsignalStack.
Module slice. Definition id : go_string := "runtime.slice"%go. End slice.
Module notInHeapSlice. Definition id : go_string := "runtime.notInHeapSlice"%go. End notInHeapSlice.
Module stackpoolItem. Definition id : go_string := "runtime.stackpoolItem"%go. End stackpoolItem.
Module adjustinfo. Definition id : go_string := "runtime.adjustinfo"%go. End adjustinfo.
Module bitvector. Definition id : go_string := "runtime.bitvector"%go. End bitvector.
Module stackObjectRecord. Definition id : go_string := "runtime.stackObjectRecord"%go. End stackObjectRecord.
Module stkframe. Definition id : go_string := "runtime.stkframe"%go. End stkframe.
Module reflectMethodValue. Definition id : go_string := "runtime.reflectMethodValue"%go. End reflectMethodValue.
Module tmpBuf. Definition id : go_string := "runtime.tmpBuf"%go. End tmpBuf.
Module stringStruct. Definition id : go_string := "runtime.stringStruct"%go. End stringStruct.
Module stringStructDWARF. Definition id : go_string := "runtime.stringStructDWARF"%go. End stringStructDWARF.
Module neverCallThisFunction. Definition id : go_string := "runtime.neverCallThisFunction"%go. End neverCallThisFunction.
Module Frames. Definition id : go_string := "runtime.Frames"%go. End Frames.
Module Frame. Definition id : go_string := "runtime.Frame"%go. End Frame.
Module Func. Definition id : go_string := "runtime.Func"%go. End Func.
Module pcHeader. Definition id : go_string := "runtime.pcHeader"%go. End pcHeader.
Module moduledata. Definition id : go_string := "runtime.moduledata"%go. End moduledata.
Module modulehash. Definition id : go_string := "runtime.modulehash"%go. End modulehash.
Module functab. Definition id : go_string := "runtime.functab"%go. End functab.
Module textsect. Definition id : go_string := "runtime.textsect"%go. End textsect.
Module findfuncbucket. Definition id : go_string := "runtime.findfuncbucket"%go. End findfuncbucket.
Module funcInfo. Definition id : go_string := "runtime.funcInfo"%go. End funcInfo.
Module srcFunc. Definition id : go_string := "runtime.srcFunc"%go. End srcFunc.
Module pcvalueCache. Definition id : go_string := "runtime.pcvalueCache"%go. End pcvalueCache.
Module pcvalueCacheEnt. Definition id : go_string := "runtime.pcvalueCacheEnt"%go. End pcvalueCacheEnt.
Module stackmap. Definition id : go_string := "runtime.stackmap"%go. End stackmap.
Module inlinedCall. Definition id : go_string := "runtime.inlinedCall"%go. End inlinedCall.
Module inlineUnwinder. Definition id : go_string := "runtime.inlineUnwinder"%go. End inlineUnwinder.
Module inlineFrame. Definition id : go_string := "runtime.inlineFrame"%go. End inlineFrame.
Module synctestGroup. Definition id : go_string := "runtime.synctestGroup"%go. End synctestGroup.
Module taggedPointer. Definition id : go_string := "runtime.taggedPointer"%go. End taggedPointer.
Module timer. Definition id : go_string := "runtime.timer"%go. End timer.
Module timers. Definition id : go_string := "runtime.timers"%go. End timers.
Module timerWhen. Definition id : go_string := "runtime.timerWhen"%go. End timerWhen.
Module timeTimer. Definition id : go_string := "runtime.timeTimer"%go. End timeTimer.
Module traceAdvancerState. Definition id : go_string := "runtime.traceAdvancerState"%go. End traceAdvancerState.
Module wakeableSleep. Definition id : go_string := "runtime.wakeableSleep"%go. End wakeableSleep.
Module unwindFlags. Definition id : go_string := "runtime.unwindFlags"%go. End unwindFlags.
Module unwinder. Definition id : go_string := "runtime.unwinder"%go. End unwinder.
Module cgoTracebackArg. Definition id : go_string := "runtime.cgoTracebackArg"%go. End cgoTracebackArg.
Module cgoContextArg. Definition id : go_string := "runtime.cgoContextArg"%go. End cgoContextArg.
Module cgoSymbolizerArg. Definition id : go_string := "runtime.cgoSymbolizerArg"%go. End cgoSymbolizerArg.
Module traceWriter. Definition id : go_string := "runtime.traceWriter"%go. End traceWriter.
Module traceBufQueue. Definition id : go_string := "runtime.traceBufQueue"%go. End traceBufQueue.
Module traceBufHeader. Definition id : go_string := "runtime.traceBufHeader"%go. End traceBufHeader.
Module traceBuf. Definition id : go_string := "runtime.traceBuf"%go. End traceBuf.
Module traceEv. Definition id : go_string := "runtime.traceEv"%go. End traceEv.
Module traceArg. Definition id : go_string := "runtime.traceArg"%go. End traceArg.
Module traceEventWriter. Definition id : go_string := "runtime.traceEventWriter"%go. End traceEventWriter.
Module traceExperiment. Definition id : go_string := "runtime.traceExperiment"%go. End traceExperiment.
Module traceMap. Definition id : go_string := "runtime.traceMap"%go. End traceMap.
Module traceMapNode. Definition id : go_string := "runtime.traceMapNode"%go. End traceMapNode.
Module traceRegionAlloc. Definition id : go_string := "runtime.traceRegionAlloc"%go. End traceRegionAlloc.
Module traceRegionAllocBlock. Definition id : go_string := "runtime.traceRegionAllocBlock"%go. End traceRegionAllocBlock.
Module traceRegionAllocBlockHeader. Definition id : go_string := "runtime.traceRegionAllocBlockHeader"%go. End traceRegionAllocBlockHeader.
Module gTraceState. Definition id : go_string := "runtime.gTraceState"%go. End gTraceState.
Module mTraceState. Definition id : go_string := "runtime.mTraceState"%go. End mTraceState.
Module pTraceState. Definition id : go_string := "runtime.pTraceState"%go. End pTraceState.
Module traceBlockReason. Definition id : go_string := "runtime.traceBlockReason"%go. End traceBlockReason.
Module traceGoStopReason. Definition id : go_string := "runtime.traceGoStopReason"%go. End traceGoStopReason.
Module traceLocker. Definition id : go_string := "runtime.traceLocker"%go. End traceLocker.
Module traceStackTable. Definition id : go_string := "runtime.traceStackTable"%go. End traceStackTable.
Module traceFrame. Definition id : go_string := "runtime.traceFrame"%go. End traceFrame.
Module traceGoStatus. Definition id : go_string := "runtime.traceGoStatus"%go. End traceGoStatus.
Module traceProcStatus. Definition id : go_string := "runtime.traceProcStatus"%go. End traceProcStatus.
Module traceSchedResourceState. Definition id : go_string := "runtime.traceSchedResourceState"%go. End traceSchedResourceState.
Module traceStringTable. Definition id : go_string := "runtime.traceStringTable"%go. End traceStringTable.
Module traceTime. Definition id : go_string := "runtime.traceTime"%go. End traceTime.
Module traceTypeTable. Definition id : go_string := "runtime.traceTypeTable"%go. End traceTypeTable.
Module nameOff. Axiom id : go_string. End nameOff.
Module typeOff. Axiom id : go_string. End typeOff.
Module textOff. Axiom id : go_string. End textOff.
Module _type. Axiom id : go_string. End _type.
Module rtype. Definition id : go_string := "runtime.rtype"%go. End rtype.
Module bitCursor. Definition id : go_string := "runtime.bitCursor"%go. End bitCursor.
Module uncommontype. Axiom id : go_string. End uncommontype.
Module interfacetype. Axiom id : go_string. End interfacetype.
Module arraytype. Axiom id : go_string. End arraytype.
Module chantype. Axiom id : go_string. End chantype.
Module slicetype. Axiom id : go_string. End slicetype.
Module functype. Axiom id : go_string. End functype.
Module ptrtype. Axiom id : go_string. End ptrtype.
Module name. Axiom id : go_string. End name.
Module structtype. Axiom id : go_string. End structtype.
Module _typePair. Definition id : go_string := "runtime._typePair"%go. End _typePair.
Module elfSym. Definition id : go_string := "runtime.elfSym"%go. End elfSym.
Module elfVerdef. Definition id : go_string := "runtime.elfVerdef"%go. End elfVerdef.
Module elfEhdr. Definition id : go_string := "runtime.elfEhdr"%go. End elfEhdr.
Module elfPhdr. Definition id : go_string := "runtime.elfPhdr"%go. End elfPhdr.
Module elfShdr. Definition id : go_string := "runtime.elfShdr"%go. End elfShdr.
Module elfDyn. Definition id : go_string := "runtime.elfDyn"%go. End elfDyn.
Module elfVerdaux. Definition id : go_string := "runtime.elfVerdaux"%go. End elfVerdaux.
Module vdsoSymbolKey. Definition id : go_string := "runtime.vdsoSymbolKey"%go. End vdsoSymbolKey.
Module vdsoVersionKey. Definition id : go_string := "runtime.vdsoVersionKey"%go. End vdsoVersionKey.
Module vdsoInfo. Definition id : go_string := "runtime.vdsoInfo"%go. End vdsoInfo.

Section code.
Context `{ffi_syntax}.


Axiom c0 : val.

Axiom c1 : val.

Definition memhash0 : go_string := "runtime.memhash0"%go.

Definition memhash8 : go_string := "runtime.memhash8"%go.

Definition memhash16 : go_string := "runtime.memhash16"%go.

Definition memhash128 : go_string := "runtime.memhash128"%go.

Definition memhash_varlen : go_string := "runtime.memhash_varlen"%go.

Definition useAeshash : go_string := "runtime.useAeshash"%go.

Definition memhash : go_string := "runtime.memhash"%go.

Definition memhash32 : go_string := "runtime.memhash32"%go.

Definition memhash64 : go_string := "runtime.memhash64"%go.

Definition strhash : go_string := "runtime.strhash"%go.

Definition strhashFallback : go_string := "runtime.strhashFallback"%go.

Definition f32hash : go_string := "runtime.f32hash"%go.

Definition f64hash : go_string := "runtime.f64hash"%go.

Definition c64hash : go_string := "runtime.c64hash"%go.

Definition c128hash : go_string := "runtime.c128hash"%go.

Definition interhash : go_string := "runtime.interhash"%go.

Definition nilinterhash : go_string := "runtime.nilinterhash"%go.

Definition typehash : go_string := "runtime.typehash"%go.

Definition mapKeyError : go_string := "runtime.mapKeyError"%go.

Definition mapKeyError2 : go_string := "runtime.mapKeyError2"%go.

Definition reflect_typehash : go_string := "runtime.reflect_typehash"%go.

Definition memequal0 : go_string := "runtime.memequal0"%go.

Definition memequal8 : go_string := "runtime.memequal8"%go.

Definition memequal16 : go_string := "runtime.memequal16"%go.

Definition memequal32 : go_string := "runtime.memequal32"%go.

Definition memequal64 : go_string := "runtime.memequal64"%go.

Definition memequal128 : go_string := "runtime.memequal128"%go.

Definition f32equal : go_string := "runtime.f32equal"%go.

Definition f64equal : go_string := "runtime.f64equal"%go.

Definition c64equal : go_string := "runtime.c64equal"%go.

Definition c128equal : go_string := "runtime.c128equal"%go.

Definition strequal : go_string := "runtime.strequal"%go.

Definition interequal : go_string := "runtime.interequal"%go.

Definition nilinterequal : go_string := "runtime.nilinterequal"%go.

Definition efaceeq : go_string := "runtime.efaceeq"%go.

Definition ifaceeq : go_string := "runtime.ifaceeq"%go.

Definition stringHash : go_string := "runtime.stringHash"%go.

Definition bytesHash : go_string := "runtime.bytesHash"%go.

Definition int32Hash : go_string := "runtime.int32Hash"%go.

Definition int64Hash : go_string := "runtime.int64Hash"%go.

Definition efaceHash : go_string := "runtime.efaceHash"%go.

Definition ifaceHash : go_string := "runtime.ifaceHash"%go.

Axiom hashRandomBytes : Z.

Definition aeskeysched : go_string := "runtime.aeskeysched"%go.

Definition hashkey : go_string := "runtime.hashkey"%go.

Definition alginit : go_string := "runtime.alginit"%go.

Definition initAlgAES : go_string := "runtime.initAlgAES"%go.

Definition readUnaligned32 : go_string := "runtime.readUnaligned32"%go.

Definition readUnaligned64 : go_string := "runtime.readUnaligned64"%go.

Definition arena_newArena : go_string := "runtime.arena_newArena"%go.

Definition arena_arena_New : go_string := "runtime.arena_arena_New"%go.

Definition arena_arena_Slice : go_string := "runtime.arena_arena_Slice"%go.

Definition arena_arena_Free : go_string := "runtime.arena_arena_Free"%go.

Definition arena_heapify : go_string := "runtime.arena_heapify"%go.

Axiom userArenaChunkBytesMax : Z.

Axiom userArenaChunkBytes : val.

Axiom userArenaChunkPages : val.

Axiom userArenaChunkMaxAllocBytes : val.

Definition init : go_string := "runtime.init"%go.

Definition userArenaChunkReserveBytes : go_string := "runtime.userArenaChunkReserveBytes"%go.

Axiom userArena : go_type.

Definition newUserArena : go_string := "runtime.newUserArena"%go.

Axiom liveUserArenaChunk : go_type.

Definition userArenaState : go_string := "runtime.userArenaState"%go.

Definition userArenaHeapBitsSetSliceType : go_string := "runtime.userArenaHeapBitsSetSliceType"%go.

Definition userArenaHeapBitsSetType : go_string := "runtime.userArenaHeapBitsSetType"%go.

Axiom writeUserArenaHeapBits : go_type.

Definition bswapIfBigEndian : go_string := "runtime.bswapIfBigEndian"%go.

Definition newUserArenaChunk : go_string := "runtime.newUserArenaChunk"%go.

Definition inUserArenaChunk : go_string := "runtime.inUserArenaChunk"%go.

Definition freeUserArenaChunk : go_string := "runtime.freeUserArenaChunk"%go.

Axiom asanenabled : val.

Definition asanread : go_string := "runtime.asanread"%go.

Definition asanwrite : go_string := "runtime.asanwrite"%go.

Definition asanunpoison : go_string := "runtime.asanunpoison"%go.

Definition asanpoison : go_string := "runtime.asanpoison"%go.

Definition asanregisterglobals : go_string := "runtime.asanregisterglobals"%go.

Definition atomicwb : go_string := "runtime.atomicwb"%go.

Definition atomicstorep : go_string := "runtime.atomicstorep"%go.

Definition atomic_storePointer : go_string := "runtime.atomic_storePointer"%go.

Definition atomic_casPointer : go_string := "runtime.atomic_casPointer"%go.

Definition sync_atomic_StoreUintptr : go_string := "runtime.sync_atomic_StoreUintptr"%go.

Definition sync_atomic_StorePointer : go_string := "runtime.sync_atomic_StorePointer"%go.

Definition sync_atomic_SwapUintptr : go_string := "runtime.sync_atomic_SwapUintptr"%go.

Definition sync_atomic_SwapPointer : go_string := "runtime.sync_atomic_SwapPointer"%go.

Definition sync_atomic_CompareAndSwapUintptr : go_string := "runtime.sync_atomic_CompareAndSwapUintptr"%go.

Definition sync_atomic_CompareAndSwapPointer : go_string := "runtime.sync_atomic_CompareAndSwapPointer"%go.

Definition _cgo_init : go_string := "runtime._cgo_init"%go.

Definition _cgo_thread_start : go_string := "runtime._cgo_thread_start"%go.

Definition _cgo_sys_thread_create : go_string := "runtime._cgo_sys_thread_create"%go.

Definition _cgo_notify_runtime_init_done : go_string := "runtime._cgo_notify_runtime_init_done"%go.

Definition _cgo_callers : go_string := "runtime._cgo_callers"%go.

Definition _cgo_set_context_function : go_string := "runtime._cgo_set_context_function"%go.

Definition _cgo_yield : go_string := "runtime._cgo_yield"%go.

Definition _cgo_pthread_key_created : go_string := "runtime._cgo_pthread_key_created"%go.

Definition _cgo_bindm : go_string := "runtime._cgo_bindm"%go.

Definition _cgo_getstackbound : go_string := "runtime._cgo_getstackbound"%go.

Definition iscgo : go_string := "runtime.iscgo"%go.

Definition set_crosscall2 : go_string := "runtime.set_crosscall2"%go.

Definition cgoHasExtraM : go_string := "runtime.cgoHasExtraM"%go.

Definition cgoUse : go_string := "runtime.cgoUse"%go.

Definition cgoKeepAlive : go_string := "runtime.cgoKeepAlive"%go.

Definition cgoAlwaysFalse : go_string := "runtime.cgoAlwaysFalse"%go.

Definition cgo_yield : go_string := "runtime.cgo_yield"%go.

Axiom cgo_yield'init : val.

Definition cgoNoCallback : go_string := "runtime.cgoNoCallback"%go.

Definition _cgo_mmap : go_string := "runtime._cgo_mmap"%go.

Definition _cgo_munmap : go_string := "runtime._cgo_munmap"%go.

Definition mmap : go_string := "runtime.mmap"%go.

Definition munmap : go_string := "runtime.munmap"%go.

Definition sysMmap : go_string := "runtime.sysMmap"%go.

Definition callCgoMmap : go_string := "runtime.callCgoMmap"%go.

Definition sysMunmap : go_string := "runtime.sysMunmap"%go.

Definition callCgoMunmap : go_string := "runtime.callCgoMunmap"%go.

Definition _cgo_sigaction : go_string := "runtime._cgo_sigaction"%go.

Definition sigaction : go_string := "runtime.sigaction"%go.

Definition callCgoSigaction : go_string := "runtime.callCgoSigaction"%go.

Axiom cgoCallers : go_type.

Axiom argset : go_type.

Definition syscall_cgocaller : go_string := "runtime.syscall_cgocaller"%go.

Definition ncgocall : go_string := "runtime.ncgocall"%go.

Definition cgocall : go_string := "runtime.cgocall"%go.

Definition callbackUpdateSystemStack : go_string := "runtime.callbackUpdateSystemStack"%go.

Definition cgocallbackg : go_string := "runtime.cgocallbackg"%go.

Definition cgocallbackg1 : go_string := "runtime.cgocallbackg1"%go.

Definition unwindm : go_string := "runtime.unwindm"%go.

Definition badcgocallback : go_string := "runtime.badcgocallback"%go.

Definition cgounimpl : go_string := "runtime.cgounimpl"%go.

Definition racecgosync : go_string := "runtime.racecgosync"%go.

Definition cgoCheckPointer : go_string := "runtime.cgoCheckPointer"%go.

Axiom cgoCheckPointerFail : go_string.

Axiom cgoResultFail : go_string.

Definition cgoCheckArg : go_string := "runtime.cgoCheckArg"%go.

Definition cgoCheckUnknownPointer : go_string := "runtime.cgoCheckUnknownPointer"%go.

Definition cgoIsGoPointer : go_string := "runtime.cgoIsGoPointer"%go.

Definition cgoInRange : go_string := "runtime.cgoInRange"%go.

Definition cgoCheckResult : go_string := "runtime.cgoCheckResult"%go.

Definition _cgo_panic_internal : go_string := "runtime._cgo_panic_internal"%go.

Axiom cgoWriteBarrierFail : go_string.

Definition cgoCheckPtrWrite : go_string := "runtime.cgoCheckPtrWrite"%go.

Definition cgoCheckMemmove : go_string := "runtime.cgoCheckMemmove"%go.

Definition cgoCheckMemmove2 : go_string := "runtime.cgoCheckMemmove2"%go.

Definition cgoCheckSliceCopy : go_string := "runtime.cgoCheckSliceCopy"%go.

Definition cgoCheckTypedBlock : go_string := "runtime.cgoCheckTypedBlock"%go.

Definition cgoCheckBits : go_string := "runtime.cgoCheckBits"%go.

Definition cgoCheckUsingType : go_string := "runtime.cgoCheckUsingType"%go.

Axiom maxAlign : Z.

Axiom hchanSize : val.

Axiom debugChan : val.

Axiom hchan : go_type.

Axiom waitq : go_type.

Definition reflect_makechan : go_string := "runtime.reflect_makechan"%go.

Definition makechan64 : go_string := "runtime.makechan64"%go.

Definition makechan : go_string := "runtime.makechan"%go.

Definition chanbuf : go_string := "runtime.chanbuf"%go.

Definition full : go_string := "runtime.full"%go.

Definition chansend1 : go_string := "runtime.chansend1"%go.

Definition chansend : go_string := "runtime.chansend"%go.

Definition send : go_string := "runtime.send"%go.

Definition timerchandrain : go_string := "runtime.timerchandrain"%go.

Definition sendDirect : go_string := "runtime.sendDirect"%go.

Definition recvDirect : go_string := "runtime.recvDirect"%go.

Definition closechan : go_string := "runtime.closechan"%go.

Definition empty : go_string := "runtime.empty"%go.

Definition chanrecv1 : go_string := "runtime.chanrecv1"%go.

Definition chanrecv2 : go_string := "runtime.chanrecv2"%go.

Definition chanrecv : go_string := "runtime.chanrecv"%go.

Definition recv : go_string := "runtime.recv"%go.

Definition chanparkcommit : go_string := "runtime.chanparkcommit"%go.

Definition selectnbsend : go_string := "runtime.selectnbsend"%go.

Definition selectnbrecv : go_string := "runtime.selectnbrecv"%go.

Definition reflect_chansend : go_string := "runtime.reflect_chansend"%go.

Definition reflect_chanrecv : go_string := "runtime.reflect_chanrecv"%go.

Definition chanlen : go_string := "runtime.chanlen"%go.

Definition chancap : go_string := "runtime.chancap"%go.

Definition reflect_chanlen : go_string := "runtime.reflect_chanlen"%go.

Definition reflectlite_chanlen : go_string := "runtime.reflectlite_chanlen"%go.

Definition reflect_chancap : go_string := "runtime.reflect_chancap"%go.

Definition reflect_chanclose : go_string := "runtime.reflect_chanclose"%go.

Definition racesync : go_string := "runtime.racesync"%go.

Definition racenotify : go_string := "runtime.racenotify"%go.

Definition checkptrAlignment : go_string := "runtime.checkptrAlignment"%go.

Definition checkptrStraddles : go_string := "runtime.checkptrStraddles"%go.

Definition checkptrArithmetic : go_string := "runtime.checkptrArithmetic"%go.

Definition checkptrBase : go_string := "runtime.checkptrBase"%go.

Axiom Compiler : go_string.

Definition inf2one : go_string := "runtime.inf2one"%go.

Definition complex128div : go_string := "runtime.complex128div"%go.

Axiom coro : go_type.

Definition newcoro : go_string := "runtime.newcoro"%go.

Definition corostart : go_string := "runtime.corostart"%go.

Definition coroexit : go_string := "runtime.coroexit"%go.

Definition coroswitch : go_string := "runtime.coroswitch"%go.

Definition coroswitch_m : go_string := "runtime.coroswitch_m"%go.

Definition coverage_getCovCounterList : go_string := "runtime.coverage_getCovCounterList"%go.

Definition addCovMeta : go_string := "runtime.addCovMeta"%go.

Axiom offsetX86HasAVX : val.

Axiom offsetX86HasAVX2 : val.

Axiom offsetX86HasERMS : val.

Axiom offsetX86HasRDTSCP : val.

Axiom offsetARMHasIDIVA : val.

Axiom offsetMIPS64XHasMSA : val.

Axiom offsetLOONG64HasLSX : val.

Definition x86HasPOPCNT : go_string := "runtime.x86HasPOPCNT"%go.

Definition x86HasSSE41 : go_string := "runtime.x86HasSSE41"%go.

Definition x86HasFMA : go_string := "runtime.x86HasFMA"%go.

Definition armHasVFPv4 : go_string := "runtime.armHasVFPv4"%go.

Definition arm64HasATOMICS : go_string := "runtime.arm64HasATOMICS"%go.

Definition loong64HasLAMCAS : go_string := "runtime.loong64HasLAMCAS"%go.

Definition loong64HasLAM_BH : go_string := "runtime.loong64HasLAM_BH"%go.

Definition loong64HasLSX : go_string := "runtime.loong64HasLSX"%go.

Definition memmoveBits : go_string := "runtime.memmoveBits"%go.

Axiom avxSupported : Z.

Axiom repmovsPreferred : Z.

Axiom maxCPUProfStack : Z.

Axiom profBufWordCount : Z.

Axiom profBufTagCount : Z.

Axiom cpuProfile : go_type.

Definition cpuprof : go_string := "runtime.cpuprof"%go.

Definition SetCPUProfileRate : go_string := "runtime.SetCPUProfileRate"%go.

Definition CPUProfile : go_string := "runtime.CPUProfile"%go.

Definition pprof_cyclesPerSecond : go_string := "runtime.pprof_cyclesPerSecond"%go.

Definition runtime_pprof_readProfile : go_string := "runtime.runtime_pprof_readProfile"%go.

Definition cputicks : go_string := "runtime.cputicks"%go.

Axiom canCreateFile : val.

Definition create : go_string := "runtime.create"%go.

Definition GOMAXPROCS : go_string := "runtime.GOMAXPROCS"%go.

Definition NumCPU : go_string := "runtime.NumCPU"%go.

Definition NumCgoCall : go_string := "runtime.NumCgoCall"%go.

Definition totalMutexWaitTimeNanos : go_string := "runtime.totalMutexWaitTimeNanos"%go.

Definition NumGoroutine : go_string := "runtime.NumGoroutine"%go.

Definition debug_modinfo : go_string := "runtime.debug_modinfo"%go.

Definition mayMoreStackPreempt : go_string := "runtime.mayMoreStackPreempt"%go.

Definition mayMoreStackMove : go_string := "runtime.mayMoreStackMove"%go.

Definition debugPinnerKeepUnpin : go_string := "runtime.debugPinnerKeepUnpin"%go.

Axiom debugPinnerKeepUnpin'init : val.

Definition debugPinnerV1 : go_string := "runtime.debugPinnerV1"%go.

Axiom debugCallSystemStack : go_string.

Axiom debugCallUnknownFunc : go_string.

Axiom debugCallRuntime : go_string.

Axiom debugCallUnsafePoint : go_string.

Definition debugCallV2 : go_string := "runtime.debugCallV2"%go.

Definition debugCallPanicked : go_string := "runtime.debugCallPanicked"%go.

Definition debugCallCheck : go_string := "runtime.debugCallCheck"%go.

Definition debugCallWrap : go_string := "runtime.debugCallWrap"%go.

Axiom debugCallWrapArgs : go_type.

Definition debugCallWrap1 : go_string := "runtime.debugCallWrap1"%go.

Definition debugCallWrap2 : go_string := "runtime.debugCallWrap2"%go.

Axiom debugLogBytes : Z.

Axiom debugLogStringLimit : Z.

Definition dlog : go_string := "runtime.dlog"%go.

Definition dlogFake : go_string := "runtime.dlogFake"%go.

Definition dlogImpl : go_string := "runtime.dlogImpl"%go.

Axiom dloggerImpl : go_type.

Definition allDloggers : go_string := "runtime.allDloggers"%go.

Axiom dloggerFake : go_type.

Axiom debugLogUnknown : Z.

Axiom debugLogBoolTrue : Z.

Axiom debugLogBoolFalse : Z.

Axiom debugLogInt : Z.

Axiom debugLogUint : Z.

Axiom debugLogHex : Z.

Axiom debugLogPtr : Z.

Axiom debugLogString : Z.

Axiom debugLogConstString : Z.

Axiom debugLogStringOverflow : Z.

Axiom debugLogPC : Z.

Axiom debugLogTraceback : Z.

Axiom debugLogWriter : go_type.

Axiom debugLogBuf : go_type.

Axiom debugLogHeaderSize : Z.

Axiom debugLogSyncSize : Z.

Axiom debugLogReader : go_type.

Definition printDebugLog : go_string := "runtime.printDebugLog"%go.

Definition printDebugLogImpl : go_string := "runtime.printDebugLogImpl"%go.

Definition printDebugLogPC : go_string := "runtime.printDebugLogPC"%go.

Axiom dlogEnabled : val.

Axiom dlogger : go_type.

Definition dlog1 : go_string := "runtime.dlog1"%go.

Axiom dlogPerM : go_type.

Definition getCachedDlogger : go_string := "runtime.getCachedDlogger"%go.

Definition putCachedDlogger : go_string := "runtime.putCachedDlogger"%go.

Axiom _EINTR : Z.

Axiom _EAGAIN : Z.

Axiom _ENOMEM : Z.

Axiom _PROT_NONE : Z.

Axiom _PROT_READ : Z.

Axiom _PROT_WRITE : Z.

Axiom _PROT_EXEC : Z.

Axiom _MAP_ANON : Z.

Axiom _MAP_PRIVATE : Z.

Axiom _MAP_FIXED : Z.

Axiom _MADV_DONTNEED : Z.

Axiom _MADV_FREE : Z.

Axiom _MADV_HUGEPAGE : Z.

Axiom _MADV_NOHUGEPAGE : Z.

Axiom _MADV_COLLAPSE : Z.

Axiom _SA_RESTART : Z.

Axiom _SA_ONSTACK : Z.

Axiom _SA_RESTORER : Z.

Axiom _SA_SIGINFO : Z.

Axiom _SI_KERNEL : Z.

Axiom _SI_TIMER : Z.

Axiom _SIGHUP : Z.

Axiom _SIGINT : Z.

Axiom _SIGQUIT : Z.

Axiom _SIGILL : Z.

Axiom _SIGTRAP : Z.

Axiom _SIGABRT : Z.

Axiom _SIGBUS : Z.

Axiom _SIGFPE : Z.

Axiom _SIGKILL : Z.

Axiom _SIGUSR1 : Z.

Axiom _SIGSEGV : Z.

Axiom _SIGUSR2 : Z.

Axiom _SIGPIPE : Z.

Axiom _SIGALRM : Z.

Axiom _SIGSTKFLT : Z.

Axiom _SIGCHLD : Z.

Axiom _SIGCONT : Z.

Axiom _SIGSTOP : Z.

Axiom _SIGTSTP : Z.

Axiom _SIGTTIN : Z.

Axiom _SIGTTOU : Z.

Axiom _SIGURG : Z.

Axiom _SIGXCPU : Z.

Axiom _SIGXFSZ : Z.

Axiom _SIGVTALRM : Z.

Axiom _SIGPROF : Z.

Axiom _SIGWINCH : Z.

Axiom _SIGIO : Z.

Axiom _SIGPWR : Z.

Axiom _SIGSYS : Z.

Axiom _SIGRTMIN : Z.

Axiom _FPE_INTDIV : Z.

Axiom _FPE_INTOVF : Z.

Axiom _FPE_FLTDIV : Z.

Axiom _FPE_FLTOVF : Z.

Axiom _FPE_FLTUND : Z.

Axiom _FPE_FLTRES : Z.

Axiom _FPE_FLTINV : Z.

Axiom _FPE_FLTSUB : Z.

Axiom _BUS_ADRALN : Z.

Axiom _BUS_ADRERR : Z.

Axiom _BUS_OBJERR : Z.

Axiom _SEGV_MAPERR : Z.

Axiom _SEGV_ACCERR : Z.

Axiom _ITIMER_REAL : Z.

Axiom _ITIMER_VIRTUAL : Z.

Axiom _ITIMER_PROF : Z.

Axiom _CLOCK_THREAD_CPUTIME_ID : Z.

Axiom _SIGEV_THREAD_ID : Z.

Axiom _AF_UNIX : Z.

Axiom _SOCK_DGRAM : Z.

Axiom timespec : go_type.

Axiom timeval : go_type.

Axiom sigactiont : go_type.

Axiom siginfoFields : go_type.

Axiom siginfo : go_type.

Axiom itimerspec : go_type.

Axiom itimerval : go_type.

Axiom sigeventFields : go_type.

Axiom sigevent : go_type.

Axiom _O_RDONLY : Z.

Axiom _O_WRONLY : Z.

Axiom _O_CREAT : Z.

Axiom _O_TRUNC : Z.

Axiom _O_NONBLOCK : Z.

Axiom _O_CLOEXEC : Z.

Axiom usigset : go_type.

Axiom fpxreg : go_type.

Axiom xmmreg : go_type.

Axiom fpstate : go_type.

Axiom fpxreg1 : go_type.

Axiom xmmreg1 : go_type.

Axiom fpstate1 : go_type.

Axiom fpreg1 : go_type.

Axiom stackt : go_type.

Axiom mcontext : go_type.

Axiom ucontext : go_type.

Axiom sigcontext : go_type.

Axiom sockaddr_un : go_type.

Definition gogetenv : go_string := "runtime.gogetenv"%go.

Definition envKeyEqual : go_string := "runtime.envKeyEqual"%go.

Definition lowerASCII : go_string := "runtime.lowerASCII"%go.

Definition _cgo_setenv : go_string := "runtime._cgo_setenv"%go.

Definition _cgo_unsetenv : go_string := "runtime._cgo_unsetenv"%go.

Definition setenv_c : go_string := "runtime.setenv_c"%go.

Definition unsetenv_c : go_string := "runtime.unsetenv_c"%go.

Definition cstring : go_string := "runtime.cstring"%go.

Axiom Error : go_type.

Axiom TypeAssertionError : go_type.

Definition itoa : go_string := "runtime.itoa"%go.

Axiom errorString : go_type.

Axiom errorAddressString : go_type.

Axiom plainError : go_type.

Axiom boundsError : go_type.

Axiom boundsErrorCode : go_type.

Axiom boundsIndex : val.

Axiom boundsSliceAlen : val.

Axiom boundsSliceAcap : val.

Axiom boundsSliceB : val.

Axiom boundsSlice3Alen : val.

Axiom boundsSlice3Acap : val.

Axiom boundsSlice3B : val.

Axiom boundsSlice3C : val.

Axiom boundsConvert : val.

Definition boundsErrorFmts : go_string := "runtime.boundsErrorFmts"%go.

Axiom boundsErrorFmts'init : val.

Definition boundsNegErrorFmts : go_string := "runtime.boundsNegErrorFmts"%go.

Axiom boundsNegErrorFmts'init : val.

Definition appendIntStr : go_string := "runtime.appendIntStr"%go.

Axiom stringer : go_type.

Definition printpanicval : go_string := "runtime.printpanicval"%go.

Definition printanycustomtype : go_string := "runtime.printanycustomtype"%go.

Definition printindented : go_string := "runtime.printindented"%go.

Definition panicwrap : go_string := "runtime.panicwrap"%go.

Definition Caller : go_string := "runtime.Caller"%go.

Definition Callers : go_string := "runtime.Callers"%go.

Definition defaultGOROOT : go_string := "runtime.defaultGOROOT"%go.

Definition GOROOT : go_string := "runtime.GOROOT"%go.

Definition buildVersion : go_string := "runtime.buildVersion"%go.

Definition Version : go_string := "runtime.Version"%go.

Axiom GOOS : val.

Axiom GOARCH : val.

Definition fastlog2 : go_string := "runtime.fastlog2"%go.

Axiom fastlogNumBits : Z.

Definition fastlog2Table : go_string := "runtime.fastlog2Table"%go.

Axiom fastlog2Table'init : val.

Definition checkfds : go_string := "runtime.checkfds"%go.

Definition inf : go_string := "runtime.inf"%go.

Axiom inf'init : val.

Definition isNaN : go_string := "runtime.isNaN"%go.

Definition isFinite : go_string := "runtime.isFinite"%go.

Definition isInf : go_string := "runtime.isInf"%go.

Definition abs : go_string := "runtime.abs"%go.

Definition copysign : go_string := "runtime.copysign"%go.

Definition float64bits : go_string := "runtime.float64bits"%go.

Definition float64frombits : go_string := "runtime.float64frombits"%go.

Axiom m5 : Z.

Definition memhashFallback : go_string := "runtime.memhashFallback"%go.

Definition memhash32Fallback : go_string := "runtime.memhash32Fallback"%go.

Definition memhash64Fallback : go_string := "runtime.memhash64Fallback"%go.

Definition mix : go_string := "runtime.mix"%go.

Definition r4 : go_string := "runtime.r4"%go.

Definition r8 : go_string := "runtime.r8"%go.

Definition runtime_debug_WriteHeapDump : go_string := "runtime.runtime_debug_WriteHeapDump"%go.

Axiom fieldKindEol : Z.

Axiom fieldKindPtr : Z.

Axiom fieldKindIface : Z.

Axiom fieldKindEface : Z.

Axiom tagEOF : Z.

Axiom tagObject : Z.

Axiom tagOtherRoot : Z.

Axiom tagType : Z.

Axiom tagGoroutine : Z.

Axiom tagStackFrame : Z.

Axiom tagParams : Z.

Axiom tagFinalizer : Z.

Axiom tagItab : Z.

Axiom tagOSThread : Z.

Axiom tagMemStats : Z.

Axiom tagQueuedFinalizer : Z.

Axiom tagData : Z.

Axiom tagBSS : Z.

Axiom tagDefer : Z.

Axiom tagPanic : Z.

Axiom tagMemProf : Z.

Axiom tagAllocSample : Z.

Definition dumpfd : go_string := "runtime.dumpfd"%go.

Definition tmpbuf : go_string := "runtime.tmpbuf"%go.

Axiom bufSize : Z.

Definition buf : go_string := "runtime.buf"%go.

Definition nbuf : go_string := "runtime.nbuf"%go.

Definition dwrite : go_string := "runtime.dwrite"%go.

Definition dwritebyte : go_string := "runtime.dwritebyte"%go.

Definition flush : go_string := "runtime.flush"%go.

Axiom typeCacheBuckets : Z.

Axiom typeCacheAssoc : Z.

Axiom typeCacheBucket : go_type.

Definition typecache : go_string := "runtime.typecache"%go.

Definition dumpint : go_string := "runtime.dumpint"%go.

Definition dumpbool : go_string := "runtime.dumpbool"%go.

Definition dumpmemrange : go_string := "runtime.dumpmemrange"%go.

Definition dumpslice : go_string := "runtime.dumpslice"%go.

Definition dumpstr : go_string := "runtime.dumpstr"%go.

Definition dumptype : go_string := "runtime.dumptype"%go.

Definition dumpobj : go_string := "runtime.dumpobj"%go.

Definition dumpotherroot : go_string := "runtime.dumpotherroot"%go.

Definition dumpfinalizer : go_string := "runtime.dumpfinalizer"%go.

Axiom childInfo : go_type.

Definition dumpbv : go_string := "runtime.dumpbv"%go.

Definition dumpframe : go_string := "runtime.dumpframe"%go.

Definition dumpgoroutine : go_string := "runtime.dumpgoroutine"%go.

Definition dumpgs : go_string := "runtime.dumpgs"%go.

Definition finq_callback : go_string := "runtime.finq_callback"%go.

Definition dumproots : go_string := "runtime.dumproots"%go.

Definition freemark : go_string := "runtime.freemark"%go.

Definition dumpobjs : go_string := "runtime.dumpobjs"%go.

Definition dumpparams : go_string := "runtime.dumpparams"%go.

Definition itab_callback : go_string := "runtime.itab_callback"%go.

Definition dumpitabs : go_string := "runtime.dumpitabs"%go.

Definition dumpms : go_string := "runtime.dumpms"%go.

Definition dumpmemstats : go_string := "runtime.dumpmemstats"%go.

Definition dumpmemprof_callback : go_string := "runtime.dumpmemprof_callback"%go.

Definition dumpmemprof : go_string := "runtime.dumpmemprof"%go.

Definition dumphdr : go_string := "runtime.dumphdr"%go.

Axiom dumphdr'init : val.

Definition mdump : go_string := "runtime.mdump"%go.

Definition writeheapdump_m : go_string := "runtime.writeheapdump_m"%go.

Definition dumpfields : go_string := "runtime.dumpfields"%go.

Definition makeheapobjbv : go_string := "runtime.makeheapobjbv"%go.

Axiom timeHistMinBucketBits : Z.

Axiom timeHistMaxBucketBits : Z.

Axiom timeHistSubBucketBits : Z.

Axiom timeHistNumSubBuckets : Z.

Axiom timeHistNumBuckets : Z.

Axiom timeHistTotalBuckets : Z.

Axiom timeHistogram : go_type.

Axiom fInf : Z.

Axiom fNegInf : Z.

Definition float64Inf : go_string := "runtime.float64Inf"%go.

Definition float64NegInf : go_string := "runtime.float64NegInf"%go.

Definition timeHistogramMetricsBuckets : go_string := "runtime.timeHistogramMetricsBuckets"%go.

Axiom itabInitSize : Z.

Definition itabLock : go_string := "runtime.itabLock"%go.

Definition itabTable : go_string := "runtime.itabTable"%go.

Axiom itabTable'init : val.

Definition itabTableInit : go_string := "runtime.itabTableInit"%go.

Axiom itabTableInit'init : val.

Axiom itabTableType : go_type.

Definition itabHashFunc : go_string := "runtime.itabHashFunc"%go.

Definition getitab : go_string := "runtime.getitab"%go.

Definition itabAdd : go_string := "runtime.itabAdd"%go.

Definition itabInit : go_string := "runtime.itabInit"%go.

Definition itabsinit : go_string := "runtime.itabsinit"%go.

Definition panicdottypeE : go_string := "runtime.panicdottypeE"%go.

Definition panicdottypeI : go_string := "runtime.panicdottypeI"%go.

Definition panicnildottype : go_string := "runtime.panicnildottype"%go.

Axiom uint16InterfacePtr : go_type.

Axiom uint32InterfacePtr : go_type.

Axiom uint64InterfacePtr : go_type.

Axiom stringInterfacePtr : go_type.

Axiom sliceInterfacePtr : go_type.

Definition uint16Eface : go_string := "runtime.uint16Eface"%go.

Axiom uint16Eface'init : val.

Definition uint32Eface : go_string := "runtime.uint32Eface"%go.

Axiom uint32Eface'init : val.

Definition uint64Eface : go_string := "runtime.uint64Eface"%go.

Axiom uint64Eface'init : val.

Definition stringEface : go_string := "runtime.stringEface"%go.

Axiom stringEface'init : val.

Definition sliceEface : go_string := "runtime.sliceEface"%go.

Axiom sliceEface'init : val.

Definition uint16Type : go_string := "runtime.uint16Type"%go.

Axiom uint16Type'init : val.

Definition uint32Type : go_string := "runtime.uint32Type"%go.

Axiom uint32Type'init : val.

Definition uint64Type : go_string := "runtime.uint64Type"%go.

Axiom uint64Type'init : val.

Definition stringType : go_string := "runtime.stringType"%go.

Axiom stringType'init : val.

Definition sliceType : go_string := "runtime.sliceType"%go.

Axiom sliceType'init : val.

Definition convT : go_string := "runtime.convT"%go.

Definition convTnoptr : go_string := "runtime.convTnoptr"%go.

Definition convT16 : go_string := "runtime.convT16"%go.

Definition convT32 : go_string := "runtime.convT32"%go.

Definition convT64 : go_string := "runtime.convT64"%go.

Definition convTstring : go_string := "runtime.convTstring"%go.

Definition convTslice : go_string := "runtime.convTslice"%go.

Definition assertE2I : go_string := "runtime.assertE2I"%go.

Definition assertE2I2 : go_string := "runtime.assertE2I2"%go.

Definition typeAssert : go_string := "runtime.typeAssert"%go.

Definition buildTypeAssertCache : go_string := "runtime.buildTypeAssertCache"%go.

Definition emptyTypeAssertCache : go_string := "runtime.emptyTypeAssertCache"%go.

Axiom emptyTypeAssertCache'init : val.

Definition interfaceSwitch : go_string := "runtime.interfaceSwitch"%go.

Definition buildInterfaceSwitchCache : go_string := "runtime.buildInterfaceSwitchCache"%go.

Definition emptyInterfaceSwitchCache : go_string := "runtime.emptyInterfaceSwitchCache"%go.

Axiom emptyInterfaceSwitchCache'init : val.

Definition reflect_ifaceE2I : go_string := "runtime.reflect_ifaceE2I"%go.

Definition reflectlite_ifaceE2I : go_string := "runtime.reflectlite_ifaceE2I"%go.

Definition iterate_itabs : go_string := "runtime.iterate_itabs"%go.

Definition staticuint64s : go_string := "runtime.staticuint64s"%go.

Definition getStaticuint64s : go_string := "runtime.getStaticuint64s"%go.

Definition unreachableMethod : go_string := "runtime.unreachableMethod"%go.

Axiom lfstack : go_type.

Definition lfnodeValidate : go_string := "runtime.lfnodeValidate"%go.

Definition lfstackPack : go_string := "runtime.lfstackPack"%go.

Definition lfstackUnpack : go_string := "runtime.lfstackUnpack"%go.

Axiom linknameIter : go_type.

Definition mapiterinit : go_string := "runtime.mapiterinit"%go.

Definition reflect_mapiterinit : go_string := "runtime.reflect_mapiterinit"%go.

Definition mapiternext : go_string := "runtime.mapiternext"%go.

Definition reflect_mapiternext : go_string := "runtime.reflect_mapiternext"%go.

Definition reflect_mapiterkey : go_string := "runtime.reflect_mapiterkey"%go.

Definition reflect_mapiterelem : go_string := "runtime.reflect_mapiterelem"%go.

Definition key32 : go_string := "runtime.key32"%go.

Definition noteclear : go_string := "runtime.noteclear"%go.

Definition notewakeup : go_string := "runtime.notewakeup"%go.

Definition notesleep : go_string := "runtime.notesleep"%go.

Definition notetsleep_internal : go_string := "runtime.notetsleep_internal"%go.

Definition notetsleep : go_string := "runtime.notetsleep"%go.

Definition notetsleepg : go_string := "runtime.notetsleepg"%go.

Definition beforeIdle : go_string := "runtime.beforeIdle"%go.

Definition checkTimeouts : go_string := "runtime.checkTimeouts"%go.

Definition semacreate : go_string := "runtime.semacreate"%go.

Definition semasleep : go_string := "runtime.semasleep"%go.

Definition semawakeup : go_string := "runtime.semawakeup"%go.

Axiom active_spin : Z.

Axiom active_spin_cnt : Z.

Axiom mutexLocked : Z.

Axiom mutexSleeping : Z.

Axiom mutexSpinning : Z.

Axiom mutexStackLocked : Z.

Axiom mutexMMask : Z.

Axiom mutexMOffset : Z.

Axiom mutexActiveSpinCount : Z.

Axiom mutexActiveSpinSize : Z.

Axiom mutexPassiveSpinCount : Z.

Axiom mutexTailWakePeriod : Z.

Definition key8 : go_string := "runtime.key8"%go.

Axiom mWaitList : go_type.

Definition lockVerifyMSize : go_string := "runtime.lockVerifyMSize"%go.

Definition mutexWaitListHead : go_string := "runtime.mutexWaitListHead"%go.

Definition mutexPreferLowLatency : go_string := "runtime.mutexPreferLowLatency"%go.

Definition mutexContended : go_string := "runtime.mutexContended"%go.

Definition lock : go_string := "runtime.lock"%go.

Definition lock2 : go_string := "runtime.lock2"%go.

Definition unlock : go_string := "runtime.unlock"%go.

Definition unlock2 : go_string := "runtime.unlock2"%go.

Definition unlock2Wake : go_string := "runtime.unlock2Wake"%go.

Axiom lockRank : go_type.

Axiom lockRankUnknown : val.

Axiom lockRankSysmon : val.

Axiom lockRankScavenge : val.

Axiom lockRankForcegc : val.

Axiom lockRankDefer : val.

Axiom lockRankSweepWaiters : val.

Axiom lockRankAssistQueue : val.

Axiom lockRankStrongFromWeakQueue : val.

Axiom lockRankSweep : val.

Axiom lockRankTestR : val.

Axiom lockRankTestW : val.

Axiom lockRankTimerSend : val.

Axiom lockRankAllocmW : val.

Axiom lockRankExecW : val.

Axiom lockRankCpuprof : val.

Axiom lockRankPollCache : val.

Axiom lockRankPollDesc : val.

Axiom lockRankWakeableSleep : val.

Axiom lockRankHchan : val.

Axiom lockRankAllocmR : val.

Axiom lockRankExecR : val.

Axiom lockRankSched : val.

Axiom lockRankAllg : val.

Axiom lockRankAllp : val.

Axiom lockRankNotifyList : val.

Axiom lockRankSudog : val.

Axiom lockRankTimers : val.

Axiom lockRankTimer : val.

Axiom lockRankNetpollInit : val.

Axiom lockRankRoot : val.

Axiom lockRankItab : val.

Axiom lockRankReflectOffs : val.

Axiom lockRankSynctest : val.

Axiom lockRankUserArenaState : val.

Axiom lockRankTraceBuf : val.

Axiom lockRankTraceStrings : val.

Axiom lockRankFin : val.

Axiom lockRankSpanSetSpine : val.

Axiom lockRankMspanSpecial : val.

Axiom lockRankTraceTypeTab : val.

Axiom lockRankGcBitsArenas : val.

Axiom lockRankProfInsert : val.

Axiom lockRankProfBlock : val.

Axiom lockRankProfMemActive : val.

Axiom lockRankProfMemFuture : val.

Axiom lockRankGscan : val.

Axiom lockRankStackpool : val.

Axiom lockRankStackLarge : val.

Axiom lockRankHchanLeaf : val.

Axiom lockRankWbufSpans : val.

Axiom lockRankMheap : val.

Axiom lockRankMheapSpecial : val.

Axiom lockRankGlobalAlloc : val.

Axiom lockRankTrace : val.

Axiom lockRankTraceStackTab : val.

Axiom lockRankPanic : val.

Axiom lockRankDeadlock : val.

Axiom lockRankRaceFini : val.

Axiom lockRankAllocmRInternal : val.

Axiom lockRankExecRInternal : val.

Axiom lockRankTestRInternal : val.

Axiom lockRankLeafRank : val.

Definition lockNames : go_string := "runtime.lockNames"%go.

Axiom lockNames'init : val.

Definition lockPartialOrder : go_string := "runtime.lockPartialOrder"%go.

Axiom lockPartialOrder'init : val.

Axiom staticLockRanking : val.

Axiom lockRankStruct : go_type.

Definition lockInit : go_string := "runtime.lockInit"%go.

Definition getLockRank : go_string := "runtime.getLockRank"%go.

Definition lockWithRank : go_string := "runtime.lockWithRank"%go.

Definition acquireLockRankAndM : go_string := "runtime.acquireLockRankAndM"%go.

Definition unlockWithRank : go_string := "runtime.unlockWithRank"%go.

Definition releaseLockRankAndM : go_string := "runtime.releaseLockRankAndM"%go.

Definition lockWithRankMayAcquire : go_string := "runtime.lockWithRankMayAcquire"%go.

Definition assertLockHeld : go_string := "runtime.assertLockHeld"%go.

Definition assertRankHeld : go_string := "runtime.assertRankHeld"%go.

Definition worldStopped : go_string := "runtime.worldStopped"%go.

Definition worldStarted : go_string := "runtime.worldStarted"%go.

Definition assertWorldStopped : go_string := "runtime.assertWorldStopped"%go.

Definition assertWorldStoppedOrLockHeld : go_string := "runtime.assertWorldStoppedOrLockHeld"%go.

Axiom maxTinySize : Z.

Axiom tinySizeClass : val.

Axiom maxSmallSize : Z.

Axiom pageShift : Z.

Axiom pageSize : Z.

Axiom _PageSize : Z.

Axiom _PageMask : Z.

Axiom _64bit : Z.

Axiom _TinySize : Z.

Axiom _TinySizeClass : val.

Axiom _FixAllocChunk : Z.

Axiom _StackCacheSize : Z.

Axiom _NumStackOrders : Z.

Axiom heapAddrBits : Z.

Axiom maxAlloc : Z.

Axiom heapArenaBytes : Z.

Axiom heapArenaWords : Z.

Axiom logHeapArenaBytes : Z.

Axiom heapArenaBitmapWords : Z.

Axiom pagesPerArena : Z.

Axiom arenaL1Bits : Z.

Axiom arenaL2Bits : Z.

Axiom arenaL1Shift : Z.

Axiom arenaBits : Z.

Axiom arenaBaseOffset : Z.

Axiom arenaBaseOffsetUintptr : val.

Axiom _MaxGcproc : Z.

Axiom minLegalPointer : val.

Axiom minHeapForMetadataHugePages : Z.

Definition physPageSize : go_string := "runtime.physPageSize"%go.

Definition physHugePageSize : go_string := "runtime.physHugePageSize"%go.

Definition physHugePageShift : go_string := "runtime.physHugePageShift"%go.

Definition mallocinit : go_string := "runtime.mallocinit"%go.

Definition sysReserveAligned : go_string := "runtime.sysReserveAligned"%go.

Definition zerobase : go_string := "runtime.zerobase"%go.

Definition nextFreeFast : go_string := "runtime.nextFreeFast"%go.

Axiom doubleCheckMalloc : val.

Definition mallocgc : go_string := "runtime.mallocgc"%go.

Definition mallocgcTiny : go_string := "runtime.mallocgcTiny"%go.

Definition mallocgcSmallNoscan : go_string := "runtime.mallocgcSmallNoscan"%go.

Definition mallocgcSmallScanNoHeader : go_string := "runtime.mallocgcSmallScanNoHeader"%go.

Definition mallocgcSmallScanHeader : go_string := "runtime.mallocgcSmallScanHeader"%go.

Definition mallocgcLarge : go_string := "runtime.mallocgcLarge"%go.

Definition preMallocgcDebug : go_string := "runtime.preMallocgcDebug"%go.

Definition postMallocgcDebug : go_string := "runtime.postMallocgcDebug"%go.

Definition deductAssistCredit : go_string := "runtime.deductAssistCredit"%go.

Definition memclrNoHeapPointersChunked : go_string := "runtime.memclrNoHeapPointersChunked"%go.

Definition newobject : go_string := "runtime.newobject"%go.

Definition maps_newobject : go_string := "runtime.maps_newobject"%go.

Definition reflect_unsafe_New : go_string := "runtime.reflect_unsafe_New"%go.

Definition reflectlite_unsafe_New : go_string := "runtime.reflectlite_unsafe_New"%go.

Definition newarray : go_string := "runtime.newarray"%go.

Definition reflect_unsafe_NewArray : go_string := "runtime.reflect_unsafe_NewArray"%go.

Definition maps_newarray : go_string := "runtime.maps_newarray"%go.

Definition profilealloc : go_string := "runtime.profilealloc"%go.

Definition nextSample : go_string := "runtime.nextSample"%go.

Definition fastexprand : go_string := "runtime.fastexprand"%go.

Definition nextSampleNoFP : go_string := "runtime.nextSampleNoFP"%go.

Axiom persistentAlloc : go_type.

Definition globalAlloc : go_string := "runtime.globalAlloc"%go.

Axiom persistentChunkSize : Z.

Definition persistentChunks : go_string := "runtime.persistentChunks"%go.

Definition persistentalloc : go_string := "runtime.persistentalloc"%go.

Definition persistentalloc1 : go_string := "runtime.persistentalloc1"%go.

Definition inPersistentAlloc : go_string := "runtime.inPersistentAlloc"%go.

Axiom linearAlloc : go_type.

Axiom notInHeap : go_type.

Definition redZoneSize : go_string := "runtime.redZoneSize"%go.

Definition mapaccess1_fast32 : go_string := "runtime.mapaccess1_fast32"%go.

Definition mapaccess2_fast32 : go_string := "runtime.mapaccess2_fast32"%go.

Definition mapassign_fast32 : go_string := "runtime.mapassign_fast32"%go.

Definition mapassign_fast32ptr : go_string := "runtime.mapassign_fast32ptr"%go.

Definition mapdelete_fast32 : go_string := "runtime.mapdelete_fast32"%go.

Definition mapaccess1_fast64 : go_string := "runtime.mapaccess1_fast64"%go.

Definition mapaccess2_fast64 : go_string := "runtime.mapaccess2_fast64"%go.

Definition mapassign_fast64 : go_string := "runtime.mapassign_fast64"%go.

Definition mapassign_fast64ptr : go_string := "runtime.mapassign_fast64ptr"%go.

Definition mapdelete_fast64 : go_string := "runtime.mapdelete_fast64"%go.

Definition mapaccess1_faststr : go_string := "runtime.mapaccess1_faststr"%go.

Definition mapaccess2_faststr : go_string := "runtime.mapaccess2_faststr"%go.

Definition mapassign_faststr : go_string := "runtime.mapassign_faststr"%go.

Definition mapdelete_faststr : go_string := "runtime.mapdelete_faststr"%go.

Axiom loadFactorNum : Z.

Axiom loadFactorDen : Z.

Axiom maptype : go_type.

Definition maps_errNilAssign : go_string := "runtime.maps_errNilAssign"%go.

Axiom maps_errNilAssign'init : val.

Definition maps_mapKeyError : go_string := "runtime.maps_mapKeyError"%go.

Definition makemap64 : go_string := "runtime.makemap64"%go.

Definition makemap_small : go_string := "runtime.makemap_small"%go.

Definition makemap : go_string := "runtime.makemap"%go.

Definition mapaccess1 : go_string := "runtime.mapaccess1"%go.

Definition mapaccess2 : go_string := "runtime.mapaccess2"%go.

Definition mapaccess1_fat : go_string := "runtime.mapaccess1_fat"%go.

Definition mapaccess2_fat : go_string := "runtime.mapaccess2_fat"%go.

Definition mapassign : go_string := "runtime.mapassign"%go.

Definition mapdelete : go_string := "runtime.mapdelete"%go.

Definition mapIterStart : go_string := "runtime.mapIterStart"%go.

Definition mapIterNext : go_string := "runtime.mapIterNext"%go.

Definition mapclear : go_string := "runtime.mapclear"%go.

Definition reflect_makemap : go_string := "runtime.reflect_makemap"%go.

Definition reflect_mapaccess : go_string := "runtime.reflect_mapaccess"%go.

Definition reflect_mapaccess_faststr : go_string := "runtime.reflect_mapaccess_faststr"%go.

Definition reflect_mapassign : go_string := "runtime.reflect_mapassign"%go.

Definition reflect_mapassign_faststr : go_string := "runtime.reflect_mapassign_faststr"%go.

Definition reflect_mapdelete : go_string := "runtime.reflect_mapdelete"%go.

Definition reflect_mapdelete_faststr : go_string := "runtime.reflect_mapdelete_faststr"%go.

Definition reflect_maplen : go_string := "runtime.reflect_maplen"%go.

Definition reflect_mapclear : go_string := "runtime.reflect_mapclear"%go.

Definition reflectlite_maplen : go_string := "runtime.reflectlite_maplen"%go.

Definition mapinitnoop : go_string := "runtime.mapinitnoop"%go.

Definition mapclone : go_string := "runtime.mapclone"%go.

Definition mapclone2 : go_string := "runtime.mapclone2"%go.

Definition keys : go_string := "runtime.keys"%go.

Definition values : go_string := "runtime.values"%go.

Definition typedmemmove : go_string := "runtime.typedmemmove"%go.

Definition wbZero : go_string := "runtime.wbZero"%go.

Definition wbMove : go_string := "runtime.wbMove"%go.

Definition reflect_typedmemmove : go_string := "runtime.reflect_typedmemmove"%go.

Definition reflectlite_typedmemmove : go_string := "runtime.reflectlite_typedmemmove"%go.

Definition maps_typedmemmove : go_string := "runtime.maps_typedmemmove"%go.

Definition reflectcallmove : go_string := "runtime.reflectcallmove"%go.

Definition typedslicecopy : go_string := "runtime.typedslicecopy"%go.

Definition reflect_typedslicecopy : go_string := "runtime.reflect_typedslicecopy"%go.

Definition typedmemclr : go_string := "runtime.typedmemclr"%go.

Definition reflect_typedmemclr : go_string := "runtime.reflect_typedmemclr"%go.

Definition maps_typedmemclr : go_string := "runtime.maps_typedmemclr"%go.

Definition reflect_typedmemclrpartial : go_string := "runtime.reflect_typedmemclrpartial"%go.

Definition reflect_typedarrayclear : go_string := "runtime.reflect_typedarrayclear"%go.

Definition memclrHasPointers : go_string := "runtime.memclrHasPointers"%go.

Axiom mallocHeaderSize : Z.

Axiom minSizeForMallocHeader : Z.

Definition heapBitsInSpan : go_string := "runtime.heapBitsInSpan"%go.

Axiom typePointers : go_type.

Definition bulkBarrierPreWrite : go_string := "runtime.bulkBarrierPreWrite"%go.

Definition bulkBarrierPreWriteSrcOnly : go_string := "runtime.bulkBarrierPreWriteSrcOnly"%go.

Definition heapBitsSlice : go_string := "runtime.heapBitsSlice"%go.

Axiom doubleCheckHeapSetType : val.

Definition heapSetTypeNoHeader : go_string := "runtime.heapSetTypeNoHeader"%go.

Definition heapSetTypeSmallHeader : go_string := "runtime.heapSetTypeSmallHeader"%go.

Definition heapSetTypeLarge : go_string := "runtime.heapSetTypeLarge"%go.

Definition doubleCheckHeapType : go_string := "runtime.doubleCheckHeapType"%go.

Definition doubleCheckHeapPointers : go_string := "runtime.doubleCheckHeapPointers"%go.

Definition doubleCheckHeapPointersInterior : go_string := "runtime.doubleCheckHeapPointersInterior"%go.

Definition doubleCheckTypePointersOfType : go_string := "runtime.doubleCheckTypePointersOfType"%go.

Definition dumpTypePointers : go_string := "runtime.dumpTypePointers"%go.

Definition addb : go_string := "runtime.addb"%go.

Definition subtractb : go_string := "runtime.subtractb"%go.

Definition add1 : go_string := "runtime.add1"%go.

Definition subtract1 : go_string := "runtime.subtract1"%go.

Axiom markBits : go_type.

Definition markBitsForAddr : go_string := "runtime.markBitsForAddr"%go.

Definition markBitsForSpan : go_string := "runtime.markBitsForSpan"%go.

Axiom clobberdeadPtr : val.

Definition badPointer : go_string := "runtime.badPointer"%go.

Definition findObject : go_string := "runtime.findObject"%go.

Definition reflect_verifyNotInHeapPtr : go_string := "runtime.reflect_verifyNotInHeapPtr"%go.

Axiom ptrBits : Z.

Definition bulkBarrierBitmap : go_string := "runtime.bulkBarrierBitmap"%go.

Definition typeBitsBulkBarrier : go_string := "runtime.typeBitsBulkBarrier"%go.

Definition readUintptr : go_string := "runtime.readUintptr"%go.

Definition debugPtrmask : go_string := "runtime.debugPtrmask"%go.

Definition progToPointerMask : go_string := "runtime.progToPointerMask"%go.

Definition runGCProg : go_string := "runtime.runGCProg"%go.

Definition dumpGCProg : go_string := "runtime.dumpGCProg"%go.

Definition reflect_gcbits : go_string := "runtime.reflect_gcbits"%go.

Definition pointerMask : go_string := "runtime.pointerMask"%go.

Axiom mcache : go_type.

Axiom gclink : go_type.

Axiom gclinkptr : go_type.

Axiom stackfreelist : go_type.

Definition emptymspan : go_string := "runtime.emptymspan"%go.

Definition allocmcache : go_string := "runtime.allocmcache"%go.

Definition freemcache : go_string := "runtime.freemcache"%go.

Definition getMCache : go_string := "runtime.getMCache"%go.

Axiom mcentral : go_type.

Axiom checkmarksMap : go_type.

Definition useCheckmark : go_string := "runtime.useCheckmark"%go.

Axiom useCheckmark'init : val.

Definition startCheckmarks : go_string := "runtime.startCheckmarks"%go.

Definition endCheckmarks : go_string := "runtime.endCheckmarks"%go.

Definition setCheckmark : go_string := "runtime.setCheckmark"%go.

Definition AddCleanup : go_string := "runtime.AddCleanup"%go.

Axiom Cleanup : go_type.

Definition sysAlloc : go_string := "runtime.sysAlloc"%go.

Definition sysUnused : go_string := "runtime.sysUnused"%go.

Definition sysUsed : go_string := "runtime.sysUsed"%go.

Definition sysHugePage : go_string := "runtime.sysHugePage"%go.

Definition sysNoHugePage : go_string := "runtime.sysNoHugePage"%go.

Definition sysHugePageCollapse : go_string := "runtime.sysHugePageCollapse"%go.

Definition sysFree : go_string := "runtime.sysFree"%go.

Definition sysFault : go_string := "runtime.sysFault"%go.

Definition sysReserve : go_string := "runtime.sysReserve"%go.

Definition sysMap : go_string := "runtime.sysMap"%go.

Axiom _EACCES : Z.

Axiom _EINVAL : Z.

Definition sysAllocOS : go_string := "runtime.sysAllocOS"%go.

Definition adviseUnused : go_string := "runtime.adviseUnused"%go.

Axiom adviseUnused'init : val.

Axiom madviseUnsupported : Z.

Definition sysUnusedOS : go_string := "runtime.sysUnusedOS"%go.

Definition sysUsedOS : go_string := "runtime.sysUsedOS"%go.

Definition sysHugePageOS : go_string := "runtime.sysHugePageOS"%go.

Definition sysNoHugePageOS : go_string := "runtime.sysNoHugePageOS"%go.

Definition sysHugePageCollapseOS : go_string := "runtime.sysHugePageCollapseOS"%go.

Definition sysFreeOS : go_string := "runtime.sysFreeOS"%go.

Definition sysFaultOS : go_string := "runtime.sysFaultOS"%go.

Definition sysReserveOS : go_string := "runtime.sysReserveOS"%go.

Definition sysMapOS : go_string := "runtime.sysMapOS"%go.

Axiom isSbrkPlatform : val.

Definition sysReserveAlignedSbrk : go_string := "runtime.sysReserveAlignedSbrk"%go.

Definition metricsSema : go_string := "runtime.metricsSema"%go.

Axiom metricsSema'init : val.

Definition metricsInit : go_string := "runtime.metricsInit"%go.

Definition metrics : go_string := "runtime.metrics"%go.

Definition sizeClassBuckets : go_string := "runtime.sizeClassBuckets"%go.

Definition timeHistBuckets : go_string := "runtime.timeHistBuckets"%go.

Axiom metricData : go_type.

Definition metricsLock : go_string := "runtime.metricsLock"%go.

Definition metricsUnlock : go_string := "runtime.metricsUnlock"%go.

Definition initMetrics : go_string := "runtime.initMetrics"%go.

Definition compute0 : go_string := "runtime.compute0"%go.

Axiom metricReader : go_type.

Definition godebug_registerMetric : go_string := "runtime.godebug_registerMetric"%go.

Axiom statDep : go_type.

Axiom heapStatsDep : val.

Axiom sysStatsDep : val.

Axiom cpuStatsDep : val.

Axiom gcStatsDep : val.

Axiom numStatsDeps : val.

Axiom statDepSet : go_type.

Definition makeStatDepSet : go_string := "runtime.makeStatDepSet"%go.

Axiom heapStatsAggregate : go_type.

Axiom sysStatsAggregate : go_type.

Axiom cpuStatsAggregate : go_type.

Axiom gcStatsAggregate : go_type.

Definition nsToSec : go_string := "runtime.nsToSec"%go.

Axiom statAggregate : go_type.

Axiom metricKind : go_type.

Axiom metricKindBad : val.

Axiom metricKindUint64 : val.

Axiom metricKindFloat64 : val.

Axiom metricKindFloat64Histogram : val.

Axiom metricSample : go_type.

Axiom metricValue : go_type.

Axiom metricFloat64Histogram : go_type.

Definition agg : go_string := "runtime.agg"%go.

Axiom metricName : go_type.

Definition readMetricNames : go_string := "runtime.readMetricNames"%go.

Definition readMetrics : go_string := "runtime.readMetrics"%go.

Definition readMetricsLocked : go_string := "runtime.readMetricsLocked"%go.

Axiom finblock : go_type.

Definition fingStatus : go_string := "runtime.fingStatus"%go.

Axiom fingUninitialized : val.

Axiom fingCreated : val.

Axiom fingRunningFinalizer : val.

Axiom fingWait : val.

Axiom fingWake : val.

Definition finlock : go_string := "runtime.finlock"%go.

Definition fing : go_string := "runtime.fing"%go.

Definition finq : go_string := "runtime.finq"%go.

Definition finc : go_string := "runtime.finc"%go.

Definition finptrmask : go_string := "runtime.finptrmask"%go.

Definition allfin : go_string := "runtime.allfin"%go.

Axiom finalizer : go_type.

Definition finalizer1 : go_string := "runtime.finalizer1"%go.

Axiom finalizer1'init : val.

Definition lockRankMayQueueFinalizer : go_string := "runtime.lockRankMayQueueFinalizer"%go.

Definition queuefinalizer : go_string := "runtime.queuefinalizer"%go.

Definition iterate_finq : go_string := "runtime.iterate_finq"%go.

Definition wakefing : go_string := "runtime.wakefing"%go.

Definition createfing : go_string := "runtime.createfing"%go.

Definition finalizercommit : go_string := "runtime.finalizercommit"%go.

Definition runfinq : go_string := "runtime.runfinq"%go.

Definition isGoPointerWithoutSpan : go_string := "runtime.isGoPointerWithoutSpan"%go.

Definition blockUntilEmptyFinalizerQueue : go_string := "runtime.blockUntilEmptyFinalizerQueue"%go.

Definition SetFinalizer : go_string := "runtime.SetFinalizer"%go.

Definition KeepAlive : go_string := "runtime.KeepAlive"%go.

Axiom fixalloc : go_type.

Axiom mlink : go_type.

Axiom _DebugGC : Z.

Axiom _FinBlockSize : Z.

Axiom concurrentSweep : val.

Axiom debugScanConservative : val.

Axiom sweepMinHeapDistance : Z.

Definition heapObjectsCanMove : go_string := "runtime.heapObjectsCanMove"%go.

Definition gcinit : go_string := "runtime.gcinit"%go.

Definition gcenable : go_string := "runtime.gcenable"%go.

Definition gcphase : go_string := "runtime.gcphase"%go.

Definition writeBarrier : go_string := "runtime.writeBarrier"%go.

Definition gcBlackenEnabled : go_string := "runtime.gcBlackenEnabled"%go.

Axiom _GCoff : Z.

Axiom _GCmark : Z.

Axiom _GCmarktermination : Z.

Definition setGCPhase : go_string := "runtime.setGCPhase"%go.

Axiom gcMarkWorkerMode : go_type.

Axiom gcMarkWorkerNotWorker : val.

Axiom gcMarkWorkerDedicatedMode : val.

Axiom gcMarkWorkerFractionalMode : val.

Axiom gcMarkWorkerIdleMode : val.

Definition gcMarkWorkerModeStrings : go_string := "runtime.gcMarkWorkerModeStrings"%go.

Axiom gcMarkWorkerModeStrings'init : val.

Definition pollFractionalWorkerExit : go_string := "runtime.pollFractionalWorkerExit"%go.

Definition work : go_string := "runtime.work"%go.

Axiom workType : go_type.

Definition GC : go_string := "runtime.GC"%go.

Definition gcWaitOnMark : go_string := "runtime.gcWaitOnMark"%go.

Axiom gcMode : go_type.

Axiom gcBackgroundMode : val.

Axiom gcForceMode : val.

Axiom gcForceBlockMode : val.

Axiom gcTrigger : go_type.

Axiom gcTriggerKind : go_type.

Axiom gcTriggerHeap : val.

Axiom gcTriggerTime : val.

Axiom gcTriggerCycle : val.

Definition gcStart : go_string := "runtime.gcStart"%go.

Definition gcMarkDoneFlushed : go_string := "runtime.gcMarkDoneFlushed"%go.

Definition gcDebugMarkDone : go_string := "runtime.gcDebugMarkDone"%go.

Definition gcMarkDone : go_string := "runtime.gcMarkDone"%go.

Definition gcMarkTermination : go_string := "runtime.gcMarkTermination"%go.

Definition gcBgMarkStartWorkers : go_string := "runtime.gcBgMarkStartWorkers"%go.

Definition gcBgMarkPrepare : go_string := "runtime.gcBgMarkPrepare"%go.

Axiom gcBgMarkWorkerNode : go_type.

Definition gcBgMarkWorker : go_string := "runtime.gcBgMarkWorker"%go.

Definition gcMarkWorkAvailable : go_string := "runtime.gcMarkWorkAvailable"%go.

Definition gcMark : go_string := "runtime.gcMark"%go.

Definition gcSweep : go_string := "runtime.gcSweep"%go.

Definition gcResetMarkState : go_string := "runtime.gcResetMarkState"%go.

Definition poolcleanup : go_string := "runtime.poolcleanup"%go.

Definition boringCaches : go_string := "runtime.boringCaches"%go.

Definition uniqueMapCleanup : go_string := "runtime.uniqueMapCleanup"%go.

Definition sync_runtime_registerPoolCleanup : go_string := "runtime.sync_runtime_registerPoolCleanup"%go.

Definition boring_registerCache : go_string := "runtime.boring_registerCache"%go.

Definition unique_runtime_registerUniqueMapCleanup : go_string := "runtime.unique_runtime_registerUniqueMapCleanup"%go.

Definition clearpools : go_string := "runtime.clearpools"%go.

Definition itoaDiv : go_string := "runtime.itoaDiv"%go.

Definition fmtNSAsMS : go_string := "runtime.fmtNSAsMS"%go.

Definition gcTestMoveStackOnNextCall : go_string := "runtime.gcTestMoveStackOnNextCall"%go.

Definition gcTestIsReachable : go_string := "runtime.gcTestIsReachable"%go.

Definition gcTestPointerClass : go_string := "runtime.gcTestPointerClass"%go.

Definition gcCPULimiter : go_string := "runtime.gcCPULimiter"%go.

Axiom gcCPULimiterState : go_type.

Axiom gcCPULimiterUpdatePeriod : val.

Axiom capacityPerProc : val.

Axiom limiterEventType : go_type.

Axiom limiterEventNone : val.

Axiom limiterEventIdleMarkWork : val.

Axiom limiterEventMarkAssist : val.

Axiom limiterEventScavengeAssist : val.

Axiom limiterEventIdle : val.

Axiom limiterEventBits : Z.

Axiom limiterEventTypeMask : val.

Axiom limiterEventStampNone : val.

Axiom limiterEventStamp : go_type.

Definition makeLimiterEventStamp : go_string := "runtime.makeLimiterEventStamp"%go.

Axiom limiterEvent : go_type.

Axiom fixedRootFinalizers : Z.

Axiom fixedRootFreeGStacks : Z.

Axiom fixedRootCount : Z.

Axiom rootBlockBytes : Z.

Axiom maxObletBytes : Z.

Axiom drainCheckThreshold : Z.

Axiom pagesPerSpanRoot : Z.

Definition gcMarkRootPrepare : go_string := "runtime.gcMarkRootPrepare"%go.

Definition gcMarkRootCheck : go_string := "runtime.gcMarkRootCheck"%go.

Definition oneptrmask : go_string := "runtime.oneptrmask"%go.

Axiom oneptrmask'init : val.

Definition markroot : go_string := "runtime.markroot"%go.

Definition markrootBlock : go_string := "runtime.markrootBlock"%go.

Definition markrootFreeGStacks : go_string := "runtime.markrootFreeGStacks"%go.

Definition markrootSpans : go_string := "runtime.markrootSpans"%go.

Definition gcAssistAlloc : go_string := "runtime.gcAssistAlloc"%go.

Definition gcAssistAlloc1 : go_string := "runtime.gcAssistAlloc1"%go.

Definition gcWakeAllAssists : go_string := "runtime.gcWakeAllAssists"%go.

Definition gcParkAssist : go_string := "runtime.gcParkAssist"%go.

Definition gcFlushBgCredit : go_string := "runtime.gcFlushBgCredit"%go.

Definition scanstack : go_string := "runtime.scanstack"%go.

Definition scanframeworker : go_string := "runtime.scanframeworker"%go.

Axiom gcDrainFlags : go_type.

Axiom gcDrainUntilPreempt : val.

Axiom gcDrainFlushBgCredit : val.

Axiom gcDrainIdle : val.

Axiom gcDrainFractional : val.

Definition gcDrainMarkWorkerIdle : go_string := "runtime.gcDrainMarkWorkerIdle"%go.

Definition gcDrainMarkWorkerDedicated : go_string := "runtime.gcDrainMarkWorkerDedicated"%go.

Definition gcDrainMarkWorkerFractional : go_string := "runtime.gcDrainMarkWorkerFractional"%go.

Definition gcDrain : go_string := "runtime.gcDrain"%go.

Definition gcDrainN : go_string := "runtime.gcDrainN"%go.

Definition scanblock : go_string := "runtime.scanblock"%go.

Definition scanobject : go_string := "runtime.scanobject"%go.

Definition scanConservative : go_string := "runtime.scanConservative"%go.

Definition shade : go_string := "runtime.shade"%go.

Definition greyobject : go_string := "runtime.greyobject"%go.

Definition gcDumpObject : go_string := "runtime.gcDumpObject"%go.

Definition gcmarknewobject : go_string := "runtime.gcmarknewobject"%go.

Definition gcMarkTinyAllocs : go_string := "runtime.gcMarkTinyAllocs"%go.

Axiom gcGoalUtilization : val.

Axiom gcBackgroundUtilization : val.

Axiom gcCreditSlack : Z.

Axiom gcAssistTimeSlack : Z.

Axiom gcOverAssistWork : Z.

Axiom defaultHeapMinimum : Z.

Axiom maxStackScanSlack : Z.

Axiom memoryLimitMinHeapGoalHeadroom : Z.

Axiom memoryLimitHeapGoalHeadroomPercent : Z.

Definition gcController : go_string := "runtime.gcController"%go.

Axiom gcControllerState : go_type.

Axiom triggerRatioDen : Z.

Axiom minTriggerRatioNum : Z.

Axiom maxTriggerRatioNum : Z.

Definition setGCPercent : go_string := "runtime.setGCPercent"%go.

Definition readGOGC : go_string := "runtime.readGOGC"%go.

Definition setMemoryLimit : go_string := "runtime.setMemoryLimit"%go.

Definition readGOMEMLIMIT : go_string := "runtime.readGOMEMLIMIT"%go.

Definition gcControllerCommit : go_string := "runtime.gcControllerCommit"%go.

Axiom scavengePercent : Z.

Axiom retainExtraPercent : Z.

Axiom reduceExtraPercent : Z.

Axiom maxPagesPerPhysPage : Z.

Axiom scavengeCostRatio : val.

Axiom scavChunkHiOccFrac : val.

Axiom scavChunkHiOccPages : val.

Definition heapRetained : go_string := "runtime.heapRetained"%go.

Definition gcPaceScavenger : go_string := "runtime.gcPaceScavenger"%go.

Definition scavenge : go_string := "runtime.scavenge"%go.

Axiom startingScavSleepRatio : val.

Axiom minScavWorkTime : val.

Definition scavenger : go_string := "runtime.scavenger"%go.

Axiom scavengerState : go_type.

Definition bgscavenge : go_string := "runtime.bgscavenge"%go.

Definition printScavTrace : go_string := "runtime.printScavTrace"%go.

Definition fillAligned : go_string := "runtime.fillAligned"%go.

Axiom scavengeIndex : go_type.

Axiom atomicScavChunkData : go_type.

Axiom scavChunkData : go_type.

Definition unpackScavChunkData : go_string := "runtime.unpackScavChunkData"%go.

Axiom scavChunkHasFree : val.

Axiom scavChunkMaxFlags : Z.

Axiom scavChunkFlagsMask : Z.

Axiom logScavChunkInUseMax : Z.

Axiom scavChunkInUseMask : Z.

Axiom scavChunkFlags : go_type.

Axiom piController : go_type.

Axiom stackTraceDebug : val.

Axiom stackWorkBuf : go_type.

Axiom stackWorkBufHdr : go_type.

Axiom stackObjectBuf : go_type.

Axiom stackObjectBufHdr : go_type.

Axiom stackObject : go_type.

Axiom stackScanState : go_type.

Definition binarySearchTree : go_string := "runtime.binarySearchTree"%go.

Definition sweep : go_string := "runtime.sweep"%go.

Axiom sweepdata : go_type.

Axiom sweepClass : go_type.

Axiom numSweepClasses : Z.

Axiom sweepClassDone : val.

Axiom sweepDrainedMask : Z.

Axiom activeSweep : go_type.

Definition finishsweep_m : go_string := "runtime.finishsweep_m"%go.

Definition bgsweep : go_string := "runtime.bgsweep"%go.

Axiom sweepLocker : go_type.

Axiom sweepLocked : go_type.

Definition sweepone : go_string := "runtime.sweepone"%go.

Definition isSweepDone : go_string := "runtime.isSweepDone"%go.

Definition deductSweepCredit : go_string := "runtime.deductSweepCredit"%go.

Definition clobberfree : go_string := "runtime.clobberfree"%go.

Definition gcPaceSweeper : go_string := "runtime.gcPaceSweeper"%go.

Axiom _WorkbufSize : Z.

Axiom workbufAlloc : Z.

Axiom gcWork : go_type.

Axiom workbufhdr : go_type.

Axiom workbuf : go_type.

Definition getempty : go_string := "runtime.getempty"%go.

Definition putempty : go_string := "runtime.putempty"%go.

Definition putfull : go_string := "runtime.putfull"%go.

Definition trygetfull : go_string := "runtime.trygetfull"%go.

Definition handoff : go_string := "runtime.handoff"%go.

Definition prepareFreeWorkbufs : go_string := "runtime.prepareFreeWorkbufs"%go.

Definition freeSomeWbufs : go_string := "runtime.freeSomeWbufs"%go.

Axiom minPhysPageSize : Z.

Axiom maxPhysPageSize : Z.

Axiom maxPhysHugePageSize : Z.

Axiom pagesPerReclaimerChunk : Z.

Axiom physPageAlignedStacks : val.

Axiom mheap : go_type.

Definition mheap_ : go_string := "runtime.mheap_"%go.

Axiom heapArena : go_type.

Axiom arenaHint : go_type.

Axiom mSpanState : go_type.

Axiom mSpanDead : val.

Axiom mSpanInUse : val.

Axiom mSpanManual : val.

Definition mSpanStateNames : go_string := "runtime.mSpanStateNames"%go.

Axiom mSpanStateNames'init : val.

Axiom mSpanStateBox : go_type.

Axiom mSpanList : go_type.

Axiom mspan : go_type.

Definition recordspan : go_string := "runtime.recordspan"%go.

Axiom spanClass : go_type.

Axiom numSpanClasses : Z.

Axiom tinySpanClass : val.

Definition makeSpanClass : go_string := "runtime.makeSpanClass"%go.

Definition arenaIndex : go_string := "runtime.arenaIndex"%go.

Definition arenaBase : go_string := "runtime.arenaBase"%go.

Axiom arenaIdx : go_type.

Definition inheap : go_string := "runtime.inheap"%go.

Definition inHeapOrStack : go_string := "runtime.inHeapOrStack"%go.

Definition spanOf : go_string := "runtime.spanOf"%go.

Definition spanOfUnchecked : go_string := "runtime.spanOfUnchecked"%go.

Definition spanOfHeap : go_string := "runtime.spanOfHeap"%go.

Definition pageIndexOf : go_string := "runtime.pageIndexOf"%go.

Axiom spanAllocType : go_type.

Axiom spanAllocHeap : val.

Axiom spanAllocStack : val.

Axiom spanAllocPtrScalarBits : val.

Axiom spanAllocWorkBuf : val.

Definition runtime_debug_freeOSMemory : go_string := "runtime.runtime_debug_freeOSMemory"%go.

Axiom _KindSpecialFinalizer : Z.

Axiom _KindSpecialWeakHandle : Z.

Axiom _KindSpecialProfile : Z.

Axiom _KindSpecialReachable : Z.

Axiom _KindSpecialPinCounter : Z.

Axiom _KindSpecialCleanup : Z.

Axiom special : go_type.

Definition spanHasSpecials : go_string := "runtime.spanHasSpecials"%go.

Definition spanHasNoSpecials : go_string := "runtime.spanHasNoSpecials"%go.

Definition addspecial : go_string := "runtime.addspecial"%go.

Definition removespecial : go_string := "runtime.removespecial"%go.

Axiom specialfinalizer : go_type.

Definition addfinalizer : go_string := "runtime.addfinalizer"%go.

Definition removefinalizer : go_string := "runtime.removefinalizer"%go.

Axiom specialCleanup : go_type.

Definition addCleanup : go_string := "runtime.addCleanup"%go.

Axiom specialWeakHandle : go_type.

Definition internal_weak_runtime_registerWeakPointer : go_string := "runtime.internal_weak_runtime_registerWeakPointer"%go.

Definition internal_weak_runtime_makeStrongFromWeak : go_string := "runtime.internal_weak_runtime_makeStrongFromWeak"%go.

Definition gcParkStrongFromWeak : go_string := "runtime.gcParkStrongFromWeak"%go.

Definition gcWakeAllStrongFromWeak : go_string := "runtime.gcWakeAllStrongFromWeak"%go.

Definition getOrAddWeakHandle : go_string := "runtime.getOrAddWeakHandle"%go.

Definition getWeakHandle : go_string := "runtime.getWeakHandle"%go.

Axiom specialprofile : go_type.

Definition setprofilebucket : go_string := "runtime.setprofilebucket"%go.

Axiom specialReachable : go_type.

Axiom specialPinCounter : go_type.

Axiom specialsIter : go_type.

Definition newSpecialsIter : go_string := "runtime.newSpecialsIter"%go.

Definition freeSpecial : go_string := "runtime.freeSpecial"%go.

Axiom gcBits : go_type.

Axiom gcBitsChunkBytes : val.

Axiom gcBitsHeaderBytes : val.

Axiom gcBitsHeader : go_type.

Axiom gcBitsArena : go_type.

Definition gcBitsArenas : go_string := "runtime.gcBitsArenas"%go.

Definition newMarkBits : go_string := "runtime.newMarkBits"%go.

Definition newAllocBits : go_string := "runtime.newAllocBits"%go.

Definition nextMarkBitArenaEpoch : go_string := "runtime.nextMarkBitArenaEpoch"%go.

Definition newArenaMayUnlock : go_string := "runtime.newArenaMayUnlock"%go.

Definition strmin : go_string := "runtime.strmin"%go.

Definition strmax : go_string := "runtime.strmax"%go.

Definition fmin32 : go_string := "runtime.fmin32"%go.

Definition fmin64 : go_string := "runtime.fmin64"%go.

Definition fmax32 : go_string := "runtime.fmax32"%go.

Definition fmax64 : go_string := "runtime.fmax64"%go.

Axiom floaty : go_type.

Definition fmin : go_string := "runtime.fmin"%go.

Definition fmax : go_string := "runtime.fmax"%go.

Definition forbits : go_string := "runtime.forbits"%go.

Definition fandbits : go_string := "runtime.fandbits"%go.

Axiom pallocChunkPages : Z.

Axiom pallocChunkBytes : Z.

Axiom logPallocChunkPages : Z.

Axiom logPallocChunkBytes : Z.

Axiom summaryLevelBits : Z.

Axiom summaryL0Bits : Z.

Axiom pallocChunksL2Bits : Z.

Axiom pallocChunksL1Shift : Z.

Definition maxSearchAddr : go_string := "runtime.maxSearchAddr"%go.

Axiom chunkIdx : go_type.

Definition chunkIndex : go_string := "runtime.chunkIndex"%go.

Definition chunkBase : go_string := "runtime.chunkBase"%go.

Definition chunkPageIndex : go_string := "runtime.chunkPageIndex"%go.

Definition offAddrToLevelIndex : go_string := "runtime.offAddrToLevelIndex"%go.

Definition levelIndexToOffAddr : go_string := "runtime.levelIndexToOffAddr"%go.

Definition addrsToSummaryRange : go_string := "runtime.addrsToSummaryRange"%go.

Definition blockAlignSummaryRange : go_string := "runtime.blockAlignSummaryRange"%go.

Axiom pageAlloc : go_type.

Axiom pallocSumBytes : val.

Axiom maxPackedValue : Z.

Axiom logMaxPackedValue : Z.

Axiom freeChunkSum : val.

Axiom pallocSum : go_type.

Definition packPallocSum : go_string := "runtime.packPallocSum"%go.

Definition mergeSummaries : go_string := "runtime.mergeSummaries"%go.

Axiom summaryLevels : Z.

Axiom pageAlloc32Bit : Z.

Axiom pageAlloc64Bit : Z.

Axiom pallocChunksL1Bits : Z.

Definition levelBits : go_string := "runtime.levelBits"%go.

Axiom levelBits'init : val.

Definition levelShift : go_string := "runtime.levelShift"%go.

Axiom levelShift'init : val.

Definition levelLogPages : go_string := "runtime.levelLogPages"%go.

Axiom levelLogPages'init : val.

Axiom pageCachePages : val.

Axiom pageCache : go_type.

Axiom pageBits : go_type.

Axiom pallocBits : go_type.

Definition findBitRange64 : go_string := "runtime.findBitRange64"%go.

Axiom pallocData : go_type.

Definition profInsertLock : go_string := "runtime.profInsertLock"%go.

Definition profBlockLock : go_string := "runtime.profBlockLock"%go.

Definition profMemActiveLock : go_string := "runtime.profMemActiveLock"%go.

Definition profMemFutureLock : go_string := "runtime.profMemFutureLock"%go.

Axiom memProfile : val.

Axiom blockProfile : val.

Axiom mutexProfile : val.

Axiom buckHashSize : Z.

Axiom maxSkip : Z.

Axiom maxProfStackDepth : Z.

Axiom bucketType : go_type.

Axiom bucket : go_type.

Axiom memRecord : go_type.

Axiom memRecordCycle : go_type.

Axiom blockRecord : go_type.

Definition mbuckets : go_string := "runtime.mbuckets"%go.

Definition bbuckets : go_string := "runtime.bbuckets"%go.

Definition xbuckets : go_string := "runtime.xbuckets"%go.

Definition buckhash : go_string := "runtime.buckhash"%go.

Definition mProfCycle : go_string := "runtime.mProfCycle"%go.

Axiom buckhashArray : go_type.

Axiom mProfCycleWrap : val.

Axiom mProfCycleHolder : go_type.

Definition newBucket : go_string := "runtime.newBucket"%go.

Definition stkbucket : go_string := "runtime.stkbucket"%go.

Definition eqslice : go_string := "runtime.eqslice"%go.

Definition mProf_NextCycle : go_string := "runtime.mProf_NextCycle"%go.

Definition mProf_Flush : go_string := "runtime.mProf_Flush"%go.

Definition mProf_FlushLocked : go_string := "runtime.mProf_FlushLocked"%go.

Definition mProf_PostSweep : go_string := "runtime.mProf_PostSweep"%go.

Definition mProf_Malloc : go_string := "runtime.mProf_Malloc"%go.

Definition mProf_Free : go_string := "runtime.mProf_Free"%go.

Definition blockprofilerate : go_string := "runtime.blockprofilerate"%go.

Definition SetBlockProfileRate : go_string := "runtime.SetBlockProfileRate"%go.

Definition blockevent : go_string := "runtime.blockevent"%go.

Definition blocksampled : go_string := "runtime.blocksampled"%go.

Definition saveblockevent : go_string := "runtime.saveblockevent"%go.

Definition fpTracebackPartialExpand : go_string := "runtime.fpTracebackPartialExpand"%go.

Axiom lockTimer : go_type.

Axiom mLockProfile : go_type.

Definition saveBlockEventStack : go_string := "runtime.saveBlockEventStack"%go.

Definition mutexprofilerate : go_string := "runtime.mutexprofilerate"%go.

Definition SetMutexProfileFraction : go_string := "runtime.SetMutexProfileFraction"%go.

Definition mutexevent : go_string := "runtime.mutexevent"%go.

Axiom StackRecord : go_type.

Definition MemProfileRate : go_string := "runtime.MemProfileRate"%go.

Axiom MemProfileRate'init : val.

Definition disableMemoryProfiling : go_string := "runtime.disableMemoryProfiling"%go.

Axiom MemProfileRecord : go_type.

Definition MemProfile : go_string := "runtime.MemProfile"%go.

Definition memProfileInternal : go_string := "runtime.memProfileInternal"%go.

Definition copyMemProfileRecord : go_string := "runtime.copyMemProfileRecord"%go.

Definition pprof_memProfileInternal : go_string := "runtime.pprof_memProfileInternal"%go.

Definition iterate_memprof : go_string := "runtime.iterate_memprof"%go.

Axiom BlockProfileRecord : go_type.

Definition BlockProfile : go_string := "runtime.BlockProfile"%go.

Definition expandFrames : go_string := "runtime.expandFrames"%go.

Definition blockProfileInternal : go_string := "runtime.blockProfileInternal"%go.

Definition copyBlockProfileRecord : go_string := "runtime.copyBlockProfileRecord"%go.

Definition pprof_blockProfileInternal : go_string := "runtime.pprof_blockProfileInternal"%go.

Definition MutexProfile : go_string := "runtime.MutexProfile"%go.

Definition mutexProfileInternal : go_string := "runtime.mutexProfileInternal"%go.

Definition pprof_mutexProfileInternal : go_string := "runtime.pprof_mutexProfileInternal"%go.

Definition ThreadCreateProfile : go_string := "runtime.ThreadCreateProfile"%go.

Definition threadCreateProfileInternal : go_string := "runtime.threadCreateProfileInternal"%go.

Definition pprof_threadCreateInternal : go_string := "runtime.pprof_threadCreateInternal"%go.

Definition pprof_goroutineProfileWithLabels : go_string := "runtime.pprof_goroutineProfileWithLabels"%go.

Definition goroutineProfileWithLabels : go_string := "runtime.goroutineProfileWithLabels"%go.

Definition goroutineProfile : go_string := "runtime.goroutineProfile"%go.

Axiom goroutineProfile'init : val.

Axiom goroutineProfileState : go_type.

Axiom goroutineProfileAbsent : val.

Axiom goroutineProfileInProgress : val.

Axiom goroutineProfileSatisfied : val.

Axiom goroutineProfileStateHolder : go_type.

Definition goroutineProfileWithLabelsConcurrent : go_string := "runtime.goroutineProfileWithLabelsConcurrent"%go.

Definition tryRecordGoroutineProfileWB : go_string := "runtime.tryRecordGoroutineProfileWB"%go.

Definition tryRecordGoroutineProfile : go_string := "runtime.tryRecordGoroutineProfile"%go.

Definition doRecordGoroutineProfile : go_string := "runtime.doRecordGoroutineProfile"%go.

Definition goroutineProfileWithLabelsSync : go_string := "runtime.goroutineProfileWithLabelsSync"%go.

Definition GoroutineProfile : go_string := "runtime.GoroutineProfile"%go.

Definition goroutineProfileInternal : go_string := "runtime.goroutineProfileInternal"%go.

Definition saveg : go_string := "runtime.saveg"%go.

Definition Stack : go_string := "runtime.Stack"%go.

Axiom addrRange : go_type.

Definition makeAddrRange : go_string := "runtime.makeAddrRange"%go.

Definition minOffAddr : go_string := "runtime.minOffAddr"%go.

Axiom minOffAddr'init : val.

Definition maxOffAddr : go_string := "runtime.maxOffAddr"%go.

Axiom maxOffAddr'init : val.

Axiom offAddr : go_type.

Axiom atomicOffAddr : go_type.

Axiom addrRanges : go_type.

Axiom msanenabled : val.

Definition msanread : go_string := "runtime.msanread"%go.

Definition msanwrite : go_string := "runtime.msanwrite"%go.

Definition msanmalloc : go_string := "runtime.msanmalloc"%go.

Definition msanfree : go_string := "runtime.msanfree"%go.

Definition msanmove : go_string := "runtime.msanmove"%go.

Definition roundupsize : go_string := "runtime.roundupsize"%go.

Axiom spanSet : go_type.

Axiom spanSetBlockEntries : Z.

Axiom spanSetInitSpineCap : Z.

Axiom spanSetBlock : go_type.

Axiom atomicSpanSetSpinePointer : go_type.

Axiom spanSetSpinePointer : go_type.

Definition spanSetBlockPool : go_string := "runtime.spanSetBlockPool"%go.

Axiom spanSetBlockAlloc : go_type.

Axiom headTailIndex : go_type.

Definition makeHeadTailIndex : go_string := "runtime.makeHeadTailIndex"%go.

Axiom atomicHeadTailIndex : go_type.

Axiom atomicMSpanPointer : go_type.

Axiom mstats : go_type.

Definition memstats : go_string := "runtime.memstats"%go.

Axiom MemStats : go_type.

Definition ReadMemStats : go_string := "runtime.ReadMemStats"%go.

Definition doubleCheckReadMemStats : go_string := "runtime.doubleCheckReadMemStats"%go.

Axiom doubleCheckReadMemStats'init : val.

Definition readmemstats_m : go_string := "runtime.readmemstats_m"%go.

Definition readGCStats : go_string := "runtime.readGCStats"%go.

Definition readGCStats_m : go_string := "runtime.readGCStats_m"%go.

Definition flushmcache : go_string := "runtime.flushmcache"%go.

Definition flushallmcaches : go_string := "runtime.flushallmcaches"%go.

Axiom sysMemStat : go_type.

Axiom heapStatsDelta : go_type.

Axiom consistentHeapStats : go_type.

Axiom cpuStats : go_type.

Axiom testSmallBuf : val.

Axiom wbBuf : go_type.

Axiom wbBufEntries : Z.

Axiom wbMaxEntriesPerCall : Z.

Definition wbBufFlush : go_string := "runtime.wbBufFlush"%go.

Definition wbBufFlush1 : go_string := "runtime.wbBufFlush1"%go.

Definition nonblockingPipe : go_string := "runtime.nonblockingPipe"%go.

Axiom pollNoError : Z.

Axiom pollErrClosing : Z.

Axiom pollErrTimeout : Z.

Axiom pollErrNotPollable : Z.

Axiom pdNil : val.

Axiom pdReady : val.

Axiom pdWait : val.

Axiom pollBlockSize : Z.

Axiom pollDesc : go_type.

Axiom pollInfo : go_type.

Axiom pollClosing : Z.

Axiom pollEventErr : Z.

Axiom pollExpiredReadDeadline : Z.

Axiom pollExpiredWriteDeadline : Z.

Axiom pollFDSeq : Z.

Axiom pollFDSeqBits : Z.

Axiom pollFDSeqMask : Z.

Axiom pollCache : go_type.

Definition netpollInitLock : go_string := "runtime.netpollInitLock"%go.

Definition netpollInited : go_string := "runtime.netpollInited"%go.

Definition pollcache : go_string := "runtime.pollcache"%go.

Definition netpollWaiters : go_string := "runtime.netpollWaiters"%go.

Definition poll_runtime_pollServerInit : go_string := "runtime.poll_runtime_pollServerInit"%go.

Definition netpollGenericInit : go_string := "runtime.netpollGenericInit"%go.

Definition netpollinited : go_string := "runtime.netpollinited"%go.

Definition poll_runtime_isPollServerDescriptor : go_string := "runtime.poll_runtime_isPollServerDescriptor"%go.

Definition poll_runtime_pollOpen : go_string := "runtime.poll_runtime_pollOpen"%go.

Definition poll_runtime_pollClose : go_string := "runtime.poll_runtime_pollClose"%go.

Definition poll_runtime_pollReset : go_string := "runtime.poll_runtime_pollReset"%go.

Definition poll_runtime_pollWait : go_string := "runtime.poll_runtime_pollWait"%go.

Definition poll_runtime_pollWaitCanceled : go_string := "runtime.poll_runtime_pollWaitCanceled"%go.

Definition poll_runtime_pollSetDeadline : go_string := "runtime.poll_runtime_pollSetDeadline"%go.

Definition poll_runtime_pollUnblock : go_string := "runtime.poll_runtime_pollUnblock"%go.

Definition netpollready : go_string := "runtime.netpollready"%go.

Definition netpollcheckerr : go_string := "runtime.netpollcheckerr"%go.

Definition netpollblockcommit : go_string := "runtime.netpollblockcommit"%go.

Definition netpollgoready : go_string := "runtime.netpollgoready"%go.

Definition netpollblock : go_string := "runtime.netpollblock"%go.

Definition netpollunblock : go_string := "runtime.netpollunblock"%go.

Definition netpolldeadlineimpl : go_string := "runtime.netpolldeadlineimpl"%go.

Definition netpollDeadline : go_string := "runtime.netpollDeadline"%go.

Definition netpollReadDeadline : go_string := "runtime.netpollReadDeadline"%go.

Definition netpollWriteDeadline : go_string := "runtime.netpollWriteDeadline"%go.

Definition netpollAnyWaiters : go_string := "runtime.netpollAnyWaiters"%go.

Definition netpollAdjustWaiters : go_string := "runtime.netpollAdjustWaiters"%go.

Definition pdEface : go_string := "runtime.pdEface"%go.

Axiom pdEface'init : val.

Definition pdType : go_string := "runtime.pdType"%go.

Axiom pdType'init : val.

Definition epfd : go_string := "runtime.epfd"%go.

Axiom epfd'init : val.

Definition netpollEventFd : go_string := "runtime.netpollEventFd"%go.

Definition netpollWakeSig : go_string := "runtime.netpollWakeSig"%go.

Definition netpollinit : go_string := "runtime.netpollinit"%go.

Definition netpollIsPollDescriptor : go_string := "runtime.netpollIsPollDescriptor"%go.

Definition netpollopen : go_string := "runtime.netpollopen"%go.

Definition netpollclose : go_string := "runtime.netpollclose"%go.

Definition netpollarm : go_string := "runtime.netpollarm"%go.

Definition netpollBreak : go_string := "runtime.netpollBreak"%go.

Definition netpoll : go_string := "runtime.netpoll"%go.

Axiom osRelaxMinNS : Z.

Definition haveHighResSleep : go_string := "runtime.haveHighResSleep"%go.

Axiom haveHighResSleep'init : val.

Definition osRelax : go_string := "runtime.osRelax"%go.

Definition enableWER : go_string := "runtime.enableWER"%go.

Axiom winlibcall : go_type.

Axiom note : go_type.

Axiom sigPerThreadSyscall : Z.

Axiom mOS : go_type.

Definition futex : go_string := "runtime.futex"%go.

Axiom _FUTEX_PRIVATE_FLAG : Z.

Axiom _FUTEX_WAIT_PRIVATE : Z.

Axiom _FUTEX_WAKE_PRIVATE : Z.

Definition futexsleep : go_string := "runtime.futexsleep"%go.

Definition futexwakeup : go_string := "runtime.futexwakeup"%go.

Definition getproccount : go_string := "runtime.getproccount"%go.

Axiom _CLONE_VM : Z.

Axiom _CLONE_FS : Z.

Axiom _CLONE_FILES : Z.

Axiom _CLONE_SIGHAND : Z.

Axiom _CLONE_PTRACE : Z.

Axiom _CLONE_VFORK : Z.

Axiom _CLONE_PARENT : Z.

Axiom _CLONE_THREAD : Z.

Axiom _CLONE_NEWNS : Z.

Axiom _CLONE_SYSVSEM : Z.

Axiom _CLONE_SETTLS : Z.

Axiom _CLONE_PARENT_SETTID : Z.

Axiom _CLONE_CHILD_CLEARTID : Z.

Axiom _CLONE_UNTRACED : Z.

Axiom _CLONE_CHILD_SETTID : Z.

Axiom _CLONE_STOPPED : Z.

Axiom _CLONE_NEWUTS : Z.

Axiom _CLONE_NEWIPC : Z.

Axiom cloneFlags : Z.

Definition clone : go_string := "runtime.clone"%go.

Definition newosproc : go_string := "runtime.newosproc"%go.

Definition newosproc0 : go_string := "runtime.newosproc0"%go.

Axiom _AT_NULL : Z.

Axiom _AT_PAGESZ : Z.

Axiom _AT_PLATFORM : Z.

Axiom _AT_HWCAP : Z.

Axiom _AT_SECURE : Z.

Axiom _AT_RANDOM : Z.

Axiom _AT_HWCAP2 : Z.

Definition procAuxv : go_string := "runtime.procAuxv"%go.

Axiom procAuxv'init : val.

Definition addrspace_vec : go_string := "runtime.addrspace_vec"%go.

Definition mincore : go_string := "runtime.mincore"%go.

Definition auxvreadbuf : go_string := "runtime.auxvreadbuf"%go.

Definition sysargs : go_string := "runtime.sysargs"%go.

Definition secureMode : go_string := "runtime.secureMode"%go.

Definition sysauxv : go_string := "runtime.sysauxv"%go.

Definition sysTHPSizePath : go_string := "runtime.sysTHPSizePath"%go.

Axiom sysTHPSizePath'init : val.

Definition getHugePageSize : go_string := "runtime.getHugePageSize"%go.

Definition osinit : go_string := "runtime.osinit"%go.

Definition urandom_dev : go_string := "runtime.urandom_dev"%go.

Axiom urandom_dev'init : val.

Definition readRandom : go_string := "runtime.readRandom"%go.

Definition goenvs : go_string := "runtime.goenvs"%go.

Definition libpreinit : go_string := "runtime.libpreinit"%go.

Definition mpreinit : go_string := "runtime.mpreinit"%go.

Definition gettid : go_string := "runtime.gettid"%go.

Definition minit : go_string := "runtime.minit"%go.

Definition unminit : go_string := "runtime.unminit"%go.

Definition mdestroy : go_string := "runtime.mdestroy"%go.

Definition sigreturn__sigaction : go_string := "runtime.sigreturn__sigaction"%go.

Definition sigtramp : go_string := "runtime.sigtramp"%go.

Definition cgoSigtramp : go_string := "runtime.cgoSigtramp"%go.

Definition sigaltstack : go_string := "runtime.sigaltstack"%go.

Definition setitimer : go_string := "runtime.setitimer"%go.

Definition timer_create : go_string := "runtime.timer_create"%go.

Definition timer_settime : go_string := "runtime.timer_settime"%go.

Definition timer_delete : go_string := "runtime.timer_delete"%go.

Definition rtsigprocmask : go_string := "runtime.rtsigprocmask"%go.

Definition sigprocmask : go_string := "runtime.sigprocmask"%go.

Definition raise : go_string := "runtime.raise"%go.

Definition raiseproc : go_string := "runtime.raiseproc"%go.

Definition sched_getaffinity : go_string := "runtime.sched_getaffinity"%go.

Definition osyield : go_string := "runtime.osyield"%go.

Definition osyield_no_g : go_string := "runtime.osyield_no_g"%go.

Definition pipe2 : go_string := "runtime.pipe2"%go.

Definition fcntl : go_string := "runtime.fcntl"%go.

Axiom _si_max_size : Z.

Axiom _sigev_max_size : Z.

Definition setsig : go_string := "runtime.setsig"%go.

Definition setsigstack : go_string := "runtime.setsigstack"%go.

Definition getsig : go_string := "runtime.getsig"%go.

Definition setSignalstackSP : go_string := "runtime.setSignalstackSP"%go.

Definition sysSigaction : go_string := "runtime.sysSigaction"%go.

Definition rt_sigaction : go_string := "runtime.rt_sigaction"%go.

Definition getpid : go_string := "runtime.getpid"%go.

Definition tgkill : go_string := "runtime.tgkill"%go.

Definition signalM : go_string := "runtime.signalM"%go.

Definition validSIGPROF : go_string := "runtime.validSIGPROF"%go.

Definition setProcessCPUProfiler : go_string := "runtime.setProcessCPUProfiler"%go.

Definition setThreadCPUProfiler : go_string := "runtime.setThreadCPUProfiler"%go.

Axiom perThreadSyscallArgs : go_type.

Definition perThreadSyscall : go_string := "runtime.perThreadSyscall"%go.

Definition syscall_runtime_doAllThreadsSyscall : go_string := "runtime.syscall_runtime_doAllThreadsSyscall"%go.

Definition runPerThreadSyscall : go_string := "runtime.runPerThreadSyscall"%go.

Axiom _SI_USER : Z.

Axiom _SI_TKILL : Z.

Axiom _SYS_SECCOMP : Z.

Definition mprotect : go_string := "runtime.mprotect"%go.

Axiom _SS_DISABLE : Z.

Axiom _NSIG : Z.

Axiom _SIG_BLOCK : Z.

Axiom _SIG_UNBLOCK : Z.

Axiom _SIG_SETMASK : Z.

Axiom sigset : go_type.

Definition sigset_all : go_string := "runtime.sigset_all"%go.

Axiom sigset_all'init : val.

Definition sigaddset : go_string := "runtime.sigaddset"%go.

Definition sigdelset : go_string := "runtime.sigdelset"%go.

Definition sigfillset : go_string := "runtime.sigfillset"%go.

Definition archauxv : go_string := "runtime.archauxv"%go.

Definition osArchInit : go_string := "runtime.osArchInit"%go.

Definition osStackAlloc : go_string := "runtime.osStackAlloc"%go.

Definition osStackFree : go_string := "runtime.osStackFree"%go.

Axiom _F_SETFD : Z.

Axiom _FD_CLOEXEC : Z.

Definition closeonexec : go_string := "runtime.closeonexec"%go.

Axiom throwType : go_type.

Axiom throwTypeNone : val.

Axiom throwTypeUser : val.

Axiom throwTypeRuntime : val.

Definition panicCheck1 : go_string := "runtime.panicCheck1"%go.

Definition panicCheck2 : go_string := "runtime.panicCheck2"%go.

Definition goPanicIndex : go_string := "runtime.goPanicIndex"%go.

Definition goPanicIndexU : go_string := "runtime.goPanicIndexU"%go.

Definition goPanicSliceAlen : go_string := "runtime.goPanicSliceAlen"%go.

Definition goPanicSliceAlenU : go_string := "runtime.goPanicSliceAlenU"%go.

Definition goPanicSliceAcap : go_string := "runtime.goPanicSliceAcap"%go.

Definition goPanicSliceAcapU : go_string := "runtime.goPanicSliceAcapU"%go.

Definition goPanicSliceB : go_string := "runtime.goPanicSliceB"%go.

Definition goPanicSliceBU : go_string := "runtime.goPanicSliceBU"%go.

Definition goPanicSlice3Alen : go_string := "runtime.goPanicSlice3Alen"%go.

Definition goPanicSlice3AlenU : go_string := "runtime.goPanicSlice3AlenU"%go.

Definition goPanicSlice3Acap : go_string := "runtime.goPanicSlice3Acap"%go.

Definition goPanicSlice3AcapU : go_string := "runtime.goPanicSlice3AcapU"%go.

Definition goPanicSlice3B : go_string := "runtime.goPanicSlice3B"%go.

Definition goPanicSlice3BU : go_string := "runtime.goPanicSlice3BU"%go.

Definition goPanicSlice3C : go_string := "runtime.goPanicSlice3C"%go.

Definition goPanicSlice3CU : go_string := "runtime.goPanicSlice3CU"%go.

Definition goPanicSliceConvert : go_string := "runtime.goPanicSliceConvert"%go.

Definition panicIndex : go_string := "runtime.panicIndex"%go.

Definition panicIndexU : go_string := "runtime.panicIndexU"%go.

Definition panicSliceAlen : go_string := "runtime.panicSliceAlen"%go.

Definition panicSliceAlenU : go_string := "runtime.panicSliceAlenU"%go.

Definition panicSliceAcap : go_string := "runtime.panicSliceAcap"%go.

Definition panicSliceAcapU : go_string := "runtime.panicSliceAcapU"%go.

Definition panicSliceB : go_string := "runtime.panicSliceB"%go.

Definition panicSliceBU : go_string := "runtime.panicSliceBU"%go.

Definition panicSlice3Alen : go_string := "runtime.panicSlice3Alen"%go.

Definition panicSlice3AlenU : go_string := "runtime.panicSlice3AlenU"%go.

Definition panicSlice3Acap : go_string := "runtime.panicSlice3Acap"%go.

Definition panicSlice3AcapU : go_string := "runtime.panicSlice3AcapU"%go.

Definition panicSlice3B : go_string := "runtime.panicSlice3B"%go.

Definition panicSlice3BU : go_string := "runtime.panicSlice3BU"%go.

Definition panicSlice3C : go_string := "runtime.panicSlice3C"%go.

Definition panicSlice3CU : go_string := "runtime.panicSlice3CU"%go.

Definition panicSliceConvert : go_string := "runtime.panicSliceConvert"%go.

Definition shiftError : go_string := "runtime.shiftError"%go.

Axiom shiftError'init : val.

Definition panicshift : go_string := "runtime.panicshift"%go.

Definition divideError : go_string := "runtime.divideError"%go.

Axiom divideError'init : val.

Definition panicdivide : go_string := "runtime.panicdivide"%go.

Definition overflowError : go_string := "runtime.overflowError"%go.

Axiom overflowError'init : val.

Definition panicoverflow : go_string := "runtime.panicoverflow"%go.

Definition floatError : go_string := "runtime.floatError"%go.

Axiom floatError'init : val.

Definition panicfloat : go_string := "runtime.panicfloat"%go.

Definition memoryError : go_string := "runtime.memoryError"%go.

Axiom memoryError'init : val.

Definition panicmem : go_string := "runtime.panicmem"%go.

Definition panicmemAddr : go_string := "runtime.panicmemAddr"%go.

Definition deferproc : go_string := "runtime.deferproc"%go.

Definition rangeDoneError : go_string := "runtime.rangeDoneError"%go.

Axiom rangeDoneError'init : val.

Definition rangePanicError : go_string := "runtime.rangePanicError"%go.

Axiom rangePanicError'init : val.

Definition rangeExhaustedError : go_string := "runtime.rangeExhaustedError"%go.

Axiom rangeExhaustedError'init : val.

Definition rangeMissingPanicError : go_string := "runtime.rangeMissingPanicError"%go.

Axiom rangeMissingPanicError'init : val.

Definition panicrangestate : go_string := "runtime.panicrangestate"%go.

Definition deferrangefunc : go_string := "runtime.deferrangefunc"%go.

Definition badDefer : go_string := "runtime.badDefer"%go.

Definition deferprocat : go_string := "runtime.deferprocat"%go.

Definition deferconvert : go_string := "runtime.deferconvert"%go.

Definition deferprocStack : go_string := "runtime.deferprocStack"%go.

Definition newdefer : go_string := "runtime.newdefer"%go.

Definition popDefer : go_string := "runtime.popDefer"%go.

Definition deferreturn : go_string := "runtime.deferreturn"%go.

Definition Goexit : go_string := "runtime.Goexit"%go.

Definition preprintpanics : go_string := "runtime.preprintpanics"%go.

Definition printpanics : go_string := "runtime.printpanics"%go.

Definition readvarintUnsafe : go_string := "runtime.readvarintUnsafe"%go.

Axiom PanicNilError : go_type.

Definition panicnil : go_string := "runtime.panicnil"%go.

Axiom panicnil'init : val.

Definition gopanic : go_string := "runtime.gopanic"%go.

Definition gorecover : go_string := "runtime.gorecover"%go.

Definition sync_throw : go_string := "runtime.sync_throw"%go.

Definition sync_fatal : go_string := "runtime.sync_fatal"%go.

Definition rand_fatal : go_string := "runtime.rand_fatal"%go.

Definition sysrand_fatal : go_string := "runtime.sysrand_fatal"%go.

Definition fips_fatal : go_string := "runtime.fips_fatal"%go.

Definition maps_fatal : go_string := "runtime.maps_fatal"%go.

Definition internal_sync_throw : go_string := "runtime.internal_sync_throw"%go.

Definition internal_sync_fatal : go_string := "runtime.internal_sync_fatal"%go.

Definition throw : go_string := "runtime.throw"%go.

Definition fatal : go_string := "runtime.fatal"%go.

Definition runningPanicDefers : go_string := "runtime.runningPanicDefers"%go.

Definition panicking : go_string := "runtime.panicking"%go.

Definition paniclk : go_string := "runtime.paniclk"%go.

Definition recovery : go_string := "runtime.recovery"%go.

Definition fatalthrow : go_string := "runtime.fatalthrow"%go.

Definition fatalpanic : go_string := "runtime.fatalpanic"%go.

Definition startpanic_m : go_string := "runtime.startpanic_m"%go.

Definition didothers : go_string := "runtime.didothers"%go.

Definition deadlock : go_string := "runtime.deadlock"%go.

Definition dopanic_m : go_string := "runtime.dopanic_m"%go.

Definition canpanic : go_string := "runtime.canpanic"%go.

Definition shouldPushSigpanic : go_string := "runtime.shouldPushSigpanic"%go.

Definition isAbortPC : go_string := "runtime.isAbortPC"%go.

Axiom Pinner : go_type.

Axiom pinnerSize : Z.

Axiom pinnerRefStoreSize : val.

Axiom pinner : go_type.

Definition pinnerGetPtr : go_string := "runtime.pinnerGetPtr"%go.

Definition isPinned : go_string := "runtime.isPinned"%go.

Definition setPinned : go_string := "runtime.setPinned"%go.

Axiom pinState : go_type.

Axiom pinnerBits : go_type.

Definition pinnerGetPinCounter : go_string := "runtime.pinnerGetPinCounter"%go.

Definition pinnerLeakPanic : go_string := "runtime.pinnerLeakPanic"%go.

Axiom pinnerLeakPanic'init : val.

Definition plugin_lastmoduleinit : go_string := "runtime.plugin_lastmoduleinit"%go.

Definition pluginftabverify : go_string := "runtime.pluginftabverify"%go.

Definition inRange : go_string := "runtime.inRange"%go.

Axiom ptabEntry : go_type.

Axiom suspendGState : go_type.

Definition suspendG : go_string := "runtime.suspendG"%go.

Definition resumeG : go_string := "runtime.resumeG"%go.

Definition canPreemptM : go_string := "runtime.canPreemptM"%go.

Definition asyncPreempt : go_string := "runtime.asyncPreempt"%go.

Definition asyncPreempt2 : go_string := "runtime.asyncPreempt2"%go.

Definition asyncPreemptStack : go_string := "runtime.asyncPreemptStack"%go.

Axiom asyncPreemptStack'init : val.

Definition wantAsyncPreempt : go_string := "runtime.wantAsyncPreempt"%go.

Definition isAsyncSafePoint : go_string := "runtime.isAsyncSafePoint"%go.

Definition osPreemptExtEnter : go_string := "runtime.osPreemptExtEnter"%go.

Definition osPreemptExtExit : go_string := "runtime.osPreemptExtExit"%go.

Axiom hex : go_type.

Definition bytes : go_string := "runtime.bytes"%go.

Definition printBacklog : go_string := "runtime.printBacklog"%go.

Definition printBacklogIndex : go_string := "runtime.printBacklogIndex"%go.

Definition recordForPanic : go_string := "runtime.recordForPanic"%go.

Definition debuglock : go_string := "runtime.debuglock"%go.

Definition printlock : go_string := "runtime.printlock"%go.

Definition printunlock : go_string := "runtime.printunlock"%go.

Definition gwrite : go_string := "runtime.gwrite"%go.

Definition printsp : go_string := "runtime.printsp"%go.

Definition printnl : go_string := "runtime.printnl"%go.

Definition printbool : go_string := "runtime.printbool"%go.

Definition printfloat : go_string := "runtime.printfloat"%go.

Definition printcomplex : go_string := "runtime.printcomplex"%go.

Definition printuint : go_string := "runtime.printuint"%go.

Definition printint : go_string := "runtime.printint"%go.

Definition minhexdigits : go_string := "runtime.minhexdigits"%go.

Axiom minhexdigits'init : val.

Definition printhex : go_string := "runtime.printhex"%go.

Definition printpointer : go_string := "runtime.printpointer"%go.

Definition printuintptr : go_string := "runtime.printuintptr"%go.

Definition printstring : go_string := "runtime.printstring"%go.

Definition printslice : go_string := "runtime.printslice"%go.

Definition printeface : go_string := "runtime.printeface"%go.

Definition printiface : go_string := "runtime.printiface"%go.

Definition hexdumpWords : go_string := "runtime.hexdumpWords"%go.

Definition modinfo : go_string := "runtime.modinfo"%go.

Definition m0 : go_string := "runtime.m0"%go.

Definition g0 : go_string := "runtime.g0"%go.

Definition mcache0 : go_string := "runtime.mcache0"%go.

Definition raceprocctx0 : go_string := "runtime.raceprocctx0"%go.

Definition raceFiniLock : go_string := "runtime.raceFiniLock"%go.

Definition runtime_inittasks : go_string := "runtime.runtime_inittasks"%go.

Definition main_init_done : go_string := "runtime.main_init_done"%go.

Definition main_main : go_string := "runtime.main_main"%go.

Definition mainStarted : go_string := "runtime.mainStarted"%go.

Definition runtimeInitTime : go_string := "runtime.runtimeInitTime"%go.

Definition initSigmask : go_string := "runtime.initSigmask"%go.

Definition main : go_string := "runtime.main"%go.

Definition os_beforeExit : go_string := "runtime.os_beforeExit"%go.

Definition runExitHooks : go_string := "runtime.runExitHooks"%go.

Definition forcegchelper : go_string := "runtime.forcegchelper"%go.

Definition Gosched : go_string := "runtime.Gosched"%go.

Definition goschedguarded : go_string := "runtime.goschedguarded"%go.

Definition goschedIfBusy : go_string := "runtime.goschedIfBusy"%go.

Definition gopark : go_string := "runtime.gopark"%go.

Definition goparkunlock : go_string := "runtime.goparkunlock"%go.

Definition goready : go_string := "runtime.goready"%go.

Definition acquireSudog : go_string := "runtime.acquireSudog"%go.

Definition releaseSudog : go_string := "runtime.releaseSudog"%go.

Definition badmcall : go_string := "runtime.badmcall"%go.

Definition badmcall2 : go_string := "runtime.badmcall2"%go.

Definition badreflectcall : go_string := "runtime.badreflectcall"%go.

Definition badmorestackg0 : go_string := "runtime.badmorestackg0"%go.

Definition badmorestackgsignal : go_string := "runtime.badmorestackgsignal"%go.

Definition badctxt : go_string := "runtime.badctxt"%go.

Definition gcrash : go_string := "runtime.gcrash"%go.

Definition crashingG : go_string := "runtime.crashingG"%go.

Definition switchToCrashStack : go_string := "runtime.switchToCrashStack"%go.

Axiom crashStackImplemented : val.

Definition switchToCrashStack0 : go_string := "runtime.switchToCrashStack0"%go.

Definition lockedOSThread : go_string := "runtime.lockedOSThread"%go.

Definition allglock : go_string := "runtime.allglock"%go.

Definition allgs : go_string := "runtime.allgs"%go.

Definition allglen : go_string := "runtime.allglen"%go.

Definition allgptr : go_string := "runtime.allgptr"%go.

Definition allgadd : go_string := "runtime.allgadd"%go.

Definition allGsSnapshot : go_string := "runtime.allGsSnapshot"%go.

Definition atomicAllG : go_string := "runtime.atomicAllG"%go.

Definition atomicAllGIndex : go_string := "runtime.atomicAllGIndex"%go.

Definition forEachG : go_string := "runtime.forEachG"%go.

Definition forEachGRace : go_string := "runtime.forEachGRace"%go.

Axiom _GoidCacheBatch : Z.

Definition cpuinit : go_string := "runtime.cpuinit"%go.

Definition getGodebugEarly : go_string := "runtime.getGodebugEarly"%go.

Definition schedinit : go_string := "runtime.schedinit"%go.

Definition dumpgstatus : go_string := "runtime.dumpgstatus"%go.

Definition checkmcount : go_string := "runtime.checkmcount"%go.

Definition mReserveID : go_string := "runtime.mReserveID"%go.

Definition mcommoninit : go_string := "runtime.mcommoninit"%go.

Definition mProfStackInit : go_string := "runtime.mProfStackInit"%go.

Definition makeProfStackFP : go_string := "runtime.makeProfStackFP"%go.

Definition makeProfStack : go_string := "runtime.makeProfStack"%go.

Definition pprof_makeProfStack : go_string := "runtime.pprof_makeProfStack"%go.

Axiom osHasLowResTimer : val.

Axiom osHasLowResClockInt : Z.

Axiom osHasLowResClock : val.

Definition ready : go_string := "runtime.ready"%go.

Axiom freezeStopWait : Z.

Definition freezing : go_string := "runtime.freezing"%go.

Definition freezetheworld : go_string := "runtime.freezetheworld"%go.

Definition readgstatus : go_string := "runtime.readgstatus"%go.

Definition casfrom_Gscanstatus : go_string := "runtime.casfrom_Gscanstatus"%go.

Definition castogscanstatus : go_string := "runtime.castogscanstatus"%go.

Definition casgstatusAlwaysTrack : go_string := "runtime.casgstatusAlwaysTrack"%go.

Axiom casgstatusAlwaysTrack'init : val.

Definition casgstatus : go_string := "runtime.casgstatus"%go.

Definition casGToWaiting : go_string := "runtime.casGToWaiting"%go.

Definition casGToWaitingForSuspendG : go_string := "runtime.casGToWaitingForSuspendG"%go.

Definition casGToPreemptScan : go_string := "runtime.casGToPreemptScan"%go.

Definition casGFromPreempted : go_string := "runtime.casGFromPreempted"%go.

Axiom stwReason : go_type.

Axiom stwUnknown : val.

Axiom stwGCMarkTerm : val.

Axiom stwGCSweepTerm : val.

Axiom stwWriteHeapDump : val.

Axiom stwGoroutineProfile : val.

Axiom stwGoroutineProfileCleanup : val.

Axiom stwAllGoroutinesStack : val.

Axiom stwReadMemStats : val.

Axiom stwAllThreadsSyscall : val.

Axiom stwGOMAXPROCS : val.

Axiom stwStartTrace : val.

Axiom stwStopTrace : val.

Axiom stwForTestCountPagesInUse : val.

Axiom stwForTestReadMetricsSlow : val.

Axiom stwForTestReadMemStatsSlow : val.

Axiom stwForTestPageCachePagesLeaked : val.

Axiom stwForTestResetDebugLog : val.

Definition stwReasonStrings : go_string := "runtime.stwReasonStrings"%go.

Axiom stwReasonStrings'init : val.

Axiom worldStop : go_type.

Definition stopTheWorldContext : go_string := "runtime.stopTheWorldContext"%go.

Definition stopTheWorld : go_string := "runtime.stopTheWorld"%go.

Definition startTheWorld : go_string := "runtime.startTheWorld"%go.

Definition stopTheWorldGC : go_string := "runtime.stopTheWorldGC"%go.

Definition startTheWorldGC : go_string := "runtime.startTheWorldGC"%go.

Definition worldsema : go_string := "runtime.worldsema"%go.

Axiom worldsema'init : val.

Definition gcsema : go_string := "runtime.gcsema"%go.

Axiom gcsema'init : val.

Definition stopTheWorldWithSema : go_string := "runtime.stopTheWorldWithSema"%go.

Definition startTheWorldWithSema : go_string := "runtime.startTheWorldWithSema"%go.

Definition usesLibcall : go_string := "runtime.usesLibcall"%go.

Definition mStackIsSystemAllocated : go_string := "runtime.mStackIsSystemAllocated"%go.

Definition mstart : go_string := "runtime.mstart"%go.

Definition mstart0 : go_string := "runtime.mstart0"%go.

Definition mstart1 : go_string := "runtime.mstart1"%go.

Definition mstartm0 : go_string := "runtime.mstartm0"%go.

Definition mPark : go_string := "runtime.mPark"%go.

Definition mexit : go_string := "runtime.mexit"%go.

Definition forEachP : go_string := "runtime.forEachP"%go.

Definition forEachPInternal : go_string := "runtime.forEachPInternal"%go.

Definition runSafePointFn : go_string := "runtime.runSafePointFn"%go.

Definition cgoThreadStart : go_string := "runtime.cgoThreadStart"%go.

Axiom cgothreadstart : go_type.

Definition allocm : go_string := "runtime.allocm"%go.

Definition needm : go_string := "runtime.needm"%go.

Definition needAndBindM : go_string := "runtime.needAndBindM"%go.

Definition newextram : go_string := "runtime.newextram"%go.

Definition oneNewExtraM : go_string := "runtime.oneNewExtraM"%go.

Definition dropm : go_string := "runtime.dropm"%go.

Definition cgoBindM : go_string := "runtime.cgoBindM"%go.

Definition getm : go_string := "runtime.getm"%go.

Definition extraM : go_string := "runtime.extraM"%go.

Definition extraMLength : go_string := "runtime.extraMLength"%go.

Definition extraMWaiters : go_string := "runtime.extraMWaiters"%go.

Definition extraMInUse : go_string := "runtime.extraMInUse"%go.

Definition lockextra : go_string := "runtime.lockextra"%go.

Definition unlockextra : go_string := "runtime.unlockextra"%go.

Definition getExtraM : go_string := "runtime.getExtraM"%go.

Definition putExtraM : go_string := "runtime.putExtraM"%go.

Definition addExtraM : go_string := "runtime.addExtraM"%go.

Definition allocmLock : go_string := "runtime.allocmLock"%go.

Definition execLock : go_string := "runtime.execLock"%go.

Axiom failthreadcreate : go_string.

Axiom failallocatestack : go_string.

Definition newmHandoff : go_string := "runtime.newmHandoff"%go.

Definition newm : go_string := "runtime.newm"%go.

Definition newm1 : go_string := "runtime.newm1"%go.

Definition startTemplateThread : go_string := "runtime.startTemplateThread"%go.

Definition templateThread : go_string := "runtime.templateThread"%go.

Definition stopm : go_string := "runtime.stopm"%go.

Definition mspinning : go_string := "runtime.mspinning"%go.

Definition startm : go_string := "runtime.startm"%go.

Definition handoffp : go_string := "runtime.handoffp"%go.

Definition wakep : go_string := "runtime.wakep"%go.

Definition stoplockedm : go_string := "runtime.stoplockedm"%go.

Definition startlockedm : go_string := "runtime.startlockedm"%go.

Definition gcstopm : go_string := "runtime.gcstopm"%go.

Definition execute : go_string := "runtime.execute"%go.

Definition findRunnable : go_string := "runtime.findRunnable"%go.

Definition pollWork : go_string := "runtime.pollWork"%go.

Definition stealWork : go_string := "runtime.stealWork"%go.

Definition checkRunqsNoP : go_string := "runtime.checkRunqsNoP"%go.

Definition checkTimersNoP : go_string := "runtime.checkTimersNoP"%go.

Definition checkIdleGCNoP : go_string := "runtime.checkIdleGCNoP"%go.

Definition wakeNetPoller : go_string := "runtime.wakeNetPoller"%go.

Definition resetspinning : go_string := "runtime.resetspinning"%go.

Definition injectglist : go_string := "runtime.injectglist"%go.

Definition schedule : go_string := "runtime.schedule"%go.

Definition dropg : go_string := "runtime.dropg"%go.

Definition parkunlock_c : go_string := "runtime.parkunlock_c"%go.

Definition park_m : go_string := "runtime.park_m"%go.

Definition goschedImpl : go_string := "runtime.goschedImpl"%go.

Definition gosched_m : go_string := "runtime.gosched_m"%go.

Definition goschedguarded_m : go_string := "runtime.goschedguarded_m"%go.

Definition gopreempt_m : go_string := "runtime.gopreempt_m"%go.

Definition preemptPark : go_string := "runtime.preemptPark"%go.

Definition goyield : go_string := "runtime.goyield"%go.

Definition goyield_m : go_string := "runtime.goyield_m"%go.

Definition goexit1 : go_string := "runtime.goexit1"%go.

Definition goexit0 : go_string := "runtime.goexit0"%go.

Definition gdestroy : go_string := "runtime.gdestroy"%go.

Definition save : go_string := "runtime.save"%go.

Definition reentersyscall : go_string := "runtime.reentersyscall"%go.

Definition entersyscall : go_string := "runtime.entersyscall"%go.

Definition entersyscall_sysmon : go_string := "runtime.entersyscall_sysmon"%go.

Definition entersyscall_gcwait : go_string := "runtime.entersyscall_gcwait"%go.

Definition entersyscallblock : go_string := "runtime.entersyscallblock"%go.

Definition entersyscallblock_handoff : go_string := "runtime.entersyscallblock_handoff"%go.

Definition exitsyscall : go_string := "runtime.exitsyscall"%go.

Definition exitsyscallfast : go_string := "runtime.exitsyscallfast"%go.

Definition exitsyscallfast_reacquired : go_string := "runtime.exitsyscallfast_reacquired"%go.

Definition exitsyscallfast_pidle : go_string := "runtime.exitsyscallfast_pidle"%go.

Definition exitsyscall0 : go_string := "runtime.exitsyscall0"%go.

Definition syscall_runtime_BeforeFork : go_string := "runtime.syscall_runtime_BeforeFork"%go.

Definition syscall_runtime_AfterFork : go_string := "runtime.syscall_runtime_AfterFork"%go.

Definition inForkedChild : go_string := "runtime.inForkedChild"%go.

Definition syscall_runtime_AfterForkInChild : go_string := "runtime.syscall_runtime_AfterForkInChild"%go.

Definition pendingPreemptSignals : go_string := "runtime.pendingPreemptSignals"%go.

Definition syscall_runtime_BeforeExec : go_string := "runtime.syscall_runtime_BeforeExec"%go.

Definition syscall_runtime_AfterExec : go_string := "runtime.syscall_runtime_AfterExec"%go.

Definition malg : go_string := "runtime.malg"%go.

Definition newproc : go_string := "runtime.newproc"%go.

Definition newproc1 : go_string := "runtime.newproc1"%go.

Definition saveAncestors : go_string := "runtime.saveAncestors"%go.

Definition gfput : go_string := "runtime.gfput"%go.

Definition gfget : go_string := "runtime.gfget"%go.

Definition gfpurge : go_string := "runtime.gfpurge"%go.

Definition Breakpoint : go_string := "runtime.Breakpoint"%go.

Definition dolockOSThread : go_string := "runtime.dolockOSThread"%go.

Definition LockOSThread : go_string := "runtime.LockOSThread"%go.

Definition lockOSThread : go_string := "runtime.lockOSThread"%go.

Definition dounlockOSThread : go_string := "runtime.dounlockOSThread"%go.

Definition UnlockOSThread : go_string := "runtime.UnlockOSThread"%go.

Definition unlockOSThread : go_string := "runtime.unlockOSThread"%go.

Definition badunlockosthread : go_string := "runtime.badunlockosthread"%go.

Definition gcount : go_string := "runtime.gcount"%go.

Definition mcount : go_string := "runtime.mcount"%go.

Definition prof : go_string := "runtime.prof"%go.

Definition _System : go_string := "runtime._System"%go.

Definition _ExternalCode : go_string := "runtime._ExternalCode"%go.

Definition _LostExternalCode : go_string := "runtime._LostExternalCode"%go.

Definition _GC : go_string := "runtime._GC"%go.

Definition _LostSIGPROFDuringAtomic64 : go_string := "runtime._LostSIGPROFDuringAtomic64"%go.

Definition _LostContendedRuntimeLock : go_string := "runtime._LostContendedRuntimeLock"%go.

Definition _VDSO : go_string := "runtime._VDSO"%go.

Definition sigprof : go_string := "runtime.sigprof"%go.

Definition setcpuprofilerate : go_string := "runtime.setcpuprofilerate"%go.

Definition procresize : go_string := "runtime.procresize"%go.

Definition acquirep : go_string := "runtime.acquirep"%go.

Definition wirep : go_string := "runtime.wirep"%go.

Definition releasep : go_string := "runtime.releasep"%go.

Definition releasepNoTrace : go_string := "runtime.releasepNoTrace"%go.

Definition incidlelocked : go_string := "runtime.incidlelocked"%go.

Definition checkdead : go_string := "runtime.checkdead"%go.

Definition forcegcperiod : go_string := "runtime.forcegcperiod"%go.

Axiom forcegcperiod'init : val.

Definition needSysmonWorkaround : go_string := "runtime.needSysmonWorkaround"%go.

Axiom needSysmonWorkaround'init : val.

Axiom haveSysmon : val.

Definition sysmon : go_string := "runtime.sysmon"%go.

Axiom sysmontick : go_type.

Axiom forcePreemptNS : Z.

Definition retake : go_string := "runtime.retake"%go.

Definition preemptall : go_string := "runtime.preemptall"%go.

Definition preemptone : go_string := "runtime.preemptone"%go.

Definition starttime : go_string := "runtime.starttime"%go.

Definition schedtrace : go_string := "runtime.schedtrace"%go.

Definition schedEnableUser : go_string := "runtime.schedEnableUser"%go.

Definition schedEnabled : go_string := "runtime.schedEnabled"%go.

Definition mput : go_string := "runtime.mput"%go.

Definition mget : go_string := "runtime.mget"%go.

Definition globrunqput : go_string := "runtime.globrunqput"%go.

Definition globrunqputhead : go_string := "runtime.globrunqputhead"%go.

Definition globrunqputbatch : go_string := "runtime.globrunqputbatch"%go.

Definition globrunqget : go_string := "runtime.globrunqget"%go.

Axiom pMask : go_type.

Definition pidleput : go_string := "runtime.pidleput"%go.

Definition pidleget : go_string := "runtime.pidleget"%go.

Definition pidlegetSpinning : go_string := "runtime.pidlegetSpinning"%go.

Definition runqempty : go_string := "runtime.runqempty"%go.

Axiom randomizeScheduler : val.

Definition runqput : go_string := "runtime.runqput"%go.

Definition runqputslow : go_string := "runtime.runqputslow"%go.

Definition runqputbatch : go_string := "runtime.runqputbatch"%go.

Definition runqget : go_string := "runtime.runqget"%go.

Definition runqdrain : go_string := "runtime.runqdrain"%go.

Definition runqgrab : go_string := "runtime.runqgrab"%go.

Definition runqsteal : go_string := "runtime.runqsteal"%go.

Axiom gQueue : go_type.

Axiom gList : go_type.

Definition setMaxThreads : go_string := "runtime.setMaxThreads"%go.

Definition procPin : go_string := "runtime.procPin"%go.

Definition procUnpin : go_string := "runtime.procUnpin"%go.

Definition sync_runtime_procPin : go_string := "runtime.sync_runtime_procPin"%go.

Definition sync_runtime_procUnpin : go_string := "runtime.sync_runtime_procUnpin"%go.

Definition sync_atomic_runtime_procPin : go_string := "runtime.sync_atomic_runtime_procPin"%go.

Definition sync_atomic_runtime_procUnpin : go_string := "runtime.sync_atomic_runtime_procUnpin"%go.

Definition internal_sync_runtime_canSpin : go_string := "runtime.internal_sync_runtime_canSpin"%go.

Definition internal_sync_runtime_doSpin : go_string := "runtime.internal_sync_runtime_doSpin"%go.

Definition sync_runtime_canSpin : go_string := "runtime.sync_runtime_canSpin"%go.

Definition sync_runtime_doSpin : go_string := "runtime.sync_runtime_doSpin"%go.

Definition stealOrder : go_string := "runtime.stealOrder"%go.

Axiom randomOrder : go_type.

Axiom randomEnum : go_type.

Definition gcd : go_string := "runtime.gcd"%go.

Axiom initTask : go_type.

Definition inittrace : go_string := "runtime.inittrace"%go.

Axiom tracestat : go_type.

Definition doInit : go_string := "runtime.doInit"%go.

Definition doInit1 : go_string := "runtime.doInit1"%go.

Axiom profBuf : go_type.

Axiom profAtomic : go_type.

Axiom profIndex : go_type.

Axiom profReaderSleeping : val.

Axiom profWriteExtra : val.

Definition countSub : go_string := "runtime.countSub"%go.

Definition newProfBuf : go_string := "runtime.newProfBuf"%go.

Axiom profBufReadMode : go_type.

Axiom profBufBlocking : val.

Axiom profBufNonBlocking : val.

Definition overflowTag : go_string := "runtime.overflowTag"%go.

Definition labelSync : go_string := "runtime.labelSync"%go.

Definition runtime_setProfLabel : go_string := "runtime.runtime_setProfLabel"%go.

Definition runtime_getProfLabel : go_string := "runtime.runtime_getProfLabel"%go.

Axiom raceenabled : val.

Definition raceReadObjectPC : go_string := "runtime.raceReadObjectPC"%go.

Definition raceWriteObjectPC : go_string := "runtime.raceWriteObjectPC"%go.

Definition raceinit : go_string := "runtime.raceinit"%go.

Definition racefini : go_string := "runtime.racefini"%go.

Definition raceproccreate : go_string := "runtime.raceproccreate"%go.

Definition raceprocdestroy : go_string := "runtime.raceprocdestroy"%go.

Definition racemapshadow : go_string := "runtime.racemapshadow"%go.

Definition racewritepc : go_string := "runtime.racewritepc"%go.

Definition racereadpc : go_string := "runtime.racereadpc"%go.

Definition racereadrangepc : go_string := "runtime.racereadrangepc"%go.

Definition racewriterangepc : go_string := "runtime.racewriterangepc"%go.

Definition raceacquire : go_string := "runtime.raceacquire"%go.

Definition raceacquireg : go_string := "runtime.raceacquireg"%go.

Definition raceacquirectx : go_string := "runtime.raceacquirectx"%go.

Definition racerelease : go_string := "runtime.racerelease"%go.

Definition racereleaseg : go_string := "runtime.racereleaseg"%go.

Definition racereleaseacquire : go_string := "runtime.racereleaseacquire"%go.

Definition racereleaseacquireg : go_string := "runtime.racereleaseacquireg"%go.

Definition racereleasemerge : go_string := "runtime.racereleasemerge"%go.

Definition racereleasemergeg : go_string := "runtime.racereleasemergeg"%go.

Definition racefingo : go_string := "runtime.racefingo"%go.

Definition racemalloc : go_string := "runtime.racemalloc"%go.

Definition racefree : go_string := "runtime.racefree"%go.

Definition racegostart : go_string := "runtime.racegostart"%go.

Definition racegoend : go_string := "runtime.racegoend"%go.

Definition racectxend : go_string := "runtime.racectxend"%go.

Definition startupRand : go_string := "runtime.startupRand"%go.

Definition globalRand : go_string := "runtime.globalRand"%go.

Definition readRandomFailed : go_string := "runtime.readRandomFailed"%go.

Definition randinit : go_string := "runtime.randinit"%go.

Definition readTimeRandom : go_string := "runtime.readTimeRandom"%go.

Definition allZero : go_string := "runtime.allZero"%go.

Definition bootstrapRand : go_string := "runtime.bootstrapRand"%go.

Definition bootstrapRandReseed : go_string := "runtime.bootstrapRandReseed"%go.

Definition rand32 : go_string := "runtime.rand32"%go.

Definition rand : go_string := "runtime.rand"%go.

Definition maps_rand : go_string := "runtime.maps_rand"%go.

Definition mrandinit : go_string := "runtime.mrandinit"%go.

Definition randn : go_string := "runtime.randn"%go.

Definition cheaprand : go_string := "runtime.cheaprand"%go.

Definition cheaprand64 : go_string := "runtime.cheaprand64"%go.

Definition cheaprandn : go_string := "runtime.cheaprandn"%go.

Definition legacy_fastrand : go_string := "runtime.legacy_fastrand"%go.

Definition legacy_fastrandn : go_string := "runtime.legacy_fastrandn"%go.

Definition legacy_fastrand64 : go_string := "runtime.legacy_fastrand64"%go.

Definition setMaxStack : go_string := "runtime.setMaxStack"%go.

Definition setPanicOnFault : go_string := "runtime.setPanicOnFault"%go.

Definition retryOnEAGAIN : go_string := "runtime.retryOnEAGAIN"%go.

Definition ticks : go_string := "runtime.ticks"%go.

Axiom ticksType : go_type.

Axiom minTimeForTicksPerSecond : Z.

Definition ticksPerSecond : go_string := "runtime.ticksPerSecond"%go.

Definition envs : go_string := "runtime.envs"%go.

Definition argslice : go_string := "runtime.argslice"%go.

Definition syscall_runtime_envs : go_string := "runtime.syscall_runtime_envs"%go.

Definition syscall_Getpagesize : go_string := "runtime.syscall_Getpagesize"%go.

Definition os_runtime_args : go_string := "runtime.os_runtime_args"%go.

Definition syscall_Exit : go_string := "runtime.syscall_Exit"%go.

Definition godebugDefault : go_string := "runtime.godebugDefault"%go.

Definition godebugUpdate : go_string := "runtime.godebugUpdate"%go.

Definition godebugEnv : go_string := "runtime.godebugEnv"%go.

Definition godebugNewIncNonDefault : go_string := "runtime.godebugNewIncNonDefault"%go.

Definition godebug_setUpdate : go_string := "runtime.godebug_setUpdate"%go.

Definition godebug_setNewIncNonDefault : go_string := "runtime.godebug_setNewIncNonDefault"%go.

Axiom godebugInc : go_type.

Definition godebugNotify : go_string := "runtime.godebugNotify"%go.

Definition syscall_runtimeSetenv : go_string := "runtime.syscall_runtimeSetenv"%go.

Definition syscall_runtimeUnsetenv : go_string := "runtime.syscall_runtimeUnsetenv"%go.

Definition writeErrStr : go_string := "runtime.writeErrStr"%go.

Definition writeErrData : go_string := "runtime.writeErrData"%go.

Definition crashFD : go_string := "runtime.crashFD"%go.

Definition setCrashFD : go_string := "runtime.setCrashFD"%go.

Definition auxv : go_string := "runtime.auxv"%go.

Definition getAuxv : go_string := "runtime.getAuxv"%go.

Definition zeroVal : go_string := "runtime.zeroVal"%go.

Axiom tracebackCrash : Z.

Axiom tracebackAll : Z.

Axiom tracebackShift : Z.

Definition traceback_cache : go_string := "runtime.traceback_cache"%go.

Axiom traceback_cache'init : val.

Definition traceback_env : go_string := "runtime.traceback_env"%go.

Definition gotraceback : go_string := "runtime.gotraceback"%go.

Definition argc : go_string := "runtime.argc"%go.

Definition argv : go_string := "runtime.argv"%go.

Definition argv_index : go_string := "runtime.argv_index"%go.

Definition args : go_string := "runtime.args"%go.

Definition goargs : go_string := "runtime.goargs"%go.

Definition goenvs_unix : go_string := "runtime.goenvs_unix"%go.

Definition environ : go_string := "runtime.environ"%go.

Definition test_z64 : go_string := "runtime.test_z64"%go.

Definition test_x64 : go_string := "runtime.test_x64"%go.

Definition testAtomic64 : go_string := "runtime.testAtomic64"%go.

Definition check : go_string := "runtime.check"%go.

Axiom dbgVar : go_type.

Definition debug : go_string := "runtime.debug"%go.

Definition dbgvars : go_string := "runtime.dbgvars"%go.

Axiom dbgvars'init : val.

Definition parsedebugvars : go_string := "runtime.parsedebugvars"%go.

Definition reparsedebugvars : go_string := "runtime.reparsedebugvars"%go.

Definition parsegodebug : go_string := "runtime.parsegodebug"%go.

Definition setTraceback : go_string := "runtime.setTraceback"%go.

Definition timediv : go_string := "runtime.timediv"%go.

Definition acquirem : go_string := "runtime.acquirem"%go.

Definition releasem : go_string := "runtime.releasem"%go.

Definition reflect_typelinks : go_string := "runtime.reflect_typelinks"%go.

Definition reflect_resolveNameOff : go_string := "runtime.reflect_resolveNameOff"%go.

Definition reflect_resolveTypeOff : go_string := "runtime.reflect_resolveTypeOff"%go.

Definition reflect_resolveTextOff : go_string := "runtime.reflect_resolveTextOff"%go.

Definition reflectlite_resolveNameOff : go_string := "runtime.reflectlite_resolveNameOff"%go.

Definition reflectlite_resolveTypeOff : go_string := "runtime.reflectlite_resolveTypeOff"%go.

Definition reflect_addReflectOff : go_string := "runtime.reflect_addReflectOff"%go.

Definition fips_getIndicator : go_string := "runtime.fips_getIndicator"%go.

Definition fips_setIndicator : go_string := "runtime.fips_setIndicator"%go.

Axiom _Gidle : Z.

Axiom _Grunnable : Z.

Axiom _Grunning : Z.

Axiom _Gsyscall : Z.

Axiom _Gwaiting : Z.

Axiom _Gmoribund_unused : Z.

Axiom _Gdead : Z.

Axiom _Genqueue_unused : Z.

Axiom _Gcopystack : Z.

Axiom _Gpreempted : Z.

Axiom _Gscan : Z.

Axiom _Gscanrunnable : Z.

Axiom _Gscanrunning : Z.

Axiom _Gscansyscall : Z.

Axiom _Gscanwaiting : Z.

Axiom _Gscanpreempted : Z.

Axiom _Pidle : Z.

Axiom _Prunning : Z.

Axiom _Psyscall : Z.

Axiom _Pgcstop : Z.

Axiom _Pdead : Z.

Axiom mutex : go_type.

Axiom funcval : go_type.

Axiom iface : go_type.

Axiom eface : go_type.

Definition efaceOf : go_string := "runtime.efaceOf"%go.

Axiom guintptr : go_type.

Definition setGNoWB : go_string := "runtime.setGNoWB"%go.

Axiom puintptr : go_type.

Axiom muintptr : go_type.

Definition setMNoWB : go_string := "runtime.setMNoWB"%go.

Axiom gobuf : go_type.

Axiom sudog : go_type.

Axiom libcall : go_type.

Axiom stack : go_type.

Axiom heldLockInfo : go_type.

Axiom g : go_type.

Axiom gTrackingPeriod : Z.

Axiom tlsSlots : Z.

Axiom tlsSize : Z.

Axiom freeMStack : Z.

Axiom freeMRef : Z.

Axiom freeMWait : Z.

Axiom m : go_type.

Axiom p : go_type.

Axiom schedt : go_type.

Axiom _SigNotify : Z.

Axiom _SigKill : Z.

Axiom _SigThrow : Z.

Axiom _SigPanic : Z.

Axiom _SigDefault : Z.

Axiom _SigGoExit : Z.

Axiom _SigSetStack : Z.

Axiom _SigUnblock : Z.

Axiom _SigIgn : Z.

Axiom _func : go_type.

Axiom funcinl : go_type.

Axiom itab : go_type.

Axiom lfnode : go_type.

Axiom forcegcstate : go_type.

Axiom _defer : go_type.

Axiom _panic : go_type.

Axiom savedOpenDeferState : go_type.

Axiom ancestorInfo : go_type.

Axiom waitReason : go_type.

Axiom waitReasonZero : val.

Axiom waitReasonGCAssistMarking : val.

Axiom waitReasonIOWait : val.

Axiom waitReasonChanReceiveNilChan : val.

Axiom waitReasonChanSendNilChan : val.

Axiom waitReasonDumpingHeap : val.

Axiom waitReasonGarbageCollection : val.

Axiom waitReasonGarbageCollectionScan : val.

Axiom waitReasonPanicWait : val.

Axiom waitReasonSelect : val.

Axiom waitReasonSelectNoCases : val.

Axiom waitReasonGCAssistWait : val.

Axiom waitReasonGCSweepWait : val.

Axiom waitReasonGCScavengeWait : val.

Axiom waitReasonChanReceive : val.

Axiom waitReasonChanSend : val.

Axiom waitReasonFinalizerWait : val.

Axiom waitReasonForceGCIdle : val.

Axiom waitReasonSemacquire : val.

Axiom waitReasonSleep : val.

Axiom waitReasonSyncCondWait : val.

Axiom waitReasonSyncMutexLock : val.

Axiom waitReasonSyncRWMutexRLock : val.

Axiom waitReasonSyncRWMutexLock : val.

Axiom waitReasonSyncWaitGroupWait : val.

Axiom waitReasonTraceReaderBlocked : val.

Axiom waitReasonWaitForGCCycle : val.

Axiom waitReasonGCWorkerIdle : val.

Axiom waitReasonGCWorkerActive : val.

Axiom waitReasonPreempted : val.

Axiom waitReasonDebugCall : val.

Axiom waitReasonGCMarkTermination : val.

Axiom waitReasonStoppingTheWorld : val.

Axiom waitReasonFlushProcCaches : val.

Axiom waitReasonTraceGoroutineStatus : val.

Axiom waitReasonTraceProcStatus : val.

Axiom waitReasonPageTraceFlush : val.

Axiom waitReasonCoroutine : val.

Axiom waitReasonGCWeakToStrongWait : val.

Axiom waitReasonSynctestRun : val.

Axiom waitReasonSynctestWait : val.

Axiom waitReasonSynctestChanReceive : val.

Axiom waitReasonSynctestChanSend : val.

Axiom waitReasonSynctestSelect : val.

Definition waitReasonStrings : go_string := "runtime.waitReasonStrings"%go.

Axiom waitReasonStrings'init : val.

Definition isWaitingForSuspendG : go_string := "runtime.isWaitingForSuspendG"%go.

Axiom isWaitingForSuspendG'init : val.

Definition isIdleInSynctest : go_string := "runtime.isIdleInSynctest"%go.

Axiom isIdleInSynctest'init : val.

Definition allm : go_string := "runtime.allm"%go.

Definition gomaxprocs : go_string := "runtime.gomaxprocs"%go.

Definition ncpu : go_string := "runtime.ncpu"%go.

Definition forcegc : go_string := "runtime.forcegc"%go.

Definition sched : go_string := "runtime.sched"%go.

Definition newprocs : go_string := "runtime.newprocs"%go.

Definition allpLock : go_string := "runtime.allpLock"%go.

Definition allp : go_string := "runtime.allp"%go.

Definition idlepMask : go_string := "runtime.idlepMask"%go.

Definition timerpMask : go_string := "runtime.timerpMask"%go.

Definition gcBgMarkWorkerPool : go_string := "runtime.gcBgMarkWorkerPool"%go.

Definition gcBgMarkWorkerCount : go_string := "runtime.gcBgMarkWorkerCount"%go.

Definition processorVersionInfo : go_string := "runtime.processorVersionInfo"%go.

Definition isIntel : go_string := "runtime.isIntel"%go.

Definition goarm : go_string := "runtime.goarm"%go.

Definition goarmsoftfp : go_string := "runtime.goarmsoftfp"%go.

Definition islibrary : go_string := "runtime.islibrary"%go.

Definition isarchive : go_string := "runtime.isarchive"%go.

Axiom framepointer_enabled : val.

Definition getcallerfp : go_string := "runtime.getcallerfp"%go.

Definition boring_runtime_arg0 : go_string := "runtime.boring_runtime_arg0"%go.

Definition fipstls_runtime_arg0 : go_string := "runtime.fipstls_runtime_arg0"%go.

Axiom rwmutex : go_type.

Axiom rwmutexMaxReaders : Z.

Definition initSecureMode : go_string := "runtime.initSecureMode"%go.

Definition isSecureMode : go_string := "runtime.isSecureMode"%go.

Definition secure : go_string := "runtime.secure"%go.

Definition secureEnv : go_string := "runtime.secureEnv"%go.

Axiom debugSelect : val.

Axiom scase : go_type.

Definition chansendpc : go_string := "runtime.chansendpc"%go.

Axiom chansendpc'init : val.

Definition chanrecvpc : go_string := "runtime.chanrecvpc"%go.

Axiom chanrecvpc'init : val.

Definition selectsetpc : go_string := "runtime.selectsetpc"%go.

Definition sellock : go_string := "runtime.sellock"%go.

Definition selunlock : go_string := "runtime.selunlock"%go.

Definition selparkcommit : go_string := "runtime.selparkcommit"%go.

Definition block : go_string := "runtime.block"%go.

Definition selectgo : go_string := "runtime.selectgo"%go.

Axiom runtimeSelect : go_type.

Axiom selectDir : go_type.

Axiom selectSend : val.

Axiom selectRecv : val.

Axiom selectDefault : val.

Definition reflect_rselect : go_string := "runtime.reflect_rselect"%go.

Axiom semaRoot : go_type.

Definition semtable : go_string := "runtime.semtable"%go.

Axiom semTabSize : Z.

Axiom semTable : go_type.

Definition sync_runtime_Semacquire : go_string := "runtime.sync_runtime_Semacquire"%go.

Definition poll_runtime_Semacquire : go_string := "runtime.poll_runtime_Semacquire"%go.

Definition sync_runtime_Semrelease : go_string := "runtime.sync_runtime_Semrelease"%go.

Definition internal_sync_runtime_SemacquireMutex : go_string := "runtime.internal_sync_runtime_SemacquireMutex"%go.

Definition sync_runtime_SemacquireRWMutexR : go_string := "runtime.sync_runtime_SemacquireRWMutexR"%go.

Definition sync_runtime_SemacquireRWMutex : go_string := "runtime.sync_runtime_SemacquireRWMutex"%go.

Definition sync_runtime_SemacquireWaitGroup : go_string := "runtime.sync_runtime_SemacquireWaitGroup"%go.

Definition poll_runtime_Semrelease : go_string := "runtime.poll_runtime_Semrelease"%go.

Definition internal_sync_runtime_Semrelease : go_string := "runtime.internal_sync_runtime_Semrelease"%go.

Definition readyWithTime : go_string := "runtime.readyWithTime"%go.

Axiom semaProfileFlags : go_type.

Axiom semaBlockProfile : val.

Axiom semaMutexProfile : val.

Definition semacquire : go_string := "runtime.semacquire"%go.

Definition semacquire1 : go_string := "runtime.semacquire1"%go.

Definition semrelease : go_string := "runtime.semrelease"%go.

Definition semrelease1 : go_string := "runtime.semrelease1"%go.

Definition cansemacquire : go_string := "runtime.cansemacquire"%go.

Axiom notifyList : go_type.

Definition less : go_string := "runtime.less"%go.

Definition notifyListAdd : go_string := "runtime.notifyListAdd"%go.

Definition notifyListWait : go_string := "runtime.notifyListWait"%go.

Definition notifyListNotifyAll : go_string := "runtime.notifyListNotifyAll"%go.

Definition notifyListNotifyOne : go_string := "runtime.notifyListNotifyOne"%go.

Definition notifyListCheck : go_string := "runtime.notifyListCheck"%go.

Definition internal_sync_nanotime : go_string := "runtime.internal_sync_nanotime"%go.

Definition dumpregs : go_string := "runtime.dumpregs"%go.

Axiom sigctxt : go_type.

Axiom sigTabT : go_type.

Definition os_sigpipe : go_string := "runtime.os_sigpipe"%go.

Definition signame : go_string := "runtime.signame"%go.

Axiom _SIG_DFL : val.

Axiom _SIG_IGN : val.

Axiom sigPreempt : Z.

Definition fwdSig : go_string := "runtime.fwdSig"%go.

Definition handlingSig : go_string := "runtime.handlingSig"%go.

Definition disableSigChan : go_string := "runtime.disableSigChan"%go.

Definition enableSigChan : go_string := "runtime.enableSigChan"%go.

Definition maskUpdatedChan : go_string := "runtime.maskUpdatedChan"%go.

Definition signalsOK : go_string := "runtime.signalsOK"%go.

Definition initsig : go_string := "runtime.initsig"%go.

Definition sigInstallGoHandler : go_string := "runtime.sigInstallGoHandler"%go.

Definition sigenable : go_string := "runtime.sigenable"%go.

Definition sigdisable : go_string := "runtime.sigdisable"%go.

Definition sigignore : go_string := "runtime.sigignore"%go.

Definition clearSignalHandlers : go_string := "runtime.clearSignalHandlers"%go.

Definition setProcessCPUProfilerTimer : go_string := "runtime.setProcessCPUProfilerTimer"%go.

Definition setThreadCPUProfilerHz : go_string := "runtime.setThreadCPUProfilerHz"%go.

Definition sigpipe : go_string := "runtime.sigpipe"%go.

Definition doSigPreempt : go_string := "runtime.doSigPreempt"%go.

Axiom preemptMSupported : val.

Definition preemptM : go_string := "runtime.preemptM"%go.

Definition sigFetchG : go_string := "runtime.sigFetchG"%go.

Definition sigtrampgo : go_string := "runtime.sigtrampgo"%go.

Definition sigprofCallers : go_string := "runtime.sigprofCallers"%go.

Definition sigprofCallersUse : go_string := "runtime.sigprofCallersUse"%go.

Definition sigprofNonGo : go_string := "runtime.sigprofNonGo"%go.

Definition sigprofNonGoPC : go_string := "runtime.sigprofNonGoPC"%go.

Definition adjustSignalStack : go_string := "runtime.adjustSignalStack"%go.

Definition adjustSignalStack2Indirect : go_string := "runtime.adjustSignalStack2Indirect"%go.

Axiom adjustSignalStack2Indirect'init : val.

Definition adjustSignalStack2 : go_string := "runtime.adjustSignalStack2"%go.

Definition crashing : go_string := "runtime.crashing"%go.

Definition testSigtrap : go_string := "runtime.testSigtrap"%go.

Definition testSigusr1 : go_string := "runtime.testSigusr1"%go.

Definition sigsysIgnored : go_string := "runtime.sigsysIgnored"%go.

Definition ignoreSIGSYS : go_string := "runtime.ignoreSIGSYS"%go.

Definition restoreSIGSYS : go_string := "runtime.restoreSIGSYS"%go.

Definition sighandler : go_string := "runtime.sighandler"%go.

Definition fatalsignal : go_string := "runtime.fatalsignal"%go.

Definition sigpanic : go_string := "runtime.sigpanic"%go.

Definition dieFromSignal : go_string := "runtime.dieFromSignal"%go.

Definition raisebadsignal : go_string := "runtime.raisebadsignal"%go.

Definition crash : go_string := "runtime.crash"%go.

Definition ensureSigM : go_string := "runtime.ensureSigM"%go.

Definition noSignalStack : go_string := "runtime.noSignalStack"%go.

Definition sigNotOnStack : go_string := "runtime.sigNotOnStack"%go.

Definition signalDuringFork : go_string := "runtime.signalDuringFork"%go.

Definition badsignal : go_string := "runtime.badsignal"%go.

Definition sigfwd : go_string := "runtime.sigfwd"%go.

Definition sigfwdgo : go_string := "runtime.sigfwdgo"%go.

Definition sigsave : go_string := "runtime.sigsave"%go.

Definition msigrestore : go_string := "runtime.msigrestore"%go.

Definition sigsetAllExiting : go_string := "runtime.sigsetAllExiting"%go.

Axiom sigsetAllExiting'init : val.

Definition sigblock : go_string := "runtime.sigblock"%go.

Definition unblocksig : go_string := "runtime.unblocksig"%go.

Definition minitSignals : go_string := "runtime.minitSignals"%go.

Definition minitSignalStack : go_string := "runtime.minitSignalStack"%go.

Definition minitSignalMask : go_string := "runtime.minitSignalMask"%go.

Definition unminitSignals : go_string := "runtime.unminitSignals"%go.

Definition blockableSig : go_string := "runtime.blockableSig"%go.

Axiom gsignalStack : go_type.

Definition setGsignalStack : go_string := "runtime.setGsignalStack"%go.

Definition restoreGsignalStack : go_string := "runtime.restoreGsignalStack"%go.

Definition signalstack : go_string := "runtime.signalstack"%go.

Definition setsigsegv : go_string := "runtime.setsigsegv"%go.

Definition sig : go_string := "runtime.sig"%go.

Axiom sigIdle : Z.

Axiom sigReceiving : Z.

Axiom sigSending : Z.

Definition sigsend : go_string := "runtime.sigsend"%go.

Definition signal_recv : go_string := "runtime.signal_recv"%go.

Definition signalWaitUntilIdle : go_string := "runtime.signalWaitUntilIdle"%go.

Definition signal_enable : go_string := "runtime.signal_enable"%go.

Definition signal_disable : go_string := "runtime.signal_disable"%go.

Definition signal_ignore : go_string := "runtime.signal_ignore"%go.

Definition sigInitIgnored : go_string := "runtime.sigInitIgnored"%go.

Definition signal_ignored : go_string := "runtime.signal_ignored"%go.

Definition sigNoteSetup : go_string := "runtime.sigNoteSetup"%go.

Definition sigNoteSleep : go_string := "runtime.sigNoteSleep"%go.

Definition sigNoteWakeup : go_string := "runtime.sigNoteWakeup"%go.

Definition sigtable : go_string := "runtime.sigtable"%go.

Axiom sigtable'init : val.

Axiom minHeapAlign : Z.

Axiom _MaxSmallSize : Z.

Axiom smallSizeDiv : Z.

Axiom smallSizeMax : Z.

Axiom largeSizeDiv : Z.

Axiom _NumSizeClasses : Z.

Axiom _PageShift : Z.

Axiom maxObjsPerSpan : Z.

Definition class_to_size : go_string := "runtime.class_to_size"%go.

Axiom class_to_size'init : val.

Definition class_to_allocnpages : go_string := "runtime.class_to_allocnpages"%go.

Axiom class_to_allocnpages'init : val.

Definition class_to_divmagic : go_string := "runtime.class_to_divmagic"%go.

Axiom class_to_divmagic'init : val.

Definition size_to_class8 : go_string := "runtime.size_to_class8"%go.

Axiom size_to_class8'init : val.

Definition size_to_class128 : go_string := "runtime.size_to_class128"%go.

Axiom size_to_class128'init : val.

Axiom slice : go_type.

Axiom notInHeapSlice : go_type.

Definition panicmakeslicelen : go_string := "runtime.panicmakeslicelen"%go.

Definition panicmakeslicecap : go_string := "runtime.panicmakeslicecap"%go.

Definition makeslicecopy : go_string := "runtime.makeslicecopy"%go.

Definition makeslice : go_string := "runtime.makeslice"%go.

Definition makeslice64 : go_string := "runtime.makeslice64"%go.

Definition growslice : go_string := "runtime.growslice"%go.

Definition nextslicecap : go_string := "runtime.nextslicecap"%go.

Definition reflect_growslice : go_string := "runtime.reflect_growslice"%go.

Definition isPowerOfTwo : go_string := "runtime.isPowerOfTwo"%go.

Definition slicecopy : go_string := "runtime.slicecopy"%go.

Definition bytealg_MakeNoZero : go_string := "runtime.bytealg_MakeNoZero"%go.

Axiom mantbits64 : val.

Axiom expbits64 : val.

Axiom bias64 : Z.

Axiom nan64 : val.

Axiom inf64 : val.

Axiom neg64 : val.

Axiom mantbits32 : val.

Axiom expbits32 : val.

Axiom bias32 : Z.

Axiom nan32 : val.

Axiom inf32 : val.

Axiom neg32 : val.

Definition funpack64 : go_string := "runtime.funpack64"%go.

Definition funpack32 : go_string := "runtime.funpack32"%go.

Definition fpack64 : go_string := "runtime.fpack64"%go.

Definition fpack32 : go_string := "runtime.fpack32"%go.

Definition fadd64 : go_string := "runtime.fadd64"%go.

Definition fsub64 : go_string := "runtime.fsub64"%go.

Definition fneg64 : go_string := "runtime.fneg64"%go.

Definition fmul64 : go_string := "runtime.fmul64"%go.

Definition fdiv64 : go_string := "runtime.fdiv64"%go.

Definition f64to32 : go_string := "runtime.f64to32"%go.

Definition f32to64 : go_string := "runtime.f32to64"%go.

Definition fcmp64 : go_string := "runtime.fcmp64"%go.

Definition f64toint : go_string := "runtime.f64toint"%go.

Definition fintto64 : go_string := "runtime.fintto64"%go.

Definition fintto32 : go_string := "runtime.fintto32"%go.

Definition mullu : go_string := "runtime.mullu"%go.

Definition divlu : go_string := "runtime.divlu"%go.

Definition fadd32 : go_string := "runtime.fadd32"%go.

Definition fmul32 : go_string := "runtime.fmul32"%go.

Definition fdiv32 : go_string := "runtime.fdiv32"%go.

Definition feq32 : go_string := "runtime.feq32"%go.

Definition fgt32 : go_string := "runtime.fgt32"%go.

Definition fge32 : go_string := "runtime.fge32"%go.

Definition feq64 : go_string := "runtime.feq64"%go.

Definition fgt64 : go_string := "runtime.fgt64"%go.

Definition fge64 : go_string := "runtime.fge64"%go.

Definition fint32to32 : go_string := "runtime.fint32to32"%go.

Definition fint32to64 : go_string := "runtime.fint32to64"%go.

Definition fint64to32 : go_string := "runtime.fint64to32"%go.

Definition fint64to64 : go_string := "runtime.fint64to64"%go.

Definition f32toint32 : go_string := "runtime.f32toint32"%go.

Definition f32toint64 : go_string := "runtime.f32toint64"%go.

Definition f64toint32 : go_string := "runtime.f64toint32"%go.

Definition f64toint64 : go_string := "runtime.f64toint64"%go.

Definition f64touint64 : go_string := "runtime.f64touint64"%go.

Definition f32touint64 : go_string := "runtime.f32touint64"%go.

Definition fuint64to64 : go_string := "runtime.fuint64to64"%go.

Definition fuint64to32 : go_string := "runtime.fuint64to32"%go.

Axiom stackSystem : Z.

Axiom stackMin : Z.

Axiom fixedStack0 : Z.

Axiom fixedStack1 : Z.

Axiom fixedStack2 : Z.

Axiom fixedStack3 : Z.

Axiom fixedStack4 : Z.

Axiom fixedStack5 : Z.

Axiom fixedStack6 : Z.

Axiom fixedStack : Z.

Axiom stackNosplit : Z.

Axiom stackGuard : Z.

Axiom stackDebug : Z.

Axiom stackFromSystem : Z.

Axiom stackFaultOnFree : Z.

Axiom stackNoCache : Z.

Axiom debugCheckBP : val.

Definition stackPoisonCopy : go_string := "runtime.stackPoisonCopy"%go.

Axiom stackPoisonCopy'init : val.

Axiom uintptrMask : Z.

Axiom stackPreempt : Z.

Axiom stackFork : Z.

Axiom stackForceMove : Z.

Axiom stackPoisonMin : Z.

Definition stackpool : go_string := "runtime.stackpool"%go.

Axiom stackpoolItem : go_type.

Definition stackLarge : go_string := "runtime.stackLarge"%go.

Definition stackinit : go_string := "runtime.stackinit"%go.

Definition stacklog2 : go_string := "runtime.stacklog2"%go.

Definition stackpoolalloc : go_string := "runtime.stackpoolalloc"%go.

Definition stackpoolfree : go_string := "runtime.stackpoolfree"%go.

Definition stackcacherefill : go_string := "runtime.stackcacherefill"%go.

Definition stackcacherelease : go_string := "runtime.stackcacherelease"%go.

Definition stackcache_clear : go_string := "runtime.stackcache_clear"%go.

Definition stackalloc : go_string := "runtime.stackalloc"%go.

Definition stackfree : go_string := "runtime.stackfree"%go.

Definition maxstacksize : go_string := "runtime.maxstacksize"%go.

Axiom maxstacksize'init : val.

Definition maxstackceiling : go_string := "runtime.maxstackceiling"%go.

Axiom maxstackceiling'init : val.

Definition ptrnames : go_string := "runtime.ptrnames"%go.

Axiom ptrnames'init : val.

Axiom adjustinfo : go_type.

Definition adjustpointer : go_string := "runtime.adjustpointer"%go.

Axiom bitvector : go_type.

Definition adjustpointers : go_string := "runtime.adjustpointers"%go.

Definition adjustframe : go_string := "runtime.adjustframe"%go.

Definition adjustctxt : go_string := "runtime.adjustctxt"%go.

Definition adjustdefers : go_string := "runtime.adjustdefers"%go.

Definition adjustpanics : go_string := "runtime.adjustpanics"%go.

Definition adjustsudogs : go_string := "runtime.adjustsudogs"%go.

Definition fillstack : go_string := "runtime.fillstack"%go.

Definition findsghi : go_string := "runtime.findsghi"%go.

Definition syncadjustsudogs : go_string := "runtime.syncadjustsudogs"%go.

Definition copystack : go_string := "runtime.copystack"%go.

Definition round2 : go_string := "runtime.round2"%go.

Definition newstack : go_string := "runtime.newstack"%go.

Definition nilfunc : go_string := "runtime.nilfunc"%go.

Definition gostartcallfn : go_string := "runtime.gostartcallfn"%go.

Definition isShrinkStackSafe : go_string := "runtime.isShrinkStackSafe"%go.

Definition shrinkstack : go_string := "runtime.shrinkstack"%go.

Definition freeStackSpans : go_string := "runtime.freeStackSpans"%go.

Axiom stackObjectRecord : go_type.

Definition morestackc : go_string := "runtime.morestackc"%go.

Definition startingStackSize : go_string := "runtime.startingStackSize"%go.

Axiom startingStackSize'init : val.

Definition gcComputeStartingStackSize : go_string := "runtime.gcComputeStartingStackSize"%go.

Axiom stkframe : go_type.

Axiom reflectMethodValue : go_type.

Definition methodValueCallFrameObjs : go_string := "runtime.methodValueCallFrameObjs"%go.

Definition stkobjinit : go_string := "runtime.stkobjinit"%go.

Axiom tmpStringBufSize : Z.

Axiom tmpBuf : go_type.

Definition concatstrings : go_string := "runtime.concatstrings"%go.

Definition concatstring2 : go_string := "runtime.concatstring2"%go.

Definition concatstring3 : go_string := "runtime.concatstring3"%go.

Definition concatstring4 : go_string := "runtime.concatstring4"%go.

Definition concatstring5 : go_string := "runtime.concatstring5"%go.

Definition concatbytes : go_string := "runtime.concatbytes"%go.

Definition concatbyte2 : go_string := "runtime.concatbyte2"%go.

Definition concatbyte3 : go_string := "runtime.concatbyte3"%go.

Definition concatbyte4 : go_string := "runtime.concatbyte4"%go.

Definition concatbyte5 : go_string := "runtime.concatbyte5"%go.

Definition slicebytetostring : go_string := "runtime.slicebytetostring"%go.

Definition stringDataOnStack : go_string := "runtime.stringDataOnStack"%go.

Definition rawstringtmp : go_string := "runtime.rawstringtmp"%go.

Definition slicebytetostringtmp : go_string := "runtime.slicebytetostringtmp"%go.

Definition stringtoslicebyte : go_string := "runtime.stringtoslicebyte"%go.

Definition stringtoslicerune : go_string := "runtime.stringtoslicerune"%go.

Definition slicerunetostring : go_string := "runtime.slicerunetostring"%go.

Axiom stringStruct : go_type.

Axiom stringStructDWARF : go_type.

Definition stringStructOf : go_string := "runtime.stringStructOf"%go.

Definition intstring : go_string := "runtime.intstring"%go.

Definition rawstring : go_string := "runtime.rawstring"%go.

Definition rawbyteslice : go_string := "runtime.rawbyteslice"%go.

Definition rawruneslice : go_string := "runtime.rawruneslice"%go.

Definition gobytes : go_string := "runtime.gobytes"%go.

Definition gostring : go_string := "runtime.gostring"%go.

Definition internal_syscall_gostring : go_string := "runtime.internal_syscall_gostring"%go.

Definition gostringn : go_string := "runtime.gostringn"%go.

Axiom maxUint64 : val.

Axiom maxInt64 : val.

Definition atoi64 : go_string := "runtime.atoi64"%go.

Definition atoi : go_string := "runtime.atoi"%go.

Definition atoi32 : go_string := "runtime.atoi32"%go.

Definition parseByteCount : go_string := "runtime.parseByteCount"%go.

Definition findnull : go_string := "runtime.findnull"%go.

Definition findnullw : go_string := "runtime.findnullw"%go.

Definition gostringnocopy : go_string := "runtime.gostringnocopy"%go.

Definition gostringw : go_string := "runtime.gostringw"%go.

Definition add : go_string := "runtime.add"%go.

Definition getg : go_string := "runtime.getg"%go.

Definition mcall : go_string := "runtime.mcall"%go.

Definition systemstack : go_string := "runtime.systemstack"%go.

Definition badsystemstack : go_string := "runtime.badsystemstack"%go.

Definition memclrNoHeapPointers : go_string := "runtime.memclrNoHeapPointers"%go.

Definition reflect_memclrNoHeapPointers : go_string := "runtime.reflect_memclrNoHeapPointers"%go.

Definition memmove : go_string := "runtime.memmove"%go.

Definition reflect_memmove : go_string := "runtime.reflect_memmove"%go.

Axiom hashLoad : val.

Definition memequal : go_string := "runtime.memequal"%go.

Definition noescape : go_string := "runtime.noescape"%go.

Definition noEscapePtr : go_string := "runtime.noEscapePtr"%go.

Definition cgocallback : go_string := "runtime.cgocallback"%go.

Definition gogo : go_string := "runtime.gogo"%go.

Definition asminit : go_string := "runtime.asminit"%go.

Definition setg : go_string := "runtime.setg"%go.

Definition breakpoint : go_string := "runtime.breakpoint"%go.

Definition reflectcall : go_string := "runtime.reflectcall"%go.

Definition procyield : go_string := "runtime.procyield"%go.

Axiom neverCallThisFunction : go_type.

Definition goexit : go_string := "runtime.goexit"%go.

Definition publicationBarrier : go_string := "runtime.publicationBarrier"%go.

Definition asmcgocall : go_string := "runtime.asmcgocall"%go.

Definition morestack : go_string := "runtime.morestack"%go.

Definition morestack_noctxt : go_string := "runtime.morestack_noctxt"%go.

Definition rt0_go : go_string := "runtime.rt0_go"%go.

Definition return0 : go_string := "runtime.return0"%go.

Definition call16 : go_string := "runtime.call16"%go.

Definition call32 : go_string := "runtime.call32"%go.

Definition call64 : go_string := "runtime.call64"%go.

Definition call128 : go_string := "runtime.call128"%go.

Definition call256 : go_string := "runtime.call256"%go.

Definition call512 : go_string := "runtime.call512"%go.

Definition call1024 : go_string := "runtime.call1024"%go.

Definition call2048 : go_string := "runtime.call2048"%go.

Definition call4096 : go_string := "runtime.call4096"%go.

Definition call8192 : go_string := "runtime.call8192"%go.

Definition call16384 : go_string := "runtime.call16384"%go.

Definition call32768 : go_string := "runtime.call32768"%go.

Definition call65536 : go_string := "runtime.call65536"%go.

Definition call131072 : go_string := "runtime.call131072"%go.

Definition call262144 : go_string := "runtime.call262144"%go.

Definition call524288 : go_string := "runtime.call524288"%go.

Definition call1048576 : go_string := "runtime.call1048576"%go.

Definition call2097152 : go_string := "runtime.call2097152"%go.

Definition call4194304 : go_string := "runtime.call4194304"%go.

Definition call8388608 : go_string := "runtime.call8388608"%go.

Definition call16777216 : go_string := "runtime.call16777216"%go.

Definition call33554432 : go_string := "runtime.call33554432"%go.

Definition call67108864 : go_string := "runtime.call67108864"%go.

Definition call134217728 : go_string := "runtime.call134217728"%go.

Definition call268435456 : go_string := "runtime.call268435456"%go.

Definition call536870912 : go_string := "runtime.call536870912"%go.

Definition call1073741824 : go_string := "runtime.call1073741824"%go.

Definition systemstack_switch : go_string := "runtime.systemstack_switch"%go.

Definition alignUp : go_string := "runtime.alignUp"%go.

Definition alignDown : go_string := "runtime.alignDown"%go.

Definition divRoundUp : go_string := "runtime.divRoundUp"%go.

Definition checkASM : go_string := "runtime.checkASM"%go.

Definition memequal_varlen : go_string := "runtime.memequal_varlen"%go.

Definition bool2int : go_string := "runtime.bool2int"%go.

Definition abort : go_string := "runtime.abort"%go.

Definition gcWriteBarrier1 : go_string := "runtime.gcWriteBarrier1"%go.

Definition gcWriteBarrier2 : go_string := "runtime.gcWriteBarrier2"%go.

Definition gcWriteBarrier3 : go_string := "runtime.gcWriteBarrier3"%go.

Definition gcWriteBarrier4 : go_string := "runtime.gcWriteBarrier4"%go.

Definition gcWriteBarrier5 : go_string := "runtime.gcWriteBarrier5"%go.

Definition gcWriteBarrier6 : go_string := "runtime.gcWriteBarrier6"%go.

Definition gcWriteBarrier7 : go_string := "runtime.gcWriteBarrier7"%go.

Definition gcWriteBarrier8 : go_string := "runtime.gcWriteBarrier8"%go.

Definition duffzero : go_string := "runtime.duffzero"%go.

Definition duffcopy : go_string := "runtime.duffcopy"%go.

Definition addmoduledata : go_string := "runtime.addmoduledata"%go.

Definition sigpanic0 : go_string := "runtime.sigpanic0"%go.

Definition intArgRegs : go_string := "runtime.intArgRegs"%go.

Axiom intArgRegs'init : val.

Definition read : go_string := "runtime.read"%go.

Definition closefd : go_string := "runtime.closefd"%go.

Definition exit : go_string := "runtime.exit"%go.

Definition usleep : go_string := "runtime.usleep"%go.

Definition usleep_no_g : go_string := "runtime.usleep_no_g"%go.

Definition write1 : go_string := "runtime.write1"%go.

Definition open : go_string := "runtime.open"%go.

Definition madvise : go_string := "runtime.madvise"%go.

Definition exitThread : go_string := "runtime.exitThread"%go.

Definition nanotime1 : go_string := "runtime.nanotime1"%go.

Definition gcWriteBarrierCX : go_string := "runtime.gcWriteBarrierCX"%go.

Definition gcWriteBarrierDX : go_string := "runtime.gcWriteBarrierDX"%go.

Definition gcWriteBarrierBX : go_string := "runtime.gcWriteBarrierBX"%go.

Definition gcWriteBarrierBP : go_string := "runtime.gcWriteBarrierBP"%go.

Definition gcWriteBarrierSI : go_string := "runtime.gcWriteBarrierSI"%go.

Definition gcWriteBarrierR8 : go_string := "runtime.gcWriteBarrierR8"%go.

Definition gcWriteBarrierR9 : go_string := "runtime.gcWriteBarrierR9"%go.

Definition stackcheck : go_string := "runtime.stackcheck"%go.

Definition settls : go_string := "runtime.settls"%go.

Definition retpolineAX : go_string := "runtime.retpolineAX"%go.

Definition retpolineCX : go_string := "runtime.retpolineCX"%go.

Definition retpolineDX : go_string := "runtime.retpolineDX"%go.

Definition retpolineBX : go_string := "runtime.retpolineBX"%go.

Definition retpolineBP : go_string := "runtime.retpolineBP"%go.

Definition retpolineSI : go_string := "runtime.retpolineSI"%go.

Definition retpolineDI : go_string := "runtime.retpolineDI"%go.

Definition retpolineR8 : go_string := "runtime.retpolineR8"%go.

Definition retpolineR9 : go_string := "runtime.retpolineR9"%go.

Definition retpolineR10 : go_string := "runtime.retpolineR10"%go.

Definition retpolineR11 : go_string := "runtime.retpolineR11"%go.

Definition retpolineR12 : go_string := "runtime.retpolineR12"%go.

Definition retpolineR13 : go_string := "runtime.retpolineR13"%go.

Definition retpolineR14 : go_string := "runtime.retpolineR14"%go.

Definition retpolineR15 : go_string := "runtime.retpolineR15"%go.

Definition asmcgocall_no_g : go_string := "runtime.asmcgocall_no_g"%go.

Definition asmcgocall_landingpad : go_string := "runtime.asmcgocall_landingpad"%go.

Definition spillArgs : go_string := "runtime.spillArgs"%go.

Definition unspillArgs : go_string := "runtime.unspillArgs"%go.

Definition getfp : go_string := "runtime.getfp"%go.

Definition sbrk0 : go_string := "runtime.sbrk0"%go.

Definition access : go_string := "runtime.access"%go.

Definition connect : go_string := "runtime.connect"%go.

Definition socket : go_string := "runtime.socket"%go.

Definition pause : go_string := "runtime.pause"%go.

Axiom Frames : go_type.

Axiom Frame : go_type.

Definition CallersFrames : go_string := "runtime.CallersFrames"%go.

Definition runtime_FrameStartLine : go_string := "runtime.runtime_FrameStartLine"%go.

Definition runtime_FrameSymbolName : go_string := "runtime.runtime_FrameSymbolName"%go.

Definition runtime_expandFinalInlineFrame : go_string := "runtime.runtime_expandFinalInlineFrame"%go.

Definition expandCgoFrames : go_string := "runtime.expandCgoFrames"%go.

Axiom Func : go_type.

Axiom pcHeader : go_type.

Axiom moduledata : go_type.

Axiom modulehash : go_type.

Definition pinnedTypemaps : go_string := "runtime.pinnedTypemaps"%go.

Definition aixStaticDataBase : go_string := "runtime.aixStaticDataBase"%go.

Definition firstmoduledata : go_string := "runtime.firstmoduledata"%go.

Definition lastmoduledatap : go_string := "runtime.lastmoduledatap"%go.

Definition modulesSlice : go_string := "runtime.modulesSlice"%go.

Definition activeModules : go_string := "runtime.activeModules"%go.

Definition modulesinit : go_string := "runtime.modulesinit"%go.

Axiom functab : go_type.

Axiom textsect : go_type.

Axiom findfuncbucket : go_type.

Definition moduledataverify : go_string := "runtime.moduledataverify"%go.

Axiom debugPcln : val.

Definition moduledataverify1 : go_string := "runtime.moduledataverify1"%go.

Definition FuncForPC : go_string := "runtime.FuncForPC"%go.

Definition findmoduledatap : go_string := "runtime.findmoduledatap"%go.

Axiom funcInfo : go_type.

Definition badFuncInfoEntry : go_string := "runtime.badFuncInfoEntry"%go.

Definition findfunc : go_string := "runtime.findfunc"%go.

Axiom srcFunc : go_type.

Definition badSrcFuncName : go_string := "runtime.badSrcFuncName"%go.

Axiom pcvalueCache : go_type.

Axiom pcvalueCacheEnt : go_type.

Definition pcvalueCacheKey : go_string := "runtime.pcvalueCacheKey"%go.

Definition pcvalue : go_string := "runtime.pcvalue"%go.

Definition funcname : go_string := "runtime.funcname"%go.

Definition funcpkgpath : go_string := "runtime.funcpkgpath"%go.

Definition funcfile : go_string := "runtime.funcfile"%go.

Definition funcline1 : go_string := "runtime.funcline1"%go.

Definition funcline : go_string := "runtime.funcline"%go.

Definition funcspdelta : go_string := "runtime.funcspdelta"%go.

Definition funcMaxSPDelta : go_string := "runtime.funcMaxSPDelta"%go.

Definition pcdatastart : go_string := "runtime.pcdatastart"%go.

Definition pcdatavalue : go_string := "runtime.pcdatavalue"%go.

Definition pcdatavalue1 : go_string := "runtime.pcdatavalue1"%go.

Definition pcdatavalue2 : go_string := "runtime.pcdatavalue2"%go.

Definition funcdata : go_string := "runtime.funcdata"%go.

Definition step : go_string := "runtime.step"%go.

Definition readvarint : go_string := "runtime.readvarint"%go.

Axiom stackmap : go_type.

Definition stackmapdata : go_string := "runtime.stackmapdata"%go.

Axiom inlinedCall : go_type.

Axiom inlineUnwinder : go_type.

Axiom inlineFrame : go_type.

Definition newInlineUnwinder : go_string := "runtime.newInlineUnwinder"%go.

Definition badSrcFunc : go_string := "runtime.badSrcFunc"%go.

Axiom synctestGroup : go_type.

Definition synctestRun : go_string := "runtime.synctestRun"%go.

Definition synctestidle_c : go_string := "runtime.synctestidle_c"%go.

Definition synctestWait : go_string := "runtime.synctestWait"%go.

Definition synctestwait_c : go_string := "runtime.synctestwait_c"%go.

Definition synctest_acquire : go_string := "runtime.synctest_acquire"%go.

Definition synctest_release : go_string := "runtime.synctest_release"%go.

Definition synctest_inBubble : go_string := "runtime.synctest_inBubble"%go.

Definition prepGoExitFrame : go_string := "runtime.prepGoExitFrame"%go.

Definition gostartcall : go_string := "runtime.gostartcall"%go.

Axiom taggedPointer : go_type.

Axiom minTagBits : Z.

Axiom addrBits : Z.

Axiom tagBits : Z.

Axiom aixAddrBits : Z.

Axiom aixTagBits : Z.

Axiom riscv64AddrBits : Z.

Axiom riscv64TagBits : Z.

Axiom taggedPointerBits : Z.

Definition taggedPointerPack : go_string := "runtime.taggedPointerPack"%go.

Definition testSPWrite : go_string := "runtime.testSPWrite"%go.

Definition time_runtimeNow : go_string := "runtime.time_runtimeNow"%go.

Definition time_runtimeNano : go_string := "runtime.time_runtimeNano"%go.

Axiom timer : go_type.

Axiom timers : go_type.

Axiom timerWhen : go_type.

Axiom timerHeaped : val.

Axiom timerModified : val.

Axiom timerZombie : val.

Axiom timerDebug : val.

Axiom maxWhen : Z.

Axiom verifyTimers : val.

Definition timeSleep : go_string := "runtime.timeSleep"%go.

Definition resetForSleep : go_string := "runtime.resetForSleep"%go.

Axiom timeTimer : go_type.

Definition newTimer : go_string := "runtime.newTimer"%go.

Definition stopTimer : go_string := "runtime.stopTimer"%go.

Definition resetTimer : go_string := "runtime.resetTimer"%go.

Definition goroutineReady : go_string := "runtime.goroutineReady"%go.

Definition timeSleepUntil : go_string := "runtime.timeSleepUntil"%go.

Axiom timerHeapN : Z.

Definition badTimer : go_string := "runtime.badTimer"%go.

Definition blockTimerChan : go_string := "runtime.blockTimerChan"%go.

Definition unblockTimerChan : go_string := "runtime.unblockTimerChan"%go.

Definition faketime : go_string := "runtime.faketime"%go.

Definition nanotime : go_string := "runtime.nanotime"%go.

Definition overrideWrite : go_string := "runtime.overrideWrite"%go.

Definition write : go_string := "runtime.write"%go.

Definition time_now : go_string := "runtime.time_now"%go.

Definition osSetupTLS : go_string := "runtime.osSetupTLS"%go.

Definition trace : go_string := "runtime.trace"%go.

Definition traceAdvanceSema : go_string := "runtime.traceAdvanceSema"%go.

Axiom traceAdvanceSema'init : val.

Definition traceShutdownSema : go_string := "runtime.traceShutdownSema"%go.

Axiom traceShutdownSema'init : val.

Definition StartTrace : go_string := "runtime.StartTrace"%go.

Definition StopTrace : go_string := "runtime.StopTrace"%go.

Definition traceAdvance : go_string := "runtime.traceAdvance"%go.

Definition traceNextGen : go_string := "runtime.traceNextGen"%go.

Definition traceRegisterLabelsAndReasons : go_string := "runtime.traceRegisterLabelsAndReasons"%go.

Definition ReadTrace : go_string := "runtime.ReadTrace"%go.

Definition readTrace0 : go_string := "runtime.readTrace0"%go.

Definition traceReader : go_string := "runtime.traceReader"%go.

Definition traceReaderAvailable : go_string := "runtime.traceReaderAvailable"%go.

Definition traceAdvancer : go_string := "runtime.traceAdvancer"%go.

Axiom traceAdvancerState : go_type.

Axiom defaultTraceAdvancePeriod : val.

Axiom wakeableSleep : go_type.

Definition newWakeableSleep : go_string := "runtime.newWakeableSleep"%go.

Axiom traceAllocFreeTypesBatch : Z.

Axiom traceAllocFreeInfoBatch : Z.

Definition traceSnapshotMemory : go_string := "runtime.traceSnapshotMemory"%go.

Definition traceSpanTypeAndClass : go_string := "runtime.traceSpanTypeAndClass"%go.

Definition traceSpanID : go_string := "runtime.traceSpanID"%go.

Definition traceHeapObjectID : go_string := "runtime.traceHeapObjectID"%go.

Definition traceGoroutineStackID : go_string := "runtime.traceGoroutineStackID"%go.

Definition traceCompressStackSize : go_string := "runtime.traceCompressStackSize"%go.

Axiom usesLR : val.

Axiom tracebackInnerFrames : Z.

Axiom tracebackOuterFrames : Z.

Axiom unwindFlags : go_type.

Axiom unwindPrintErrors : val.

Axiom unwindSilentErrors : val.

Axiom unwindTrap : val.

Axiom unwindJumpStack : val.

Axiom unwinder : go_type.

Definition tracebackPCs : go_string := "runtime.tracebackPCs"%go.

Definition printArgs : go_string := "runtime.printArgs"%go.

Definition funcNamePiecesForPrint : go_string := "runtime.funcNamePiecesForPrint"%go.

Definition funcNameForPrint : go_string := "runtime.funcNameForPrint"%go.

Definition printFuncName : go_string := "runtime.printFuncName"%go.

Definition printcreatedby : go_string := "runtime.printcreatedby"%go.

Definition printcreatedby1 : go_string := "runtime.printcreatedby1"%go.

Definition traceback : go_string := "runtime.traceback"%go.

Definition tracebacktrap : go_string := "runtime.tracebacktrap"%go.

Definition traceback1 : go_string := "runtime.traceback1"%go.

Definition traceback2 : go_string := "runtime.traceback2"%go.

Definition printAncestorTraceback : go_string := "runtime.printAncestorTraceback"%go.

Definition printAncestorTracebackFuncInfo : go_string := "runtime.printAncestorTracebackFuncInfo"%go.

Definition callers : go_string := "runtime.callers"%go.

Definition gcallers : go_string := "runtime.gcallers"%go.

Definition showframe : go_string := "runtime.showframe"%go.

Definition showfuncinfo : go_string := "runtime.showfuncinfo"%go.

Definition isExportedRuntime : go_string := "runtime.isExportedRuntime"%go.

Definition elideWrapperCalling : go_string := "runtime.elideWrapperCalling"%go.

Definition gStatusStrings : go_string := "runtime.gStatusStrings"%go.

Axiom gStatusStrings'init : val.

Definition goroutineheader : go_string := "runtime.goroutineheader"%go.

Definition tracebackothers : go_string := "runtime.tracebackothers"%go.

Definition tracebackHexdump : go_string := "runtime.tracebackHexdump"%go.

Definition isSystemGoroutine : go_string := "runtime.isSystemGoroutine"%go.

Definition SetCgoTraceback : go_string := "runtime.SetCgoTraceback"%go.

Definition cgoTraceback : go_string := "runtime.cgoTraceback"%go.

Definition cgoContext : go_string := "runtime.cgoContext"%go.

Definition cgoSymbolizer : go_string := "runtime.cgoSymbolizer"%go.

Axiom cgoTracebackArg : go_type.

Axiom cgoContextArg : go_type.

Axiom cgoSymbolizerArg : go_type.

Definition printCgoTraceback : go_string := "runtime.printCgoTraceback"%go.

Definition printOneCgoTraceback : go_string := "runtime.printOneCgoTraceback"%go.

Definition callCgoSymbolizer : go_string := "runtime.callCgoSymbolizer"%go.

Definition cgoContextPCs : go_string := "runtime.cgoContextPCs"%go.

Axiom traceBytesPerNumber : Z.

Axiom traceWriter : go_type.

Definition unsafeTraceWriter : go_string := "runtime.unsafeTraceWriter"%go.

Axiom traceBufQueue : go_type.

Axiom traceBufHeader : go_type.

Axiom traceBuf : go_type.

Definition traceBufFlush : go_string := "runtime.traceBufFlush"%go.

Definition traceInitReadCPU : go_string := "runtime.traceInitReadCPU"%go.

Definition traceStartReadCPU : go_string := "runtime.traceStartReadCPU"%go.

Definition traceStopReadCPU : go_string := "runtime.traceStopReadCPU"%go.

Definition traceReadCPU : go_string := "runtime.traceReadCPU"%go.

Definition traceCPUFlush : go_string := "runtime.traceCPUFlush"%go.

Definition traceCPUSample : go_string := "runtime.traceCPUSample"%go.

Axiom traceEv : go_type.

Axiom traceEvNone : val.

Axiom traceEvEventBatch : val.

Axiom traceEvStacks : val.

Axiom traceEvStack : val.

Axiom traceEvStrings : val.

Axiom traceEvString : val.

Axiom traceEvCPUSamples : val.

Axiom traceEvCPUSample : val.

Axiom traceEvFrequency : val.

Axiom traceEvProcsChange : val.

Axiom traceEvProcStart : val.

Axiom traceEvProcStop : val.

Axiom traceEvProcSteal : val.

Axiom traceEvProcStatus : val.

Axiom traceEvGoCreate : val.

Axiom traceEvGoCreateSyscall : val.

Axiom traceEvGoStart : val.

Axiom traceEvGoDestroy : val.

Axiom traceEvGoDestroySyscall : val.

Axiom traceEvGoStop : val.

Axiom traceEvGoBlock : val.

Axiom traceEvGoUnblock : val.

Axiom traceEvGoSyscallBegin : val.

Axiom traceEvGoSyscallEnd : val.

Axiom traceEvGoSyscallEndBlocked : val.

Axiom traceEvGoStatus : val.

Axiom traceEvSTWBegin : val.

Axiom traceEvSTWEnd : val.

Axiom traceEvGCActive : val.

Axiom traceEvGCBegin : val.

Axiom traceEvGCEnd : val.

Axiom traceEvGCSweepActive : val.

Axiom traceEvGCSweepBegin : val.

Axiom traceEvGCSweepEnd : val.

Axiom traceEvGCMarkAssistActive : val.

Axiom traceEvGCMarkAssistBegin : val.

Axiom traceEvGCMarkAssistEnd : val.

Axiom traceEvHeapAlloc : val.

Axiom traceEvHeapGoal : val.

Axiom traceEvGoLabel : val.

Axiom traceEvUserTaskBegin : val.

Axiom traceEvUserTaskEnd : val.

Axiom traceEvUserRegionBegin : val.

Axiom traceEvUserRegionEnd : val.

Axiom traceEvUserLog : val.

Axiom traceEvGoSwitch : val.

Axiom traceEvGoSwitchDestroy : val.

Axiom traceEvGoCreateBlocked : val.

Axiom traceEvGoStatusStack : val.

Axiom traceEvExperimentalBatch : val.

Axiom traceArg : go_type.

Axiom traceEventWriter : go_type.

Definition unsafeTraceExpWriter : go_string := "runtime.unsafeTraceExpWriter"%go.

Axiom traceExperiment : go_type.

Axiom traceNoExperiment : val.

Axiom traceExperimentAllocFree : val.

Axiom traceNumExperiments : val.

Axiom traceEvSpan : val.

Axiom traceEvSpanAlloc : val.

Axiom traceEvSpanFree : val.

Axiom traceEvHeapObject : val.

Axiom traceEvHeapObjectAlloc : val.

Axiom traceEvHeapObjectFree : val.

Axiom traceEvGoroutineStack : val.

Axiom traceEvGoroutineStackAlloc : val.

Axiom traceEvGoroutineStackFree : val.

Axiom traceMap : go_type.

Axiom traceMapNode : go_type.

Axiom traceRegionAlloc : go_type.

Axiom traceRegionAllocBlock : go_type.

Axiom traceRegionAllocBlockHeader : go_type.

Axiom traceRegionAllocBlockData : val.

Axiom gTraceState : go_type.

Axiom mTraceState : go_type.

Axiom pTraceState : go_type.

Definition traceLockInit : go_string := "runtime.traceLockInit"%go.

Definition lockRankMayTraceFlush : go_string := "runtime.lockRankMayTraceFlush"%go.

Axiom traceBlockReason : go_type.

Axiom traceBlockGeneric : val.

Axiom traceBlockForever : val.

Axiom traceBlockNet : val.

Axiom traceBlockSelect : val.

Axiom traceBlockCondWait : val.

Axiom traceBlockSync : val.

Axiom traceBlockChanSend : val.

Axiom traceBlockChanRecv : val.

Axiom traceBlockGCMarkAssist : val.

Axiom traceBlockGCSweep : val.

Axiom traceBlockSystemGoroutine : val.

Axiom traceBlockPreempted : val.

Axiom traceBlockDebugCall : val.

Axiom traceBlockUntilGCEnds : val.

Axiom traceBlockSleep : val.

Axiom traceBlockGCWeakToStrongWait : val.

Axiom traceBlockSynctest : val.

Definition traceBlockReasonStrings : go_string := "runtime.traceBlockReasonStrings"%go.

Axiom traceBlockReasonStrings'init : val.

Axiom traceGoStopReason : go_type.

Axiom traceGoStopGeneric : val.

Axiom traceGoStopGoSched : val.

Axiom traceGoStopPreempted : val.

Definition traceGoStopReasonStrings : go_string := "runtime.traceGoStopReasonStrings"%go.

Axiom traceGoStopReasonStrings'init : val.

Definition traceEnabled : go_string := "runtime.traceEnabled"%go.

Definition traceAllocFreeEnabled : go_string := "runtime.traceAllocFreeEnabled"%go.

Definition traceShuttingDown : go_string := "runtime.traceShuttingDown"%go.

Axiom traceLocker : go_type.

Axiom debugTraceReentrancy : val.

Definition traceAcquire : go_string := "runtime.traceAcquire"%go.

Definition traceAcquireEnabled : go_string := "runtime.traceAcquireEnabled"%go.

Definition traceRelease : go_string := "runtime.traceRelease"%go.

Definition traceExitingSyscall : go_string := "runtime.traceExitingSyscall"%go.

Definition traceExitedSyscall : go_string := "runtime.traceExitedSyscall"%go.

Definition trace_userTaskCreate : go_string := "runtime.trace_userTaskCreate"%go.

Definition trace_userTaskEnd : go_string := "runtime.trace_userTaskEnd"%go.

Definition trace_userRegion : go_string := "runtime.trace_userRegion"%go.

Definition trace_userLog : go_string := "runtime.trace_userLog"%go.

Definition traceThreadDestroy : go_string := "runtime.traceThreadDestroy"%go.

Axiom traceStackSize : Z.

Axiom logicalStackSentinel : val.

Definition traceStack : go_string := "runtime.traceStack"%go.

Axiom traceStackTable : go_type.

Definition dumpStacksRec : go_string := "runtime.dumpStacksRec"%go.

Definition makeTraceFrames : go_string := "runtime.makeTraceFrames"%go.

Axiom traceFrame : go_type.

Definition makeTraceFrame : go_string := "runtime.makeTraceFrame"%go.

Definition tracefpunwindoff : go_string := "runtime.tracefpunwindoff"%go.

Definition fpTracebackPCs : go_string := "runtime.fpTracebackPCs"%go.

Definition pprof_fpunwindExpand : go_string := "runtime.pprof_fpunwindExpand"%go.

Definition fpunwindExpand : go_string := "runtime.fpunwindExpand"%go.

Definition startPCForTrace : go_string := "runtime.startPCForTrace"%go.

Axiom traceGoStatus : go_type.

Axiom traceGoBad : val.

Axiom traceGoRunnable : val.

Axiom traceGoRunning : val.

Axiom traceGoSyscall : val.

Axiom traceGoWaiting : val.

Axiom traceProcStatus : go_type.

Axiom traceProcBad : val.

Axiom traceProcRunning : val.

Axiom traceProcIdle : val.

Axiom traceProcSyscall : val.

Axiom traceProcSyscallAbandoned : val.

Definition goStatusToTraceGoStatus : go_string := "runtime.goStatusToTraceGoStatus"%go.

Axiom traceSchedResourceState : go_type.

Axiom maxTraceStringLen : Z.

Axiom traceStringTable : go_type.

Axiom traceTimeDiv : Z.

Axiom traceTime : go_type.

Definition traceClockNow : go_string := "runtime.traceClockNow"%go.

Definition traceClockUnitsPerSecond : go_string := "runtime.traceClockUnitsPerSecond"%go.

Definition traceFrequency : go_string := "runtime.traceFrequency"%go.

Axiom traceTypeTable : go_type.

Definition dumpTypesRec : go_string := "runtime.dumpTypesRec"%go.

Axiom nameOff : go_type.

Axiom typeOff : go_type.

Axiom textOff : go_type.

Axiom _type : go_type.

Axiom rtype : go_type.

Definition getGCMask : go_string := "runtime.getGCMask"%go.

Definition inProgress : go_string := "runtime.inProgress"%go.

Definition getGCMaskOnDemand : go_string := "runtime.getGCMaskOnDemand"%go.

Axiom bitCursor : go_type.

Definition buildGCMask : go_string := "runtime.buildGCMask"%go.

Definition reflectOffs : go_string := "runtime.reflectOffs"%go.

Definition reflectOffsLock : go_string := "runtime.reflectOffsLock"%go.

Definition reflectOffsUnlock : go_string := "runtime.reflectOffsUnlock"%go.

Definition resolveNameOff : go_string := "runtime.resolveNameOff"%go.

Definition resolveTypeOff : go_string := "runtime.resolveTypeOff"%go.

Axiom uncommontype : go_type.

Axiom interfacetype : go_type.

Axiom arraytype : go_type.

Axiom chantype : go_type.

Axiom slicetype : go_type.

Axiom functype : go_type.

Axiom ptrtype : go_type.

Axiom name : go_type.

Axiom structtype : go_type.

Definition pkgPath : go_string := "runtime.pkgPath"%go.

Definition typelinksinit : go_string := "runtime.typelinksinit"%go.

Axiom _typePair : go_type.

Definition toRType : go_string := "runtime.toRType"%go.

Definition typesEqual : go_string := "runtime.typesEqual"%go.

Definition isDirectIface : go_string := "runtime.isDirectIface"%go.

Definition unsafestring : go_string := "runtime.unsafestring"%go.

Definition unsafestring64 : go_string := "runtime.unsafestring64"%go.

Definition unsafestringcheckptr : go_string := "runtime.unsafestringcheckptr"%go.

Definition panicunsafestringlen : go_string := "runtime.panicunsafestringlen"%go.

Definition panicunsafestringnilptr : go_string := "runtime.panicunsafestringnilptr"%go.

Definition unsafeslice : go_string := "runtime.unsafeslice"%go.

Definition unsafeslice64 : go_string := "runtime.unsafeslice64"%go.

Definition unsafeslicecheckptr : go_string := "runtime.unsafeslicecheckptr"%go.

Definition panicunsafeslicelen : go_string := "runtime.panicunsafeslicelen"%go.

Definition panicunsafeslicelen1 : go_string := "runtime.panicunsafeslicelen1"%go.

Definition panicunsafeslicenilptr : go_string := "runtime.panicunsafeslicenilptr"%go.

Definition panicunsafeslicenilptr1 : go_string := "runtime.panicunsafeslicenilptr1"%go.

Definition reflect_unsafeslice : go_string := "runtime.reflect_unsafeslice"%go.

Axiom runeError : val.

Axiom runeSelf : Z.

Axiom maxRune : val.

Axiom surrogateMin : Z.

Axiom surrogateMax : Z.

Axiom t1 : Z.

Axiom tx : Z.

Axiom t2 : Z.

Axiom t3 : Z.

Axiom t4 : Z.

Axiom t5 : Z.

Axiom maskx : Z.

Axiom mask2 : Z.

Axiom mask3 : Z.

Axiom mask4 : Z.

Axiom rune1Max : Z.

Axiom rune2Max : Z.

Axiom rune3Max : Z.

Axiom locb : Z.

Axiom hicb : Z.

Definition countrunes : go_string := "runtime.countrunes"%go.

Definition decoderune : go_string := "runtime.decoderune"%go.

Definition encoderune : go_string := "runtime.encoderune"%go.

Axiom elfSym : go_type.

Axiom elfVerdef : go_type.

Axiom elfEhdr : go_type.

Axiom elfPhdr : go_type.

Axiom elfShdr : go_type.

Axiom elfDyn : go_type.

Axiom elfVerdaux : go_type.

Axiom _AT_SYSINFO_EHDR : Z.

Axiom _PT_LOAD : Z.

Axiom _PT_DYNAMIC : Z.

Axiom _DT_NULL : Z.

Axiom _DT_HASH : Z.

Axiom _DT_STRTAB : Z.

Axiom _DT_SYMTAB : Z.

Axiom _DT_GNU_HASH : Z.

Axiom _DT_VERSYM : Z.

Axiom _DT_VERDEF : Z.

Axiom _VER_FLG_BASE : Z.

Axiom _SHN_UNDEF : Z.

Axiom _SHT_DYNSYM : Z.

Axiom _STT_FUNC : Z.

Axiom _STT_NOTYPE : Z.

Axiom _STB_GLOBAL : Z.

Axiom _STB_WEAK : Z.

Axiom _EI_NIDENT : Z.

Axiom vdsoSymTabSize : val.

Axiom vdsoDynSize : val.

Axiom vdsoSymStringsSize : Z.

Axiom vdsoVerSymSize : Z.

Axiom vdsoHashSize : Z.

Axiom vdsoBloomSizeScale : val.

Definition _ELF_ST_BIND : go_string := "runtime._ELF_ST_BIND"%go.

Definition _ELF_ST_TYPE : go_string := "runtime._ELF_ST_TYPE"%go.

Axiom vdsoSymbolKey : go_type.

Axiom vdsoVersionKey : go_type.

Axiom vdsoInfo : go_type.

Definition vdsoLoadStart : go_string := "runtime.vdsoLoadStart"%go.

Definition vdsoLoadEnd : go_string := "runtime.vdsoLoadEnd"%go.

Definition vdsoInitFromSysinfoEhdr : go_string := "runtime.vdsoInitFromSysinfoEhdr"%go.

Definition vdsoFindVersion : go_string := "runtime.vdsoFindVersion"%go.

Definition vdsoParseSymbols : go_string := "runtime.vdsoParseSymbols"%go.

Definition vdsoauxv : go_string := "runtime.vdsoauxv"%go.

Definition inVDSOPage : go_string := "runtime.inVDSOPage"%go.

Axiom vdsoArrayMax : Z.

Definition vdsoLinuxVersion : go_string := "runtime.vdsoLinuxVersion"%go.

Axiom vdsoLinuxVersion'init : val.

Definition vdsoSymbolKeys : go_string := "runtime.vdsoSymbolKeys"%go.

Axiom vdsoSymbolKeys'init : val.

Definition vdsoGettimeofdaySym : go_string := "runtime.vdsoGettimeofdaySym"%go.

Definition vdsoClockgettimeSym : go_string := "runtime.vdsoClockgettimeSym"%go.

Definition vdsoGetrandomSym : go_string := "runtime.vdsoGetrandomSym"%go.

Definition vgetrandom1 : go_string := "runtime.vgetrandom1"%go.

Definition vgetrandomAlloc : go_string := "runtime.vgetrandomAlloc"%go.

Definition vgetrandomInit : go_string := "runtime.vgetrandomInit"%go.

Definition vgetrandomGetState : go_string := "runtime.vgetrandomGetState"%go.

Definition vgetrandomDestroy : go_string := "runtime.vgetrandomDestroy"%go.

Definition vgetrandom : go_string := "runtime.vgetrandom"%go.

Definition writeErr : go_string := "runtime.writeErr"%go.

Definition vars' : list (go_string * go_type) := [].

Axiom memhash0ⁱᵐᵖˡ : val.

Axiom memhash8ⁱᵐᵖˡ : val.

Axiom memhash16ⁱᵐᵖˡ : val.

Axiom memhash128ⁱᵐᵖˡ : val.

Axiom memhash_varlenⁱᵐᵖˡ : val.

Axiom memhashⁱᵐᵖˡ : val.

Axiom memhash32ⁱᵐᵖˡ : val.

Axiom memhash64ⁱᵐᵖˡ : val.

Axiom strhashⁱᵐᵖˡ : val.

Axiom strhashFallbackⁱᵐᵖˡ : val.

Axiom f32hashⁱᵐᵖˡ : val.

Axiom f64hashⁱᵐᵖˡ : val.

Axiom c64hashⁱᵐᵖˡ : val.

Axiom c128hashⁱᵐᵖˡ : val.

Axiom interhashⁱᵐᵖˡ : val.

Axiom nilinterhashⁱᵐᵖˡ : val.

Axiom typehashⁱᵐᵖˡ : val.

Axiom mapKeyErrorⁱᵐᵖˡ : val.

Axiom mapKeyError2ⁱᵐᵖˡ : val.

Axiom reflect_typehashⁱᵐᵖˡ : val.

Axiom memequal0ⁱᵐᵖˡ : val.

Axiom memequal8ⁱᵐᵖˡ : val.

Axiom memequal16ⁱᵐᵖˡ : val.

Axiom memequal32ⁱᵐᵖˡ : val.

Axiom memequal64ⁱᵐᵖˡ : val.

Axiom memequal128ⁱᵐᵖˡ : val.

Axiom f32equalⁱᵐᵖˡ : val.

Axiom f64equalⁱᵐᵖˡ : val.

Axiom c64equalⁱᵐᵖˡ : val.

Axiom c128equalⁱᵐᵖˡ : val.

Axiom strequalⁱᵐᵖˡ : val.

Axiom interequalⁱᵐᵖˡ : val.

Axiom nilinterequalⁱᵐᵖˡ : val.

Axiom efaceeqⁱᵐᵖˡ : val.

Axiom ifaceeqⁱᵐᵖˡ : val.

Axiom stringHashⁱᵐᵖˡ : val.

Axiom bytesHashⁱᵐᵖˡ : val.

Axiom int32Hashⁱᵐᵖˡ : val.

Axiom int64Hashⁱᵐᵖˡ : val.

Axiom efaceHashⁱᵐᵖˡ : val.

Axiom ifaceHashⁱᵐᵖˡ : val.

Axiom alginitⁱᵐᵖˡ : val.

Axiom initAlgAESⁱᵐᵖˡ : val.

Axiom readUnaligned32ⁱᵐᵖˡ : val.

Axiom readUnaligned64ⁱᵐᵖˡ : val.

Axiom arena_newArenaⁱᵐᵖˡ : val.

Axiom arena_arena_Newⁱᵐᵖˡ : val.

Axiom arena_arena_Sliceⁱᵐᵖˡ : val.

Axiom arena_arena_Freeⁱᵐᵖˡ : val.

Axiom arena_heapifyⁱᵐᵖˡ : val.

Axiom userArenaChunkReserveBytesⁱᵐᵖˡ : val.

Axiom newUserArenaⁱᵐᵖˡ : val.

Axiom userArenaHeapBitsSetSliceTypeⁱᵐᵖˡ : val.

Axiom userArenaHeapBitsSetTypeⁱᵐᵖˡ : val.

Axiom bswapIfBigEndianⁱᵐᵖˡ : val.

Axiom newUserArenaChunkⁱᵐᵖˡ : val.

Axiom inUserArenaChunkⁱᵐᵖˡ : val.

Axiom freeUserArenaChunkⁱᵐᵖˡ : val.

Axiom asanreadⁱᵐᵖˡ : val.

Axiom asanwriteⁱᵐᵖˡ : val.

Axiom asanunpoisonⁱᵐᵖˡ : val.

Axiom asanpoisonⁱᵐᵖˡ : val.

Axiom asanregisterglobalsⁱᵐᵖˡ : val.

Axiom atomicwbⁱᵐᵖˡ : val.

Axiom atomicstorepⁱᵐᵖˡ : val.

Axiom atomic_storePointerⁱᵐᵖˡ : val.

Axiom atomic_casPointerⁱᵐᵖˡ : val.

Axiom sync_atomic_StoreUintptrⁱᵐᵖˡ : val.

Axiom sync_atomic_StorePointerⁱᵐᵖˡ : val.

Axiom sync_atomic_SwapUintptrⁱᵐᵖˡ : val.

Axiom sync_atomic_SwapPointerⁱᵐᵖˡ : val.

Axiom sync_atomic_CompareAndSwapUintptrⁱᵐᵖˡ : val.

Axiom sync_atomic_CompareAndSwapPointerⁱᵐᵖˡ : val.

Axiom cgoUseⁱᵐᵖˡ : val.

Axiom cgoKeepAliveⁱᵐᵖˡ : val.

Axiom cgoNoCallbackⁱᵐᵖˡ : val.

Axiom mmapⁱᵐᵖˡ : val.

Axiom munmapⁱᵐᵖˡ : val.

Axiom sysMmapⁱᵐᵖˡ : val.

Axiom callCgoMmapⁱᵐᵖˡ : val.

Axiom sysMunmapⁱᵐᵖˡ : val.

Axiom callCgoMunmapⁱᵐᵖˡ : val.

Axiom sigactionⁱᵐᵖˡ : val.

Axiom callCgoSigactionⁱᵐᵖˡ : val.

Axiom syscall_cgocallerⁱᵐᵖˡ : val.

Axiom cgocallⁱᵐᵖˡ : val.

Axiom callbackUpdateSystemStackⁱᵐᵖˡ : val.

Axiom cgocallbackgⁱᵐᵖˡ : val.

Axiom cgocallbackg1ⁱᵐᵖˡ : val.

Axiom unwindmⁱᵐᵖˡ : val.

Axiom badcgocallbackⁱᵐᵖˡ : val.

Axiom cgounimplⁱᵐᵖˡ : val.

Axiom cgoCheckPointerⁱᵐᵖˡ : val.

Axiom cgoCheckArgⁱᵐᵖˡ : val.

Axiom cgoCheckUnknownPointerⁱᵐᵖˡ : val.

Axiom cgoIsGoPointerⁱᵐᵖˡ : val.

Axiom cgoInRangeⁱᵐᵖˡ : val.

Axiom cgoCheckResultⁱᵐᵖˡ : val.

Axiom _cgo_panic_internalⁱᵐᵖˡ : val.

Axiom cgoCheckPtrWriteⁱᵐᵖˡ : val.

Axiom cgoCheckMemmoveⁱᵐᵖˡ : val.

Axiom cgoCheckMemmove2ⁱᵐᵖˡ : val.

Axiom cgoCheckSliceCopyⁱᵐᵖˡ : val.

Axiom cgoCheckTypedBlockⁱᵐᵖˡ : val.

Axiom cgoCheckBitsⁱᵐᵖˡ : val.

Axiom cgoCheckUsingTypeⁱᵐᵖˡ : val.

Axiom reflect_makechanⁱᵐᵖˡ : val.

Axiom makechan64ⁱᵐᵖˡ : val.

Axiom makechanⁱᵐᵖˡ : val.

Axiom chanbufⁱᵐᵖˡ : val.

Axiom fullⁱᵐᵖˡ : val.

Axiom chansend1ⁱᵐᵖˡ : val.

Axiom chansendⁱᵐᵖˡ : val.

Axiom sendⁱᵐᵖˡ : val.

Axiom timerchandrainⁱᵐᵖˡ : val.

Axiom sendDirectⁱᵐᵖˡ : val.

Axiom recvDirectⁱᵐᵖˡ : val.

Axiom closechanⁱᵐᵖˡ : val.

Axiom emptyⁱᵐᵖˡ : val.

Axiom chanrecv1ⁱᵐᵖˡ : val.

Axiom chanrecv2ⁱᵐᵖˡ : val.

Axiom chanrecvⁱᵐᵖˡ : val.

Axiom recvⁱᵐᵖˡ : val.

Axiom chanparkcommitⁱᵐᵖˡ : val.

Axiom selectnbsendⁱᵐᵖˡ : val.

Axiom selectnbrecvⁱᵐᵖˡ : val.

Axiom reflect_chansendⁱᵐᵖˡ : val.

Axiom reflect_chanrecvⁱᵐᵖˡ : val.

Axiom chanlenⁱᵐᵖˡ : val.

Axiom chancapⁱᵐᵖˡ : val.

Axiom reflect_chanlenⁱᵐᵖˡ : val.

Axiom reflectlite_chanlenⁱᵐᵖˡ : val.

Axiom reflect_chancapⁱᵐᵖˡ : val.

Axiom reflect_chancloseⁱᵐᵖˡ : val.

Axiom racesyncⁱᵐᵖˡ : val.

Axiom racenotifyⁱᵐᵖˡ : val.

Axiom checkptrAlignmentⁱᵐᵖˡ : val.

Axiom checkptrStraddlesⁱᵐᵖˡ : val.

Axiom checkptrArithmeticⁱᵐᵖˡ : val.

Axiom checkptrBaseⁱᵐᵖˡ : val.

Axiom inf2oneⁱᵐᵖˡ : val.

Axiom complex128divⁱᵐᵖˡ : val.

Axiom newcoroⁱᵐᵖˡ : val.

Axiom corostartⁱᵐᵖˡ : val.

Axiom coroexitⁱᵐᵖˡ : val.

Axiom coroswitchⁱᵐᵖˡ : val.

Axiom coroswitch_mⁱᵐᵖˡ : val.

Axiom coverage_getCovCounterListⁱᵐᵖˡ : val.

Axiom addCovMetaⁱᵐᵖˡ : val.

Axiom SetCPUProfileRateⁱᵐᵖˡ : val.

Axiom CPUProfileⁱᵐᵖˡ : val.

Axiom pprof_cyclesPerSecondⁱᵐᵖˡ : val.

Axiom runtime_pprof_readProfileⁱᵐᵖˡ : val.

Axiom cputicksⁱᵐᵖˡ : val.

Axiom createⁱᵐᵖˡ : val.

Axiom GOMAXPROCSⁱᵐᵖˡ : val.

Axiom NumCPUⁱᵐᵖˡ : val.

Axiom NumCgoCallⁱᵐᵖˡ : val.

Axiom totalMutexWaitTimeNanosⁱᵐᵖˡ : val.

Axiom NumGoroutineⁱᵐᵖˡ : val.

Axiom debug_modinfoⁱᵐᵖˡ : val.

Axiom mayMoreStackPreemptⁱᵐᵖˡ : val.

Axiom mayMoreStackMoveⁱᵐᵖˡ : val.

Axiom debugPinnerV1ⁱᵐᵖˡ : val.

Axiom debugCallV2ⁱᵐᵖˡ : val.

Axiom debugCallPanickedⁱᵐᵖˡ : val.

Axiom debugCallCheckⁱᵐᵖˡ : val.

Axiom debugCallWrapⁱᵐᵖˡ : val.

Axiom debugCallWrap1ⁱᵐᵖˡ : val.

Axiom debugCallWrap2ⁱᵐᵖˡ : val.

Axiom dlogⁱᵐᵖˡ : val.

Axiom dlogFakeⁱᵐᵖˡ : val.

Axiom dlogImplⁱᵐᵖˡ : val.

Axiom printDebugLogⁱᵐᵖˡ : val.

Axiom printDebugLogImplⁱᵐᵖˡ : val.

Axiom printDebugLogPCⁱᵐᵖˡ : val.

Axiom dlog1ⁱᵐᵖˡ : val.

Axiom getCachedDloggerⁱᵐᵖˡ : val.

Axiom putCachedDloggerⁱᵐᵖˡ : val.

Axiom gogetenvⁱᵐᵖˡ : val.

Axiom envKeyEqualⁱᵐᵖˡ : val.

Axiom lowerASCIIⁱᵐᵖˡ : val.

Axiom setenv_cⁱᵐᵖˡ : val.

Axiom unsetenv_cⁱᵐᵖˡ : val.

Axiom cstringⁱᵐᵖˡ : val.

Axiom itoaⁱᵐᵖˡ : val.

Axiom appendIntStrⁱᵐᵖˡ : val.

Axiom printpanicvalⁱᵐᵖˡ : val.

Axiom printanycustomtypeⁱᵐᵖˡ : val.

Axiom printindentedⁱᵐᵖˡ : val.

Axiom panicwrapⁱᵐᵖˡ : val.

Axiom Callerⁱᵐᵖˡ : val.

Axiom Callersⁱᵐᵖˡ : val.

Axiom GOROOTⁱᵐᵖˡ : val.

Axiom Versionⁱᵐᵖˡ : val.

Axiom fastlog2ⁱᵐᵖˡ : val.

Axiom checkfdsⁱᵐᵖˡ : val.

Axiom isNaNⁱᵐᵖˡ : val.

Axiom isFiniteⁱᵐᵖˡ : val.

Axiom isInfⁱᵐᵖˡ : val.

Axiom absⁱᵐᵖˡ : val.

Axiom copysignⁱᵐᵖˡ : val.

Axiom float64bitsⁱᵐᵖˡ : val.

Axiom float64frombitsⁱᵐᵖˡ : val.

Axiom memhashFallbackⁱᵐᵖˡ : val.

Axiom memhash32Fallbackⁱᵐᵖˡ : val.

Axiom memhash64Fallbackⁱᵐᵖˡ : val.

Axiom mixⁱᵐᵖˡ : val.

Axiom r4ⁱᵐᵖˡ : val.

Axiom r8ⁱᵐᵖˡ : val.

Axiom runtime_debug_WriteHeapDumpⁱᵐᵖˡ : val.

Axiom dwriteⁱᵐᵖˡ : val.

Axiom dwritebyteⁱᵐᵖˡ : val.

Axiom flushⁱᵐᵖˡ : val.

Axiom dumpintⁱᵐᵖˡ : val.

Axiom dumpboolⁱᵐᵖˡ : val.

Axiom dumpmemrangeⁱᵐᵖˡ : val.

Axiom dumpsliceⁱᵐᵖˡ : val.

Axiom dumpstrⁱᵐᵖˡ : val.

Axiom dumptypeⁱᵐᵖˡ : val.

Axiom dumpobjⁱᵐᵖˡ : val.

Axiom dumpotherrootⁱᵐᵖˡ : val.

Axiom dumpfinalizerⁱᵐᵖˡ : val.

Axiom dumpbvⁱᵐᵖˡ : val.

Axiom dumpframeⁱᵐᵖˡ : val.

Axiom dumpgoroutineⁱᵐᵖˡ : val.

Axiom dumpgsⁱᵐᵖˡ : val.

Axiom finq_callbackⁱᵐᵖˡ : val.

Axiom dumprootsⁱᵐᵖˡ : val.

Axiom dumpobjsⁱᵐᵖˡ : val.

Axiom dumpparamsⁱᵐᵖˡ : val.

Axiom itab_callbackⁱᵐᵖˡ : val.

Axiom dumpitabsⁱᵐᵖˡ : val.

Axiom dumpmsⁱᵐᵖˡ : val.

Axiom dumpmemstatsⁱᵐᵖˡ : val.

Axiom dumpmemprof_callbackⁱᵐᵖˡ : val.

Axiom dumpmemprofⁱᵐᵖˡ : val.

Axiom mdumpⁱᵐᵖˡ : val.

Axiom writeheapdump_mⁱᵐᵖˡ : val.

Axiom dumpfieldsⁱᵐᵖˡ : val.

Axiom makeheapobjbvⁱᵐᵖˡ : val.

Axiom float64Infⁱᵐᵖˡ : val.

Axiom float64NegInfⁱᵐᵖˡ : val.

Axiom timeHistogramMetricsBucketsⁱᵐᵖˡ : val.

Axiom itabHashFuncⁱᵐᵖˡ : val.

Axiom getitabⁱᵐᵖˡ : val.

Axiom itabAddⁱᵐᵖˡ : val.

Axiom itabInitⁱᵐᵖˡ : val.

Axiom itabsinitⁱᵐᵖˡ : val.

Axiom panicdottypeEⁱᵐᵖˡ : val.

Axiom panicdottypeIⁱᵐᵖˡ : val.

Axiom panicnildottypeⁱᵐᵖˡ : val.

Axiom convTⁱᵐᵖˡ : val.

Axiom convTnoptrⁱᵐᵖˡ : val.

Axiom convT16ⁱᵐᵖˡ : val.

Axiom convT32ⁱᵐᵖˡ : val.

Axiom convT64ⁱᵐᵖˡ : val.

Axiom convTstringⁱᵐᵖˡ : val.

Axiom convTsliceⁱᵐᵖˡ : val.

Axiom assertE2Iⁱᵐᵖˡ : val.

Axiom assertE2I2ⁱᵐᵖˡ : val.

Axiom typeAssertⁱᵐᵖˡ : val.

Axiom buildTypeAssertCacheⁱᵐᵖˡ : val.

Axiom interfaceSwitchⁱᵐᵖˡ : val.

Axiom buildInterfaceSwitchCacheⁱᵐᵖˡ : val.

Axiom reflect_ifaceE2Iⁱᵐᵖˡ : val.

Axiom reflectlite_ifaceE2Iⁱᵐᵖˡ : val.

Axiom iterate_itabsⁱᵐᵖˡ : val.

Axiom getStaticuint64sⁱᵐᵖˡ : val.

Axiom unreachableMethodⁱᵐᵖˡ : val.

Axiom lfnodeValidateⁱᵐᵖˡ : val.

Axiom lfstackPackⁱᵐᵖˡ : val.

Axiom lfstackUnpackⁱᵐᵖˡ : val.

Axiom mapiterinitⁱᵐᵖˡ : val.

Axiom reflect_mapiterinitⁱᵐᵖˡ : val.

Axiom mapiternextⁱᵐᵖˡ : val.

Axiom reflect_mapiternextⁱᵐᵖˡ : val.

Axiom reflect_mapiterkeyⁱᵐᵖˡ : val.

Axiom reflect_mapiterelemⁱᵐᵖˡ : val.

Axiom key32ⁱᵐᵖˡ : val.

Axiom noteclearⁱᵐᵖˡ : val.

Axiom notewakeupⁱᵐᵖˡ : val.

Axiom notesleepⁱᵐᵖˡ : val.

Axiom notetsleep_internalⁱᵐᵖˡ : val.

Axiom notetsleepⁱᵐᵖˡ : val.

Axiom notetsleepgⁱᵐᵖˡ : val.

Axiom beforeIdleⁱᵐᵖˡ : val.

Axiom checkTimeoutsⁱᵐᵖˡ : val.

Axiom semacreateⁱᵐᵖˡ : val.

Axiom semasleepⁱᵐᵖˡ : val.

Axiom semawakeupⁱᵐᵖˡ : val.

Axiom key8ⁱᵐᵖˡ : val.

Axiom lockVerifyMSizeⁱᵐᵖˡ : val.

Axiom mutexWaitListHeadⁱᵐᵖˡ : val.

Axiom mutexPreferLowLatencyⁱᵐᵖˡ : val.

Axiom mutexContendedⁱᵐᵖˡ : val.

Axiom lockⁱᵐᵖˡ : val.

Axiom lock2ⁱᵐᵖˡ : val.

Axiom unlockⁱᵐᵖˡ : val.

Axiom unlock2ⁱᵐᵖˡ : val.

Axiom unlock2Wakeⁱᵐᵖˡ : val.

Axiom lockInitⁱᵐᵖˡ : val.

Axiom getLockRankⁱᵐᵖˡ : val.

Axiom lockWithRankⁱᵐᵖˡ : val.

Axiom acquireLockRankAndMⁱᵐᵖˡ : val.

Axiom unlockWithRankⁱᵐᵖˡ : val.

Axiom releaseLockRankAndMⁱᵐᵖˡ : val.

Axiom lockWithRankMayAcquireⁱᵐᵖˡ : val.

Axiom assertLockHeldⁱᵐᵖˡ : val.

Axiom assertRankHeldⁱᵐᵖˡ : val.

Axiom worldStoppedⁱᵐᵖˡ : val.

Axiom worldStartedⁱᵐᵖˡ : val.

Axiom assertWorldStoppedⁱᵐᵖˡ : val.

Axiom assertWorldStoppedOrLockHeldⁱᵐᵖˡ : val.

Axiom mallocinitⁱᵐᵖˡ : val.

Axiom sysReserveAlignedⁱᵐᵖˡ : val.

Axiom nextFreeFastⁱᵐᵖˡ : val.

Axiom mallocgcⁱᵐᵖˡ : val.

Axiom mallocgcTinyⁱᵐᵖˡ : val.

Axiom mallocgcSmallNoscanⁱᵐᵖˡ : val.

Axiom mallocgcSmallScanNoHeaderⁱᵐᵖˡ : val.

Axiom mallocgcSmallScanHeaderⁱᵐᵖˡ : val.

Axiom mallocgcLargeⁱᵐᵖˡ : val.

Axiom preMallocgcDebugⁱᵐᵖˡ : val.

Axiom postMallocgcDebugⁱᵐᵖˡ : val.

Axiom deductAssistCreditⁱᵐᵖˡ : val.

Axiom memclrNoHeapPointersChunkedⁱᵐᵖˡ : val.

Axiom newobjectⁱᵐᵖˡ : val.

Axiom maps_newobjectⁱᵐᵖˡ : val.

Axiom reflect_unsafe_Newⁱᵐᵖˡ : val.

Axiom reflectlite_unsafe_Newⁱᵐᵖˡ : val.

Axiom newarrayⁱᵐᵖˡ : val.

Axiom reflect_unsafe_NewArrayⁱᵐᵖˡ : val.

Axiom maps_newarrayⁱᵐᵖˡ : val.

Axiom profileallocⁱᵐᵖˡ : val.

Axiom nextSampleⁱᵐᵖˡ : val.

Axiom fastexprandⁱᵐᵖˡ : val.

Axiom nextSampleNoFPⁱᵐᵖˡ : val.

Axiom persistentallocⁱᵐᵖˡ : val.

Axiom persistentalloc1ⁱᵐᵖˡ : val.

Axiom inPersistentAllocⁱᵐᵖˡ : val.

Axiom redZoneSizeⁱᵐᵖˡ : val.

Axiom mapaccess1_fast32ⁱᵐᵖˡ : val.

Axiom mapaccess2_fast32ⁱᵐᵖˡ : val.

Axiom mapassign_fast32ⁱᵐᵖˡ : val.

Axiom mapassign_fast32ptrⁱᵐᵖˡ : val.

Axiom mapdelete_fast32ⁱᵐᵖˡ : val.

Axiom mapaccess1_fast64ⁱᵐᵖˡ : val.

Axiom mapaccess2_fast64ⁱᵐᵖˡ : val.

Axiom mapassign_fast64ⁱᵐᵖˡ : val.

Axiom mapassign_fast64ptrⁱᵐᵖˡ : val.

Axiom mapdelete_fast64ⁱᵐᵖˡ : val.

Axiom mapaccess1_faststrⁱᵐᵖˡ : val.

Axiom mapaccess2_faststrⁱᵐᵖˡ : val.

Axiom mapassign_faststrⁱᵐᵖˡ : val.

Axiom mapdelete_faststrⁱᵐᵖˡ : val.

Axiom maps_mapKeyErrorⁱᵐᵖˡ : val.

Axiom makemap64ⁱᵐᵖˡ : val.

Axiom makemap_smallⁱᵐᵖˡ : val.

Axiom makemapⁱᵐᵖˡ : val.

Axiom mapaccess1ⁱᵐᵖˡ : val.

Axiom mapaccess2ⁱᵐᵖˡ : val.

Axiom mapaccess1_fatⁱᵐᵖˡ : val.

Axiom mapaccess2_fatⁱᵐᵖˡ : val.

Axiom mapassignⁱᵐᵖˡ : val.

Axiom mapdeleteⁱᵐᵖˡ : val.

Axiom mapIterStartⁱᵐᵖˡ : val.

Axiom mapIterNextⁱᵐᵖˡ : val.

Axiom mapclearⁱᵐᵖˡ : val.

Axiom reflect_makemapⁱᵐᵖˡ : val.

Axiom reflect_mapaccessⁱᵐᵖˡ : val.

Axiom reflect_mapaccess_faststrⁱᵐᵖˡ : val.

Axiom reflect_mapassignⁱᵐᵖˡ : val.

Axiom reflect_mapassign_faststrⁱᵐᵖˡ : val.

Axiom reflect_mapdeleteⁱᵐᵖˡ : val.

Axiom reflect_mapdelete_faststrⁱᵐᵖˡ : val.

Axiom reflect_maplenⁱᵐᵖˡ : val.

Axiom reflect_mapclearⁱᵐᵖˡ : val.

Axiom reflectlite_maplenⁱᵐᵖˡ : val.

Axiom mapinitnoopⁱᵐᵖˡ : val.

Axiom mapcloneⁱᵐᵖˡ : val.

Axiom mapclone2ⁱᵐᵖˡ : val.

Axiom keysⁱᵐᵖˡ : val.

Axiom valuesⁱᵐᵖˡ : val.

Axiom typedmemmoveⁱᵐᵖˡ : val.

Axiom wbZeroⁱᵐᵖˡ : val.

Axiom wbMoveⁱᵐᵖˡ : val.

Axiom reflect_typedmemmoveⁱᵐᵖˡ : val.

Axiom reflectlite_typedmemmoveⁱᵐᵖˡ : val.

Axiom maps_typedmemmoveⁱᵐᵖˡ : val.

Axiom reflectcallmoveⁱᵐᵖˡ : val.

Axiom typedslicecopyⁱᵐᵖˡ : val.

Axiom reflect_typedslicecopyⁱᵐᵖˡ : val.

Axiom typedmemclrⁱᵐᵖˡ : val.

Axiom reflect_typedmemclrⁱᵐᵖˡ : val.

Axiom maps_typedmemclrⁱᵐᵖˡ : val.

Axiom reflect_typedmemclrpartialⁱᵐᵖˡ : val.

Axiom reflect_typedarrayclearⁱᵐᵖˡ : val.

Axiom memclrHasPointersⁱᵐᵖˡ : val.

Axiom heapBitsInSpanⁱᵐᵖˡ : val.

Axiom bulkBarrierPreWriteⁱᵐᵖˡ : val.

Axiom bulkBarrierPreWriteSrcOnlyⁱᵐᵖˡ : val.

Axiom heapBitsSliceⁱᵐᵖˡ : val.

Axiom heapSetTypeNoHeaderⁱᵐᵖˡ : val.

Axiom heapSetTypeSmallHeaderⁱᵐᵖˡ : val.

Axiom heapSetTypeLargeⁱᵐᵖˡ : val.

Axiom doubleCheckHeapTypeⁱᵐᵖˡ : val.

Axiom doubleCheckHeapPointersⁱᵐᵖˡ : val.

Axiom doubleCheckHeapPointersInteriorⁱᵐᵖˡ : val.

Axiom doubleCheckTypePointersOfTypeⁱᵐᵖˡ : val.

Axiom dumpTypePointersⁱᵐᵖˡ : val.

Axiom addbⁱᵐᵖˡ : val.

Axiom subtractbⁱᵐᵖˡ : val.

Axiom add1ⁱᵐᵖˡ : val.

Axiom subtract1ⁱᵐᵖˡ : val.

Axiom markBitsForAddrⁱᵐᵖˡ : val.

Axiom markBitsForSpanⁱᵐᵖˡ : val.

Axiom badPointerⁱᵐᵖˡ : val.

Axiom findObjectⁱᵐᵖˡ : val.

Axiom reflect_verifyNotInHeapPtrⁱᵐᵖˡ : val.

Axiom bulkBarrierBitmapⁱᵐᵖˡ : val.

Axiom typeBitsBulkBarrierⁱᵐᵖˡ : val.

Axiom readUintptrⁱᵐᵖˡ : val.

Axiom progToPointerMaskⁱᵐᵖˡ : val.

Axiom runGCProgⁱᵐᵖˡ : val.

Axiom dumpGCProgⁱᵐᵖˡ : val.

Axiom reflect_gcbitsⁱᵐᵖˡ : val.

Axiom pointerMaskⁱᵐᵖˡ : val.

Axiom allocmcacheⁱᵐᵖˡ : val.

Axiom freemcacheⁱᵐᵖˡ : val.

Axiom getMCacheⁱᵐᵖˡ : val.

Axiom startCheckmarksⁱᵐᵖˡ : val.

Axiom endCheckmarksⁱᵐᵖˡ : val.

Axiom setCheckmarkⁱᵐᵖˡ : val.

Axiom AddCleanupⁱᵐᵖˡ : val.

Axiom sysAllocⁱᵐᵖˡ : val.

Axiom sysUnusedⁱᵐᵖˡ : val.

Axiom sysUsedⁱᵐᵖˡ : val.

Axiom sysHugePageⁱᵐᵖˡ : val.

Axiom sysNoHugePageⁱᵐᵖˡ : val.

Axiom sysHugePageCollapseⁱᵐᵖˡ : val.

Axiom sysFreeⁱᵐᵖˡ : val.

Axiom sysFaultⁱᵐᵖˡ : val.

Axiom sysReserveⁱᵐᵖˡ : val.

Axiom sysMapⁱᵐᵖˡ : val.

Axiom sysAllocOSⁱᵐᵖˡ : val.

Axiom sysUnusedOSⁱᵐᵖˡ : val.

Axiom sysUsedOSⁱᵐᵖˡ : val.

Axiom sysHugePageOSⁱᵐᵖˡ : val.

Axiom sysNoHugePageOSⁱᵐᵖˡ : val.

Axiom sysHugePageCollapseOSⁱᵐᵖˡ : val.

Axiom sysFreeOSⁱᵐᵖˡ : val.

Axiom sysFaultOSⁱᵐᵖˡ : val.

Axiom sysReserveOSⁱᵐᵖˡ : val.

Axiom sysMapOSⁱᵐᵖˡ : val.

Axiom sysReserveAlignedSbrkⁱᵐᵖˡ : val.

Axiom metricsLockⁱᵐᵖˡ : val.

Axiom metricsUnlockⁱᵐᵖˡ : val.

Axiom initMetricsⁱᵐᵖˡ : val.

Axiom compute0ⁱᵐᵖˡ : val.

Axiom godebug_registerMetricⁱᵐᵖˡ : val.

Axiom makeStatDepSetⁱᵐᵖˡ : val.

Axiom nsToSecⁱᵐᵖˡ : val.

Axiom readMetricNamesⁱᵐᵖˡ : val.

Axiom readMetricsⁱᵐᵖˡ : val.

Axiom readMetricsLockedⁱᵐᵖˡ : val.

Axiom lockRankMayQueueFinalizerⁱᵐᵖˡ : val.

Axiom queuefinalizerⁱᵐᵖˡ : val.

Axiom iterate_finqⁱᵐᵖˡ : val.

Axiom wakefingⁱᵐᵖˡ : val.

Axiom createfingⁱᵐᵖˡ : val.

Axiom finalizercommitⁱᵐᵖˡ : val.

Axiom runfinqⁱᵐᵖˡ : val.

Axiom isGoPointerWithoutSpanⁱᵐᵖˡ : val.

Axiom blockUntilEmptyFinalizerQueueⁱᵐᵖˡ : val.

Axiom SetFinalizerⁱᵐᵖˡ : val.

Axiom KeepAliveⁱᵐᵖˡ : val.

Axiom heapObjectsCanMoveⁱᵐᵖˡ : val.

Axiom gcinitⁱᵐᵖˡ : val.

Axiom gcenableⁱᵐᵖˡ : val.

Axiom setGCPhaseⁱᵐᵖˡ : val.

Axiom pollFractionalWorkerExitⁱᵐᵖˡ : val.

Axiom GCⁱᵐᵖˡ : val.

Axiom gcWaitOnMarkⁱᵐᵖˡ : val.

Axiom gcStartⁱᵐᵖˡ : val.

Axiom gcMarkDoneⁱᵐᵖˡ : val.

Axiom gcMarkTerminationⁱᵐᵖˡ : val.

Axiom gcBgMarkStartWorkersⁱᵐᵖˡ : val.

Axiom gcBgMarkPrepareⁱᵐᵖˡ : val.

Axiom gcBgMarkWorkerⁱᵐᵖˡ : val.

Axiom gcMarkWorkAvailableⁱᵐᵖˡ : val.

Axiom gcMarkⁱᵐᵖˡ : val.

Axiom gcSweepⁱᵐᵖˡ : val.

Axiom gcResetMarkStateⁱᵐᵖˡ : val.

Axiom sync_runtime_registerPoolCleanupⁱᵐᵖˡ : val.

Axiom boring_registerCacheⁱᵐᵖˡ : val.

Axiom unique_runtime_registerUniqueMapCleanupⁱᵐᵖˡ : val.

Axiom clearpoolsⁱᵐᵖˡ : val.

Axiom itoaDivⁱᵐᵖˡ : val.

Axiom fmtNSAsMSⁱᵐᵖˡ : val.

Axiom gcTestMoveStackOnNextCallⁱᵐᵖˡ : val.

Axiom gcTestIsReachableⁱᵐᵖˡ : val.

Axiom gcTestPointerClassⁱᵐᵖˡ : val.

Axiom makeLimiterEventStampⁱᵐᵖˡ : val.

Axiom gcMarkRootPrepareⁱᵐᵖˡ : val.

Axiom gcMarkRootCheckⁱᵐᵖˡ : val.

Axiom markrootⁱᵐᵖˡ : val.

Axiom markrootBlockⁱᵐᵖˡ : val.

Axiom markrootFreeGStacksⁱᵐᵖˡ : val.

Axiom markrootSpansⁱᵐᵖˡ : val.

Axiom gcAssistAllocⁱᵐᵖˡ : val.

Axiom gcAssistAlloc1ⁱᵐᵖˡ : val.

Axiom gcWakeAllAssistsⁱᵐᵖˡ : val.

Axiom gcParkAssistⁱᵐᵖˡ : val.

Axiom gcFlushBgCreditⁱᵐᵖˡ : val.

Axiom scanstackⁱᵐᵖˡ : val.

Axiom scanframeworkerⁱᵐᵖˡ : val.

Axiom gcDrainMarkWorkerIdleⁱᵐᵖˡ : val.

Axiom gcDrainMarkWorkerDedicatedⁱᵐᵖˡ : val.

Axiom gcDrainMarkWorkerFractionalⁱᵐᵖˡ : val.

Axiom gcDrainⁱᵐᵖˡ : val.

Axiom gcDrainNⁱᵐᵖˡ : val.

Axiom scanblockⁱᵐᵖˡ : val.

Axiom scanobjectⁱᵐᵖˡ : val.

Axiom scanConservativeⁱᵐᵖˡ : val.

Axiom shadeⁱᵐᵖˡ : val.

Axiom greyobjectⁱᵐᵖˡ : val.

Axiom gcDumpObjectⁱᵐᵖˡ : val.

Axiom gcmarknewobjectⁱᵐᵖˡ : val.

Axiom gcMarkTinyAllocsⁱᵐᵖˡ : val.

Axiom setGCPercentⁱᵐᵖˡ : val.

Axiom readGOGCⁱᵐᵖˡ : val.

Axiom setMemoryLimitⁱᵐᵖˡ : val.

Axiom readGOMEMLIMITⁱᵐᵖˡ : val.

Axiom gcControllerCommitⁱᵐᵖˡ : val.

Axiom heapRetainedⁱᵐᵖˡ : val.

Axiom gcPaceScavengerⁱᵐᵖˡ : val.

Axiom bgscavengeⁱᵐᵖˡ : val.

Axiom printScavTraceⁱᵐᵖˡ : val.

Axiom fillAlignedⁱᵐᵖˡ : val.

Axiom unpackScavChunkDataⁱᵐᵖˡ : val.

Axiom binarySearchTreeⁱᵐᵖˡ : val.

Axiom finishsweep_mⁱᵐᵖˡ : val.

Axiom bgsweepⁱᵐᵖˡ : val.

Axiom sweeponeⁱᵐᵖˡ : val.

Axiom isSweepDoneⁱᵐᵖˡ : val.

Axiom deductSweepCreditⁱᵐᵖˡ : val.

Axiom clobberfreeⁱᵐᵖˡ : val.

Axiom gcPaceSweeperⁱᵐᵖˡ : val.

Axiom getemptyⁱᵐᵖˡ : val.

Axiom putemptyⁱᵐᵖˡ : val.

Axiom putfullⁱᵐᵖˡ : val.

Axiom trygetfullⁱᵐᵖˡ : val.

Axiom handoffⁱᵐᵖˡ : val.

Axiom prepareFreeWorkbufsⁱᵐᵖˡ : val.

Axiom freeSomeWbufsⁱᵐᵖˡ : val.

Axiom recordspanⁱᵐᵖˡ : val.

Axiom makeSpanClassⁱᵐᵖˡ : val.

Axiom arenaIndexⁱᵐᵖˡ : val.

Axiom arenaBaseⁱᵐᵖˡ : val.

Axiom inheapⁱᵐᵖˡ : val.

Axiom inHeapOrStackⁱᵐᵖˡ : val.

Axiom spanOfⁱᵐᵖˡ : val.

Axiom spanOfUncheckedⁱᵐᵖˡ : val.

Axiom spanOfHeapⁱᵐᵖˡ : val.

Axiom pageIndexOfⁱᵐᵖˡ : val.

Axiom runtime_debug_freeOSMemoryⁱᵐᵖˡ : val.

Axiom spanHasSpecialsⁱᵐᵖˡ : val.

Axiom spanHasNoSpecialsⁱᵐᵖˡ : val.

Axiom addspecialⁱᵐᵖˡ : val.

Axiom removespecialⁱᵐᵖˡ : val.

Axiom addfinalizerⁱᵐᵖˡ : val.

Axiom removefinalizerⁱᵐᵖˡ : val.

Axiom addCleanupⁱᵐᵖˡ : val.

Axiom internal_weak_runtime_registerWeakPointerⁱᵐᵖˡ : val.

Axiom internal_weak_runtime_makeStrongFromWeakⁱᵐᵖˡ : val.

Axiom gcParkStrongFromWeakⁱᵐᵖˡ : val.

Axiom gcWakeAllStrongFromWeakⁱᵐᵖˡ : val.

Axiom getOrAddWeakHandleⁱᵐᵖˡ : val.

Axiom getWeakHandleⁱᵐᵖˡ : val.

Axiom setprofilebucketⁱᵐᵖˡ : val.

Axiom newSpecialsIterⁱᵐᵖˡ : val.

Axiom freeSpecialⁱᵐᵖˡ : val.

Axiom newMarkBitsⁱᵐᵖˡ : val.

Axiom newAllocBitsⁱᵐᵖˡ : val.

Axiom nextMarkBitArenaEpochⁱᵐᵖˡ : val.

Axiom newArenaMayUnlockⁱᵐᵖˡ : val.

Axiom strminⁱᵐᵖˡ : val.

Axiom strmaxⁱᵐᵖˡ : val.

Axiom fmin32ⁱᵐᵖˡ : val.

Axiom fmin64ⁱᵐᵖˡ : val.

Axiom fmax32ⁱᵐᵖˡ : val.

Axiom fmax64ⁱᵐᵖˡ : val.

Axiom fminⁱᵐᵖˡ : val.

Axiom fmaxⁱᵐᵖˡ : val.

Axiom forbitsⁱᵐᵖˡ : val.

Axiom fandbitsⁱᵐᵖˡ : val.

Axiom maxSearchAddrⁱᵐᵖˡ : val.

Axiom chunkIndexⁱᵐᵖˡ : val.

Axiom chunkBaseⁱᵐᵖˡ : val.

Axiom chunkPageIndexⁱᵐᵖˡ : val.

Axiom offAddrToLevelIndexⁱᵐᵖˡ : val.

Axiom levelIndexToOffAddrⁱᵐᵖˡ : val.

Axiom addrsToSummaryRangeⁱᵐᵖˡ : val.

Axiom blockAlignSummaryRangeⁱᵐᵖˡ : val.

Axiom packPallocSumⁱᵐᵖˡ : val.

Axiom mergeSummariesⁱᵐᵖˡ : val.

Axiom findBitRange64ⁱᵐᵖˡ : val.

Axiom newBucketⁱᵐᵖˡ : val.

Axiom stkbucketⁱᵐᵖˡ : val.

Axiom eqsliceⁱᵐᵖˡ : val.

Axiom mProf_NextCycleⁱᵐᵖˡ : val.

Axiom mProf_Flushⁱᵐᵖˡ : val.

Axiom mProf_FlushLockedⁱᵐᵖˡ : val.

Axiom mProf_PostSweepⁱᵐᵖˡ : val.

Axiom mProf_Mallocⁱᵐᵖˡ : val.

Axiom mProf_Freeⁱᵐᵖˡ : val.

Axiom SetBlockProfileRateⁱᵐᵖˡ : val.

Axiom blockeventⁱᵐᵖˡ : val.

Axiom blocksampledⁱᵐᵖˡ : val.

Axiom saveblockeventⁱᵐᵖˡ : val.

Axiom fpTracebackPartialExpandⁱᵐᵖˡ : val.

Axiom saveBlockEventStackⁱᵐᵖˡ : val.

Axiom SetMutexProfileFractionⁱᵐᵖˡ : val.

Axiom mutexeventⁱᵐᵖˡ : val.

Axiom MemProfileⁱᵐᵖˡ : val.

Axiom memProfileInternalⁱᵐᵖˡ : val.

Axiom copyMemProfileRecordⁱᵐᵖˡ : val.

Axiom pprof_memProfileInternalⁱᵐᵖˡ : val.

Axiom iterate_memprofⁱᵐᵖˡ : val.

Axiom BlockProfileⁱᵐᵖˡ : val.

Axiom expandFramesⁱᵐᵖˡ : val.

Axiom blockProfileInternalⁱᵐᵖˡ : val.

Axiom copyBlockProfileRecordⁱᵐᵖˡ : val.

Axiom pprof_blockProfileInternalⁱᵐᵖˡ : val.

Axiom MutexProfileⁱᵐᵖˡ : val.

Axiom mutexProfileInternalⁱᵐᵖˡ : val.

Axiom pprof_mutexProfileInternalⁱᵐᵖˡ : val.

Axiom ThreadCreateProfileⁱᵐᵖˡ : val.

Axiom threadCreateProfileInternalⁱᵐᵖˡ : val.

Axiom pprof_threadCreateInternalⁱᵐᵖˡ : val.

Axiom pprof_goroutineProfileWithLabelsⁱᵐᵖˡ : val.

Axiom goroutineProfileWithLabelsⁱᵐᵖˡ : val.

Axiom goroutineProfileWithLabelsConcurrentⁱᵐᵖˡ : val.

Axiom tryRecordGoroutineProfileWBⁱᵐᵖˡ : val.

Axiom tryRecordGoroutineProfileⁱᵐᵖˡ : val.

Axiom doRecordGoroutineProfileⁱᵐᵖˡ : val.

Axiom goroutineProfileWithLabelsSyncⁱᵐᵖˡ : val.

Axiom GoroutineProfileⁱᵐᵖˡ : val.

Axiom goroutineProfileInternalⁱᵐᵖˡ : val.

Axiom savegⁱᵐᵖˡ : val.

Axiom Stackⁱᵐᵖˡ : val.

Axiom makeAddrRangeⁱᵐᵖˡ : val.

Axiom msanreadⁱᵐᵖˡ : val.

Axiom msanwriteⁱᵐᵖˡ : val.

Axiom msanmallocⁱᵐᵖˡ : val.

Axiom msanfreeⁱᵐᵖˡ : val.

Axiom msanmoveⁱᵐᵖˡ : val.

Axiom roundupsizeⁱᵐᵖˡ : val.

Axiom makeHeadTailIndexⁱᵐᵖˡ : val.

Axiom ReadMemStatsⁱᵐᵖˡ : val.

Axiom readmemstats_mⁱᵐᵖˡ : val.

Axiom readGCStatsⁱᵐᵖˡ : val.

Axiom readGCStats_mⁱᵐᵖˡ : val.

Axiom flushmcacheⁱᵐᵖˡ : val.

Axiom flushallmcachesⁱᵐᵖˡ : val.

Axiom wbBufFlushⁱᵐᵖˡ : val.

Axiom wbBufFlush1ⁱᵐᵖˡ : val.

Axiom nonblockingPipeⁱᵐᵖˡ : val.

Axiom poll_runtime_pollServerInitⁱᵐᵖˡ : val.

Axiom netpollGenericInitⁱᵐᵖˡ : val.

Axiom netpollinitedⁱᵐᵖˡ : val.

Axiom poll_runtime_isPollServerDescriptorⁱᵐᵖˡ : val.

Axiom poll_runtime_pollOpenⁱᵐᵖˡ : val.

Axiom poll_runtime_pollCloseⁱᵐᵖˡ : val.

Axiom poll_runtime_pollResetⁱᵐᵖˡ : val.

Axiom poll_runtime_pollWaitⁱᵐᵖˡ : val.

Axiom poll_runtime_pollWaitCanceledⁱᵐᵖˡ : val.

Axiom poll_runtime_pollSetDeadlineⁱᵐᵖˡ : val.

Axiom poll_runtime_pollUnblockⁱᵐᵖˡ : val.

Axiom netpollreadyⁱᵐᵖˡ : val.

Axiom netpollcheckerrⁱᵐᵖˡ : val.

Axiom netpollblockcommitⁱᵐᵖˡ : val.

Axiom netpollgoreadyⁱᵐᵖˡ : val.

Axiom netpollblockⁱᵐᵖˡ : val.

Axiom netpollunblockⁱᵐᵖˡ : val.

Axiom netpolldeadlineimplⁱᵐᵖˡ : val.

Axiom netpollDeadlineⁱᵐᵖˡ : val.

Axiom netpollReadDeadlineⁱᵐᵖˡ : val.

Axiom netpollWriteDeadlineⁱᵐᵖˡ : val.

Axiom netpollAnyWaitersⁱᵐᵖˡ : val.

Axiom netpollAdjustWaitersⁱᵐᵖˡ : val.

Axiom netpollinitⁱᵐᵖˡ : val.

Axiom netpollIsPollDescriptorⁱᵐᵖˡ : val.

Axiom netpollopenⁱᵐᵖˡ : val.

Axiom netpollcloseⁱᵐᵖˡ : val.

Axiom netpollarmⁱᵐᵖˡ : val.

Axiom netpollBreakⁱᵐᵖˡ : val.

Axiom netpollⁱᵐᵖˡ : val.

Axiom osRelaxⁱᵐᵖˡ : val.

Axiom enableWERⁱᵐᵖˡ : val.

Axiom futexⁱᵐᵖˡ : val.

Axiom futexsleepⁱᵐᵖˡ : val.

Axiom futexwakeupⁱᵐᵖˡ : val.

Axiom getproccountⁱᵐᵖˡ : val.

Axiom cloneⁱᵐᵖˡ : val.

Axiom newosprocⁱᵐᵖˡ : val.

Axiom newosproc0ⁱᵐᵖˡ : val.

Axiom mincoreⁱᵐᵖˡ : val.

Axiom sysargsⁱᵐᵖˡ : val.

Axiom sysauxvⁱᵐᵖˡ : val.

Axiom getHugePageSizeⁱᵐᵖˡ : val.

Axiom osinitⁱᵐᵖˡ : val.

Axiom readRandomⁱᵐᵖˡ : val.

Axiom goenvsⁱᵐᵖˡ : val.

Axiom libpreinitⁱᵐᵖˡ : val.

Axiom mpreinitⁱᵐᵖˡ : val.

Axiom gettidⁱᵐᵖˡ : val.

Axiom minitⁱᵐᵖˡ : val.

Axiom unminitⁱᵐᵖˡ : val.

Axiom mdestroyⁱᵐᵖˡ : val.

Axiom sigreturn__sigactionⁱᵐᵖˡ : val.

Axiom sigtrampⁱᵐᵖˡ : val.

Axiom cgoSigtrampⁱᵐᵖˡ : val.

Axiom sigaltstackⁱᵐᵖˡ : val.

Axiom setitimerⁱᵐᵖˡ : val.

Axiom timer_createⁱᵐᵖˡ : val.

Axiom timer_settimeⁱᵐᵖˡ : val.

Axiom timer_deleteⁱᵐᵖˡ : val.

Axiom rtsigprocmaskⁱᵐᵖˡ : val.

Axiom sigprocmaskⁱᵐᵖˡ : val.

Axiom raiseⁱᵐᵖˡ : val.

Axiom raiseprocⁱᵐᵖˡ : val.

Axiom sched_getaffinityⁱᵐᵖˡ : val.

Axiom osyieldⁱᵐᵖˡ : val.

Axiom osyield_no_gⁱᵐᵖˡ : val.

Axiom pipe2ⁱᵐᵖˡ : val.

Axiom fcntlⁱᵐᵖˡ : val.

Axiom setsigⁱᵐᵖˡ : val.

Axiom setsigstackⁱᵐᵖˡ : val.

Axiom getsigⁱᵐᵖˡ : val.

Axiom setSignalstackSPⁱᵐᵖˡ : val.

Axiom sysSigactionⁱᵐᵖˡ : val.

Axiom rt_sigactionⁱᵐᵖˡ : val.

Axiom getpidⁱᵐᵖˡ : val.

Axiom tgkillⁱᵐᵖˡ : val.

Axiom signalMⁱᵐᵖˡ : val.

Axiom validSIGPROFⁱᵐᵖˡ : val.

Axiom setProcessCPUProfilerⁱᵐᵖˡ : val.

Axiom setThreadCPUProfilerⁱᵐᵖˡ : val.

Axiom syscall_runtime_doAllThreadsSyscallⁱᵐᵖˡ : val.

Axiom runPerThreadSyscallⁱᵐᵖˡ : val.

Axiom mprotectⁱᵐᵖˡ : val.

Axiom sigaddsetⁱᵐᵖˡ : val.

Axiom sigdelsetⁱᵐᵖˡ : val.

Axiom sigfillsetⁱᵐᵖˡ : val.

Axiom archauxvⁱᵐᵖˡ : val.

Axiom osArchInitⁱᵐᵖˡ : val.

Axiom osStackAllocⁱᵐᵖˡ : val.

Axiom osStackFreeⁱᵐᵖˡ : val.

Axiom closeonexecⁱᵐᵖˡ : val.

Axiom panicCheck1ⁱᵐᵖˡ : val.

Axiom panicCheck2ⁱᵐᵖˡ : val.

Axiom goPanicIndexⁱᵐᵖˡ : val.

Axiom goPanicIndexUⁱᵐᵖˡ : val.

Axiom goPanicSliceAlenⁱᵐᵖˡ : val.

Axiom goPanicSliceAlenUⁱᵐᵖˡ : val.

Axiom goPanicSliceAcapⁱᵐᵖˡ : val.

Axiom goPanicSliceAcapUⁱᵐᵖˡ : val.

Axiom goPanicSliceBⁱᵐᵖˡ : val.

Axiom goPanicSliceBUⁱᵐᵖˡ : val.

Axiom goPanicSlice3Alenⁱᵐᵖˡ : val.

Axiom goPanicSlice3AlenUⁱᵐᵖˡ : val.

Axiom goPanicSlice3Acapⁱᵐᵖˡ : val.

Axiom goPanicSlice3AcapUⁱᵐᵖˡ : val.

Axiom goPanicSlice3Bⁱᵐᵖˡ : val.

Axiom goPanicSlice3BUⁱᵐᵖˡ : val.

Axiom goPanicSlice3Cⁱᵐᵖˡ : val.

Axiom goPanicSlice3CUⁱᵐᵖˡ : val.

Axiom goPanicSliceConvertⁱᵐᵖˡ : val.

Axiom panicIndexⁱᵐᵖˡ : val.

Axiom panicIndexUⁱᵐᵖˡ : val.

Axiom panicSliceAlenⁱᵐᵖˡ : val.

Axiom panicSliceAlenUⁱᵐᵖˡ : val.

Axiom panicSliceAcapⁱᵐᵖˡ : val.

Axiom panicSliceAcapUⁱᵐᵖˡ : val.

Axiom panicSliceBⁱᵐᵖˡ : val.

Axiom panicSliceBUⁱᵐᵖˡ : val.

Axiom panicSlice3Alenⁱᵐᵖˡ : val.

Axiom panicSlice3AlenUⁱᵐᵖˡ : val.

Axiom panicSlice3Acapⁱᵐᵖˡ : val.

Axiom panicSlice3AcapUⁱᵐᵖˡ : val.

Axiom panicSlice3Bⁱᵐᵖˡ : val.

Axiom panicSlice3BUⁱᵐᵖˡ : val.

Axiom panicSlice3Cⁱᵐᵖˡ : val.

Axiom panicSlice3CUⁱᵐᵖˡ : val.

Axiom panicSliceConvertⁱᵐᵖˡ : val.

Axiom panicshiftⁱᵐᵖˡ : val.

Axiom panicdivideⁱᵐᵖˡ : val.

Axiom panicoverflowⁱᵐᵖˡ : val.

Axiom panicfloatⁱᵐᵖˡ : val.

Axiom panicmemⁱᵐᵖˡ : val.

Axiom panicmemAddrⁱᵐᵖˡ : val.

Axiom deferprocⁱᵐᵖˡ : val.

Axiom panicrangestateⁱᵐᵖˡ : val.

Axiom deferrangefuncⁱᵐᵖˡ : val.

Axiom badDeferⁱᵐᵖˡ : val.

Axiom deferprocatⁱᵐᵖˡ : val.

Axiom deferconvertⁱᵐᵖˡ : val.

Axiom deferprocStackⁱᵐᵖˡ : val.

Axiom newdeferⁱᵐᵖˡ : val.

Axiom popDeferⁱᵐᵖˡ : val.

Axiom deferreturnⁱᵐᵖˡ : val.

Axiom Goexitⁱᵐᵖˡ : val.

Axiom preprintpanicsⁱᵐᵖˡ : val.

Axiom printpanicsⁱᵐᵖˡ : val.

Axiom readvarintUnsafeⁱᵐᵖˡ : val.

Axiom gopanicⁱᵐᵖˡ : val.

Axiom gorecoverⁱᵐᵖˡ : val.

Axiom sync_throwⁱᵐᵖˡ : val.

Axiom sync_fatalⁱᵐᵖˡ : val.

Axiom rand_fatalⁱᵐᵖˡ : val.

Axiom sysrand_fatalⁱᵐᵖˡ : val.

Axiom fips_fatalⁱᵐᵖˡ : val.

Axiom maps_fatalⁱᵐᵖˡ : val.

Axiom internal_sync_throwⁱᵐᵖˡ : val.

Axiom internal_sync_fatalⁱᵐᵖˡ : val.

Axiom throwⁱᵐᵖˡ : val.

Axiom fatalⁱᵐᵖˡ : val.

Axiom recoveryⁱᵐᵖˡ : val.

Axiom fatalthrowⁱᵐᵖˡ : val.

Axiom fatalpanicⁱᵐᵖˡ : val.

Axiom startpanic_mⁱᵐᵖˡ : val.

Axiom dopanic_mⁱᵐᵖˡ : val.

Axiom canpanicⁱᵐᵖˡ : val.

Axiom shouldPushSigpanicⁱᵐᵖˡ : val.

Axiom isAbortPCⁱᵐᵖˡ : val.

Axiom pinnerGetPtrⁱᵐᵖˡ : val.

Axiom isPinnedⁱᵐᵖˡ : val.

Axiom setPinnedⁱᵐᵖˡ : val.

Axiom pinnerGetPinCounterⁱᵐᵖˡ : val.

Axiom plugin_lastmoduleinitⁱᵐᵖˡ : val.

Axiom pluginftabverifyⁱᵐᵖˡ : val.

Axiom inRangeⁱᵐᵖˡ : val.

Axiom suspendGⁱᵐᵖˡ : val.

Axiom resumeGⁱᵐᵖˡ : val.

Axiom canPreemptMⁱᵐᵖˡ : val.

Axiom asyncPreemptⁱᵐᵖˡ : val.

Axiom asyncPreempt2ⁱᵐᵖˡ : val.

Axiom wantAsyncPreemptⁱᵐᵖˡ : val.

Axiom isAsyncSafePointⁱᵐᵖˡ : val.

Axiom osPreemptExtEnterⁱᵐᵖˡ : val.

Axiom osPreemptExtExitⁱᵐᵖˡ : val.

Axiom bytesⁱᵐᵖˡ : val.

Axiom recordForPanicⁱᵐᵖˡ : val.

Axiom printlockⁱᵐᵖˡ : val.

Axiom printunlockⁱᵐᵖˡ : val.

Axiom gwriteⁱᵐᵖˡ : val.

Axiom printspⁱᵐᵖˡ : val.

Axiom printnlⁱᵐᵖˡ : val.

Axiom printboolⁱᵐᵖˡ : val.

Axiom printfloatⁱᵐᵖˡ : val.

Axiom printcomplexⁱᵐᵖˡ : val.

Axiom printuintⁱᵐᵖˡ : val.

Axiom printintⁱᵐᵖˡ : val.

Axiom printhexⁱᵐᵖˡ : val.

Axiom printpointerⁱᵐᵖˡ : val.

Axiom printuintptrⁱᵐᵖˡ : val.

Axiom printstringⁱᵐᵖˡ : val.

Axiom printsliceⁱᵐᵖˡ : val.

Axiom printefaceⁱᵐᵖˡ : val.

Axiom printifaceⁱᵐᵖˡ : val.

Axiom hexdumpWordsⁱᵐᵖˡ : val.

Axiom main_mainⁱᵐᵖˡ : val.

Axiom mainⁱᵐᵖˡ : val.

Axiom os_beforeExitⁱᵐᵖˡ : val.

Axiom runExitHooksⁱᵐᵖˡ : val.

Axiom forcegchelperⁱᵐᵖˡ : val.

Axiom goschedguardedⁱᵐᵖˡ : val.

Axiom goschedIfBusyⁱᵐᵖˡ : val.

Axiom goparkⁱᵐᵖˡ : val.

Axiom goparkunlockⁱᵐᵖˡ : val.

Axiom goreadyⁱᵐᵖˡ : val.

Axiom acquireSudogⁱᵐᵖˡ : val.

Axiom releaseSudogⁱᵐᵖˡ : val.

Axiom badmcallⁱᵐᵖˡ : val.

Axiom badmcall2ⁱᵐᵖˡ : val.

Axiom badreflectcallⁱᵐᵖˡ : val.

Axiom badmorestackg0ⁱᵐᵖˡ : val.

Axiom badmorestackgsignalⁱᵐᵖˡ : val.

Axiom badctxtⁱᵐᵖˡ : val.

Axiom switchToCrashStackⁱᵐᵖˡ : val.

Axiom switchToCrashStack0ⁱᵐᵖˡ : val.

Axiom lockedOSThreadⁱᵐᵖˡ : val.

Axiom allgaddⁱᵐᵖˡ : val.

Axiom allGsSnapshotⁱᵐᵖˡ : val.

Axiom atomicAllGⁱᵐᵖˡ : val.

Axiom atomicAllGIndexⁱᵐᵖˡ : val.

Axiom forEachGⁱᵐᵖˡ : val.

Axiom forEachGRaceⁱᵐᵖˡ : val.

Axiom cpuinitⁱᵐᵖˡ : val.

Axiom getGodebugEarlyⁱᵐᵖˡ : val.

Axiom schedinitⁱᵐᵖˡ : val.

Axiom dumpgstatusⁱᵐᵖˡ : val.

Axiom checkmcountⁱᵐᵖˡ : val.

Axiom mReserveIDⁱᵐᵖˡ : val.

Axiom mcommoninitⁱᵐᵖˡ : val.

Axiom mProfStackInitⁱᵐᵖˡ : val.

Axiom makeProfStackFPⁱᵐᵖˡ : val.

Axiom makeProfStackⁱᵐᵖˡ : val.

Axiom pprof_makeProfStackⁱᵐᵖˡ : val.

Axiom readyⁱᵐᵖˡ : val.

Axiom freezetheworldⁱᵐᵖˡ : val.

Axiom readgstatusⁱᵐᵖˡ : val.

Axiom casfrom_Gscanstatusⁱᵐᵖˡ : val.

Axiom castogscanstatusⁱᵐᵖˡ : val.

Axiom casgstatusⁱᵐᵖˡ : val.

Axiom casGToWaitingⁱᵐᵖˡ : val.

Axiom casGToWaitingForSuspendGⁱᵐᵖˡ : val.

Axiom casGToPreemptScanⁱᵐᵖˡ : val.

Axiom casGFromPreemptedⁱᵐᵖˡ : val.

Axiom stopTheWorldⁱᵐᵖˡ : val.

Axiom startTheWorldⁱᵐᵖˡ : val.

Axiom stopTheWorldGCⁱᵐᵖˡ : val.

Axiom startTheWorldGCⁱᵐᵖˡ : val.

Axiom stopTheWorldWithSemaⁱᵐᵖˡ : val.

Axiom startTheWorldWithSemaⁱᵐᵖˡ : val.

Axiom usesLibcallⁱᵐᵖˡ : val.

Axiom mStackIsSystemAllocatedⁱᵐᵖˡ : val.

Axiom mstartⁱᵐᵖˡ : val.

Axiom mstart0ⁱᵐᵖˡ : val.

Axiom mstart1ⁱᵐᵖˡ : val.

Axiom mstartm0ⁱᵐᵖˡ : val.

Axiom mParkⁱᵐᵖˡ : val.

Axiom mexitⁱᵐᵖˡ : val.

Axiom forEachPⁱᵐᵖˡ : val.

Axiom forEachPInternalⁱᵐᵖˡ : val.

Axiom runSafePointFnⁱᵐᵖˡ : val.

Axiom allocmⁱᵐᵖˡ : val.

Axiom needmⁱᵐᵖˡ : val.

Axiom needAndBindMⁱᵐᵖˡ : val.

Axiom newextramⁱᵐᵖˡ : val.

Axiom oneNewExtraMⁱᵐᵖˡ : val.

Axiom dropmⁱᵐᵖˡ : val.

Axiom cgoBindMⁱᵐᵖˡ : val.

Axiom getmⁱᵐᵖˡ : val.

Axiom lockextraⁱᵐᵖˡ : val.

Axiom unlockextraⁱᵐᵖˡ : val.

Axiom getExtraMⁱᵐᵖˡ : val.

Axiom putExtraMⁱᵐᵖˡ : val.

Axiom addExtraMⁱᵐᵖˡ : val.

Axiom newmⁱᵐᵖˡ : val.

Axiom newm1ⁱᵐᵖˡ : val.

Axiom startTemplateThreadⁱᵐᵖˡ : val.

Axiom templateThreadⁱᵐᵖˡ : val.

Axiom stopmⁱᵐᵖˡ : val.

Axiom mspinningⁱᵐᵖˡ : val.

Axiom startmⁱᵐᵖˡ : val.

Axiom handoffpⁱᵐᵖˡ : val.

Axiom wakepⁱᵐᵖˡ : val.

Axiom stoplockedmⁱᵐᵖˡ : val.

Axiom startlockedmⁱᵐᵖˡ : val.

Axiom gcstopmⁱᵐᵖˡ : val.

Axiom executeⁱᵐᵖˡ : val.

Axiom findRunnableⁱᵐᵖˡ : val.

Axiom pollWorkⁱᵐᵖˡ : val.

Axiom stealWorkⁱᵐᵖˡ : val.

Axiom checkRunqsNoPⁱᵐᵖˡ : val.

Axiom checkTimersNoPⁱᵐᵖˡ : val.

Axiom checkIdleGCNoPⁱᵐᵖˡ : val.

Axiom wakeNetPollerⁱᵐᵖˡ : val.

Axiom resetspinningⁱᵐᵖˡ : val.

Axiom injectglistⁱᵐᵖˡ : val.

Axiom scheduleⁱᵐᵖˡ : val.

Axiom dropgⁱᵐᵖˡ : val.

Axiom parkunlock_cⁱᵐᵖˡ : val.

Axiom park_mⁱᵐᵖˡ : val.

Axiom goschedImplⁱᵐᵖˡ : val.

Axiom gosched_mⁱᵐᵖˡ : val.

Axiom goschedguarded_mⁱᵐᵖˡ : val.

Axiom gopreempt_mⁱᵐᵖˡ : val.

Axiom preemptParkⁱᵐᵖˡ : val.

Axiom goyieldⁱᵐᵖˡ : val.

Axiom goyield_mⁱᵐᵖˡ : val.

Axiom goexit1ⁱᵐᵖˡ : val.

Axiom goexit0ⁱᵐᵖˡ : val.

Axiom gdestroyⁱᵐᵖˡ : val.

Axiom saveⁱᵐᵖˡ : val.

Axiom reentersyscallⁱᵐᵖˡ : val.

Axiom entersyscallⁱᵐᵖˡ : val.

Axiom entersyscall_sysmonⁱᵐᵖˡ : val.

Axiom entersyscall_gcwaitⁱᵐᵖˡ : val.

Axiom entersyscallblockⁱᵐᵖˡ : val.

Axiom entersyscallblock_handoffⁱᵐᵖˡ : val.

Axiom exitsyscallⁱᵐᵖˡ : val.

Axiom exitsyscallfastⁱᵐᵖˡ : val.

Axiom exitsyscallfast_reacquiredⁱᵐᵖˡ : val.

Axiom exitsyscallfast_pidleⁱᵐᵖˡ : val.

Axiom exitsyscall0ⁱᵐᵖˡ : val.

Axiom syscall_runtime_BeforeForkⁱᵐᵖˡ : val.

Axiom syscall_runtime_AfterForkⁱᵐᵖˡ : val.

Axiom syscall_runtime_AfterForkInChildⁱᵐᵖˡ : val.

Axiom syscall_runtime_BeforeExecⁱᵐᵖˡ : val.

Axiom syscall_runtime_AfterExecⁱᵐᵖˡ : val.

Axiom malgⁱᵐᵖˡ : val.

Axiom newprocⁱᵐᵖˡ : val.

Axiom newproc1ⁱᵐᵖˡ : val.

Axiom saveAncestorsⁱᵐᵖˡ : val.

Axiom gfputⁱᵐᵖˡ : val.

Axiom gfgetⁱᵐᵖˡ : val.

Axiom gfpurgeⁱᵐᵖˡ : val.

Axiom Breakpointⁱᵐᵖˡ : val.

Axiom dolockOSThreadⁱᵐᵖˡ : val.

Axiom LockOSThreadⁱᵐᵖˡ : val.

Axiom lockOSThreadⁱᵐᵖˡ : val.

Axiom dounlockOSThreadⁱᵐᵖˡ : val.

Axiom UnlockOSThreadⁱᵐᵖˡ : val.

Axiom unlockOSThreadⁱᵐᵖˡ : val.

Axiom badunlockosthreadⁱᵐᵖˡ : val.

Axiom gcountⁱᵐᵖˡ : val.

Axiom mcountⁱᵐᵖˡ : val.

Axiom _Systemⁱᵐᵖˡ : val.

Axiom _ExternalCodeⁱᵐᵖˡ : val.

Axiom _LostExternalCodeⁱᵐᵖˡ : val.

Axiom _GCⁱᵐᵖˡ : val.

Axiom _LostSIGPROFDuringAtomic64ⁱᵐᵖˡ : val.

Axiom _LostContendedRuntimeLockⁱᵐᵖˡ : val.

Axiom _VDSOⁱᵐᵖˡ : val.

Axiom sigprofⁱᵐᵖˡ : val.

Axiom setcpuprofilerateⁱᵐᵖˡ : val.

Axiom procresizeⁱᵐᵖˡ : val.

Axiom acquirepⁱᵐᵖˡ : val.

Axiom wirepⁱᵐᵖˡ : val.

Axiom releasepⁱᵐᵖˡ : val.

Axiom releasepNoTraceⁱᵐᵖˡ : val.

Axiom incidlelockedⁱᵐᵖˡ : val.

Axiom checkdeadⁱᵐᵖˡ : val.

Axiom sysmonⁱᵐᵖˡ : val.

Axiom retakeⁱᵐᵖˡ : val.

Axiom preemptallⁱᵐᵖˡ : val.

Axiom preemptoneⁱᵐᵖˡ : val.

Axiom schedtraceⁱᵐᵖˡ : val.

Axiom schedEnableUserⁱᵐᵖˡ : val.

Axiom schedEnabledⁱᵐᵖˡ : val.

Axiom mputⁱᵐᵖˡ : val.

Axiom mgetⁱᵐᵖˡ : val.

Axiom globrunqputⁱᵐᵖˡ : val.

Axiom globrunqputheadⁱᵐᵖˡ : val.

Axiom globrunqputbatchⁱᵐᵖˡ : val.

Axiom globrunqgetⁱᵐᵖˡ : val.

Axiom pidleputⁱᵐᵖˡ : val.

Axiom pidlegetⁱᵐᵖˡ : val.

Axiom pidlegetSpinningⁱᵐᵖˡ : val.

Axiom runqemptyⁱᵐᵖˡ : val.

Axiom runqputⁱᵐᵖˡ : val.

Axiom runqputslowⁱᵐᵖˡ : val.

Axiom runqputbatchⁱᵐᵖˡ : val.

Axiom runqgetⁱᵐᵖˡ : val.

Axiom runqdrainⁱᵐᵖˡ : val.

Axiom runqgrabⁱᵐᵖˡ : val.

Axiom runqstealⁱᵐᵖˡ : val.

Axiom setMaxThreadsⁱᵐᵖˡ : val.

Axiom procPinⁱᵐᵖˡ : val.

Axiom procUnpinⁱᵐᵖˡ : val.

Axiom sync_runtime_procPinⁱᵐᵖˡ : val.

Axiom sync_runtime_procUnpinⁱᵐᵖˡ : val.

Axiom sync_atomic_runtime_procPinⁱᵐᵖˡ : val.

Axiom sync_atomic_runtime_procUnpinⁱᵐᵖˡ : val.

Axiom internal_sync_runtime_canSpinⁱᵐᵖˡ : val.

Axiom internal_sync_runtime_doSpinⁱᵐᵖˡ : val.

Axiom sync_runtime_canSpinⁱᵐᵖˡ : val.

Axiom sync_runtime_doSpinⁱᵐᵖˡ : val.

Axiom gcdⁱᵐᵖˡ : val.

Axiom doInitⁱᵐᵖˡ : val.

Axiom doInit1ⁱᵐᵖˡ : val.

Axiom countSubⁱᵐᵖˡ : val.

Axiom newProfBufⁱᵐᵖˡ : val.

Axiom runtime_setProfLabelⁱᵐᵖˡ : val.

Axiom runtime_getProfLabelⁱᵐᵖˡ : val.

Axiom raceReadObjectPCⁱᵐᵖˡ : val.

Axiom raceWriteObjectPCⁱᵐᵖˡ : val.

Axiom raceinitⁱᵐᵖˡ : val.

Axiom racefiniⁱᵐᵖˡ : val.

Axiom raceproccreateⁱᵐᵖˡ : val.

Axiom raceprocdestroyⁱᵐᵖˡ : val.

Axiom racemapshadowⁱᵐᵖˡ : val.

Axiom racewritepcⁱᵐᵖˡ : val.

Axiom racereadpcⁱᵐᵖˡ : val.

Axiom racereadrangepcⁱᵐᵖˡ : val.

Axiom racewriterangepcⁱᵐᵖˡ : val.

Axiom raceacquireⁱᵐᵖˡ : val.

Axiom raceacquiregⁱᵐᵖˡ : val.

Axiom raceacquirectxⁱᵐᵖˡ : val.

Axiom racereleaseⁱᵐᵖˡ : val.

Axiom racereleasegⁱᵐᵖˡ : val.

Axiom racereleaseacquireⁱᵐᵖˡ : val.

Axiom racereleaseacquiregⁱᵐᵖˡ : val.

Axiom racereleasemergeⁱᵐᵖˡ : val.

Axiom racereleasemergegⁱᵐᵖˡ : val.

Axiom racefingoⁱᵐᵖˡ : val.

Axiom racemallocⁱᵐᵖˡ : val.

Axiom racefreeⁱᵐᵖˡ : val.

Axiom racegostartⁱᵐᵖˡ : val.

Axiom racegoendⁱᵐᵖˡ : val.

Axiom racectxendⁱᵐᵖˡ : val.

Axiom randinitⁱᵐᵖˡ : val.

Axiom readTimeRandomⁱᵐᵖˡ : val.

Axiom allZeroⁱᵐᵖˡ : val.

Axiom bootstrapRandⁱᵐᵖˡ : val.

Axiom bootstrapRandReseedⁱᵐᵖˡ : val.

Axiom rand32ⁱᵐᵖˡ : val.

Axiom randⁱᵐᵖˡ : val.

Axiom maps_randⁱᵐᵖˡ : val.

Axiom mrandinitⁱᵐᵖˡ : val.

Axiom randnⁱᵐᵖˡ : val.

Axiom cheaprandⁱᵐᵖˡ : val.

Axiom cheaprand64ⁱᵐᵖˡ : val.

Axiom cheaprandnⁱᵐᵖˡ : val.

Axiom legacy_fastrandⁱᵐᵖˡ : val.

Axiom legacy_fastrandnⁱᵐᵖˡ : val.

Axiom legacy_fastrand64ⁱᵐᵖˡ : val.

Axiom setMaxStackⁱᵐᵖˡ : val.

Axiom setPanicOnFaultⁱᵐᵖˡ : val.

Axiom retryOnEAGAINⁱᵐᵖˡ : val.

Axiom ticksPerSecondⁱᵐᵖˡ : val.

Axiom syscall_runtime_envsⁱᵐᵖˡ : val.

Axiom syscall_Getpagesizeⁱᵐᵖˡ : val.

Axiom os_runtime_argsⁱᵐᵖˡ : val.

Axiom syscall_Exitⁱᵐᵖˡ : val.

Axiom godebug_setUpdateⁱᵐᵖˡ : val.

Axiom godebug_setNewIncNonDefaultⁱᵐᵖˡ : val.

Axiom godebugNotifyⁱᵐᵖˡ : val.

Axiom syscall_runtimeSetenvⁱᵐᵖˡ : val.

Axiom syscall_runtimeUnsetenvⁱᵐᵖˡ : val.

Axiom writeErrStrⁱᵐᵖˡ : val.

Axiom writeErrDataⁱᵐᵖˡ : val.

Axiom setCrashFDⁱᵐᵖˡ : val.

Axiom getAuxvⁱᵐᵖˡ : val.

Axiom gotracebackⁱᵐᵖˡ : val.

Axiom argv_indexⁱᵐᵖˡ : val.

Axiom argsⁱᵐᵖˡ : val.

Axiom goargsⁱᵐᵖˡ : val.

Axiom goenvs_unixⁱᵐᵖˡ : val.

Axiom environⁱᵐᵖˡ : val.

Axiom testAtomic64ⁱᵐᵖˡ : val.

Axiom checkⁱᵐᵖˡ : val.

Axiom parsedebugvarsⁱᵐᵖˡ : val.

Axiom reparsedebugvarsⁱᵐᵖˡ : val.

Axiom parsegodebugⁱᵐᵖˡ : val.

Axiom setTracebackⁱᵐᵖˡ : val.

Axiom timedivⁱᵐᵖˡ : val.

Axiom acquiremⁱᵐᵖˡ : val.

Axiom releasemⁱᵐᵖˡ : val.

Axiom reflect_typelinksⁱᵐᵖˡ : val.

Axiom reflect_resolveNameOffⁱᵐᵖˡ : val.

Axiom reflect_resolveTypeOffⁱᵐᵖˡ : val.

Axiom reflect_resolveTextOffⁱᵐᵖˡ : val.

Axiom reflectlite_resolveNameOffⁱᵐᵖˡ : val.

Axiom reflectlite_resolveTypeOffⁱᵐᵖˡ : val.

Axiom reflect_addReflectOffⁱᵐᵖˡ : val.

Axiom fips_getIndicatorⁱᵐᵖˡ : val.

Axiom fips_setIndicatorⁱᵐᵖˡ : val.

Axiom efaceOfⁱᵐᵖˡ : val.

Axiom setGNoWBⁱᵐᵖˡ : val.

Axiom setMNoWBⁱᵐᵖˡ : val.

Axiom getcallerfpⁱᵐᵖˡ : val.

Axiom boring_runtime_arg0ⁱᵐᵖˡ : val.

Axiom fipstls_runtime_arg0ⁱᵐᵖˡ : val.

Axiom initSecureModeⁱᵐᵖˡ : val.

Axiom isSecureModeⁱᵐᵖˡ : val.

Axiom secureⁱᵐᵖˡ : val.

Axiom secureEnvⁱᵐᵖˡ : val.

Axiom selectsetpcⁱᵐᵖˡ : val.

Axiom sellockⁱᵐᵖˡ : val.

Axiom selunlockⁱᵐᵖˡ : val.

Axiom selparkcommitⁱᵐᵖˡ : val.

Axiom blockⁱᵐᵖˡ : val.

Axiom selectgoⁱᵐᵖˡ : val.

Axiom reflect_rselectⁱᵐᵖˡ : val.

Axiom sync_runtime_Semacquireⁱᵐᵖˡ : val.

Axiom poll_runtime_Semacquireⁱᵐᵖˡ : val.

Axiom sync_runtime_Semreleaseⁱᵐᵖˡ : val.

Axiom internal_sync_runtime_SemacquireMutexⁱᵐᵖˡ : val.

Axiom sync_runtime_SemacquireRWMutexRⁱᵐᵖˡ : val.

Axiom sync_runtime_SemacquireRWMutexⁱᵐᵖˡ : val.

Axiom sync_runtime_SemacquireWaitGroupⁱᵐᵖˡ : val.

Axiom poll_runtime_Semreleaseⁱᵐᵖˡ : val.

Axiom internal_sync_runtime_Semreleaseⁱᵐᵖˡ : val.

Axiom readyWithTimeⁱᵐᵖˡ : val.

Axiom semacquireⁱᵐᵖˡ : val.

Axiom semacquire1ⁱᵐᵖˡ : val.

Axiom semreleaseⁱᵐᵖˡ : val.

Axiom semrelease1ⁱᵐᵖˡ : val.

Axiom cansemacquireⁱᵐᵖˡ : val.

Axiom lessⁱᵐᵖˡ : val.

Axiom notifyListAddⁱᵐᵖˡ : val.

Axiom notifyListWaitⁱᵐᵖˡ : val.

Axiom notifyListNotifyAllⁱᵐᵖˡ : val.

Axiom notifyListNotifyOneⁱᵐᵖˡ : val.

Axiom notifyListCheckⁱᵐᵖˡ : val.

Axiom internal_sync_nanotimeⁱᵐᵖˡ : val.

Axiom dumpregsⁱᵐᵖˡ : val.

Axiom os_sigpipeⁱᵐᵖˡ : val.

Axiom signameⁱᵐᵖˡ : val.

Axiom initsigⁱᵐᵖˡ : val.

Axiom sigInstallGoHandlerⁱᵐᵖˡ : val.

Axiom sigenableⁱᵐᵖˡ : val.

Axiom sigdisableⁱᵐᵖˡ : val.

Axiom sigignoreⁱᵐᵖˡ : val.

Axiom clearSignalHandlersⁱᵐᵖˡ : val.

Axiom setProcessCPUProfilerTimerⁱᵐᵖˡ : val.

Axiom setThreadCPUProfilerHzⁱᵐᵖˡ : val.

Axiom sigpipeⁱᵐᵖˡ : val.

Axiom doSigPreemptⁱᵐᵖˡ : val.

Axiom preemptMⁱᵐᵖˡ : val.

Axiom sigFetchGⁱᵐᵖˡ : val.

Axiom sigtrampgoⁱᵐᵖˡ : val.

Axiom sigprofNonGoⁱᵐᵖˡ : val.

Axiom sigprofNonGoPCⁱᵐᵖˡ : val.

Axiom adjustSignalStackⁱᵐᵖˡ : val.

Axiom adjustSignalStack2ⁱᵐᵖˡ : val.

Axiom ignoreSIGSYSⁱᵐᵖˡ : val.

Axiom restoreSIGSYSⁱᵐᵖˡ : val.

Axiom sighandlerⁱᵐᵖˡ : val.

Axiom fatalsignalⁱᵐᵖˡ : val.

Axiom sigpanicⁱᵐᵖˡ : val.

Axiom dieFromSignalⁱᵐᵖˡ : val.

Axiom raisebadsignalⁱᵐᵖˡ : val.

Axiom crashⁱᵐᵖˡ : val.

Axiom ensureSigMⁱᵐᵖˡ : val.

Axiom noSignalStackⁱᵐᵖˡ : val.

Axiom sigNotOnStackⁱᵐᵖˡ : val.

Axiom signalDuringForkⁱᵐᵖˡ : val.

Axiom badsignalⁱᵐᵖˡ : val.

Axiom sigfwdⁱᵐᵖˡ : val.

Axiom sigfwdgoⁱᵐᵖˡ : val.

Axiom sigsaveⁱᵐᵖˡ : val.

Axiom msigrestoreⁱᵐᵖˡ : val.

Axiom sigblockⁱᵐᵖˡ : val.

Axiom unblocksigⁱᵐᵖˡ : val.

Axiom minitSignalsⁱᵐᵖˡ : val.

Axiom minitSignalStackⁱᵐᵖˡ : val.

Axiom minitSignalMaskⁱᵐᵖˡ : val.

Axiom unminitSignalsⁱᵐᵖˡ : val.

Axiom blockableSigⁱᵐᵖˡ : val.

Axiom setGsignalStackⁱᵐᵖˡ : val.

Axiom restoreGsignalStackⁱᵐᵖˡ : val.

Axiom signalstackⁱᵐᵖˡ : val.

Axiom setsigsegvⁱᵐᵖˡ : val.

Axiom sigsendⁱᵐᵖˡ : val.

Axiom signal_recvⁱᵐᵖˡ : val.

Axiom signalWaitUntilIdleⁱᵐᵖˡ : val.

Axiom signal_enableⁱᵐᵖˡ : val.

Axiom signal_disableⁱᵐᵖˡ : val.

Axiom signal_ignoreⁱᵐᵖˡ : val.

Axiom sigInitIgnoredⁱᵐᵖˡ : val.

Axiom signal_ignoredⁱᵐᵖˡ : val.

Axiom sigNoteSetupⁱᵐᵖˡ : val.

Axiom sigNoteSleepⁱᵐᵖˡ : val.

Axiom sigNoteWakeupⁱᵐᵖˡ : val.

Axiom panicmakeslicelenⁱᵐᵖˡ : val.

Axiom panicmakeslicecapⁱᵐᵖˡ : val.

Axiom makeslicecopyⁱᵐᵖˡ : val.

Axiom makesliceⁱᵐᵖˡ : val.

Axiom makeslice64ⁱᵐᵖˡ : val.

Axiom growsliceⁱᵐᵖˡ : val.

Axiom nextslicecapⁱᵐᵖˡ : val.

Axiom reflect_growsliceⁱᵐᵖˡ : val.

Axiom isPowerOfTwoⁱᵐᵖˡ : val.

Axiom slicecopyⁱᵐᵖˡ : val.

Axiom bytealg_MakeNoZeroⁱᵐᵖˡ : val.

Axiom funpack64ⁱᵐᵖˡ : val.

Axiom funpack32ⁱᵐᵖˡ : val.

Axiom fpack64ⁱᵐᵖˡ : val.

Axiom fpack32ⁱᵐᵖˡ : val.

Axiom fadd64ⁱᵐᵖˡ : val.

Axiom fsub64ⁱᵐᵖˡ : val.

Axiom fneg64ⁱᵐᵖˡ : val.

Axiom fmul64ⁱᵐᵖˡ : val.

Axiom fdiv64ⁱᵐᵖˡ : val.

Axiom f64to32ⁱᵐᵖˡ : val.

Axiom f32to64ⁱᵐᵖˡ : val.

Axiom fcmp64ⁱᵐᵖˡ : val.

Axiom f64tointⁱᵐᵖˡ : val.

Axiom fintto64ⁱᵐᵖˡ : val.

Axiom fintto32ⁱᵐᵖˡ : val.

Axiom mulluⁱᵐᵖˡ : val.

Axiom divluⁱᵐᵖˡ : val.

Axiom fadd32ⁱᵐᵖˡ : val.

Axiom fmul32ⁱᵐᵖˡ : val.

Axiom fdiv32ⁱᵐᵖˡ : val.

Axiom feq32ⁱᵐᵖˡ : val.

Axiom fgt32ⁱᵐᵖˡ : val.

Axiom fge32ⁱᵐᵖˡ : val.

Axiom feq64ⁱᵐᵖˡ : val.

Axiom fgt64ⁱᵐᵖˡ : val.

Axiom fge64ⁱᵐᵖˡ : val.

Axiom fint32to32ⁱᵐᵖˡ : val.

Axiom fint32to64ⁱᵐᵖˡ : val.

Axiom fint64to32ⁱᵐᵖˡ : val.

Axiom fint64to64ⁱᵐᵖˡ : val.

Axiom f32toint32ⁱᵐᵖˡ : val.

Axiom f32toint64ⁱᵐᵖˡ : val.

Axiom f64toint32ⁱᵐᵖˡ : val.

Axiom f64toint64ⁱᵐᵖˡ : val.

Axiom f64touint64ⁱᵐᵖˡ : val.

Axiom f32touint64ⁱᵐᵖˡ : val.

Axiom fuint64to64ⁱᵐᵖˡ : val.

Axiom fuint64to32ⁱᵐᵖˡ : val.

Axiom stackinitⁱᵐᵖˡ : val.

Axiom stacklog2ⁱᵐᵖˡ : val.

Axiom stackpoolallocⁱᵐᵖˡ : val.

Axiom stackpoolfreeⁱᵐᵖˡ : val.

Axiom stackcacherefillⁱᵐᵖˡ : val.

Axiom stackcachereleaseⁱᵐᵖˡ : val.

Axiom stackcache_clearⁱᵐᵖˡ : val.

Axiom stackallocⁱᵐᵖˡ : val.

Axiom stackfreeⁱᵐᵖˡ : val.

Axiom adjustpointerⁱᵐᵖˡ : val.

Axiom adjustpointersⁱᵐᵖˡ : val.

Axiom adjustframeⁱᵐᵖˡ : val.

Axiom adjustctxtⁱᵐᵖˡ : val.

Axiom adjustdefersⁱᵐᵖˡ : val.

Axiom adjustpanicsⁱᵐᵖˡ : val.

Axiom adjustsudogsⁱᵐᵖˡ : val.

Axiom fillstackⁱᵐᵖˡ : val.

Axiom findsghiⁱᵐᵖˡ : val.

Axiom syncadjustsudogsⁱᵐᵖˡ : val.

Axiom copystackⁱᵐᵖˡ : val.

Axiom round2ⁱᵐᵖˡ : val.

Axiom newstackⁱᵐᵖˡ : val.

Axiom nilfuncⁱᵐᵖˡ : val.

Axiom gostartcallfnⁱᵐᵖˡ : val.

Axiom isShrinkStackSafeⁱᵐᵖˡ : val.

Axiom shrinkstackⁱᵐᵖˡ : val.

Axiom freeStackSpansⁱᵐᵖˡ : val.

Axiom morestackcⁱᵐᵖˡ : val.

Axiom gcComputeStartingStackSizeⁱᵐᵖˡ : val.

Axiom stkobjinitⁱᵐᵖˡ : val.

Axiom concatstringsⁱᵐᵖˡ : val.

Axiom concatstring2ⁱᵐᵖˡ : val.

Axiom concatstring3ⁱᵐᵖˡ : val.

Axiom concatstring4ⁱᵐᵖˡ : val.

Axiom concatstring5ⁱᵐᵖˡ : val.

Axiom concatbytesⁱᵐᵖˡ : val.

Axiom concatbyte2ⁱᵐᵖˡ : val.

Axiom concatbyte3ⁱᵐᵖˡ : val.

Axiom concatbyte4ⁱᵐᵖˡ : val.

Axiom concatbyte5ⁱᵐᵖˡ : val.

Axiom slicebytetostringⁱᵐᵖˡ : val.

Axiom stringDataOnStackⁱᵐᵖˡ : val.

Axiom rawstringtmpⁱᵐᵖˡ : val.

Axiom slicebytetostringtmpⁱᵐᵖˡ : val.

Axiom stringtoslicebyteⁱᵐᵖˡ : val.

Axiom stringtosliceruneⁱᵐᵖˡ : val.

Axiom slicerunetostringⁱᵐᵖˡ : val.

Axiom stringStructOfⁱᵐᵖˡ : val.

Axiom intstringⁱᵐᵖˡ : val.

Axiom rawstringⁱᵐᵖˡ : val.

Axiom rawbytesliceⁱᵐᵖˡ : val.

Axiom rawrunesliceⁱᵐᵖˡ : val.

Axiom gobytesⁱᵐᵖˡ : val.

Axiom gostringⁱᵐᵖˡ : val.

Axiom internal_syscall_gostringⁱᵐᵖˡ : val.

Axiom gostringnⁱᵐᵖˡ : val.

Axiom atoi64ⁱᵐᵖˡ : val.

Axiom atoiⁱᵐᵖˡ : val.

Axiom atoi32ⁱᵐᵖˡ : val.

Axiom parseByteCountⁱᵐᵖˡ : val.

Axiom findnullⁱᵐᵖˡ : val.

Axiom findnullwⁱᵐᵖˡ : val.

Axiom gostringnocopyⁱᵐᵖˡ : val.

Axiom gostringwⁱᵐᵖˡ : val.

Axiom addⁱᵐᵖˡ : val.

Axiom getgⁱᵐᵖˡ : val.

Axiom mcallⁱᵐᵖˡ : val.

Axiom systemstackⁱᵐᵖˡ : val.

Axiom badsystemstackⁱᵐᵖˡ : val.

Axiom memclrNoHeapPointersⁱᵐᵖˡ : val.

Axiom reflect_memclrNoHeapPointersⁱᵐᵖˡ : val.

Axiom memmoveⁱᵐᵖˡ : val.

Axiom reflect_memmoveⁱᵐᵖˡ : val.

Axiom memequalⁱᵐᵖˡ : val.

Axiom noescapeⁱᵐᵖˡ : val.

Axiom noEscapePtrⁱᵐᵖˡ : val.

Axiom cgocallbackⁱᵐᵖˡ : val.

Axiom gogoⁱᵐᵖˡ : val.

Axiom asminitⁱᵐᵖˡ : val.

Axiom setgⁱᵐᵖˡ : val.

Axiom breakpointⁱᵐᵖˡ : val.

Axiom reflectcallⁱᵐᵖˡ : val.

Axiom procyieldⁱᵐᵖˡ : val.

Axiom goexitⁱᵐᵖˡ : val.

Axiom publicationBarrierⁱᵐᵖˡ : val.

Axiom asmcgocallⁱᵐᵖˡ : val.

Axiom morestackⁱᵐᵖˡ : val.

Axiom morestack_noctxtⁱᵐᵖˡ : val.

Axiom rt0_goⁱᵐᵖˡ : val.

Axiom return0ⁱᵐᵖˡ : val.

Axiom call16ⁱᵐᵖˡ : val.

Axiom call32ⁱᵐᵖˡ : val.

Axiom call64ⁱᵐᵖˡ : val.

Axiom call128ⁱᵐᵖˡ : val.

Axiom call256ⁱᵐᵖˡ : val.

Axiom call512ⁱᵐᵖˡ : val.

Axiom call1024ⁱᵐᵖˡ : val.

Axiom call2048ⁱᵐᵖˡ : val.

Axiom call4096ⁱᵐᵖˡ : val.

Axiom call8192ⁱᵐᵖˡ : val.

Axiom call16384ⁱᵐᵖˡ : val.

Axiom call32768ⁱᵐᵖˡ : val.

Axiom call65536ⁱᵐᵖˡ : val.

Axiom call131072ⁱᵐᵖˡ : val.

Axiom call262144ⁱᵐᵖˡ : val.

Axiom call524288ⁱᵐᵖˡ : val.

Axiom call1048576ⁱᵐᵖˡ : val.

Axiom call2097152ⁱᵐᵖˡ : val.

Axiom call4194304ⁱᵐᵖˡ : val.

Axiom call8388608ⁱᵐᵖˡ : val.

Axiom call16777216ⁱᵐᵖˡ : val.

Axiom call33554432ⁱᵐᵖˡ : val.

Axiom call67108864ⁱᵐᵖˡ : val.

Axiom call134217728ⁱᵐᵖˡ : val.

Axiom call268435456ⁱᵐᵖˡ : val.

Axiom call536870912ⁱᵐᵖˡ : val.

Axiom call1073741824ⁱᵐᵖˡ : val.

Axiom systemstack_switchⁱᵐᵖˡ : val.

Axiom alignUpⁱᵐᵖˡ : val.

Axiom alignDownⁱᵐᵖˡ : val.

Axiom divRoundUpⁱᵐᵖˡ : val.

Axiom checkASMⁱᵐᵖˡ : val.

Axiom memequal_varlenⁱᵐᵖˡ : val.

Axiom bool2intⁱᵐᵖˡ : val.

Axiom abortⁱᵐᵖˡ : val.

Axiom gcWriteBarrier1ⁱᵐᵖˡ : val.

Axiom gcWriteBarrier2ⁱᵐᵖˡ : val.

Axiom gcWriteBarrier3ⁱᵐᵖˡ : val.

Axiom gcWriteBarrier4ⁱᵐᵖˡ : val.

Axiom gcWriteBarrier5ⁱᵐᵖˡ : val.

Axiom gcWriteBarrier6ⁱᵐᵖˡ : val.

Axiom gcWriteBarrier7ⁱᵐᵖˡ : val.

Axiom gcWriteBarrier8ⁱᵐᵖˡ : val.

Axiom duffzeroⁱᵐᵖˡ : val.

Axiom duffcopyⁱᵐᵖˡ : val.

Axiom addmoduledataⁱᵐᵖˡ : val.

Axiom sigpanic0ⁱᵐᵖˡ : val.

Axiom readⁱᵐᵖˡ : val.

Axiom closefdⁱᵐᵖˡ : val.

Axiom exitⁱᵐᵖˡ : val.

Axiom usleepⁱᵐᵖˡ : val.

Axiom usleep_no_gⁱᵐᵖˡ : val.

Axiom write1ⁱᵐᵖˡ : val.

Axiom openⁱᵐᵖˡ : val.

Axiom madviseⁱᵐᵖˡ : val.

Axiom exitThreadⁱᵐᵖˡ : val.

Axiom nanotime1ⁱᵐᵖˡ : val.

Axiom gcWriteBarrierCXⁱᵐᵖˡ : val.

Axiom gcWriteBarrierDXⁱᵐᵖˡ : val.

Axiom gcWriteBarrierBXⁱᵐᵖˡ : val.

Axiom gcWriteBarrierBPⁱᵐᵖˡ : val.

Axiom gcWriteBarrierSIⁱᵐᵖˡ : val.

Axiom gcWriteBarrierR8ⁱᵐᵖˡ : val.

Axiom gcWriteBarrierR9ⁱᵐᵖˡ : val.

Axiom stackcheckⁱᵐᵖˡ : val.

Axiom settlsⁱᵐᵖˡ : val.

Axiom retpolineAXⁱᵐᵖˡ : val.

Axiom retpolineCXⁱᵐᵖˡ : val.

Axiom retpolineDXⁱᵐᵖˡ : val.

Axiom retpolineBXⁱᵐᵖˡ : val.

Axiom retpolineBPⁱᵐᵖˡ : val.

Axiom retpolineSIⁱᵐᵖˡ : val.

Axiom retpolineDIⁱᵐᵖˡ : val.

Axiom retpolineR8ⁱᵐᵖˡ : val.

Axiom retpolineR9ⁱᵐᵖˡ : val.

Axiom retpolineR10ⁱᵐᵖˡ : val.

Axiom retpolineR11ⁱᵐᵖˡ : val.

Axiom retpolineR12ⁱᵐᵖˡ : val.

Axiom retpolineR13ⁱᵐᵖˡ : val.

Axiom retpolineR14ⁱᵐᵖˡ : val.

Axiom retpolineR15ⁱᵐᵖˡ : val.

Axiom asmcgocall_no_gⁱᵐᵖˡ : val.

Axiom asmcgocall_landingpadⁱᵐᵖˡ : val.

Axiom spillArgsⁱᵐᵖˡ : val.

Axiom unspillArgsⁱᵐᵖˡ : val.

Axiom getfpⁱᵐᵖˡ : val.

Axiom sbrk0ⁱᵐᵖˡ : val.

Axiom accessⁱᵐᵖˡ : val.

Axiom connectⁱᵐᵖˡ : val.

Axiom socketⁱᵐᵖˡ : val.

Axiom pauseⁱᵐᵖˡ : val.

Axiom CallersFramesⁱᵐᵖˡ : val.

Axiom runtime_FrameStartLineⁱᵐᵖˡ : val.

Axiom runtime_FrameSymbolNameⁱᵐᵖˡ : val.

Axiom runtime_expandFinalInlineFrameⁱᵐᵖˡ : val.

Axiom expandCgoFramesⁱᵐᵖˡ : val.

Axiom activeModulesⁱᵐᵖˡ : val.

Axiom modulesinitⁱᵐᵖˡ : val.

Axiom moduledataverifyⁱᵐᵖˡ : val.

Axiom moduledataverify1ⁱᵐᵖˡ : val.

Axiom FuncForPCⁱᵐᵖˡ : val.

Axiom findmoduledatapⁱᵐᵖˡ : val.

Axiom badFuncInfoEntryⁱᵐᵖˡ : val.

Axiom findfuncⁱᵐᵖˡ : val.

Axiom badSrcFuncNameⁱᵐᵖˡ : val.

Axiom pcvalueCacheKeyⁱᵐᵖˡ : val.

Axiom pcvalueⁱᵐᵖˡ : val.

Axiom funcnameⁱᵐᵖˡ : val.

Axiom funcpkgpathⁱᵐᵖˡ : val.

Axiom funcfileⁱᵐᵖˡ : val.

Axiom funcline1ⁱᵐᵖˡ : val.

Axiom funclineⁱᵐᵖˡ : val.

Axiom funcspdeltaⁱᵐᵖˡ : val.

Axiom funcMaxSPDeltaⁱᵐᵖˡ : val.

Axiom pcdatastartⁱᵐᵖˡ : val.

Axiom pcdatavalueⁱᵐᵖˡ : val.

Axiom pcdatavalue1ⁱᵐᵖˡ : val.

Axiom pcdatavalue2ⁱᵐᵖˡ : val.

Axiom funcdataⁱᵐᵖˡ : val.

Axiom stepⁱᵐᵖˡ : val.

Axiom readvarintⁱᵐᵖˡ : val.

Axiom stackmapdataⁱᵐᵖˡ : val.

Axiom newInlineUnwinderⁱᵐᵖˡ : val.

Axiom badSrcFuncⁱᵐᵖˡ : val.

Axiom synctestRunⁱᵐᵖˡ : val.

Axiom synctestidle_cⁱᵐᵖˡ : val.

Axiom synctestWaitⁱᵐᵖˡ : val.

Axiom synctestwait_cⁱᵐᵖˡ : val.

Axiom synctest_acquireⁱᵐᵖˡ : val.

Axiom synctest_releaseⁱᵐᵖˡ : val.

Axiom synctest_inBubbleⁱᵐᵖˡ : val.

Axiom prepGoExitFrameⁱᵐᵖˡ : val.

Axiom gostartcallⁱᵐᵖˡ : val.

Axiom taggedPointerPackⁱᵐᵖˡ : val.

Axiom testSPWriteⁱᵐᵖˡ : val.

Axiom time_runtimeNowⁱᵐᵖˡ : val.

Axiom time_runtimeNanoⁱᵐᵖˡ : val.

Axiom timeSleepⁱᵐᵖˡ : val.

Axiom resetForSleepⁱᵐᵖˡ : val.

Axiom newTimerⁱᵐᵖˡ : val.

Axiom stopTimerⁱᵐᵖˡ : val.

Axiom resetTimerⁱᵐᵖˡ : val.

Axiom goroutineReadyⁱᵐᵖˡ : val.

Axiom timeSleepUntilⁱᵐᵖˡ : val.

Axiom badTimerⁱᵐᵖˡ : val.

Axiom blockTimerChanⁱᵐᵖˡ : val.

Axiom unblockTimerChanⁱᵐᵖˡ : val.

Axiom nanotimeⁱᵐᵖˡ : val.

Axiom writeⁱᵐᵖˡ : val.

Axiom time_nowⁱᵐᵖˡ : val.

Axiom osSetupTLSⁱᵐᵖˡ : val.

Axiom StartTraceⁱᵐᵖˡ : val.

Axiom StopTraceⁱᵐᵖˡ : val.

Axiom traceAdvanceⁱᵐᵖˡ : val.

Axiom traceNextGenⁱᵐᵖˡ : val.

Axiom traceRegisterLabelsAndReasonsⁱᵐᵖˡ : val.

Axiom ReadTraceⁱᵐᵖˡ : val.

Axiom readTrace0ⁱᵐᵖˡ : val.

Axiom traceReaderⁱᵐᵖˡ : val.

Axiom traceReaderAvailableⁱᵐᵖˡ : val.

Axiom newWakeableSleepⁱᵐᵖˡ : val.

Axiom traceSnapshotMemoryⁱᵐᵖˡ : val.

Axiom traceSpanTypeAndClassⁱᵐᵖˡ : val.

Axiom traceSpanIDⁱᵐᵖˡ : val.

Axiom traceHeapObjectIDⁱᵐᵖˡ : val.

Axiom traceGoroutineStackIDⁱᵐᵖˡ : val.

Axiom traceCompressStackSizeⁱᵐᵖˡ : val.

Axiom tracebackPCsⁱᵐᵖˡ : val.

Axiom printArgsⁱᵐᵖˡ : val.

Axiom funcNamePiecesForPrintⁱᵐᵖˡ : val.

Axiom funcNameForPrintⁱᵐᵖˡ : val.

Axiom printFuncNameⁱᵐᵖˡ : val.

Axiom printcreatedbyⁱᵐᵖˡ : val.

Axiom printcreatedby1ⁱᵐᵖˡ : val.

Axiom tracebackⁱᵐᵖˡ : val.

Axiom tracebacktrapⁱᵐᵖˡ : val.

Axiom traceback1ⁱᵐᵖˡ : val.

Axiom traceback2ⁱᵐᵖˡ : val.

Axiom printAncestorTracebackⁱᵐᵖˡ : val.

Axiom printAncestorTracebackFuncInfoⁱᵐᵖˡ : val.

Axiom callersⁱᵐᵖˡ : val.

Axiom gcallersⁱᵐᵖˡ : val.

Axiom showframeⁱᵐᵖˡ : val.

Axiom showfuncinfoⁱᵐᵖˡ : val.

Axiom isExportedRuntimeⁱᵐᵖˡ : val.

Axiom elideWrapperCallingⁱᵐᵖˡ : val.

Axiom goroutineheaderⁱᵐᵖˡ : val.

Axiom tracebackothersⁱᵐᵖˡ : val.

Axiom tracebackHexdumpⁱᵐᵖˡ : val.

Axiom isSystemGoroutineⁱᵐᵖˡ : val.

Axiom SetCgoTracebackⁱᵐᵖˡ : val.

Axiom printCgoTracebackⁱᵐᵖˡ : val.

Axiom printOneCgoTracebackⁱᵐᵖˡ : val.

Axiom callCgoSymbolizerⁱᵐᵖˡ : val.

Axiom cgoContextPCsⁱᵐᵖˡ : val.

Axiom unsafeTraceWriterⁱᵐᵖˡ : val.

Axiom traceBufFlushⁱᵐᵖˡ : val.

Axiom traceInitReadCPUⁱᵐᵖˡ : val.

Axiom traceStartReadCPUⁱᵐᵖˡ : val.

Axiom traceStopReadCPUⁱᵐᵖˡ : val.

Axiom traceReadCPUⁱᵐᵖˡ : val.

Axiom traceCPUFlushⁱᵐᵖˡ : val.

Axiom traceCPUSampleⁱᵐᵖˡ : val.

Axiom unsafeTraceExpWriterⁱᵐᵖˡ : val.

Axiom traceLockInitⁱᵐᵖˡ : val.

Axiom lockRankMayTraceFlushⁱᵐᵖˡ : val.

Axiom traceEnabledⁱᵐᵖˡ : val.

Axiom traceAllocFreeEnabledⁱᵐᵖˡ : val.

Axiom traceShuttingDownⁱᵐᵖˡ : val.

Axiom traceAcquireⁱᵐᵖˡ : val.

Axiom traceAcquireEnabledⁱᵐᵖˡ : val.

Axiom traceReleaseⁱᵐᵖˡ : val.

Axiom traceExitingSyscallⁱᵐᵖˡ : val.

Axiom traceExitedSyscallⁱᵐᵖˡ : val.

Axiom trace_userTaskCreateⁱᵐᵖˡ : val.

Axiom trace_userTaskEndⁱᵐᵖˡ : val.

Axiom trace_userRegionⁱᵐᵖˡ : val.

Axiom trace_userLogⁱᵐᵖˡ : val.

Axiom traceThreadDestroyⁱᵐᵖˡ : val.

Axiom traceStackⁱᵐᵖˡ : val.

Axiom dumpStacksRecⁱᵐᵖˡ : val.

Axiom makeTraceFramesⁱᵐᵖˡ : val.

Axiom makeTraceFrameⁱᵐᵖˡ : val.

Axiom tracefpunwindoffⁱᵐᵖˡ : val.

Axiom fpTracebackPCsⁱᵐᵖˡ : val.

Axiom pprof_fpunwindExpandⁱᵐᵖˡ : val.

Axiom fpunwindExpandⁱᵐᵖˡ : val.

Axiom startPCForTraceⁱᵐᵖˡ : val.

Axiom goStatusToTraceGoStatusⁱᵐᵖˡ : val.

Axiom traceClockNowⁱᵐᵖˡ : val.

Axiom traceClockUnitsPerSecondⁱᵐᵖˡ : val.

Axiom traceFrequencyⁱᵐᵖˡ : val.

Axiom dumpTypesRecⁱᵐᵖˡ : val.

Axiom getGCMaskⁱᵐᵖˡ : val.

Axiom getGCMaskOnDemandⁱᵐᵖˡ : val.

Axiom buildGCMaskⁱᵐᵖˡ : val.

Axiom reflectOffsLockⁱᵐᵖˡ : val.

Axiom reflectOffsUnlockⁱᵐᵖˡ : val.

Axiom resolveNameOffⁱᵐᵖˡ : val.

Axiom resolveTypeOffⁱᵐᵖˡ : val.

Axiom pkgPathⁱᵐᵖˡ : val.

Axiom typelinksinitⁱᵐᵖˡ : val.

Axiom toRTypeⁱᵐᵖˡ : val.

Axiom typesEqualⁱᵐᵖˡ : val.

Axiom isDirectIfaceⁱᵐᵖˡ : val.

Axiom unsafestringⁱᵐᵖˡ : val.

Axiom unsafestring64ⁱᵐᵖˡ : val.

Axiom unsafestringcheckptrⁱᵐᵖˡ : val.

Axiom panicunsafestringlenⁱᵐᵖˡ : val.

Axiom panicunsafestringnilptrⁱᵐᵖˡ : val.

Axiom unsafesliceⁱᵐᵖˡ : val.

Axiom unsafeslice64ⁱᵐᵖˡ : val.

Axiom unsafeslicecheckptrⁱᵐᵖˡ : val.

Axiom panicunsafeslicelenⁱᵐᵖˡ : val.

Axiom panicunsafeslicelen1ⁱᵐᵖˡ : val.

Axiom panicunsafeslicenilptrⁱᵐᵖˡ : val.

Axiom panicunsafeslicenilptr1ⁱᵐᵖˡ : val.

Axiom reflect_unsafesliceⁱᵐᵖˡ : val.

Axiom countrunesⁱᵐᵖˡ : val.

Axiom decoderuneⁱᵐᵖˡ : val.

Axiom encoderuneⁱᵐᵖˡ : val.

Axiom _ELF_ST_BINDⁱᵐᵖˡ : val.

Axiom _ELF_ST_TYPEⁱᵐᵖˡ : val.

Axiom vdsoInitFromSysinfoEhdrⁱᵐᵖˡ : val.

Axiom vdsoFindVersionⁱᵐᵖˡ : val.

Axiom vdsoParseSymbolsⁱᵐᵖˡ : val.

Axiom vdsoauxvⁱᵐᵖˡ : val.

Axiom inVDSOPageⁱᵐᵖˡ : val.

Axiom vgetrandom1ⁱᵐᵖˡ : val.

Axiom vgetrandomInitⁱᵐᵖˡ : val.

Axiom vgetrandomGetStateⁱᵐᵖˡ : val.

Axiom vgetrandomDestroyⁱᵐᵖˡ : val.

Axiom vgetrandomⁱᵐᵖˡ : val.

Axiom writeErrⁱᵐᵖˡ : val.

Definition functions' : list (go_string * val) := [(memhash0, memhash0ⁱᵐᵖˡ); (memhash8, memhash8ⁱᵐᵖˡ); (memhash16, memhash16ⁱᵐᵖˡ); (memhash128, memhash128ⁱᵐᵖˡ); (memhash_varlen, memhash_varlenⁱᵐᵖˡ); (memhash, memhashⁱᵐᵖˡ); (memhash32, memhash32ⁱᵐᵖˡ); (memhash64, memhash64ⁱᵐᵖˡ); (strhash, strhashⁱᵐᵖˡ); (strhashFallback, strhashFallbackⁱᵐᵖˡ); (f32hash, f32hashⁱᵐᵖˡ); (f64hash, f64hashⁱᵐᵖˡ); (c64hash, c64hashⁱᵐᵖˡ); (c128hash, c128hashⁱᵐᵖˡ); (interhash, interhashⁱᵐᵖˡ); (nilinterhash, nilinterhashⁱᵐᵖˡ); (typehash, typehashⁱᵐᵖˡ); (mapKeyError, mapKeyErrorⁱᵐᵖˡ); (mapKeyError2, mapKeyError2ⁱᵐᵖˡ); (reflect_typehash, reflect_typehashⁱᵐᵖˡ); (memequal0, memequal0ⁱᵐᵖˡ); (memequal8, memequal8ⁱᵐᵖˡ); (memequal16, memequal16ⁱᵐᵖˡ); (memequal32, memequal32ⁱᵐᵖˡ); (memequal64, memequal64ⁱᵐᵖˡ); (memequal128, memequal128ⁱᵐᵖˡ); (f32equal, f32equalⁱᵐᵖˡ); (f64equal, f64equalⁱᵐᵖˡ); (c64equal, c64equalⁱᵐᵖˡ); (c128equal, c128equalⁱᵐᵖˡ); (strequal, strequalⁱᵐᵖˡ); (interequal, interequalⁱᵐᵖˡ); (nilinterequal, nilinterequalⁱᵐᵖˡ); (efaceeq, efaceeqⁱᵐᵖˡ); (ifaceeq, ifaceeqⁱᵐᵖˡ); (stringHash, stringHashⁱᵐᵖˡ); (bytesHash, bytesHashⁱᵐᵖˡ); (int32Hash, int32Hashⁱᵐᵖˡ); (int64Hash, int64Hashⁱᵐᵖˡ); (efaceHash, efaceHashⁱᵐᵖˡ); (ifaceHash, ifaceHashⁱᵐᵖˡ); (alginit, alginitⁱᵐᵖˡ); (initAlgAES, initAlgAESⁱᵐᵖˡ); (readUnaligned32, readUnaligned32ⁱᵐᵖˡ); (readUnaligned64, readUnaligned64ⁱᵐᵖˡ); (arena_newArena, arena_newArenaⁱᵐᵖˡ); (arena_arena_New, arena_arena_Newⁱᵐᵖˡ); (arena_arena_Slice, arena_arena_Sliceⁱᵐᵖˡ); (arena_arena_Free, arena_arena_Freeⁱᵐᵖˡ); (arena_heapify, arena_heapifyⁱᵐᵖˡ); (userArenaChunkReserveBytes, userArenaChunkReserveBytesⁱᵐᵖˡ); (newUserArena, newUserArenaⁱᵐᵖˡ); (userArenaHeapBitsSetSliceType, userArenaHeapBitsSetSliceTypeⁱᵐᵖˡ); (userArenaHeapBitsSetType, userArenaHeapBitsSetTypeⁱᵐᵖˡ); (bswapIfBigEndian, bswapIfBigEndianⁱᵐᵖˡ); (newUserArenaChunk, newUserArenaChunkⁱᵐᵖˡ); (inUserArenaChunk, inUserArenaChunkⁱᵐᵖˡ); (freeUserArenaChunk, freeUserArenaChunkⁱᵐᵖˡ); (asanread, asanreadⁱᵐᵖˡ); (asanwrite, asanwriteⁱᵐᵖˡ); (asanunpoison, asanunpoisonⁱᵐᵖˡ); (asanpoison, asanpoisonⁱᵐᵖˡ); (asanregisterglobals, asanregisterglobalsⁱᵐᵖˡ); (atomicwb, atomicwbⁱᵐᵖˡ); (atomicstorep, atomicstorepⁱᵐᵖˡ); (atomic_storePointer, atomic_storePointerⁱᵐᵖˡ); (atomic_casPointer, atomic_casPointerⁱᵐᵖˡ); (sync_atomic_StoreUintptr, sync_atomic_StoreUintptrⁱᵐᵖˡ); (sync_atomic_StorePointer, sync_atomic_StorePointerⁱᵐᵖˡ); (sync_atomic_SwapUintptr, sync_atomic_SwapUintptrⁱᵐᵖˡ); (sync_atomic_SwapPointer, sync_atomic_SwapPointerⁱᵐᵖˡ); (sync_atomic_CompareAndSwapUintptr, sync_atomic_CompareAndSwapUintptrⁱᵐᵖˡ); (sync_atomic_CompareAndSwapPointer, sync_atomic_CompareAndSwapPointerⁱᵐᵖˡ); (cgoUse, cgoUseⁱᵐᵖˡ); (cgoKeepAlive, cgoKeepAliveⁱᵐᵖˡ); (cgoNoCallback, cgoNoCallbackⁱᵐᵖˡ); (mmap, mmapⁱᵐᵖˡ); (munmap, munmapⁱᵐᵖˡ); (sysMmap, sysMmapⁱᵐᵖˡ); (callCgoMmap, callCgoMmapⁱᵐᵖˡ); (sysMunmap, sysMunmapⁱᵐᵖˡ); (callCgoMunmap, callCgoMunmapⁱᵐᵖˡ); (sigaction, sigactionⁱᵐᵖˡ); (callCgoSigaction, callCgoSigactionⁱᵐᵖˡ); (syscall_cgocaller, syscall_cgocallerⁱᵐᵖˡ); (cgocall, cgocallⁱᵐᵖˡ); (callbackUpdateSystemStack, callbackUpdateSystemStackⁱᵐᵖˡ); (cgocallbackg, cgocallbackgⁱᵐᵖˡ); (cgocallbackg1, cgocallbackg1ⁱᵐᵖˡ); (unwindm, unwindmⁱᵐᵖˡ); (badcgocallback, badcgocallbackⁱᵐᵖˡ); (cgounimpl, cgounimplⁱᵐᵖˡ); (cgoCheckPointer, cgoCheckPointerⁱᵐᵖˡ); (cgoCheckArg, cgoCheckArgⁱᵐᵖˡ); (cgoCheckUnknownPointer, cgoCheckUnknownPointerⁱᵐᵖˡ); (cgoIsGoPointer, cgoIsGoPointerⁱᵐᵖˡ); (cgoInRange, cgoInRangeⁱᵐᵖˡ); (cgoCheckResult, cgoCheckResultⁱᵐᵖˡ); (_cgo_panic_internal, _cgo_panic_internalⁱᵐᵖˡ); (cgoCheckPtrWrite, cgoCheckPtrWriteⁱᵐᵖˡ); (cgoCheckMemmove, cgoCheckMemmoveⁱᵐᵖˡ); (cgoCheckMemmove2, cgoCheckMemmove2ⁱᵐᵖˡ); (cgoCheckSliceCopy, cgoCheckSliceCopyⁱᵐᵖˡ); (cgoCheckTypedBlock, cgoCheckTypedBlockⁱᵐᵖˡ); (cgoCheckBits, cgoCheckBitsⁱᵐᵖˡ); (cgoCheckUsingType, cgoCheckUsingTypeⁱᵐᵖˡ); (reflect_makechan, reflect_makechanⁱᵐᵖˡ); (makechan64, makechan64ⁱᵐᵖˡ); (makechan, makechanⁱᵐᵖˡ); (chanbuf, chanbufⁱᵐᵖˡ); (full, fullⁱᵐᵖˡ); (chansend1, chansend1ⁱᵐᵖˡ); (chansend, chansendⁱᵐᵖˡ); (send, sendⁱᵐᵖˡ); (timerchandrain, timerchandrainⁱᵐᵖˡ); (sendDirect, sendDirectⁱᵐᵖˡ); (recvDirect, recvDirectⁱᵐᵖˡ); (closechan, closechanⁱᵐᵖˡ); (empty, emptyⁱᵐᵖˡ); (chanrecv1, chanrecv1ⁱᵐᵖˡ); (chanrecv2, chanrecv2ⁱᵐᵖˡ); (chanrecv, chanrecvⁱᵐᵖˡ); (recv, recvⁱᵐᵖˡ); (chanparkcommit, chanparkcommitⁱᵐᵖˡ); (selectnbsend, selectnbsendⁱᵐᵖˡ); (selectnbrecv, selectnbrecvⁱᵐᵖˡ); (reflect_chansend, reflect_chansendⁱᵐᵖˡ); (reflect_chanrecv, reflect_chanrecvⁱᵐᵖˡ); (chanlen, chanlenⁱᵐᵖˡ); (chancap, chancapⁱᵐᵖˡ); (reflect_chanlen, reflect_chanlenⁱᵐᵖˡ); (reflectlite_chanlen, reflectlite_chanlenⁱᵐᵖˡ); (reflect_chancap, reflect_chancapⁱᵐᵖˡ); (reflect_chanclose, reflect_chancloseⁱᵐᵖˡ); (racesync, racesyncⁱᵐᵖˡ); (racenotify, racenotifyⁱᵐᵖˡ); (checkptrAlignment, checkptrAlignmentⁱᵐᵖˡ); (checkptrStraddles, checkptrStraddlesⁱᵐᵖˡ); (checkptrArithmetic, checkptrArithmeticⁱᵐᵖˡ); (checkptrBase, checkptrBaseⁱᵐᵖˡ); (inf2one, inf2oneⁱᵐᵖˡ); (complex128div, complex128divⁱᵐᵖˡ); (newcoro, newcoroⁱᵐᵖˡ); (corostart, corostartⁱᵐᵖˡ); (coroexit, coroexitⁱᵐᵖˡ); (coroswitch, coroswitchⁱᵐᵖˡ); (coroswitch_m, coroswitch_mⁱᵐᵖˡ); (coverage_getCovCounterList, coverage_getCovCounterListⁱᵐᵖˡ); (addCovMeta, addCovMetaⁱᵐᵖˡ); (SetCPUProfileRate, SetCPUProfileRateⁱᵐᵖˡ); (CPUProfile, CPUProfileⁱᵐᵖˡ); (pprof_cyclesPerSecond, pprof_cyclesPerSecondⁱᵐᵖˡ); (runtime_pprof_readProfile, runtime_pprof_readProfileⁱᵐᵖˡ); (cputicks, cputicksⁱᵐᵖˡ); (create, createⁱᵐᵖˡ); (GOMAXPROCS, GOMAXPROCSⁱᵐᵖˡ); (NumCPU, NumCPUⁱᵐᵖˡ); (NumCgoCall, NumCgoCallⁱᵐᵖˡ); (totalMutexWaitTimeNanos, totalMutexWaitTimeNanosⁱᵐᵖˡ); (NumGoroutine, NumGoroutineⁱᵐᵖˡ); (debug_modinfo, debug_modinfoⁱᵐᵖˡ); (mayMoreStackPreempt, mayMoreStackPreemptⁱᵐᵖˡ); (mayMoreStackMove, mayMoreStackMoveⁱᵐᵖˡ); (debugPinnerV1, debugPinnerV1ⁱᵐᵖˡ); (debugCallV2, debugCallV2ⁱᵐᵖˡ); (debugCallPanicked, debugCallPanickedⁱᵐᵖˡ); (debugCallCheck, debugCallCheckⁱᵐᵖˡ); (debugCallWrap, debugCallWrapⁱᵐᵖˡ); (debugCallWrap1, debugCallWrap1ⁱᵐᵖˡ); (debugCallWrap2, debugCallWrap2ⁱᵐᵖˡ); (dlog, dlogⁱᵐᵖˡ); (dlogFake, dlogFakeⁱᵐᵖˡ); (dlogImpl, dlogImplⁱᵐᵖˡ); (printDebugLog, printDebugLogⁱᵐᵖˡ); (printDebugLogImpl, printDebugLogImplⁱᵐᵖˡ); (printDebugLogPC, printDebugLogPCⁱᵐᵖˡ); (dlog1, dlog1ⁱᵐᵖˡ); (getCachedDlogger, getCachedDloggerⁱᵐᵖˡ); (putCachedDlogger, putCachedDloggerⁱᵐᵖˡ); (gogetenv, gogetenvⁱᵐᵖˡ); (envKeyEqual, envKeyEqualⁱᵐᵖˡ); (lowerASCII, lowerASCIIⁱᵐᵖˡ); (setenv_c, setenv_cⁱᵐᵖˡ); (unsetenv_c, unsetenv_cⁱᵐᵖˡ); (cstring, cstringⁱᵐᵖˡ); (itoa, itoaⁱᵐᵖˡ); (appendIntStr, appendIntStrⁱᵐᵖˡ); (printpanicval, printpanicvalⁱᵐᵖˡ); (printanycustomtype, printanycustomtypeⁱᵐᵖˡ); (printindented, printindentedⁱᵐᵖˡ); (panicwrap, panicwrapⁱᵐᵖˡ); (Caller, Callerⁱᵐᵖˡ); (Callers, Callersⁱᵐᵖˡ); (GOROOT, GOROOTⁱᵐᵖˡ); (Version, Versionⁱᵐᵖˡ); (fastlog2, fastlog2ⁱᵐᵖˡ); (checkfds, checkfdsⁱᵐᵖˡ); (isNaN, isNaNⁱᵐᵖˡ); (isFinite, isFiniteⁱᵐᵖˡ); (isInf, isInfⁱᵐᵖˡ); (abs, absⁱᵐᵖˡ); (copysign, copysignⁱᵐᵖˡ); (float64bits, float64bitsⁱᵐᵖˡ); (float64frombits, float64frombitsⁱᵐᵖˡ); (memhashFallback, memhashFallbackⁱᵐᵖˡ); (memhash32Fallback, memhash32Fallbackⁱᵐᵖˡ); (memhash64Fallback, memhash64Fallbackⁱᵐᵖˡ); (mix, mixⁱᵐᵖˡ); (r4, r4ⁱᵐᵖˡ); (r8, r8ⁱᵐᵖˡ); (runtime_debug_WriteHeapDump, runtime_debug_WriteHeapDumpⁱᵐᵖˡ); (dwrite, dwriteⁱᵐᵖˡ); (dwritebyte, dwritebyteⁱᵐᵖˡ); (flush, flushⁱᵐᵖˡ); (dumpint, dumpintⁱᵐᵖˡ); (dumpbool, dumpboolⁱᵐᵖˡ); (dumpmemrange, dumpmemrangeⁱᵐᵖˡ); (dumpslice, dumpsliceⁱᵐᵖˡ); (dumpstr, dumpstrⁱᵐᵖˡ); (dumptype, dumptypeⁱᵐᵖˡ); (dumpobj, dumpobjⁱᵐᵖˡ); (dumpotherroot, dumpotherrootⁱᵐᵖˡ); (dumpfinalizer, dumpfinalizerⁱᵐᵖˡ); (dumpbv, dumpbvⁱᵐᵖˡ); (dumpframe, dumpframeⁱᵐᵖˡ); (dumpgoroutine, dumpgoroutineⁱᵐᵖˡ); (dumpgs, dumpgsⁱᵐᵖˡ); (finq_callback, finq_callbackⁱᵐᵖˡ); (dumproots, dumprootsⁱᵐᵖˡ); (dumpobjs, dumpobjsⁱᵐᵖˡ); (dumpparams, dumpparamsⁱᵐᵖˡ); (itab_callback, itab_callbackⁱᵐᵖˡ); (dumpitabs, dumpitabsⁱᵐᵖˡ); (dumpms, dumpmsⁱᵐᵖˡ); (dumpmemstats, dumpmemstatsⁱᵐᵖˡ); (dumpmemprof_callback, dumpmemprof_callbackⁱᵐᵖˡ); (dumpmemprof, dumpmemprofⁱᵐᵖˡ); (mdump, mdumpⁱᵐᵖˡ); (writeheapdump_m, writeheapdump_mⁱᵐᵖˡ); (dumpfields, dumpfieldsⁱᵐᵖˡ); (makeheapobjbv, makeheapobjbvⁱᵐᵖˡ); (float64Inf, float64Infⁱᵐᵖˡ); (float64NegInf, float64NegInfⁱᵐᵖˡ); (timeHistogramMetricsBuckets, timeHistogramMetricsBucketsⁱᵐᵖˡ); (itabHashFunc, itabHashFuncⁱᵐᵖˡ); (getitab, getitabⁱᵐᵖˡ); (itabAdd, itabAddⁱᵐᵖˡ); (itabInit, itabInitⁱᵐᵖˡ); (itabsinit, itabsinitⁱᵐᵖˡ); (panicdottypeE, panicdottypeEⁱᵐᵖˡ); (panicdottypeI, panicdottypeIⁱᵐᵖˡ); (panicnildottype, panicnildottypeⁱᵐᵖˡ); (convT, convTⁱᵐᵖˡ); (convTnoptr, convTnoptrⁱᵐᵖˡ); (convT16, convT16ⁱᵐᵖˡ); (convT32, convT32ⁱᵐᵖˡ); (convT64, convT64ⁱᵐᵖˡ); (convTstring, convTstringⁱᵐᵖˡ); (convTslice, convTsliceⁱᵐᵖˡ); (assertE2I, assertE2Iⁱᵐᵖˡ); (assertE2I2, assertE2I2ⁱᵐᵖˡ); (typeAssert, typeAssertⁱᵐᵖˡ); (buildTypeAssertCache, buildTypeAssertCacheⁱᵐᵖˡ); (interfaceSwitch, interfaceSwitchⁱᵐᵖˡ); (buildInterfaceSwitchCache, buildInterfaceSwitchCacheⁱᵐᵖˡ); (reflect_ifaceE2I, reflect_ifaceE2Iⁱᵐᵖˡ); (reflectlite_ifaceE2I, reflectlite_ifaceE2Iⁱᵐᵖˡ); (iterate_itabs, iterate_itabsⁱᵐᵖˡ); (getStaticuint64s, getStaticuint64sⁱᵐᵖˡ); (unreachableMethod, unreachableMethodⁱᵐᵖˡ); (lfnodeValidate, lfnodeValidateⁱᵐᵖˡ); (lfstackPack, lfstackPackⁱᵐᵖˡ); (lfstackUnpack, lfstackUnpackⁱᵐᵖˡ); (mapiterinit, mapiterinitⁱᵐᵖˡ); (reflect_mapiterinit, reflect_mapiterinitⁱᵐᵖˡ); (mapiternext, mapiternextⁱᵐᵖˡ); (reflect_mapiternext, reflect_mapiternextⁱᵐᵖˡ); (reflect_mapiterkey, reflect_mapiterkeyⁱᵐᵖˡ); (reflect_mapiterelem, reflect_mapiterelemⁱᵐᵖˡ); (key32, key32ⁱᵐᵖˡ); (noteclear, noteclearⁱᵐᵖˡ); (notewakeup, notewakeupⁱᵐᵖˡ); (notesleep, notesleepⁱᵐᵖˡ); (notetsleep_internal, notetsleep_internalⁱᵐᵖˡ); (notetsleep, notetsleepⁱᵐᵖˡ); (notetsleepg, notetsleepgⁱᵐᵖˡ); (beforeIdle, beforeIdleⁱᵐᵖˡ); (checkTimeouts, checkTimeoutsⁱᵐᵖˡ); (semacreate, semacreateⁱᵐᵖˡ); (semasleep, semasleepⁱᵐᵖˡ); (semawakeup, semawakeupⁱᵐᵖˡ); (key8, key8ⁱᵐᵖˡ); (lockVerifyMSize, lockVerifyMSizeⁱᵐᵖˡ); (mutexWaitListHead, mutexWaitListHeadⁱᵐᵖˡ); (mutexPreferLowLatency, mutexPreferLowLatencyⁱᵐᵖˡ); (mutexContended, mutexContendedⁱᵐᵖˡ); (lock, lockⁱᵐᵖˡ); (lock2, lock2ⁱᵐᵖˡ); (unlock, unlockⁱᵐᵖˡ); (unlock2, unlock2ⁱᵐᵖˡ); (unlock2Wake, unlock2Wakeⁱᵐᵖˡ); (lockInit, lockInitⁱᵐᵖˡ); (getLockRank, getLockRankⁱᵐᵖˡ); (lockWithRank, lockWithRankⁱᵐᵖˡ); (acquireLockRankAndM, acquireLockRankAndMⁱᵐᵖˡ); (unlockWithRank, unlockWithRankⁱᵐᵖˡ); (releaseLockRankAndM, releaseLockRankAndMⁱᵐᵖˡ); (lockWithRankMayAcquire, lockWithRankMayAcquireⁱᵐᵖˡ); (assertLockHeld, assertLockHeldⁱᵐᵖˡ); (assertRankHeld, assertRankHeldⁱᵐᵖˡ); (worldStopped, worldStoppedⁱᵐᵖˡ); (worldStarted, worldStartedⁱᵐᵖˡ); (assertWorldStopped, assertWorldStoppedⁱᵐᵖˡ); (assertWorldStoppedOrLockHeld, assertWorldStoppedOrLockHeldⁱᵐᵖˡ); (mallocinit, mallocinitⁱᵐᵖˡ); (sysReserveAligned, sysReserveAlignedⁱᵐᵖˡ); (nextFreeFast, nextFreeFastⁱᵐᵖˡ); (mallocgc, mallocgcⁱᵐᵖˡ); (mallocgcTiny, mallocgcTinyⁱᵐᵖˡ); (mallocgcSmallNoscan, mallocgcSmallNoscanⁱᵐᵖˡ); (mallocgcSmallScanNoHeader, mallocgcSmallScanNoHeaderⁱᵐᵖˡ); (mallocgcSmallScanHeader, mallocgcSmallScanHeaderⁱᵐᵖˡ); (mallocgcLarge, mallocgcLargeⁱᵐᵖˡ); (preMallocgcDebug, preMallocgcDebugⁱᵐᵖˡ); (postMallocgcDebug, postMallocgcDebugⁱᵐᵖˡ); (deductAssistCredit, deductAssistCreditⁱᵐᵖˡ); (memclrNoHeapPointersChunked, memclrNoHeapPointersChunkedⁱᵐᵖˡ); (newobject, newobjectⁱᵐᵖˡ); (maps_newobject, maps_newobjectⁱᵐᵖˡ); (reflect_unsafe_New, reflect_unsafe_Newⁱᵐᵖˡ); (reflectlite_unsafe_New, reflectlite_unsafe_Newⁱᵐᵖˡ); (newarray, newarrayⁱᵐᵖˡ); (reflect_unsafe_NewArray, reflect_unsafe_NewArrayⁱᵐᵖˡ); (maps_newarray, maps_newarrayⁱᵐᵖˡ); (profilealloc, profileallocⁱᵐᵖˡ); (nextSample, nextSampleⁱᵐᵖˡ); (fastexprand, fastexprandⁱᵐᵖˡ); (nextSampleNoFP, nextSampleNoFPⁱᵐᵖˡ); (persistentalloc, persistentallocⁱᵐᵖˡ); (persistentalloc1, persistentalloc1ⁱᵐᵖˡ); (inPersistentAlloc, inPersistentAllocⁱᵐᵖˡ); (redZoneSize, redZoneSizeⁱᵐᵖˡ); (mapaccess1_fast32, mapaccess1_fast32ⁱᵐᵖˡ); (mapaccess2_fast32, mapaccess2_fast32ⁱᵐᵖˡ); (mapassign_fast32, mapassign_fast32ⁱᵐᵖˡ); (mapassign_fast32ptr, mapassign_fast32ptrⁱᵐᵖˡ); (mapdelete_fast32, mapdelete_fast32ⁱᵐᵖˡ); (mapaccess1_fast64, mapaccess1_fast64ⁱᵐᵖˡ); (mapaccess2_fast64, mapaccess2_fast64ⁱᵐᵖˡ); (mapassign_fast64, mapassign_fast64ⁱᵐᵖˡ); (mapassign_fast64ptr, mapassign_fast64ptrⁱᵐᵖˡ); (mapdelete_fast64, mapdelete_fast64ⁱᵐᵖˡ); (mapaccess1_faststr, mapaccess1_faststrⁱᵐᵖˡ); (mapaccess2_faststr, mapaccess2_faststrⁱᵐᵖˡ); (mapassign_faststr, mapassign_faststrⁱᵐᵖˡ); (mapdelete_faststr, mapdelete_faststrⁱᵐᵖˡ); (maps_mapKeyError, maps_mapKeyErrorⁱᵐᵖˡ); (makemap64, makemap64ⁱᵐᵖˡ); (makemap_small, makemap_smallⁱᵐᵖˡ); (makemap, makemapⁱᵐᵖˡ); (mapaccess1, mapaccess1ⁱᵐᵖˡ); (mapaccess2, mapaccess2ⁱᵐᵖˡ); (mapaccess1_fat, mapaccess1_fatⁱᵐᵖˡ); (mapaccess2_fat, mapaccess2_fatⁱᵐᵖˡ); (mapassign, mapassignⁱᵐᵖˡ); (mapdelete, mapdeleteⁱᵐᵖˡ); (mapIterStart, mapIterStartⁱᵐᵖˡ); (mapIterNext, mapIterNextⁱᵐᵖˡ); (mapclear, mapclearⁱᵐᵖˡ); (reflect_makemap, reflect_makemapⁱᵐᵖˡ); (reflect_mapaccess, reflect_mapaccessⁱᵐᵖˡ); (reflect_mapaccess_faststr, reflect_mapaccess_faststrⁱᵐᵖˡ); (reflect_mapassign, reflect_mapassignⁱᵐᵖˡ); (reflect_mapassign_faststr, reflect_mapassign_faststrⁱᵐᵖˡ); (reflect_mapdelete, reflect_mapdeleteⁱᵐᵖˡ); (reflect_mapdelete_faststr, reflect_mapdelete_faststrⁱᵐᵖˡ); (reflect_maplen, reflect_maplenⁱᵐᵖˡ); (reflect_mapclear, reflect_mapclearⁱᵐᵖˡ); (reflectlite_maplen, reflectlite_maplenⁱᵐᵖˡ); (mapinitnoop, mapinitnoopⁱᵐᵖˡ); (mapclone, mapcloneⁱᵐᵖˡ); (mapclone2, mapclone2ⁱᵐᵖˡ); (keys, keysⁱᵐᵖˡ); (values, valuesⁱᵐᵖˡ); (typedmemmove, typedmemmoveⁱᵐᵖˡ); (wbZero, wbZeroⁱᵐᵖˡ); (wbMove, wbMoveⁱᵐᵖˡ); (reflect_typedmemmove, reflect_typedmemmoveⁱᵐᵖˡ); (reflectlite_typedmemmove, reflectlite_typedmemmoveⁱᵐᵖˡ); (maps_typedmemmove, maps_typedmemmoveⁱᵐᵖˡ); (reflectcallmove, reflectcallmoveⁱᵐᵖˡ); (typedslicecopy, typedslicecopyⁱᵐᵖˡ); (reflect_typedslicecopy, reflect_typedslicecopyⁱᵐᵖˡ); (typedmemclr, typedmemclrⁱᵐᵖˡ); (reflect_typedmemclr, reflect_typedmemclrⁱᵐᵖˡ); (maps_typedmemclr, maps_typedmemclrⁱᵐᵖˡ); (reflect_typedmemclrpartial, reflect_typedmemclrpartialⁱᵐᵖˡ); (reflect_typedarrayclear, reflect_typedarrayclearⁱᵐᵖˡ); (memclrHasPointers, memclrHasPointersⁱᵐᵖˡ); (heapBitsInSpan, heapBitsInSpanⁱᵐᵖˡ); (bulkBarrierPreWrite, bulkBarrierPreWriteⁱᵐᵖˡ); (bulkBarrierPreWriteSrcOnly, bulkBarrierPreWriteSrcOnlyⁱᵐᵖˡ); (heapBitsSlice, heapBitsSliceⁱᵐᵖˡ); (heapSetTypeNoHeader, heapSetTypeNoHeaderⁱᵐᵖˡ); (heapSetTypeSmallHeader, heapSetTypeSmallHeaderⁱᵐᵖˡ); (heapSetTypeLarge, heapSetTypeLargeⁱᵐᵖˡ); (doubleCheckHeapType, doubleCheckHeapTypeⁱᵐᵖˡ); (doubleCheckHeapPointers, doubleCheckHeapPointersⁱᵐᵖˡ); (doubleCheckHeapPointersInterior, doubleCheckHeapPointersInteriorⁱᵐᵖˡ); (doubleCheckTypePointersOfType, doubleCheckTypePointersOfTypeⁱᵐᵖˡ); (dumpTypePointers, dumpTypePointersⁱᵐᵖˡ); (addb, addbⁱᵐᵖˡ); (subtractb, subtractbⁱᵐᵖˡ); (add1, add1ⁱᵐᵖˡ); (subtract1, subtract1ⁱᵐᵖˡ); (markBitsForAddr, markBitsForAddrⁱᵐᵖˡ); (markBitsForSpan, markBitsForSpanⁱᵐᵖˡ); (badPointer, badPointerⁱᵐᵖˡ); (findObject, findObjectⁱᵐᵖˡ); (reflect_verifyNotInHeapPtr, reflect_verifyNotInHeapPtrⁱᵐᵖˡ); (bulkBarrierBitmap, bulkBarrierBitmapⁱᵐᵖˡ); (typeBitsBulkBarrier, typeBitsBulkBarrierⁱᵐᵖˡ); (readUintptr, readUintptrⁱᵐᵖˡ); (progToPointerMask, progToPointerMaskⁱᵐᵖˡ); (runGCProg, runGCProgⁱᵐᵖˡ); (dumpGCProg, dumpGCProgⁱᵐᵖˡ); (reflect_gcbits, reflect_gcbitsⁱᵐᵖˡ); (pointerMask, pointerMaskⁱᵐᵖˡ); (allocmcache, allocmcacheⁱᵐᵖˡ); (freemcache, freemcacheⁱᵐᵖˡ); (getMCache, getMCacheⁱᵐᵖˡ); (startCheckmarks, startCheckmarksⁱᵐᵖˡ); (endCheckmarks, endCheckmarksⁱᵐᵖˡ); (setCheckmark, setCheckmarkⁱᵐᵖˡ); (AddCleanup, AddCleanupⁱᵐᵖˡ); (sysAlloc, sysAllocⁱᵐᵖˡ); (sysUnused, sysUnusedⁱᵐᵖˡ); (sysUsed, sysUsedⁱᵐᵖˡ); (sysHugePage, sysHugePageⁱᵐᵖˡ); (sysNoHugePage, sysNoHugePageⁱᵐᵖˡ); (sysHugePageCollapse, sysHugePageCollapseⁱᵐᵖˡ); (sysFree, sysFreeⁱᵐᵖˡ); (sysFault, sysFaultⁱᵐᵖˡ); (sysReserve, sysReserveⁱᵐᵖˡ); (sysMap, sysMapⁱᵐᵖˡ); (sysAllocOS, sysAllocOSⁱᵐᵖˡ); (sysUnusedOS, sysUnusedOSⁱᵐᵖˡ); (sysUsedOS, sysUsedOSⁱᵐᵖˡ); (sysHugePageOS, sysHugePageOSⁱᵐᵖˡ); (sysNoHugePageOS, sysNoHugePageOSⁱᵐᵖˡ); (sysHugePageCollapseOS, sysHugePageCollapseOSⁱᵐᵖˡ); (sysFreeOS, sysFreeOSⁱᵐᵖˡ); (sysFaultOS, sysFaultOSⁱᵐᵖˡ); (sysReserveOS, sysReserveOSⁱᵐᵖˡ); (sysMapOS, sysMapOSⁱᵐᵖˡ); (sysReserveAlignedSbrk, sysReserveAlignedSbrkⁱᵐᵖˡ); (metricsLock, metricsLockⁱᵐᵖˡ); (metricsUnlock, metricsUnlockⁱᵐᵖˡ); (initMetrics, initMetricsⁱᵐᵖˡ); (compute0, compute0ⁱᵐᵖˡ); (godebug_registerMetric, godebug_registerMetricⁱᵐᵖˡ); (makeStatDepSet, makeStatDepSetⁱᵐᵖˡ); (nsToSec, nsToSecⁱᵐᵖˡ); (readMetricNames, readMetricNamesⁱᵐᵖˡ); (readMetrics, readMetricsⁱᵐᵖˡ); (readMetricsLocked, readMetricsLockedⁱᵐᵖˡ); (lockRankMayQueueFinalizer, lockRankMayQueueFinalizerⁱᵐᵖˡ); (queuefinalizer, queuefinalizerⁱᵐᵖˡ); (iterate_finq, iterate_finqⁱᵐᵖˡ); (wakefing, wakefingⁱᵐᵖˡ); (createfing, createfingⁱᵐᵖˡ); (finalizercommit, finalizercommitⁱᵐᵖˡ); (runfinq, runfinqⁱᵐᵖˡ); (isGoPointerWithoutSpan, isGoPointerWithoutSpanⁱᵐᵖˡ); (blockUntilEmptyFinalizerQueue, blockUntilEmptyFinalizerQueueⁱᵐᵖˡ); (SetFinalizer, SetFinalizerⁱᵐᵖˡ); (KeepAlive, KeepAliveⁱᵐᵖˡ); (heapObjectsCanMove, heapObjectsCanMoveⁱᵐᵖˡ); (gcinit, gcinitⁱᵐᵖˡ); (gcenable, gcenableⁱᵐᵖˡ); (setGCPhase, setGCPhaseⁱᵐᵖˡ); (pollFractionalWorkerExit, pollFractionalWorkerExitⁱᵐᵖˡ); (GC, GCⁱᵐᵖˡ); (gcWaitOnMark, gcWaitOnMarkⁱᵐᵖˡ); (gcStart, gcStartⁱᵐᵖˡ); (gcMarkDone, gcMarkDoneⁱᵐᵖˡ); (gcMarkTermination, gcMarkTerminationⁱᵐᵖˡ); (gcBgMarkStartWorkers, gcBgMarkStartWorkersⁱᵐᵖˡ); (gcBgMarkPrepare, gcBgMarkPrepareⁱᵐᵖˡ); (gcBgMarkWorker, gcBgMarkWorkerⁱᵐᵖˡ); (gcMarkWorkAvailable, gcMarkWorkAvailableⁱᵐᵖˡ); (gcMark, gcMarkⁱᵐᵖˡ); (gcSweep, gcSweepⁱᵐᵖˡ); (gcResetMarkState, gcResetMarkStateⁱᵐᵖˡ); (sync_runtime_registerPoolCleanup, sync_runtime_registerPoolCleanupⁱᵐᵖˡ); (boring_registerCache, boring_registerCacheⁱᵐᵖˡ); (unique_runtime_registerUniqueMapCleanup, unique_runtime_registerUniqueMapCleanupⁱᵐᵖˡ); (clearpools, clearpoolsⁱᵐᵖˡ); (itoaDiv, itoaDivⁱᵐᵖˡ); (fmtNSAsMS, fmtNSAsMSⁱᵐᵖˡ); (gcTestMoveStackOnNextCall, gcTestMoveStackOnNextCallⁱᵐᵖˡ); (gcTestIsReachable, gcTestIsReachableⁱᵐᵖˡ); (gcTestPointerClass, gcTestPointerClassⁱᵐᵖˡ); (makeLimiterEventStamp, makeLimiterEventStampⁱᵐᵖˡ); (gcMarkRootPrepare, gcMarkRootPrepareⁱᵐᵖˡ); (gcMarkRootCheck, gcMarkRootCheckⁱᵐᵖˡ); (markroot, markrootⁱᵐᵖˡ); (markrootBlock, markrootBlockⁱᵐᵖˡ); (markrootFreeGStacks, markrootFreeGStacksⁱᵐᵖˡ); (markrootSpans, markrootSpansⁱᵐᵖˡ); (gcAssistAlloc, gcAssistAllocⁱᵐᵖˡ); (gcAssistAlloc1, gcAssistAlloc1ⁱᵐᵖˡ); (gcWakeAllAssists, gcWakeAllAssistsⁱᵐᵖˡ); (gcParkAssist, gcParkAssistⁱᵐᵖˡ); (gcFlushBgCredit, gcFlushBgCreditⁱᵐᵖˡ); (scanstack, scanstackⁱᵐᵖˡ); (scanframeworker, scanframeworkerⁱᵐᵖˡ); (gcDrainMarkWorkerIdle, gcDrainMarkWorkerIdleⁱᵐᵖˡ); (gcDrainMarkWorkerDedicated, gcDrainMarkWorkerDedicatedⁱᵐᵖˡ); (gcDrainMarkWorkerFractional, gcDrainMarkWorkerFractionalⁱᵐᵖˡ); (gcDrain, gcDrainⁱᵐᵖˡ); (gcDrainN, gcDrainNⁱᵐᵖˡ); (scanblock, scanblockⁱᵐᵖˡ); (scanobject, scanobjectⁱᵐᵖˡ); (scanConservative, scanConservativeⁱᵐᵖˡ); (shade, shadeⁱᵐᵖˡ); (greyobject, greyobjectⁱᵐᵖˡ); (gcDumpObject, gcDumpObjectⁱᵐᵖˡ); (gcmarknewobject, gcmarknewobjectⁱᵐᵖˡ); (gcMarkTinyAllocs, gcMarkTinyAllocsⁱᵐᵖˡ); (setGCPercent, setGCPercentⁱᵐᵖˡ); (readGOGC, readGOGCⁱᵐᵖˡ); (setMemoryLimit, setMemoryLimitⁱᵐᵖˡ); (readGOMEMLIMIT, readGOMEMLIMITⁱᵐᵖˡ); (gcControllerCommit, gcControllerCommitⁱᵐᵖˡ); (heapRetained, heapRetainedⁱᵐᵖˡ); (gcPaceScavenger, gcPaceScavengerⁱᵐᵖˡ); (bgscavenge, bgscavengeⁱᵐᵖˡ); (printScavTrace, printScavTraceⁱᵐᵖˡ); (fillAligned, fillAlignedⁱᵐᵖˡ); (unpackScavChunkData, unpackScavChunkDataⁱᵐᵖˡ); (binarySearchTree, binarySearchTreeⁱᵐᵖˡ); (finishsweep_m, finishsweep_mⁱᵐᵖˡ); (bgsweep, bgsweepⁱᵐᵖˡ); (sweepone, sweeponeⁱᵐᵖˡ); (isSweepDone, isSweepDoneⁱᵐᵖˡ); (deductSweepCredit, deductSweepCreditⁱᵐᵖˡ); (clobberfree, clobberfreeⁱᵐᵖˡ); (gcPaceSweeper, gcPaceSweeperⁱᵐᵖˡ); (getempty, getemptyⁱᵐᵖˡ); (putempty, putemptyⁱᵐᵖˡ); (putfull, putfullⁱᵐᵖˡ); (trygetfull, trygetfullⁱᵐᵖˡ); (handoff, handoffⁱᵐᵖˡ); (prepareFreeWorkbufs, prepareFreeWorkbufsⁱᵐᵖˡ); (freeSomeWbufs, freeSomeWbufsⁱᵐᵖˡ); (recordspan, recordspanⁱᵐᵖˡ); (makeSpanClass, makeSpanClassⁱᵐᵖˡ); (arenaIndex, arenaIndexⁱᵐᵖˡ); (arenaBase, arenaBaseⁱᵐᵖˡ); (inheap, inheapⁱᵐᵖˡ); (inHeapOrStack, inHeapOrStackⁱᵐᵖˡ); (spanOf, spanOfⁱᵐᵖˡ); (spanOfUnchecked, spanOfUncheckedⁱᵐᵖˡ); (spanOfHeap, spanOfHeapⁱᵐᵖˡ); (pageIndexOf, pageIndexOfⁱᵐᵖˡ); (runtime_debug_freeOSMemory, runtime_debug_freeOSMemoryⁱᵐᵖˡ); (spanHasSpecials, spanHasSpecialsⁱᵐᵖˡ); (spanHasNoSpecials, spanHasNoSpecialsⁱᵐᵖˡ); (addspecial, addspecialⁱᵐᵖˡ); (removespecial, removespecialⁱᵐᵖˡ); (addfinalizer, addfinalizerⁱᵐᵖˡ); (removefinalizer, removefinalizerⁱᵐᵖˡ); (addCleanup, addCleanupⁱᵐᵖˡ); (internal_weak_runtime_registerWeakPointer, internal_weak_runtime_registerWeakPointerⁱᵐᵖˡ); (internal_weak_runtime_makeStrongFromWeak, internal_weak_runtime_makeStrongFromWeakⁱᵐᵖˡ); (gcParkStrongFromWeak, gcParkStrongFromWeakⁱᵐᵖˡ); (gcWakeAllStrongFromWeak, gcWakeAllStrongFromWeakⁱᵐᵖˡ); (getOrAddWeakHandle, getOrAddWeakHandleⁱᵐᵖˡ); (getWeakHandle, getWeakHandleⁱᵐᵖˡ); (setprofilebucket, setprofilebucketⁱᵐᵖˡ); (newSpecialsIter, newSpecialsIterⁱᵐᵖˡ); (freeSpecial, freeSpecialⁱᵐᵖˡ); (newMarkBits, newMarkBitsⁱᵐᵖˡ); (newAllocBits, newAllocBitsⁱᵐᵖˡ); (nextMarkBitArenaEpoch, nextMarkBitArenaEpochⁱᵐᵖˡ); (newArenaMayUnlock, newArenaMayUnlockⁱᵐᵖˡ); (strmin, strminⁱᵐᵖˡ); (strmax, strmaxⁱᵐᵖˡ); (fmin32, fmin32ⁱᵐᵖˡ); (fmin64, fmin64ⁱᵐᵖˡ); (fmax32, fmax32ⁱᵐᵖˡ); (fmax64, fmax64ⁱᵐᵖˡ); (fmin, fminⁱᵐᵖˡ); (fmax, fmaxⁱᵐᵖˡ); (forbits, forbitsⁱᵐᵖˡ); (fandbits, fandbitsⁱᵐᵖˡ); (maxSearchAddr, maxSearchAddrⁱᵐᵖˡ); (chunkIndex, chunkIndexⁱᵐᵖˡ); (chunkBase, chunkBaseⁱᵐᵖˡ); (chunkPageIndex, chunkPageIndexⁱᵐᵖˡ); (offAddrToLevelIndex, offAddrToLevelIndexⁱᵐᵖˡ); (levelIndexToOffAddr, levelIndexToOffAddrⁱᵐᵖˡ); (addrsToSummaryRange, addrsToSummaryRangeⁱᵐᵖˡ); (blockAlignSummaryRange, blockAlignSummaryRangeⁱᵐᵖˡ); (packPallocSum, packPallocSumⁱᵐᵖˡ); (mergeSummaries, mergeSummariesⁱᵐᵖˡ); (findBitRange64, findBitRange64ⁱᵐᵖˡ); (newBucket, newBucketⁱᵐᵖˡ); (stkbucket, stkbucketⁱᵐᵖˡ); (eqslice, eqsliceⁱᵐᵖˡ); (mProf_NextCycle, mProf_NextCycleⁱᵐᵖˡ); (mProf_Flush, mProf_Flushⁱᵐᵖˡ); (mProf_FlushLocked, mProf_FlushLockedⁱᵐᵖˡ); (mProf_PostSweep, mProf_PostSweepⁱᵐᵖˡ); (mProf_Malloc, mProf_Mallocⁱᵐᵖˡ); (mProf_Free, mProf_Freeⁱᵐᵖˡ); (SetBlockProfileRate, SetBlockProfileRateⁱᵐᵖˡ); (blockevent, blockeventⁱᵐᵖˡ); (blocksampled, blocksampledⁱᵐᵖˡ); (saveblockevent, saveblockeventⁱᵐᵖˡ); (fpTracebackPartialExpand, fpTracebackPartialExpandⁱᵐᵖˡ); (saveBlockEventStack, saveBlockEventStackⁱᵐᵖˡ); (SetMutexProfileFraction, SetMutexProfileFractionⁱᵐᵖˡ); (mutexevent, mutexeventⁱᵐᵖˡ); (MemProfile, MemProfileⁱᵐᵖˡ); (memProfileInternal, memProfileInternalⁱᵐᵖˡ); (copyMemProfileRecord, copyMemProfileRecordⁱᵐᵖˡ); (pprof_memProfileInternal, pprof_memProfileInternalⁱᵐᵖˡ); (iterate_memprof, iterate_memprofⁱᵐᵖˡ); (BlockProfile, BlockProfileⁱᵐᵖˡ); (expandFrames, expandFramesⁱᵐᵖˡ); (blockProfileInternal, blockProfileInternalⁱᵐᵖˡ); (copyBlockProfileRecord, copyBlockProfileRecordⁱᵐᵖˡ); (pprof_blockProfileInternal, pprof_blockProfileInternalⁱᵐᵖˡ); (MutexProfile, MutexProfileⁱᵐᵖˡ); (mutexProfileInternal, mutexProfileInternalⁱᵐᵖˡ); (pprof_mutexProfileInternal, pprof_mutexProfileInternalⁱᵐᵖˡ); (ThreadCreateProfile, ThreadCreateProfileⁱᵐᵖˡ); (threadCreateProfileInternal, threadCreateProfileInternalⁱᵐᵖˡ); (pprof_threadCreateInternal, pprof_threadCreateInternalⁱᵐᵖˡ); (pprof_goroutineProfileWithLabels, pprof_goroutineProfileWithLabelsⁱᵐᵖˡ); (goroutineProfileWithLabels, goroutineProfileWithLabelsⁱᵐᵖˡ); (goroutineProfileWithLabelsConcurrent, goroutineProfileWithLabelsConcurrentⁱᵐᵖˡ); (tryRecordGoroutineProfileWB, tryRecordGoroutineProfileWBⁱᵐᵖˡ); (tryRecordGoroutineProfile, tryRecordGoroutineProfileⁱᵐᵖˡ); (doRecordGoroutineProfile, doRecordGoroutineProfileⁱᵐᵖˡ); (goroutineProfileWithLabelsSync, goroutineProfileWithLabelsSyncⁱᵐᵖˡ); (GoroutineProfile, GoroutineProfileⁱᵐᵖˡ); (goroutineProfileInternal, goroutineProfileInternalⁱᵐᵖˡ); (saveg, savegⁱᵐᵖˡ); (Stack, Stackⁱᵐᵖˡ); (makeAddrRange, makeAddrRangeⁱᵐᵖˡ); (msanread, msanreadⁱᵐᵖˡ); (msanwrite, msanwriteⁱᵐᵖˡ); (msanmalloc, msanmallocⁱᵐᵖˡ); (msanfree, msanfreeⁱᵐᵖˡ); (msanmove, msanmoveⁱᵐᵖˡ); (roundupsize, roundupsizeⁱᵐᵖˡ); (makeHeadTailIndex, makeHeadTailIndexⁱᵐᵖˡ); (ReadMemStats, ReadMemStatsⁱᵐᵖˡ); (readmemstats_m, readmemstats_mⁱᵐᵖˡ); (readGCStats, readGCStatsⁱᵐᵖˡ); (readGCStats_m, readGCStats_mⁱᵐᵖˡ); (flushmcache, flushmcacheⁱᵐᵖˡ); (flushallmcaches, flushallmcachesⁱᵐᵖˡ); (wbBufFlush, wbBufFlushⁱᵐᵖˡ); (wbBufFlush1, wbBufFlush1ⁱᵐᵖˡ); (nonblockingPipe, nonblockingPipeⁱᵐᵖˡ); (poll_runtime_pollServerInit, poll_runtime_pollServerInitⁱᵐᵖˡ); (netpollGenericInit, netpollGenericInitⁱᵐᵖˡ); (netpollinited, netpollinitedⁱᵐᵖˡ); (poll_runtime_isPollServerDescriptor, poll_runtime_isPollServerDescriptorⁱᵐᵖˡ); (poll_runtime_pollOpen, poll_runtime_pollOpenⁱᵐᵖˡ); (poll_runtime_pollClose, poll_runtime_pollCloseⁱᵐᵖˡ); (poll_runtime_pollReset, poll_runtime_pollResetⁱᵐᵖˡ); (poll_runtime_pollWait, poll_runtime_pollWaitⁱᵐᵖˡ); (poll_runtime_pollWaitCanceled, poll_runtime_pollWaitCanceledⁱᵐᵖˡ); (poll_runtime_pollSetDeadline, poll_runtime_pollSetDeadlineⁱᵐᵖˡ); (poll_runtime_pollUnblock, poll_runtime_pollUnblockⁱᵐᵖˡ); (netpollready, netpollreadyⁱᵐᵖˡ); (netpollcheckerr, netpollcheckerrⁱᵐᵖˡ); (netpollblockcommit, netpollblockcommitⁱᵐᵖˡ); (netpollgoready, netpollgoreadyⁱᵐᵖˡ); (netpollblock, netpollblockⁱᵐᵖˡ); (netpollunblock, netpollunblockⁱᵐᵖˡ); (netpolldeadlineimpl, netpolldeadlineimplⁱᵐᵖˡ); (netpollDeadline, netpollDeadlineⁱᵐᵖˡ); (netpollReadDeadline, netpollReadDeadlineⁱᵐᵖˡ); (netpollWriteDeadline, netpollWriteDeadlineⁱᵐᵖˡ); (netpollAnyWaiters, netpollAnyWaitersⁱᵐᵖˡ); (netpollAdjustWaiters, netpollAdjustWaitersⁱᵐᵖˡ); (netpollinit, netpollinitⁱᵐᵖˡ); (netpollIsPollDescriptor, netpollIsPollDescriptorⁱᵐᵖˡ); (netpollopen, netpollopenⁱᵐᵖˡ); (netpollclose, netpollcloseⁱᵐᵖˡ); (netpollarm, netpollarmⁱᵐᵖˡ); (netpollBreak, netpollBreakⁱᵐᵖˡ); (netpoll, netpollⁱᵐᵖˡ); (osRelax, osRelaxⁱᵐᵖˡ); (enableWER, enableWERⁱᵐᵖˡ); (futex, futexⁱᵐᵖˡ); (futexsleep, futexsleepⁱᵐᵖˡ); (futexwakeup, futexwakeupⁱᵐᵖˡ); (getproccount, getproccountⁱᵐᵖˡ); (clone, cloneⁱᵐᵖˡ); (newosproc, newosprocⁱᵐᵖˡ); (newosproc0, newosproc0ⁱᵐᵖˡ); (mincore, mincoreⁱᵐᵖˡ); (sysargs, sysargsⁱᵐᵖˡ); (sysauxv, sysauxvⁱᵐᵖˡ); (getHugePageSize, getHugePageSizeⁱᵐᵖˡ); (osinit, osinitⁱᵐᵖˡ); (readRandom, readRandomⁱᵐᵖˡ); (goenvs, goenvsⁱᵐᵖˡ); (libpreinit, libpreinitⁱᵐᵖˡ); (mpreinit, mpreinitⁱᵐᵖˡ); (gettid, gettidⁱᵐᵖˡ); (minit, minitⁱᵐᵖˡ); (unminit, unminitⁱᵐᵖˡ); (mdestroy, mdestroyⁱᵐᵖˡ); (sigreturn__sigaction, sigreturn__sigactionⁱᵐᵖˡ); (sigtramp, sigtrampⁱᵐᵖˡ); (cgoSigtramp, cgoSigtrampⁱᵐᵖˡ); (sigaltstack, sigaltstackⁱᵐᵖˡ); (setitimer, setitimerⁱᵐᵖˡ); (timer_create, timer_createⁱᵐᵖˡ); (timer_settime, timer_settimeⁱᵐᵖˡ); (timer_delete, timer_deleteⁱᵐᵖˡ); (rtsigprocmask, rtsigprocmaskⁱᵐᵖˡ); (sigprocmask, sigprocmaskⁱᵐᵖˡ); (raise, raiseⁱᵐᵖˡ); (raiseproc, raiseprocⁱᵐᵖˡ); (sched_getaffinity, sched_getaffinityⁱᵐᵖˡ); (osyield, osyieldⁱᵐᵖˡ); (osyield_no_g, osyield_no_gⁱᵐᵖˡ); (pipe2, pipe2ⁱᵐᵖˡ); (fcntl, fcntlⁱᵐᵖˡ); (setsig, setsigⁱᵐᵖˡ); (setsigstack, setsigstackⁱᵐᵖˡ); (getsig, getsigⁱᵐᵖˡ); (setSignalstackSP, setSignalstackSPⁱᵐᵖˡ); (sysSigaction, sysSigactionⁱᵐᵖˡ); (rt_sigaction, rt_sigactionⁱᵐᵖˡ); (getpid, getpidⁱᵐᵖˡ); (tgkill, tgkillⁱᵐᵖˡ); (signalM, signalMⁱᵐᵖˡ); (validSIGPROF, validSIGPROFⁱᵐᵖˡ); (setProcessCPUProfiler, setProcessCPUProfilerⁱᵐᵖˡ); (setThreadCPUProfiler, setThreadCPUProfilerⁱᵐᵖˡ); (syscall_runtime_doAllThreadsSyscall, syscall_runtime_doAllThreadsSyscallⁱᵐᵖˡ); (runPerThreadSyscall, runPerThreadSyscallⁱᵐᵖˡ); (mprotect, mprotectⁱᵐᵖˡ); (sigaddset, sigaddsetⁱᵐᵖˡ); (sigdelset, sigdelsetⁱᵐᵖˡ); (sigfillset, sigfillsetⁱᵐᵖˡ); (archauxv, archauxvⁱᵐᵖˡ); (osArchInit, osArchInitⁱᵐᵖˡ); (osStackAlloc, osStackAllocⁱᵐᵖˡ); (osStackFree, osStackFreeⁱᵐᵖˡ); (closeonexec, closeonexecⁱᵐᵖˡ); (panicCheck1, panicCheck1ⁱᵐᵖˡ); (panicCheck2, panicCheck2ⁱᵐᵖˡ); (goPanicIndex, goPanicIndexⁱᵐᵖˡ); (goPanicIndexU, goPanicIndexUⁱᵐᵖˡ); (goPanicSliceAlen, goPanicSliceAlenⁱᵐᵖˡ); (goPanicSliceAlenU, goPanicSliceAlenUⁱᵐᵖˡ); (goPanicSliceAcap, goPanicSliceAcapⁱᵐᵖˡ); (goPanicSliceAcapU, goPanicSliceAcapUⁱᵐᵖˡ); (goPanicSliceB, goPanicSliceBⁱᵐᵖˡ); (goPanicSliceBU, goPanicSliceBUⁱᵐᵖˡ); (goPanicSlice3Alen, goPanicSlice3Alenⁱᵐᵖˡ); (goPanicSlice3AlenU, goPanicSlice3AlenUⁱᵐᵖˡ); (goPanicSlice3Acap, goPanicSlice3Acapⁱᵐᵖˡ); (goPanicSlice3AcapU, goPanicSlice3AcapUⁱᵐᵖˡ); (goPanicSlice3B, goPanicSlice3Bⁱᵐᵖˡ); (goPanicSlice3BU, goPanicSlice3BUⁱᵐᵖˡ); (goPanicSlice3C, goPanicSlice3Cⁱᵐᵖˡ); (goPanicSlice3CU, goPanicSlice3CUⁱᵐᵖˡ); (goPanicSliceConvert, goPanicSliceConvertⁱᵐᵖˡ); (panicIndex, panicIndexⁱᵐᵖˡ); (panicIndexU, panicIndexUⁱᵐᵖˡ); (panicSliceAlen, panicSliceAlenⁱᵐᵖˡ); (panicSliceAlenU, panicSliceAlenUⁱᵐᵖˡ); (panicSliceAcap, panicSliceAcapⁱᵐᵖˡ); (panicSliceAcapU, panicSliceAcapUⁱᵐᵖˡ); (panicSliceB, panicSliceBⁱᵐᵖˡ); (panicSliceBU, panicSliceBUⁱᵐᵖˡ); (panicSlice3Alen, panicSlice3Alenⁱᵐᵖˡ); (panicSlice3AlenU, panicSlice3AlenUⁱᵐᵖˡ); (panicSlice3Acap, panicSlice3Acapⁱᵐᵖˡ); (panicSlice3AcapU, panicSlice3AcapUⁱᵐᵖˡ); (panicSlice3B, panicSlice3Bⁱᵐᵖˡ); (panicSlice3BU, panicSlice3BUⁱᵐᵖˡ); (panicSlice3C, panicSlice3Cⁱᵐᵖˡ); (panicSlice3CU, panicSlice3CUⁱᵐᵖˡ); (panicSliceConvert, panicSliceConvertⁱᵐᵖˡ); (panicshift, panicshiftⁱᵐᵖˡ); (panicdivide, panicdivideⁱᵐᵖˡ); (panicoverflow, panicoverflowⁱᵐᵖˡ); (panicfloat, panicfloatⁱᵐᵖˡ); (panicmem, panicmemⁱᵐᵖˡ); (panicmemAddr, panicmemAddrⁱᵐᵖˡ); (deferproc, deferprocⁱᵐᵖˡ); (panicrangestate, panicrangestateⁱᵐᵖˡ); (deferrangefunc, deferrangefuncⁱᵐᵖˡ); (badDefer, badDeferⁱᵐᵖˡ); (deferprocat, deferprocatⁱᵐᵖˡ); (deferconvert, deferconvertⁱᵐᵖˡ); (deferprocStack, deferprocStackⁱᵐᵖˡ); (newdefer, newdeferⁱᵐᵖˡ); (popDefer, popDeferⁱᵐᵖˡ); (deferreturn, deferreturnⁱᵐᵖˡ); (Goexit, Goexitⁱᵐᵖˡ); (preprintpanics, preprintpanicsⁱᵐᵖˡ); (printpanics, printpanicsⁱᵐᵖˡ); (readvarintUnsafe, readvarintUnsafeⁱᵐᵖˡ); (gopanic, gopanicⁱᵐᵖˡ); (gorecover, gorecoverⁱᵐᵖˡ); (sync_throw, sync_throwⁱᵐᵖˡ); (sync_fatal, sync_fatalⁱᵐᵖˡ); (rand_fatal, rand_fatalⁱᵐᵖˡ); (sysrand_fatal, sysrand_fatalⁱᵐᵖˡ); (fips_fatal, fips_fatalⁱᵐᵖˡ); (maps_fatal, maps_fatalⁱᵐᵖˡ); (internal_sync_throw, internal_sync_throwⁱᵐᵖˡ); (internal_sync_fatal, internal_sync_fatalⁱᵐᵖˡ); (throw, throwⁱᵐᵖˡ); (fatal, fatalⁱᵐᵖˡ); (recovery, recoveryⁱᵐᵖˡ); (fatalthrow, fatalthrowⁱᵐᵖˡ); (fatalpanic, fatalpanicⁱᵐᵖˡ); (startpanic_m, startpanic_mⁱᵐᵖˡ); (dopanic_m, dopanic_mⁱᵐᵖˡ); (canpanic, canpanicⁱᵐᵖˡ); (shouldPushSigpanic, shouldPushSigpanicⁱᵐᵖˡ); (isAbortPC, isAbortPCⁱᵐᵖˡ); (pinnerGetPtr, pinnerGetPtrⁱᵐᵖˡ); (isPinned, isPinnedⁱᵐᵖˡ); (setPinned, setPinnedⁱᵐᵖˡ); (pinnerGetPinCounter, pinnerGetPinCounterⁱᵐᵖˡ); (plugin_lastmoduleinit, plugin_lastmoduleinitⁱᵐᵖˡ); (pluginftabverify, pluginftabverifyⁱᵐᵖˡ); (inRange, inRangeⁱᵐᵖˡ); (suspendG, suspendGⁱᵐᵖˡ); (resumeG, resumeGⁱᵐᵖˡ); (canPreemptM, canPreemptMⁱᵐᵖˡ); (asyncPreempt, asyncPreemptⁱᵐᵖˡ); (asyncPreempt2, asyncPreempt2ⁱᵐᵖˡ); (wantAsyncPreempt, wantAsyncPreemptⁱᵐᵖˡ); (isAsyncSafePoint, isAsyncSafePointⁱᵐᵖˡ); (osPreemptExtEnter, osPreemptExtEnterⁱᵐᵖˡ); (osPreemptExtExit, osPreemptExtExitⁱᵐᵖˡ); (bytes, bytesⁱᵐᵖˡ); (recordForPanic, recordForPanicⁱᵐᵖˡ); (printlock, printlockⁱᵐᵖˡ); (printunlock, printunlockⁱᵐᵖˡ); (gwrite, gwriteⁱᵐᵖˡ); (printsp, printspⁱᵐᵖˡ); (printnl, printnlⁱᵐᵖˡ); (printbool, printboolⁱᵐᵖˡ); (printfloat, printfloatⁱᵐᵖˡ); (printcomplex, printcomplexⁱᵐᵖˡ); (printuint, printuintⁱᵐᵖˡ); (printint, printintⁱᵐᵖˡ); (printhex, printhexⁱᵐᵖˡ); (printpointer, printpointerⁱᵐᵖˡ); (printuintptr, printuintptrⁱᵐᵖˡ); (printstring, printstringⁱᵐᵖˡ); (printslice, printsliceⁱᵐᵖˡ); (printeface, printefaceⁱᵐᵖˡ); (printiface, printifaceⁱᵐᵖˡ); (hexdumpWords, hexdumpWordsⁱᵐᵖˡ); (main_main, main_mainⁱᵐᵖˡ); (main, mainⁱᵐᵖˡ); (os_beforeExit, os_beforeExitⁱᵐᵖˡ); (runExitHooks, runExitHooksⁱᵐᵖˡ); (forcegchelper, forcegchelperⁱᵐᵖˡ); (Gosched, Goschedⁱᵐᵖˡ); (goschedguarded, goschedguardedⁱᵐᵖˡ); (goschedIfBusy, goschedIfBusyⁱᵐᵖˡ); (gopark, goparkⁱᵐᵖˡ); (goparkunlock, goparkunlockⁱᵐᵖˡ); (goready, goreadyⁱᵐᵖˡ); (acquireSudog, acquireSudogⁱᵐᵖˡ); (releaseSudog, releaseSudogⁱᵐᵖˡ); (badmcall, badmcallⁱᵐᵖˡ); (badmcall2, badmcall2ⁱᵐᵖˡ); (badreflectcall, badreflectcallⁱᵐᵖˡ); (badmorestackg0, badmorestackg0ⁱᵐᵖˡ); (badmorestackgsignal, badmorestackgsignalⁱᵐᵖˡ); (badctxt, badctxtⁱᵐᵖˡ); (switchToCrashStack, switchToCrashStackⁱᵐᵖˡ); (switchToCrashStack0, switchToCrashStack0ⁱᵐᵖˡ); (lockedOSThread, lockedOSThreadⁱᵐᵖˡ); (allgadd, allgaddⁱᵐᵖˡ); (allGsSnapshot, allGsSnapshotⁱᵐᵖˡ); (atomicAllG, atomicAllGⁱᵐᵖˡ); (atomicAllGIndex, atomicAllGIndexⁱᵐᵖˡ); (forEachG, forEachGⁱᵐᵖˡ); (forEachGRace, forEachGRaceⁱᵐᵖˡ); (cpuinit, cpuinitⁱᵐᵖˡ); (getGodebugEarly, getGodebugEarlyⁱᵐᵖˡ); (schedinit, schedinitⁱᵐᵖˡ); (dumpgstatus, dumpgstatusⁱᵐᵖˡ); (checkmcount, checkmcountⁱᵐᵖˡ); (mReserveID, mReserveIDⁱᵐᵖˡ); (mcommoninit, mcommoninitⁱᵐᵖˡ); (mProfStackInit, mProfStackInitⁱᵐᵖˡ); (makeProfStackFP, makeProfStackFPⁱᵐᵖˡ); (makeProfStack, makeProfStackⁱᵐᵖˡ); (pprof_makeProfStack, pprof_makeProfStackⁱᵐᵖˡ); (ready, readyⁱᵐᵖˡ); (freezetheworld, freezetheworldⁱᵐᵖˡ); (readgstatus, readgstatusⁱᵐᵖˡ); (casfrom_Gscanstatus, casfrom_Gscanstatusⁱᵐᵖˡ); (castogscanstatus, castogscanstatusⁱᵐᵖˡ); (casgstatus, casgstatusⁱᵐᵖˡ); (casGToWaiting, casGToWaitingⁱᵐᵖˡ); (casGToWaitingForSuspendG, casGToWaitingForSuspendGⁱᵐᵖˡ); (casGToPreemptScan, casGToPreemptScanⁱᵐᵖˡ); (casGFromPreempted, casGFromPreemptedⁱᵐᵖˡ); (stopTheWorld, stopTheWorldⁱᵐᵖˡ); (startTheWorld, startTheWorldⁱᵐᵖˡ); (stopTheWorldGC, stopTheWorldGCⁱᵐᵖˡ); (startTheWorldGC, startTheWorldGCⁱᵐᵖˡ); (stopTheWorldWithSema, stopTheWorldWithSemaⁱᵐᵖˡ); (startTheWorldWithSema, startTheWorldWithSemaⁱᵐᵖˡ); (usesLibcall, usesLibcallⁱᵐᵖˡ); (mStackIsSystemAllocated, mStackIsSystemAllocatedⁱᵐᵖˡ); (mstart, mstartⁱᵐᵖˡ); (mstart0, mstart0ⁱᵐᵖˡ); (mstart1, mstart1ⁱᵐᵖˡ); (mstartm0, mstartm0ⁱᵐᵖˡ); (mPark, mParkⁱᵐᵖˡ); (mexit, mexitⁱᵐᵖˡ); (forEachP, forEachPⁱᵐᵖˡ); (forEachPInternal, forEachPInternalⁱᵐᵖˡ); (runSafePointFn, runSafePointFnⁱᵐᵖˡ); (allocm, allocmⁱᵐᵖˡ); (needm, needmⁱᵐᵖˡ); (needAndBindM, needAndBindMⁱᵐᵖˡ); (newextram, newextramⁱᵐᵖˡ); (oneNewExtraM, oneNewExtraMⁱᵐᵖˡ); (dropm, dropmⁱᵐᵖˡ); (cgoBindM, cgoBindMⁱᵐᵖˡ); (getm, getmⁱᵐᵖˡ); (lockextra, lockextraⁱᵐᵖˡ); (unlockextra, unlockextraⁱᵐᵖˡ); (getExtraM, getExtraMⁱᵐᵖˡ); (putExtraM, putExtraMⁱᵐᵖˡ); (addExtraM, addExtraMⁱᵐᵖˡ); (newm, newmⁱᵐᵖˡ); (newm1, newm1ⁱᵐᵖˡ); (startTemplateThread, startTemplateThreadⁱᵐᵖˡ); (templateThread, templateThreadⁱᵐᵖˡ); (stopm, stopmⁱᵐᵖˡ); (mspinning, mspinningⁱᵐᵖˡ); (startm, startmⁱᵐᵖˡ); (handoffp, handoffpⁱᵐᵖˡ); (wakep, wakepⁱᵐᵖˡ); (stoplockedm, stoplockedmⁱᵐᵖˡ); (startlockedm, startlockedmⁱᵐᵖˡ); (gcstopm, gcstopmⁱᵐᵖˡ); (execute, executeⁱᵐᵖˡ); (findRunnable, findRunnableⁱᵐᵖˡ); (pollWork, pollWorkⁱᵐᵖˡ); (stealWork, stealWorkⁱᵐᵖˡ); (checkRunqsNoP, checkRunqsNoPⁱᵐᵖˡ); (checkTimersNoP, checkTimersNoPⁱᵐᵖˡ); (checkIdleGCNoP, checkIdleGCNoPⁱᵐᵖˡ); (wakeNetPoller, wakeNetPollerⁱᵐᵖˡ); (resetspinning, resetspinningⁱᵐᵖˡ); (injectglist, injectglistⁱᵐᵖˡ); (schedule, scheduleⁱᵐᵖˡ); (dropg, dropgⁱᵐᵖˡ); (parkunlock_c, parkunlock_cⁱᵐᵖˡ); (park_m, park_mⁱᵐᵖˡ); (goschedImpl, goschedImplⁱᵐᵖˡ); (gosched_m, gosched_mⁱᵐᵖˡ); (goschedguarded_m, goschedguarded_mⁱᵐᵖˡ); (gopreempt_m, gopreempt_mⁱᵐᵖˡ); (preemptPark, preemptParkⁱᵐᵖˡ); (goyield, goyieldⁱᵐᵖˡ); (goyield_m, goyield_mⁱᵐᵖˡ); (goexit1, goexit1ⁱᵐᵖˡ); (goexit0, goexit0ⁱᵐᵖˡ); (gdestroy, gdestroyⁱᵐᵖˡ); (save, saveⁱᵐᵖˡ); (reentersyscall, reentersyscallⁱᵐᵖˡ); (entersyscall, entersyscallⁱᵐᵖˡ); (entersyscall_sysmon, entersyscall_sysmonⁱᵐᵖˡ); (entersyscall_gcwait, entersyscall_gcwaitⁱᵐᵖˡ); (entersyscallblock, entersyscallblockⁱᵐᵖˡ); (entersyscallblock_handoff, entersyscallblock_handoffⁱᵐᵖˡ); (exitsyscall, exitsyscallⁱᵐᵖˡ); (exitsyscallfast, exitsyscallfastⁱᵐᵖˡ); (exitsyscallfast_reacquired, exitsyscallfast_reacquiredⁱᵐᵖˡ); (exitsyscallfast_pidle, exitsyscallfast_pidleⁱᵐᵖˡ); (exitsyscall0, exitsyscall0ⁱᵐᵖˡ); (syscall_runtime_BeforeFork, syscall_runtime_BeforeForkⁱᵐᵖˡ); (syscall_runtime_AfterFork, syscall_runtime_AfterForkⁱᵐᵖˡ); (syscall_runtime_AfterForkInChild, syscall_runtime_AfterForkInChildⁱᵐᵖˡ); (syscall_runtime_BeforeExec, syscall_runtime_BeforeExecⁱᵐᵖˡ); (syscall_runtime_AfterExec, syscall_runtime_AfterExecⁱᵐᵖˡ); (malg, malgⁱᵐᵖˡ); (newproc, newprocⁱᵐᵖˡ); (newproc1, newproc1ⁱᵐᵖˡ); (saveAncestors, saveAncestorsⁱᵐᵖˡ); (gfput, gfputⁱᵐᵖˡ); (gfget, gfgetⁱᵐᵖˡ); (gfpurge, gfpurgeⁱᵐᵖˡ); (Breakpoint, Breakpointⁱᵐᵖˡ); (dolockOSThread, dolockOSThreadⁱᵐᵖˡ); (LockOSThread, LockOSThreadⁱᵐᵖˡ); (lockOSThread, lockOSThreadⁱᵐᵖˡ); (dounlockOSThread, dounlockOSThreadⁱᵐᵖˡ); (UnlockOSThread, UnlockOSThreadⁱᵐᵖˡ); (unlockOSThread, unlockOSThreadⁱᵐᵖˡ); (badunlockosthread, badunlockosthreadⁱᵐᵖˡ); (gcount, gcountⁱᵐᵖˡ); (mcount, mcountⁱᵐᵖˡ); (_System, _Systemⁱᵐᵖˡ); (_ExternalCode, _ExternalCodeⁱᵐᵖˡ); (_LostExternalCode, _LostExternalCodeⁱᵐᵖˡ); (_GC, _GCⁱᵐᵖˡ); (_LostSIGPROFDuringAtomic64, _LostSIGPROFDuringAtomic64ⁱᵐᵖˡ); (_LostContendedRuntimeLock, _LostContendedRuntimeLockⁱᵐᵖˡ); (_VDSO, _VDSOⁱᵐᵖˡ); (sigprof, sigprofⁱᵐᵖˡ); (setcpuprofilerate, setcpuprofilerateⁱᵐᵖˡ); (procresize, procresizeⁱᵐᵖˡ); (acquirep, acquirepⁱᵐᵖˡ); (wirep, wirepⁱᵐᵖˡ); (releasep, releasepⁱᵐᵖˡ); (releasepNoTrace, releasepNoTraceⁱᵐᵖˡ); (incidlelocked, incidlelockedⁱᵐᵖˡ); (checkdead, checkdeadⁱᵐᵖˡ); (sysmon, sysmonⁱᵐᵖˡ); (retake, retakeⁱᵐᵖˡ); (preemptall, preemptallⁱᵐᵖˡ); (preemptone, preemptoneⁱᵐᵖˡ); (schedtrace, schedtraceⁱᵐᵖˡ); (schedEnableUser, schedEnableUserⁱᵐᵖˡ); (schedEnabled, schedEnabledⁱᵐᵖˡ); (mput, mputⁱᵐᵖˡ); (mget, mgetⁱᵐᵖˡ); (globrunqput, globrunqputⁱᵐᵖˡ); (globrunqputhead, globrunqputheadⁱᵐᵖˡ); (globrunqputbatch, globrunqputbatchⁱᵐᵖˡ); (globrunqget, globrunqgetⁱᵐᵖˡ); (pidleput, pidleputⁱᵐᵖˡ); (pidleget, pidlegetⁱᵐᵖˡ); (pidlegetSpinning, pidlegetSpinningⁱᵐᵖˡ); (runqempty, runqemptyⁱᵐᵖˡ); (runqput, runqputⁱᵐᵖˡ); (runqputslow, runqputslowⁱᵐᵖˡ); (runqputbatch, runqputbatchⁱᵐᵖˡ); (runqget, runqgetⁱᵐᵖˡ); (runqdrain, runqdrainⁱᵐᵖˡ); (runqgrab, runqgrabⁱᵐᵖˡ); (runqsteal, runqstealⁱᵐᵖˡ); (setMaxThreads, setMaxThreadsⁱᵐᵖˡ); (procPin, procPinⁱᵐᵖˡ); (procUnpin, procUnpinⁱᵐᵖˡ); (sync_runtime_procPin, sync_runtime_procPinⁱᵐᵖˡ); (sync_runtime_procUnpin, sync_runtime_procUnpinⁱᵐᵖˡ); (sync_atomic_runtime_procPin, sync_atomic_runtime_procPinⁱᵐᵖˡ); (sync_atomic_runtime_procUnpin, sync_atomic_runtime_procUnpinⁱᵐᵖˡ); (internal_sync_runtime_canSpin, internal_sync_runtime_canSpinⁱᵐᵖˡ); (internal_sync_runtime_doSpin, internal_sync_runtime_doSpinⁱᵐᵖˡ); (sync_runtime_canSpin, sync_runtime_canSpinⁱᵐᵖˡ); (sync_runtime_doSpin, sync_runtime_doSpinⁱᵐᵖˡ); (gcd, gcdⁱᵐᵖˡ); (doInit, doInitⁱᵐᵖˡ); (doInit1, doInit1ⁱᵐᵖˡ); (countSub, countSubⁱᵐᵖˡ); (newProfBuf, newProfBufⁱᵐᵖˡ); (runtime_setProfLabel, runtime_setProfLabelⁱᵐᵖˡ); (runtime_getProfLabel, runtime_getProfLabelⁱᵐᵖˡ); (raceReadObjectPC, raceReadObjectPCⁱᵐᵖˡ); (raceWriteObjectPC, raceWriteObjectPCⁱᵐᵖˡ); (raceinit, raceinitⁱᵐᵖˡ); (racefini, racefiniⁱᵐᵖˡ); (raceproccreate, raceproccreateⁱᵐᵖˡ); (raceprocdestroy, raceprocdestroyⁱᵐᵖˡ); (racemapshadow, racemapshadowⁱᵐᵖˡ); (racewritepc, racewritepcⁱᵐᵖˡ); (racereadpc, racereadpcⁱᵐᵖˡ); (racereadrangepc, racereadrangepcⁱᵐᵖˡ); (racewriterangepc, racewriterangepcⁱᵐᵖˡ); (raceacquire, raceacquireⁱᵐᵖˡ); (raceacquireg, raceacquiregⁱᵐᵖˡ); (raceacquirectx, raceacquirectxⁱᵐᵖˡ); (racerelease, racereleaseⁱᵐᵖˡ); (racereleaseg, racereleasegⁱᵐᵖˡ); (racereleaseacquire, racereleaseacquireⁱᵐᵖˡ); (racereleaseacquireg, racereleaseacquiregⁱᵐᵖˡ); (racereleasemerge, racereleasemergeⁱᵐᵖˡ); (racereleasemergeg, racereleasemergegⁱᵐᵖˡ); (racefingo, racefingoⁱᵐᵖˡ); (racemalloc, racemallocⁱᵐᵖˡ); (racefree, racefreeⁱᵐᵖˡ); (racegostart, racegostartⁱᵐᵖˡ); (racegoend, racegoendⁱᵐᵖˡ); (racectxend, racectxendⁱᵐᵖˡ); (randinit, randinitⁱᵐᵖˡ); (readTimeRandom, readTimeRandomⁱᵐᵖˡ); (allZero, allZeroⁱᵐᵖˡ); (bootstrapRand, bootstrapRandⁱᵐᵖˡ); (bootstrapRandReseed, bootstrapRandReseedⁱᵐᵖˡ); (rand32, rand32ⁱᵐᵖˡ); (rand, randⁱᵐᵖˡ); (maps_rand, maps_randⁱᵐᵖˡ); (mrandinit, mrandinitⁱᵐᵖˡ); (randn, randnⁱᵐᵖˡ); (cheaprand, cheaprandⁱᵐᵖˡ); (cheaprand64, cheaprand64ⁱᵐᵖˡ); (cheaprandn, cheaprandnⁱᵐᵖˡ); (legacy_fastrand, legacy_fastrandⁱᵐᵖˡ); (legacy_fastrandn, legacy_fastrandnⁱᵐᵖˡ); (legacy_fastrand64, legacy_fastrand64ⁱᵐᵖˡ); (setMaxStack, setMaxStackⁱᵐᵖˡ); (setPanicOnFault, setPanicOnFaultⁱᵐᵖˡ); (retryOnEAGAIN, retryOnEAGAINⁱᵐᵖˡ); (ticksPerSecond, ticksPerSecondⁱᵐᵖˡ); (syscall_runtime_envs, syscall_runtime_envsⁱᵐᵖˡ); (syscall_Getpagesize, syscall_Getpagesizeⁱᵐᵖˡ); (os_runtime_args, os_runtime_argsⁱᵐᵖˡ); (syscall_Exit, syscall_Exitⁱᵐᵖˡ); (godebug_setUpdate, godebug_setUpdateⁱᵐᵖˡ); (godebug_setNewIncNonDefault, godebug_setNewIncNonDefaultⁱᵐᵖˡ); (godebugNotify, godebugNotifyⁱᵐᵖˡ); (syscall_runtimeSetenv, syscall_runtimeSetenvⁱᵐᵖˡ); (syscall_runtimeUnsetenv, syscall_runtimeUnsetenvⁱᵐᵖˡ); (writeErrStr, writeErrStrⁱᵐᵖˡ); (writeErrData, writeErrDataⁱᵐᵖˡ); (setCrashFD, setCrashFDⁱᵐᵖˡ); (getAuxv, getAuxvⁱᵐᵖˡ); (gotraceback, gotracebackⁱᵐᵖˡ); (argv_index, argv_indexⁱᵐᵖˡ); (args, argsⁱᵐᵖˡ); (goargs, goargsⁱᵐᵖˡ); (goenvs_unix, goenvs_unixⁱᵐᵖˡ); (environ, environⁱᵐᵖˡ); (testAtomic64, testAtomic64ⁱᵐᵖˡ); (check, checkⁱᵐᵖˡ); (parsedebugvars, parsedebugvarsⁱᵐᵖˡ); (reparsedebugvars, reparsedebugvarsⁱᵐᵖˡ); (parsegodebug, parsegodebugⁱᵐᵖˡ); (setTraceback, setTracebackⁱᵐᵖˡ); (timediv, timedivⁱᵐᵖˡ); (acquirem, acquiremⁱᵐᵖˡ); (releasem, releasemⁱᵐᵖˡ); (reflect_typelinks, reflect_typelinksⁱᵐᵖˡ); (reflect_resolveNameOff, reflect_resolveNameOffⁱᵐᵖˡ); (reflect_resolveTypeOff, reflect_resolveTypeOffⁱᵐᵖˡ); (reflect_resolveTextOff, reflect_resolveTextOffⁱᵐᵖˡ); (reflectlite_resolveNameOff, reflectlite_resolveNameOffⁱᵐᵖˡ); (reflectlite_resolveTypeOff, reflectlite_resolveTypeOffⁱᵐᵖˡ); (reflect_addReflectOff, reflect_addReflectOffⁱᵐᵖˡ); (fips_getIndicator, fips_getIndicatorⁱᵐᵖˡ); (fips_setIndicator, fips_setIndicatorⁱᵐᵖˡ); (efaceOf, efaceOfⁱᵐᵖˡ); (setGNoWB, setGNoWBⁱᵐᵖˡ); (setMNoWB, setMNoWBⁱᵐᵖˡ); (getcallerfp, getcallerfpⁱᵐᵖˡ); (boring_runtime_arg0, boring_runtime_arg0ⁱᵐᵖˡ); (fipstls_runtime_arg0, fipstls_runtime_arg0ⁱᵐᵖˡ); (initSecureMode, initSecureModeⁱᵐᵖˡ); (isSecureMode, isSecureModeⁱᵐᵖˡ); (secure, secureⁱᵐᵖˡ); (secureEnv, secureEnvⁱᵐᵖˡ); (selectsetpc, selectsetpcⁱᵐᵖˡ); (sellock, sellockⁱᵐᵖˡ); (selunlock, selunlockⁱᵐᵖˡ); (selparkcommit, selparkcommitⁱᵐᵖˡ); (block, blockⁱᵐᵖˡ); (selectgo, selectgoⁱᵐᵖˡ); (reflect_rselect, reflect_rselectⁱᵐᵖˡ); (sync_runtime_Semacquire, sync_runtime_Semacquireⁱᵐᵖˡ); (poll_runtime_Semacquire, poll_runtime_Semacquireⁱᵐᵖˡ); (sync_runtime_Semrelease, sync_runtime_Semreleaseⁱᵐᵖˡ); (internal_sync_runtime_SemacquireMutex, internal_sync_runtime_SemacquireMutexⁱᵐᵖˡ); (sync_runtime_SemacquireRWMutexR, sync_runtime_SemacquireRWMutexRⁱᵐᵖˡ); (sync_runtime_SemacquireRWMutex, sync_runtime_SemacquireRWMutexⁱᵐᵖˡ); (sync_runtime_SemacquireWaitGroup, sync_runtime_SemacquireWaitGroupⁱᵐᵖˡ); (poll_runtime_Semrelease, poll_runtime_Semreleaseⁱᵐᵖˡ); (internal_sync_runtime_Semrelease, internal_sync_runtime_Semreleaseⁱᵐᵖˡ); (readyWithTime, readyWithTimeⁱᵐᵖˡ); (semacquire, semacquireⁱᵐᵖˡ); (semacquire1, semacquire1ⁱᵐᵖˡ); (semrelease, semreleaseⁱᵐᵖˡ); (semrelease1, semrelease1ⁱᵐᵖˡ); (cansemacquire, cansemacquireⁱᵐᵖˡ); (less, lessⁱᵐᵖˡ); (notifyListAdd, notifyListAddⁱᵐᵖˡ); (notifyListWait, notifyListWaitⁱᵐᵖˡ); (notifyListNotifyAll, notifyListNotifyAllⁱᵐᵖˡ); (notifyListNotifyOne, notifyListNotifyOneⁱᵐᵖˡ); (notifyListCheck, notifyListCheckⁱᵐᵖˡ); (internal_sync_nanotime, internal_sync_nanotimeⁱᵐᵖˡ); (dumpregs, dumpregsⁱᵐᵖˡ); (os_sigpipe, os_sigpipeⁱᵐᵖˡ); (signame, signameⁱᵐᵖˡ); (initsig, initsigⁱᵐᵖˡ); (sigInstallGoHandler, sigInstallGoHandlerⁱᵐᵖˡ); (sigenable, sigenableⁱᵐᵖˡ); (sigdisable, sigdisableⁱᵐᵖˡ); (sigignore, sigignoreⁱᵐᵖˡ); (clearSignalHandlers, clearSignalHandlersⁱᵐᵖˡ); (setProcessCPUProfilerTimer, setProcessCPUProfilerTimerⁱᵐᵖˡ); (setThreadCPUProfilerHz, setThreadCPUProfilerHzⁱᵐᵖˡ); (sigpipe, sigpipeⁱᵐᵖˡ); (doSigPreempt, doSigPreemptⁱᵐᵖˡ); (preemptM, preemptMⁱᵐᵖˡ); (sigFetchG, sigFetchGⁱᵐᵖˡ); (sigtrampgo, sigtrampgoⁱᵐᵖˡ); (sigprofNonGo, sigprofNonGoⁱᵐᵖˡ); (sigprofNonGoPC, sigprofNonGoPCⁱᵐᵖˡ); (adjustSignalStack, adjustSignalStackⁱᵐᵖˡ); (adjustSignalStack2, adjustSignalStack2ⁱᵐᵖˡ); (ignoreSIGSYS, ignoreSIGSYSⁱᵐᵖˡ); (restoreSIGSYS, restoreSIGSYSⁱᵐᵖˡ); (sighandler, sighandlerⁱᵐᵖˡ); (fatalsignal, fatalsignalⁱᵐᵖˡ); (sigpanic, sigpanicⁱᵐᵖˡ); (dieFromSignal, dieFromSignalⁱᵐᵖˡ); (raisebadsignal, raisebadsignalⁱᵐᵖˡ); (crash, crashⁱᵐᵖˡ); (ensureSigM, ensureSigMⁱᵐᵖˡ); (noSignalStack, noSignalStackⁱᵐᵖˡ); (sigNotOnStack, sigNotOnStackⁱᵐᵖˡ); (signalDuringFork, signalDuringForkⁱᵐᵖˡ); (badsignal, badsignalⁱᵐᵖˡ); (sigfwd, sigfwdⁱᵐᵖˡ); (sigfwdgo, sigfwdgoⁱᵐᵖˡ); (sigsave, sigsaveⁱᵐᵖˡ); (msigrestore, msigrestoreⁱᵐᵖˡ); (sigblock, sigblockⁱᵐᵖˡ); (unblocksig, unblocksigⁱᵐᵖˡ); (minitSignals, minitSignalsⁱᵐᵖˡ); (minitSignalStack, minitSignalStackⁱᵐᵖˡ); (minitSignalMask, minitSignalMaskⁱᵐᵖˡ); (unminitSignals, unminitSignalsⁱᵐᵖˡ); (blockableSig, blockableSigⁱᵐᵖˡ); (setGsignalStack, setGsignalStackⁱᵐᵖˡ); (restoreGsignalStack, restoreGsignalStackⁱᵐᵖˡ); (signalstack, signalstackⁱᵐᵖˡ); (setsigsegv, setsigsegvⁱᵐᵖˡ); (sigsend, sigsendⁱᵐᵖˡ); (signal_recv, signal_recvⁱᵐᵖˡ); (signalWaitUntilIdle, signalWaitUntilIdleⁱᵐᵖˡ); (signal_enable, signal_enableⁱᵐᵖˡ); (signal_disable, signal_disableⁱᵐᵖˡ); (signal_ignore, signal_ignoreⁱᵐᵖˡ); (sigInitIgnored, sigInitIgnoredⁱᵐᵖˡ); (signal_ignored, signal_ignoredⁱᵐᵖˡ); (sigNoteSetup, sigNoteSetupⁱᵐᵖˡ); (sigNoteSleep, sigNoteSleepⁱᵐᵖˡ); (sigNoteWakeup, sigNoteWakeupⁱᵐᵖˡ); (panicmakeslicelen, panicmakeslicelenⁱᵐᵖˡ); (panicmakeslicecap, panicmakeslicecapⁱᵐᵖˡ); (makeslicecopy, makeslicecopyⁱᵐᵖˡ); (makeslice, makesliceⁱᵐᵖˡ); (makeslice64, makeslice64ⁱᵐᵖˡ); (growslice, growsliceⁱᵐᵖˡ); (nextslicecap, nextslicecapⁱᵐᵖˡ); (reflect_growslice, reflect_growsliceⁱᵐᵖˡ); (isPowerOfTwo, isPowerOfTwoⁱᵐᵖˡ); (slicecopy, slicecopyⁱᵐᵖˡ); (bytealg_MakeNoZero, bytealg_MakeNoZeroⁱᵐᵖˡ); (funpack64, funpack64ⁱᵐᵖˡ); (funpack32, funpack32ⁱᵐᵖˡ); (fpack64, fpack64ⁱᵐᵖˡ); (fpack32, fpack32ⁱᵐᵖˡ); (fadd64, fadd64ⁱᵐᵖˡ); (fsub64, fsub64ⁱᵐᵖˡ); (fneg64, fneg64ⁱᵐᵖˡ); (fmul64, fmul64ⁱᵐᵖˡ); (fdiv64, fdiv64ⁱᵐᵖˡ); (f64to32, f64to32ⁱᵐᵖˡ); (f32to64, f32to64ⁱᵐᵖˡ); (fcmp64, fcmp64ⁱᵐᵖˡ); (f64toint, f64tointⁱᵐᵖˡ); (fintto64, fintto64ⁱᵐᵖˡ); (fintto32, fintto32ⁱᵐᵖˡ); (mullu, mulluⁱᵐᵖˡ); (divlu, divluⁱᵐᵖˡ); (fadd32, fadd32ⁱᵐᵖˡ); (fmul32, fmul32ⁱᵐᵖˡ); (fdiv32, fdiv32ⁱᵐᵖˡ); (feq32, feq32ⁱᵐᵖˡ); (fgt32, fgt32ⁱᵐᵖˡ); (fge32, fge32ⁱᵐᵖˡ); (feq64, feq64ⁱᵐᵖˡ); (fgt64, fgt64ⁱᵐᵖˡ); (fge64, fge64ⁱᵐᵖˡ); (fint32to32, fint32to32ⁱᵐᵖˡ); (fint32to64, fint32to64ⁱᵐᵖˡ); (fint64to32, fint64to32ⁱᵐᵖˡ); (fint64to64, fint64to64ⁱᵐᵖˡ); (f32toint32, f32toint32ⁱᵐᵖˡ); (f32toint64, f32toint64ⁱᵐᵖˡ); (f64toint32, f64toint32ⁱᵐᵖˡ); (f64toint64, f64toint64ⁱᵐᵖˡ); (f64touint64, f64touint64ⁱᵐᵖˡ); (f32touint64, f32touint64ⁱᵐᵖˡ); (fuint64to64, fuint64to64ⁱᵐᵖˡ); (fuint64to32, fuint64to32ⁱᵐᵖˡ); (stackinit, stackinitⁱᵐᵖˡ); (stacklog2, stacklog2ⁱᵐᵖˡ); (stackpoolalloc, stackpoolallocⁱᵐᵖˡ); (stackpoolfree, stackpoolfreeⁱᵐᵖˡ); (stackcacherefill, stackcacherefillⁱᵐᵖˡ); (stackcacherelease, stackcachereleaseⁱᵐᵖˡ); (stackcache_clear, stackcache_clearⁱᵐᵖˡ); (stackalloc, stackallocⁱᵐᵖˡ); (stackfree, stackfreeⁱᵐᵖˡ); (adjustpointer, adjustpointerⁱᵐᵖˡ); (adjustpointers, adjustpointersⁱᵐᵖˡ); (adjustframe, adjustframeⁱᵐᵖˡ); (adjustctxt, adjustctxtⁱᵐᵖˡ); (adjustdefers, adjustdefersⁱᵐᵖˡ); (adjustpanics, adjustpanicsⁱᵐᵖˡ); (adjustsudogs, adjustsudogsⁱᵐᵖˡ); (fillstack, fillstackⁱᵐᵖˡ); (findsghi, findsghiⁱᵐᵖˡ); (syncadjustsudogs, syncadjustsudogsⁱᵐᵖˡ); (copystack, copystackⁱᵐᵖˡ); (round2, round2ⁱᵐᵖˡ); (newstack, newstackⁱᵐᵖˡ); (nilfunc, nilfuncⁱᵐᵖˡ); (gostartcallfn, gostartcallfnⁱᵐᵖˡ); (isShrinkStackSafe, isShrinkStackSafeⁱᵐᵖˡ); (shrinkstack, shrinkstackⁱᵐᵖˡ); (freeStackSpans, freeStackSpansⁱᵐᵖˡ); (morestackc, morestackcⁱᵐᵖˡ); (gcComputeStartingStackSize, gcComputeStartingStackSizeⁱᵐᵖˡ); (stkobjinit, stkobjinitⁱᵐᵖˡ); (concatstrings, concatstringsⁱᵐᵖˡ); (concatstring2, concatstring2ⁱᵐᵖˡ); (concatstring3, concatstring3ⁱᵐᵖˡ); (concatstring4, concatstring4ⁱᵐᵖˡ); (concatstring5, concatstring5ⁱᵐᵖˡ); (concatbytes, concatbytesⁱᵐᵖˡ); (concatbyte2, concatbyte2ⁱᵐᵖˡ); (concatbyte3, concatbyte3ⁱᵐᵖˡ); (concatbyte4, concatbyte4ⁱᵐᵖˡ); (concatbyte5, concatbyte5ⁱᵐᵖˡ); (slicebytetostring, slicebytetostringⁱᵐᵖˡ); (stringDataOnStack, stringDataOnStackⁱᵐᵖˡ); (rawstringtmp, rawstringtmpⁱᵐᵖˡ); (slicebytetostringtmp, slicebytetostringtmpⁱᵐᵖˡ); (stringtoslicebyte, stringtoslicebyteⁱᵐᵖˡ); (stringtoslicerune, stringtosliceruneⁱᵐᵖˡ); (slicerunetostring, slicerunetostringⁱᵐᵖˡ); (stringStructOf, stringStructOfⁱᵐᵖˡ); (intstring, intstringⁱᵐᵖˡ); (rawstring, rawstringⁱᵐᵖˡ); (rawbyteslice, rawbytesliceⁱᵐᵖˡ); (rawruneslice, rawrunesliceⁱᵐᵖˡ); (gobytes, gobytesⁱᵐᵖˡ); (gostring, gostringⁱᵐᵖˡ); (internal_syscall_gostring, internal_syscall_gostringⁱᵐᵖˡ); (gostringn, gostringnⁱᵐᵖˡ); (atoi64, atoi64ⁱᵐᵖˡ); (atoi, atoiⁱᵐᵖˡ); (atoi32, atoi32ⁱᵐᵖˡ); (parseByteCount, parseByteCountⁱᵐᵖˡ); (findnull, findnullⁱᵐᵖˡ); (findnullw, findnullwⁱᵐᵖˡ); (gostringnocopy, gostringnocopyⁱᵐᵖˡ); (gostringw, gostringwⁱᵐᵖˡ); (add, addⁱᵐᵖˡ); (getg, getgⁱᵐᵖˡ); (mcall, mcallⁱᵐᵖˡ); (systemstack, systemstackⁱᵐᵖˡ); (badsystemstack, badsystemstackⁱᵐᵖˡ); (memclrNoHeapPointers, memclrNoHeapPointersⁱᵐᵖˡ); (reflect_memclrNoHeapPointers, reflect_memclrNoHeapPointersⁱᵐᵖˡ); (memmove, memmoveⁱᵐᵖˡ); (reflect_memmove, reflect_memmoveⁱᵐᵖˡ); (memequal, memequalⁱᵐᵖˡ); (noescape, noescapeⁱᵐᵖˡ); (noEscapePtr, noEscapePtrⁱᵐᵖˡ); (cgocallback, cgocallbackⁱᵐᵖˡ); (gogo, gogoⁱᵐᵖˡ); (asminit, asminitⁱᵐᵖˡ); (setg, setgⁱᵐᵖˡ); (breakpoint, breakpointⁱᵐᵖˡ); (reflectcall, reflectcallⁱᵐᵖˡ); (procyield, procyieldⁱᵐᵖˡ); (goexit, goexitⁱᵐᵖˡ); (publicationBarrier, publicationBarrierⁱᵐᵖˡ); (asmcgocall, asmcgocallⁱᵐᵖˡ); (morestack, morestackⁱᵐᵖˡ); (morestack_noctxt, morestack_noctxtⁱᵐᵖˡ); (rt0_go, rt0_goⁱᵐᵖˡ); (return0, return0ⁱᵐᵖˡ); (call16, call16ⁱᵐᵖˡ); (call32, call32ⁱᵐᵖˡ); (call64, call64ⁱᵐᵖˡ); (call128, call128ⁱᵐᵖˡ); (call256, call256ⁱᵐᵖˡ); (call512, call512ⁱᵐᵖˡ); (call1024, call1024ⁱᵐᵖˡ); (call2048, call2048ⁱᵐᵖˡ); (call4096, call4096ⁱᵐᵖˡ); (call8192, call8192ⁱᵐᵖˡ); (call16384, call16384ⁱᵐᵖˡ); (call32768, call32768ⁱᵐᵖˡ); (call65536, call65536ⁱᵐᵖˡ); (call131072, call131072ⁱᵐᵖˡ); (call262144, call262144ⁱᵐᵖˡ); (call524288, call524288ⁱᵐᵖˡ); (call1048576, call1048576ⁱᵐᵖˡ); (call2097152, call2097152ⁱᵐᵖˡ); (call4194304, call4194304ⁱᵐᵖˡ); (call8388608, call8388608ⁱᵐᵖˡ); (call16777216, call16777216ⁱᵐᵖˡ); (call33554432, call33554432ⁱᵐᵖˡ); (call67108864, call67108864ⁱᵐᵖˡ); (call134217728, call134217728ⁱᵐᵖˡ); (call268435456, call268435456ⁱᵐᵖˡ); (call536870912, call536870912ⁱᵐᵖˡ); (call1073741824, call1073741824ⁱᵐᵖˡ); (systemstack_switch, systemstack_switchⁱᵐᵖˡ); (alignUp, alignUpⁱᵐᵖˡ); (alignDown, alignDownⁱᵐᵖˡ); (divRoundUp, divRoundUpⁱᵐᵖˡ); (checkASM, checkASMⁱᵐᵖˡ); (memequal_varlen, memequal_varlenⁱᵐᵖˡ); (bool2int, bool2intⁱᵐᵖˡ); (abort, abortⁱᵐᵖˡ); (gcWriteBarrier1, gcWriteBarrier1ⁱᵐᵖˡ); (gcWriteBarrier2, gcWriteBarrier2ⁱᵐᵖˡ); (gcWriteBarrier3, gcWriteBarrier3ⁱᵐᵖˡ); (gcWriteBarrier4, gcWriteBarrier4ⁱᵐᵖˡ); (gcWriteBarrier5, gcWriteBarrier5ⁱᵐᵖˡ); (gcWriteBarrier6, gcWriteBarrier6ⁱᵐᵖˡ); (gcWriteBarrier7, gcWriteBarrier7ⁱᵐᵖˡ); (gcWriteBarrier8, gcWriteBarrier8ⁱᵐᵖˡ); (duffzero, duffzeroⁱᵐᵖˡ); (duffcopy, duffcopyⁱᵐᵖˡ); (addmoduledata, addmoduledataⁱᵐᵖˡ); (sigpanic0, sigpanic0ⁱᵐᵖˡ); (read, readⁱᵐᵖˡ); (closefd, closefdⁱᵐᵖˡ); (exit, exitⁱᵐᵖˡ); (usleep, usleepⁱᵐᵖˡ); (usleep_no_g, usleep_no_gⁱᵐᵖˡ); (write1, write1ⁱᵐᵖˡ); (open, openⁱᵐᵖˡ); (madvise, madviseⁱᵐᵖˡ); (exitThread, exitThreadⁱᵐᵖˡ); (nanotime1, nanotime1ⁱᵐᵖˡ); (gcWriteBarrierCX, gcWriteBarrierCXⁱᵐᵖˡ); (gcWriteBarrierDX, gcWriteBarrierDXⁱᵐᵖˡ); (gcWriteBarrierBX, gcWriteBarrierBXⁱᵐᵖˡ); (gcWriteBarrierBP, gcWriteBarrierBPⁱᵐᵖˡ); (gcWriteBarrierSI, gcWriteBarrierSIⁱᵐᵖˡ); (gcWriteBarrierR8, gcWriteBarrierR8ⁱᵐᵖˡ); (gcWriteBarrierR9, gcWriteBarrierR9ⁱᵐᵖˡ); (stackcheck, stackcheckⁱᵐᵖˡ); (settls, settlsⁱᵐᵖˡ); (retpolineAX, retpolineAXⁱᵐᵖˡ); (retpolineCX, retpolineCXⁱᵐᵖˡ); (retpolineDX, retpolineDXⁱᵐᵖˡ); (retpolineBX, retpolineBXⁱᵐᵖˡ); (retpolineBP, retpolineBPⁱᵐᵖˡ); (retpolineSI, retpolineSIⁱᵐᵖˡ); (retpolineDI, retpolineDIⁱᵐᵖˡ); (retpolineR8, retpolineR8ⁱᵐᵖˡ); (retpolineR9, retpolineR9ⁱᵐᵖˡ); (retpolineR10, retpolineR10ⁱᵐᵖˡ); (retpolineR11, retpolineR11ⁱᵐᵖˡ); (retpolineR12, retpolineR12ⁱᵐᵖˡ); (retpolineR13, retpolineR13ⁱᵐᵖˡ); (retpolineR14, retpolineR14ⁱᵐᵖˡ); (retpolineR15, retpolineR15ⁱᵐᵖˡ); (asmcgocall_no_g, asmcgocall_no_gⁱᵐᵖˡ); (asmcgocall_landingpad, asmcgocall_landingpadⁱᵐᵖˡ); (spillArgs, spillArgsⁱᵐᵖˡ); (unspillArgs, unspillArgsⁱᵐᵖˡ); (getfp, getfpⁱᵐᵖˡ); (sbrk0, sbrk0ⁱᵐᵖˡ); (access, accessⁱᵐᵖˡ); (connect, connectⁱᵐᵖˡ); (socket, socketⁱᵐᵖˡ); (pause, pauseⁱᵐᵖˡ); (CallersFrames, CallersFramesⁱᵐᵖˡ); (runtime_FrameStartLine, runtime_FrameStartLineⁱᵐᵖˡ); (runtime_FrameSymbolName, runtime_FrameSymbolNameⁱᵐᵖˡ); (runtime_expandFinalInlineFrame, runtime_expandFinalInlineFrameⁱᵐᵖˡ); (expandCgoFrames, expandCgoFramesⁱᵐᵖˡ); (activeModules, activeModulesⁱᵐᵖˡ); (modulesinit, modulesinitⁱᵐᵖˡ); (moduledataverify, moduledataverifyⁱᵐᵖˡ); (moduledataverify1, moduledataverify1ⁱᵐᵖˡ); (FuncForPC, FuncForPCⁱᵐᵖˡ); (findmoduledatap, findmoduledatapⁱᵐᵖˡ); (badFuncInfoEntry, badFuncInfoEntryⁱᵐᵖˡ); (findfunc, findfuncⁱᵐᵖˡ); (badSrcFuncName, badSrcFuncNameⁱᵐᵖˡ); (pcvalueCacheKey, pcvalueCacheKeyⁱᵐᵖˡ); (pcvalue, pcvalueⁱᵐᵖˡ); (funcname, funcnameⁱᵐᵖˡ); (funcpkgpath, funcpkgpathⁱᵐᵖˡ); (funcfile, funcfileⁱᵐᵖˡ); (funcline1, funcline1ⁱᵐᵖˡ); (funcline, funclineⁱᵐᵖˡ); (funcspdelta, funcspdeltaⁱᵐᵖˡ); (funcMaxSPDelta, funcMaxSPDeltaⁱᵐᵖˡ); (pcdatastart, pcdatastartⁱᵐᵖˡ); (pcdatavalue, pcdatavalueⁱᵐᵖˡ); (pcdatavalue1, pcdatavalue1ⁱᵐᵖˡ); (pcdatavalue2, pcdatavalue2ⁱᵐᵖˡ); (funcdata, funcdataⁱᵐᵖˡ); (step, stepⁱᵐᵖˡ); (readvarint, readvarintⁱᵐᵖˡ); (stackmapdata, stackmapdataⁱᵐᵖˡ); (newInlineUnwinder, newInlineUnwinderⁱᵐᵖˡ); (badSrcFunc, badSrcFuncⁱᵐᵖˡ); (synctestRun, synctestRunⁱᵐᵖˡ); (synctestidle_c, synctestidle_cⁱᵐᵖˡ); (synctestWait, synctestWaitⁱᵐᵖˡ); (synctestwait_c, synctestwait_cⁱᵐᵖˡ); (synctest_acquire, synctest_acquireⁱᵐᵖˡ); (synctest_release, synctest_releaseⁱᵐᵖˡ); (synctest_inBubble, synctest_inBubbleⁱᵐᵖˡ); (prepGoExitFrame, prepGoExitFrameⁱᵐᵖˡ); (gostartcall, gostartcallⁱᵐᵖˡ); (taggedPointerPack, taggedPointerPackⁱᵐᵖˡ); (testSPWrite, testSPWriteⁱᵐᵖˡ); (time_runtimeNow, time_runtimeNowⁱᵐᵖˡ); (time_runtimeNano, time_runtimeNanoⁱᵐᵖˡ); (timeSleep, timeSleepⁱᵐᵖˡ); (resetForSleep, resetForSleepⁱᵐᵖˡ); (newTimer, newTimerⁱᵐᵖˡ); (stopTimer, stopTimerⁱᵐᵖˡ); (resetTimer, resetTimerⁱᵐᵖˡ); (goroutineReady, goroutineReadyⁱᵐᵖˡ); (timeSleepUntil, timeSleepUntilⁱᵐᵖˡ); (badTimer, badTimerⁱᵐᵖˡ); (blockTimerChan, blockTimerChanⁱᵐᵖˡ); (unblockTimerChan, unblockTimerChanⁱᵐᵖˡ); (nanotime, nanotimeⁱᵐᵖˡ); (write, writeⁱᵐᵖˡ); (time_now, time_nowⁱᵐᵖˡ); (osSetupTLS, osSetupTLSⁱᵐᵖˡ); (StartTrace, StartTraceⁱᵐᵖˡ); (StopTrace, StopTraceⁱᵐᵖˡ); (traceAdvance, traceAdvanceⁱᵐᵖˡ); (traceNextGen, traceNextGenⁱᵐᵖˡ); (traceRegisterLabelsAndReasons, traceRegisterLabelsAndReasonsⁱᵐᵖˡ); (ReadTrace, ReadTraceⁱᵐᵖˡ); (readTrace0, readTrace0ⁱᵐᵖˡ); (traceReader, traceReaderⁱᵐᵖˡ); (traceReaderAvailable, traceReaderAvailableⁱᵐᵖˡ); (newWakeableSleep, newWakeableSleepⁱᵐᵖˡ); (traceSnapshotMemory, traceSnapshotMemoryⁱᵐᵖˡ); (traceSpanTypeAndClass, traceSpanTypeAndClassⁱᵐᵖˡ); (traceSpanID, traceSpanIDⁱᵐᵖˡ); (traceHeapObjectID, traceHeapObjectIDⁱᵐᵖˡ); (traceGoroutineStackID, traceGoroutineStackIDⁱᵐᵖˡ); (traceCompressStackSize, traceCompressStackSizeⁱᵐᵖˡ); (tracebackPCs, tracebackPCsⁱᵐᵖˡ); (printArgs, printArgsⁱᵐᵖˡ); (funcNamePiecesForPrint, funcNamePiecesForPrintⁱᵐᵖˡ); (funcNameForPrint, funcNameForPrintⁱᵐᵖˡ); (printFuncName, printFuncNameⁱᵐᵖˡ); (printcreatedby, printcreatedbyⁱᵐᵖˡ); (printcreatedby1, printcreatedby1ⁱᵐᵖˡ); (traceback, tracebackⁱᵐᵖˡ); (tracebacktrap, tracebacktrapⁱᵐᵖˡ); (traceback1, traceback1ⁱᵐᵖˡ); (traceback2, traceback2ⁱᵐᵖˡ); (printAncestorTraceback, printAncestorTracebackⁱᵐᵖˡ); (printAncestorTracebackFuncInfo, printAncestorTracebackFuncInfoⁱᵐᵖˡ); (callers, callersⁱᵐᵖˡ); (gcallers, gcallersⁱᵐᵖˡ); (showframe, showframeⁱᵐᵖˡ); (showfuncinfo, showfuncinfoⁱᵐᵖˡ); (isExportedRuntime, isExportedRuntimeⁱᵐᵖˡ); (elideWrapperCalling, elideWrapperCallingⁱᵐᵖˡ); (goroutineheader, goroutineheaderⁱᵐᵖˡ); (tracebackothers, tracebackothersⁱᵐᵖˡ); (tracebackHexdump, tracebackHexdumpⁱᵐᵖˡ); (isSystemGoroutine, isSystemGoroutineⁱᵐᵖˡ); (SetCgoTraceback, SetCgoTracebackⁱᵐᵖˡ); (printCgoTraceback, printCgoTracebackⁱᵐᵖˡ); (printOneCgoTraceback, printOneCgoTracebackⁱᵐᵖˡ); (callCgoSymbolizer, callCgoSymbolizerⁱᵐᵖˡ); (cgoContextPCs, cgoContextPCsⁱᵐᵖˡ); (unsafeTraceWriter, unsafeTraceWriterⁱᵐᵖˡ); (traceBufFlush, traceBufFlushⁱᵐᵖˡ); (traceInitReadCPU, traceInitReadCPUⁱᵐᵖˡ); (traceStartReadCPU, traceStartReadCPUⁱᵐᵖˡ); (traceStopReadCPU, traceStopReadCPUⁱᵐᵖˡ); (traceReadCPU, traceReadCPUⁱᵐᵖˡ); (traceCPUFlush, traceCPUFlushⁱᵐᵖˡ); (traceCPUSample, traceCPUSampleⁱᵐᵖˡ); (unsafeTraceExpWriter, unsafeTraceExpWriterⁱᵐᵖˡ); (traceLockInit, traceLockInitⁱᵐᵖˡ); (lockRankMayTraceFlush, lockRankMayTraceFlushⁱᵐᵖˡ); (traceEnabled, traceEnabledⁱᵐᵖˡ); (traceAllocFreeEnabled, traceAllocFreeEnabledⁱᵐᵖˡ); (traceShuttingDown, traceShuttingDownⁱᵐᵖˡ); (traceAcquire, traceAcquireⁱᵐᵖˡ); (traceAcquireEnabled, traceAcquireEnabledⁱᵐᵖˡ); (traceRelease, traceReleaseⁱᵐᵖˡ); (traceExitingSyscall, traceExitingSyscallⁱᵐᵖˡ); (traceExitedSyscall, traceExitedSyscallⁱᵐᵖˡ); (trace_userTaskCreate, trace_userTaskCreateⁱᵐᵖˡ); (trace_userTaskEnd, trace_userTaskEndⁱᵐᵖˡ); (trace_userRegion, trace_userRegionⁱᵐᵖˡ); (trace_userLog, trace_userLogⁱᵐᵖˡ); (traceThreadDestroy, traceThreadDestroyⁱᵐᵖˡ); (traceStack, traceStackⁱᵐᵖˡ); (dumpStacksRec, dumpStacksRecⁱᵐᵖˡ); (makeTraceFrames, makeTraceFramesⁱᵐᵖˡ); (makeTraceFrame, makeTraceFrameⁱᵐᵖˡ); (tracefpunwindoff, tracefpunwindoffⁱᵐᵖˡ); (fpTracebackPCs, fpTracebackPCsⁱᵐᵖˡ); (pprof_fpunwindExpand, pprof_fpunwindExpandⁱᵐᵖˡ); (fpunwindExpand, fpunwindExpandⁱᵐᵖˡ); (startPCForTrace, startPCForTraceⁱᵐᵖˡ); (goStatusToTraceGoStatus, goStatusToTraceGoStatusⁱᵐᵖˡ); (traceClockNow, traceClockNowⁱᵐᵖˡ); (traceClockUnitsPerSecond, traceClockUnitsPerSecondⁱᵐᵖˡ); (traceFrequency, traceFrequencyⁱᵐᵖˡ); (dumpTypesRec, dumpTypesRecⁱᵐᵖˡ); (getGCMask, getGCMaskⁱᵐᵖˡ); (getGCMaskOnDemand, getGCMaskOnDemandⁱᵐᵖˡ); (buildGCMask, buildGCMaskⁱᵐᵖˡ); (reflectOffsLock, reflectOffsLockⁱᵐᵖˡ); (reflectOffsUnlock, reflectOffsUnlockⁱᵐᵖˡ); (resolveNameOff, resolveNameOffⁱᵐᵖˡ); (resolveTypeOff, resolveTypeOffⁱᵐᵖˡ); (pkgPath, pkgPathⁱᵐᵖˡ); (typelinksinit, typelinksinitⁱᵐᵖˡ); (toRType, toRTypeⁱᵐᵖˡ); (typesEqual, typesEqualⁱᵐᵖˡ); (isDirectIface, isDirectIfaceⁱᵐᵖˡ); (unsafestring, unsafestringⁱᵐᵖˡ); (unsafestring64, unsafestring64ⁱᵐᵖˡ); (unsafestringcheckptr, unsafestringcheckptrⁱᵐᵖˡ); (panicunsafestringlen, panicunsafestringlenⁱᵐᵖˡ); (panicunsafestringnilptr, panicunsafestringnilptrⁱᵐᵖˡ); (unsafeslice, unsafesliceⁱᵐᵖˡ); (unsafeslice64, unsafeslice64ⁱᵐᵖˡ); (unsafeslicecheckptr, unsafeslicecheckptrⁱᵐᵖˡ); (panicunsafeslicelen, panicunsafeslicelenⁱᵐᵖˡ); (panicunsafeslicelen1, panicunsafeslicelen1ⁱᵐᵖˡ); (panicunsafeslicenilptr, panicunsafeslicenilptrⁱᵐᵖˡ); (panicunsafeslicenilptr1, panicunsafeslicenilptr1ⁱᵐᵖˡ); (reflect_unsafeslice, reflect_unsafesliceⁱᵐᵖˡ); (countrunes, countrunesⁱᵐᵖˡ); (decoderune, decoderuneⁱᵐᵖˡ); (encoderune, encoderuneⁱᵐᵖˡ); (_ELF_ST_BIND, _ELF_ST_BINDⁱᵐᵖˡ); (_ELF_ST_TYPE, _ELF_ST_TYPEⁱᵐᵖˡ); (vdsoInitFromSysinfoEhdr, vdsoInitFromSysinfoEhdrⁱᵐᵖˡ); (vdsoFindVersion, vdsoFindVersionⁱᵐᵖˡ); (vdsoParseSymbols, vdsoParseSymbolsⁱᵐᵖˡ); (vdsoauxv, vdsoauxvⁱᵐᵖˡ); (inVDSOPage, inVDSOPageⁱᵐᵖˡ); (vgetrandom1, vgetrandom1ⁱᵐᵖˡ); (vgetrandomInit, vgetrandomInitⁱᵐᵖˡ); (vgetrandomGetState, vgetrandomGetStateⁱᵐᵖˡ); (vgetrandomDestroy, vgetrandomDestroyⁱᵐᵖˡ); (vgetrandom, vgetrandomⁱᵐᵖˡ); (writeErr, writeErrⁱᵐᵖˡ)].

Axiom userArena__allocⁱᵐᵖˡ : val.

Axiom userArena__freeⁱᵐᵖˡ : val.

Axiom userArena__newⁱᵐᵖˡ : val.

Axiom userArena__refillⁱᵐᵖˡ : val.

Axiom userArena__sliceⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__allocBitsForIndexⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__baseⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__countAllocⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__decPinCounterⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__divideByElemSizeⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__ensureSweptⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__getPinnerBitsⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__heapBitsⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__heapBitsSmallForAddrⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__inListⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__incPinCounterⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__initⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__initHeapBitsⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__isFreeⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__isUnusedUserArenaChunkⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__layoutⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__markBitsForBaseⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__markBitsForIndexⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__newPinnerBitsⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__nextFreeIndexⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__objBaseⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__objIndexⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__pinnerBitSizeⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__refillAllocCacheⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__refreshPinnerBitsⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__reportZombiesⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__setPinnerBitsⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__setUserArenaChunkToFaultⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__specialFindSplicePointⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__typePointersOfⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__typePointersOfTypeⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__typePointersOfUncheckedⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__userArenaNextFreeⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__writeHeapBitsSmallⁱᵐᵖˡ : val.

Axiom liveUserArenaChunk__writeUserArenaHeapBitsⁱᵐᵖˡ : val.

Axiom writeUserArenaHeapBits__flushⁱᵐᵖˡ : val.

Axiom writeUserArenaHeapBits__padⁱᵐᵖˡ : val.

Axiom writeUserArenaHeapBits__writeⁱᵐᵖˡ : val.

Axiom hchan__raceaddrⁱᵐᵖˡ : val.

Axiom hchan__sortkeyⁱᵐᵖˡ : val.

Axiom waitq__dequeueⁱᵐᵖˡ : val.

Axiom waitq__dequeueSudoGⁱᵐᵖˡ : val.

Axiom waitq__enqueueⁱᵐᵖˡ : val.

Axiom cpuProfile__addⁱᵐᵖˡ : val.

Axiom cpuProfile__addExtraⁱᵐᵖˡ : val.

Axiom cpuProfile__addNonGoⁱᵐᵖˡ : val.

Axiom dloggerImpl__bⁱᵐᵖˡ : val.

Axiom dloggerImpl__endⁱᵐᵖˡ : val.

Axiom dloggerImpl__hexⁱᵐᵖˡ : val.

Axiom dloggerImpl__iⁱᵐᵖˡ : val.

Axiom dloggerImpl__i16ⁱᵐᵖˡ : val.

Axiom dloggerImpl__i32ⁱᵐᵖˡ : val.

Axiom dloggerImpl__i64ⁱᵐᵖˡ : val.

Axiom dloggerImpl__i8ⁱᵐᵖˡ : val.

Axiom dloggerImpl__pⁱᵐᵖˡ : val.

Axiom dloggerImpl__pcⁱᵐᵖˡ : val.

Axiom dloggerImpl__sⁱᵐᵖˡ : val.

Axiom dloggerImpl__tracebackⁱᵐᵖˡ : val.

Axiom dloggerImpl__uⁱᵐᵖˡ : val.

Axiom dloggerImpl__u16ⁱᵐᵖˡ : val.

Axiom dloggerImpl__u32ⁱᵐᵖˡ : val.

Axiom dloggerImpl__u64ⁱᵐᵖˡ : val.

Axiom dloggerImpl__u8ⁱᵐᵖˡ : val.

Axiom dloggerImpl__uptrⁱᵐᵖˡ : val.

Axiom dloggerFake__bⁱᵐᵖˡ : val.

Axiom dloggerFake__endⁱᵐᵖˡ : val.

Axiom dloggerFake__hexⁱᵐᵖˡ : val.

Axiom dloggerFake__iⁱᵐᵖˡ : val.

Axiom dloggerFake__i16ⁱᵐᵖˡ : val.

Axiom dloggerFake__i32ⁱᵐᵖˡ : val.

Axiom dloggerFake__i64ⁱᵐᵖˡ : val.

Axiom dloggerFake__i8ⁱᵐᵖˡ : val.

Axiom dloggerFake__pⁱᵐᵖˡ : val.

Axiom dloggerFake__pcⁱᵐᵖˡ : val.

Axiom dloggerFake__sⁱᵐᵖˡ : val.

Axiom dloggerFake__tracebackⁱᵐᵖˡ : val.

Axiom dloggerFake__uⁱᵐᵖˡ : val.

Axiom dloggerFake__u16ⁱᵐᵖˡ : val.

Axiom dloggerFake__u32ⁱᵐᵖˡ : val.

Axiom dloggerFake__u64ⁱᵐᵖˡ : val.

Axiom dloggerFake__u8ⁱᵐᵖˡ : val.

Axiom dloggerFake__uptrⁱᵐᵖˡ : val.

Axiom debugLogWriter__byteⁱᵐᵖˡ : val.

Axiom debugLogWriter__bytesⁱᵐᵖˡ : val.

Axiom debugLogWriter__ensureⁱᵐᵖˡ : val.

Axiom debugLogWriter__uvarintⁱᵐᵖˡ : val.

Axiom debugLogWriter__varintⁱᵐᵖˡ : val.

Axiom debugLogWriter__writeFrameAtⁱᵐᵖˡ : val.

Axiom debugLogWriter__writeSyncⁱᵐᵖˡ : val.

Axiom debugLogWriter__writeUint64LEⁱᵐᵖˡ : val.

Axiom debugLogReader__headerⁱᵐᵖˡ : val.

Axiom debugLogReader__peekⁱᵐᵖˡ : val.

Axiom debugLogReader__printValⁱᵐᵖˡ : val.

Axiom debugLogReader__readUint16LEAtⁱᵐᵖˡ : val.

Axiom debugLogReader__readUint64LEAtⁱᵐᵖˡ : val.

Axiom debugLogReader__skipⁱᵐᵖˡ : val.

Axiom debugLogReader__uvarintⁱᵐᵖˡ : val.

Axiom debugLogReader__varintⁱᵐᵖˡ : val.

Axiom timespec__setNsecⁱᵐᵖˡ : val.

Axiom timeval__set_usecⁱᵐᵖˡ : val.

Axiom TypeAssertionError__Errorⁱᵐᵖˡ : val.

Axiom TypeAssertionError__RuntimeErrorⁱᵐᵖˡ : val.

Axiom errorString__Errorⁱᵐᵖˡ : val.

Axiom errorString__RuntimeErrorⁱᵐᵖˡ : val.

Axiom errorAddressString__Addrⁱᵐᵖˡ : val.

Axiom errorAddressString__Errorⁱᵐᵖˡ : val.

Axiom errorAddressString__RuntimeErrorⁱᵐᵖˡ : val.

Axiom plainError__Errorⁱᵐᵖˡ : val.

Axiom plainError__RuntimeErrorⁱᵐᵖˡ : val.

Axiom boundsError__Errorⁱᵐᵖˡ : val.

Axiom boundsError__RuntimeErrorⁱᵐᵖˡ : val.

Axiom timeHistogram__recordⁱᵐᵖˡ : val.

Axiom timeHistogram__writeⁱᵐᵖˡ : val.

Axiom itabTableType__addⁱᵐᵖˡ : val.

Axiom itabTableType__findⁱᵐᵖˡ : val.

Axiom lfstack__emptyⁱᵐᵖˡ : val.

Axiom lfstack__popⁱᵐᵖˡ : val.

Axiom lfstack__pushⁱᵐᵖˡ : val.

Axiom lockRank__Stringⁱᵐᵖˡ : val.

Axiom linearAlloc__allocⁱᵐᵖˡ : val.

Axiom linearAlloc__initⁱᵐᵖˡ : val.

Axiom notInHeap__addⁱᵐᵖˡ : val.

Axiom typePointers__fastForwardⁱᵐᵖˡ : val.

Axiom typePointers__nextⁱᵐᵖˡ : val.

Axiom typePointers__nextFastⁱᵐᵖˡ : val.

Axiom markBits__advanceⁱᵐᵖˡ : val.

Axiom markBits__clearMarkedⁱᵐᵖˡ : val.

Axiom markBits__isMarkedⁱᵐᵖˡ : val.

Axiom markBits__setMarkedⁱᵐᵖˡ : val.

Axiom markBits__setMarkedNonAtomicⁱᵐᵖˡ : val.

Axiom mcache__allocLargeⁱᵐᵖˡ : val.

Axiom mcache__nextFreeⁱᵐᵖˡ : val.

Axiom mcache__prepareForSweepⁱᵐᵖˡ : val.

Axiom mcache__refillⁱᵐᵖˡ : val.

Axiom mcache__releaseAllⁱᵐᵖˡ : val.

Axiom gclinkptr__ptrⁱᵐᵖˡ : val.

Axiom mcentral__cacheSpanⁱᵐᵖˡ : val.

Axiom mcentral__fullSweptⁱᵐᵖˡ : val.

Axiom mcentral__fullUnsweptⁱᵐᵖˡ : val.

Axiom mcentral__growⁱᵐᵖˡ : val.

Axiom mcentral__initⁱᵐᵖˡ : val.

Axiom mcentral__partialSweptⁱᵐᵖˡ : val.

Axiom mcentral__partialUnsweptⁱᵐᵖˡ : val.

Axiom mcentral__uncacheSpanⁱᵐᵖˡ : val.

Axiom Cleanup__Stopⁱᵐᵖˡ : val.

Axiom metricReader__computeⁱᵐᵖˡ : val.

Axiom statDepSet__differenceⁱᵐᵖˡ : val.

Axiom statDepSet__emptyⁱᵐᵖˡ : val.

Axiom statDepSet__hasⁱᵐᵖˡ : val.

Axiom statDepSet__unionⁱᵐᵖˡ : val.

Axiom heapStatsAggregate__computeⁱᵐᵖˡ : val.

Axiom heapStatsAggregate__mergeⁱᵐᵖˡ : val.

Axiom sysStatsAggregate__computeⁱᵐᵖˡ : val.

Axiom cpuStatsAggregate__accumulateⁱᵐᵖˡ : val.

Axiom cpuStatsAggregate__accumulateGCPauseTimeⁱᵐᵖˡ : val.

Axiom cpuStatsAggregate__computeⁱᵐᵖˡ : val.

Axiom gcStatsAggregate__computeⁱᵐᵖˡ : val.

Axiom statAggregate__ensureⁱᵐᵖˡ : val.

Axiom metricValue__float64HistOrInitⁱᵐᵖˡ : val.

Axiom fixalloc__allocⁱᵐᵖˡ : val.

Axiom fixalloc__freeⁱᵐᵖˡ : val.

Axiom fixalloc__initⁱᵐᵖˡ : val.

Axiom workType__accumulateⁱᵐᵖˡ : val.

Axiom workType__accumulateGCPauseTimeⁱᵐᵖˡ : val.

Axiom gcTrigger__testⁱᵐᵖˡ : val.

Axiom gcCPULimiterState__accumulateⁱᵐᵖˡ : val.

Axiom gcCPULimiterState__addAssistTimeⁱᵐᵖˡ : val.

Axiom gcCPULimiterState__addIdleTimeⁱᵐᵖˡ : val.

Axiom gcCPULimiterState__finishGCTransitionⁱᵐᵖˡ : val.

Axiom gcCPULimiterState__limitingⁱᵐᵖˡ : val.

Axiom gcCPULimiterState__needUpdateⁱᵐᵖˡ : val.

Axiom gcCPULimiterState__resetCapacityⁱᵐᵖˡ : val.

Axiom gcCPULimiterState__startGCTransitionⁱᵐᵖˡ : val.

Axiom gcCPULimiterState__tryLockⁱᵐᵖˡ : val.

Axiom gcCPULimiterState__unlockⁱᵐᵖˡ : val.

Axiom gcCPULimiterState__updateⁱᵐᵖˡ : val.

Axiom gcCPULimiterState__updateLockedⁱᵐᵖˡ : val.

Axiom limiterEventStamp__durationⁱᵐᵖˡ : val.

Axiom limiterEventStamp__typⁱᵐᵖˡ : val.

Axiom limiterEvent__consumeⁱᵐᵖˡ : val.

Axiom limiterEvent__startⁱᵐᵖˡ : val.

Axiom limiterEvent__stopⁱᵐᵖˡ : val.

Axiom gcControllerState__addGlobalsⁱᵐᵖˡ : val.

Axiom gcControllerState__addIdleMarkWorkerⁱᵐᵖˡ : val.

Axiom gcControllerState__addScannableStackⁱᵐᵖˡ : val.

Axiom gcControllerState__commitⁱᵐᵖˡ : val.

Axiom gcControllerState__endCycleⁱᵐᵖˡ : val.

Axiom gcControllerState__enlistWorkerⁱᵐᵖˡ : val.

Axiom gcControllerState__findRunnableGCWorkerⁱᵐᵖˡ : val.

Axiom gcControllerState__heapGoalⁱᵐᵖˡ : val.

Axiom gcControllerState__heapGoalInternalⁱᵐᵖˡ : val.

Axiom gcControllerState__initⁱᵐᵖˡ : val.

Axiom gcControllerState__markWorkerStopⁱᵐᵖˡ : val.

Axiom gcControllerState__memoryLimitHeapGoalⁱᵐᵖˡ : val.

Axiom gcControllerState__needIdleMarkWorkerⁱᵐᵖˡ : val.

Axiom gcControllerState__removeIdleMarkWorkerⁱᵐᵖˡ : val.

Axiom gcControllerState__resetLiveⁱᵐᵖˡ : val.

Axiom gcControllerState__reviseⁱᵐᵖˡ : val.

Axiom gcControllerState__setGCPercentⁱᵐᵖˡ : val.

Axiom gcControllerState__setMaxIdleMarkWorkersⁱᵐᵖˡ : val.

Axiom gcControllerState__setMemoryLimitⁱᵐᵖˡ : val.

Axiom gcControllerState__startCycleⁱᵐᵖˡ : val.

Axiom gcControllerState__triggerⁱᵐᵖˡ : val.

Axiom gcControllerState__updateⁱᵐᵖˡ : val.

Axiom scavengerState__controllerFailedⁱᵐᵖˡ : val.

Axiom scavengerState__initⁱᵐᵖˡ : val.

Axiom scavengerState__parkⁱᵐᵖˡ : val.

Axiom scavengerState__readyⁱᵐᵖˡ : val.

Axiom scavengerState__runⁱᵐᵖˡ : val.

Axiom scavengerState__sleepⁱᵐᵖˡ : val.

Axiom scavengerState__wakeⁱᵐᵖˡ : val.

Axiom scavengeIndex__allocⁱᵐᵖˡ : val.

Axiom scavengeIndex__findⁱᵐᵖˡ : val.

Axiom scavengeIndex__freeⁱᵐᵖˡ : val.

Axiom scavengeIndex__growⁱᵐᵖˡ : val.

Axiom scavengeIndex__initⁱᵐᵖˡ : val.

Axiom scavengeIndex__nextGenⁱᵐᵖˡ : val.

Axiom scavengeIndex__setEmptyⁱᵐᵖˡ : val.

Axiom scavengeIndex__sysGrowⁱᵐᵖˡ : val.

Axiom scavengeIndex__sysInitⁱᵐᵖˡ : val.

Axiom atomicScavChunkData__loadⁱᵐᵖˡ : val.

Axiom atomicScavChunkData__storeⁱᵐᵖˡ : val.

Axiom scavChunkData__allocⁱᵐᵖˡ : val.

Axiom scavChunkData__freeⁱᵐᵖˡ : val.

Axiom scavChunkData__isEmptyⁱᵐᵖˡ : val.

Axiom scavChunkData__packⁱᵐᵖˡ : val.

Axiom scavChunkData__setEmptyⁱᵐᵖˡ : val.

Axiom scavChunkData__setNonEmptyⁱᵐᵖˡ : val.

Axiom scavChunkData__shouldScavengeⁱᵐᵖˡ : val.

Axiom scavChunkFlags__isEmptyⁱᵐᵖˡ : val.

Axiom scavChunkFlags__setEmptyⁱᵐᵖˡ : val.

Axiom scavChunkFlags__setNonEmptyⁱᵐᵖˡ : val.

Axiom piController__nextⁱᵐᵖˡ : val.

Axiom piController__resetⁱᵐᵖˡ : val.

Axiom stackObject__setRecordⁱᵐᵖˡ : val.

Axiom stackScanState__addObjectⁱᵐᵖˡ : val.

Axiom stackScanState__buildIndexⁱᵐᵖˡ : val.

Axiom stackScanState__findObjectⁱᵐᵖˡ : val.

Axiom stackScanState__getPtrⁱᵐᵖˡ : val.

Axiom stackScanState__putPtrⁱᵐᵖˡ : val.

Axiom sweepClass__clearⁱᵐᵖˡ : val.

Axiom sweepClass__loadⁱᵐᵖˡ : val.

Axiom sweepClass__splitⁱᵐᵖˡ : val.

Axiom sweepClass__updateⁱᵐᵖˡ : val.

Axiom activeSweep__beginⁱᵐᵖˡ : val.

Axiom activeSweep__endⁱᵐᵖˡ : val.

Axiom activeSweep__isDoneⁱᵐᵖˡ : val.

Axiom activeSweep__markDrainedⁱᵐᵖˡ : val.

Axiom activeSweep__resetⁱᵐᵖˡ : val.

Axiom activeSweep__sweepersⁱᵐᵖˡ : val.

Axiom sweepLocker__tryAcquireⁱᵐᵖˡ : val.

Axiom sweepLocked__allocBitsForIndexⁱᵐᵖˡ : val.

Axiom sweepLocked__baseⁱᵐᵖˡ : val.

Axiom sweepLocked__countAllocⁱᵐᵖˡ : val.

Axiom sweepLocked__decPinCounterⁱᵐᵖˡ : val.

Axiom sweepLocked__divideByElemSizeⁱᵐᵖˡ : val.

Axiom sweepLocked__ensureSweptⁱᵐᵖˡ : val.

Axiom sweepLocked__getPinnerBitsⁱᵐᵖˡ : val.

Axiom sweepLocked__heapBitsⁱᵐᵖˡ : val.

Axiom sweepLocked__heapBitsSmallForAddrⁱᵐᵖˡ : val.

Axiom sweepLocked__inListⁱᵐᵖˡ : val.

Axiom sweepLocked__incPinCounterⁱᵐᵖˡ : val.

Axiom sweepLocked__initⁱᵐᵖˡ : val.

Axiom sweepLocked__initHeapBitsⁱᵐᵖˡ : val.

Axiom sweepLocked__isFreeⁱᵐᵖˡ : val.

Axiom sweepLocked__isUnusedUserArenaChunkⁱᵐᵖˡ : val.

Axiom sweepLocked__layoutⁱᵐᵖˡ : val.

Axiom sweepLocked__markBitsForBaseⁱᵐᵖˡ : val.

Axiom sweepLocked__markBitsForIndexⁱᵐᵖˡ : val.

Axiom sweepLocked__newPinnerBitsⁱᵐᵖˡ : val.

Axiom sweepLocked__nextFreeIndexⁱᵐᵖˡ : val.

Axiom sweepLocked__objBaseⁱᵐᵖˡ : val.

Axiom sweepLocked__objIndexⁱᵐᵖˡ : val.

Axiom sweepLocked__pinnerBitSizeⁱᵐᵖˡ : val.

Axiom sweepLocked__refillAllocCacheⁱᵐᵖˡ : val.

Axiom sweepLocked__refreshPinnerBitsⁱᵐᵖˡ : val.

Axiom sweepLocked__reportZombiesⁱᵐᵖˡ : val.

Axiom sweepLocked__setPinnerBitsⁱᵐᵖˡ : val.

Axiom sweepLocked__setUserArenaChunkToFaultⁱᵐᵖˡ : val.

Axiom sweepLocked__specialFindSplicePointⁱᵐᵖˡ : val.

Axiom sweepLocked__sweepⁱᵐᵖˡ : val.

Axiom sweepLocked__typePointersOfⁱᵐᵖˡ : val.

Axiom sweepLocked__typePointersOfTypeⁱᵐᵖˡ : val.

Axiom sweepLocked__typePointersOfUncheckedⁱᵐᵖˡ : val.

Axiom sweepLocked__userArenaNextFreeⁱᵐᵖˡ : val.

Axiom sweepLocked__writeHeapBitsSmallⁱᵐᵖˡ : val.

Axiom sweepLocked__writeUserArenaHeapBitsⁱᵐᵖˡ : val.

Axiom gcWork__balanceⁱᵐᵖˡ : val.

Axiom gcWork__disposeⁱᵐᵖˡ : val.

Axiom gcWork__emptyⁱᵐᵖˡ : val.

Axiom gcWork__initⁱᵐᵖˡ : val.

Axiom gcWork__putⁱᵐᵖˡ : val.

Axiom gcWork__putBatchⁱᵐᵖˡ : val.

Axiom gcWork__putFastⁱᵐᵖˡ : val.

Axiom gcWork__tryGetⁱᵐᵖˡ : val.

Axiom gcWork__tryGetFastⁱᵐᵖˡ : val.

Axiom workbuf__checkemptyⁱᵐᵖˡ : val.

Axiom workbuf__checknonemptyⁱᵐᵖˡ : val.

Axiom mheap__allocⁱᵐᵖˡ : val.

Axiom mheap__allocMSpanLockedⁱᵐᵖˡ : val.

Axiom mheap__allocManualⁱᵐᵖˡ : val.

Axiom mheap__allocNeedsZeroⁱᵐᵖˡ : val.

Axiom mheap__allocSpanⁱᵐᵖˡ : val.

Axiom mheap__allocUserArenaChunkⁱᵐᵖˡ : val.

Axiom mheap__enableMetadataHugePagesⁱᵐᵖˡ : val.

Axiom mheap__freeMSpanLockedⁱᵐᵖˡ : val.

Axiom mheap__freeManualⁱᵐᵖˡ : val.

Axiom mheap__freeSpanⁱᵐᵖˡ : val.

Axiom mheap__freeSpanLockedⁱᵐᵖˡ : val.

Axiom mheap__growⁱᵐᵖˡ : val.

Axiom mheap__initⁱᵐᵖˡ : val.

Axiom mheap__initSpanⁱᵐᵖˡ : val.

Axiom mheap__nextSpanForSweepⁱᵐᵖˡ : val.

Axiom mheap__reclaimⁱᵐᵖˡ : val.

Axiom mheap__reclaimChunkⁱᵐᵖˡ : val.

Axiom mheap__scavengeAllⁱᵐᵖˡ : val.

Axiom mheap__setSpansⁱᵐᵖˡ : val.

Axiom mheap__sysAllocⁱᵐᵖˡ : val.

Axiom mheap__tryAllocMSpanⁱᵐᵖˡ : val.

Axiom mSpanStateBox__getⁱᵐᵖˡ : val.

Axiom mSpanStateBox__setⁱᵐᵖˡ : val.

Axiom mSpanList__initⁱᵐᵖˡ : val.

Axiom mSpanList__insertⁱᵐᵖˡ : val.

Axiom mSpanList__insertBackⁱᵐᵖˡ : val.

Axiom mSpanList__isEmptyⁱᵐᵖˡ : val.

Axiom mSpanList__removeⁱᵐᵖˡ : val.

Axiom mSpanList__takeAllⁱᵐᵖˡ : val.

Axiom mspan__allocBitsForIndexⁱᵐᵖˡ : val.

Axiom mspan__baseⁱᵐᵖˡ : val.

Axiom mspan__countAllocⁱᵐᵖˡ : val.

Axiom mspan__decPinCounterⁱᵐᵖˡ : val.

Axiom mspan__divideByElemSizeⁱᵐᵖˡ : val.

Axiom mspan__ensureSweptⁱᵐᵖˡ : val.

Axiom mspan__getPinnerBitsⁱᵐᵖˡ : val.

Axiom mspan__heapBitsⁱᵐᵖˡ : val.

Axiom mspan__heapBitsSmallForAddrⁱᵐᵖˡ : val.

Axiom mspan__inListⁱᵐᵖˡ : val.

Axiom mspan__incPinCounterⁱᵐᵖˡ : val.

Axiom mspan__initⁱᵐᵖˡ : val.

Axiom mspan__initHeapBitsⁱᵐᵖˡ : val.

Axiom mspan__isFreeⁱᵐᵖˡ : val.

Axiom mspan__isUnusedUserArenaChunkⁱᵐᵖˡ : val.

Axiom mspan__layoutⁱᵐᵖˡ : val.

Axiom mspan__markBitsForBaseⁱᵐᵖˡ : val.

Axiom mspan__markBitsForIndexⁱᵐᵖˡ : val.

Axiom mspan__newPinnerBitsⁱᵐᵖˡ : val.

Axiom mspan__nextFreeIndexⁱᵐᵖˡ : val.

Axiom mspan__objBaseⁱᵐᵖˡ : val.

Axiom mspan__objIndexⁱᵐᵖˡ : val.

Axiom mspan__pinnerBitSizeⁱᵐᵖˡ : val.

Axiom mspan__refillAllocCacheⁱᵐᵖˡ : val.

Axiom mspan__refreshPinnerBitsⁱᵐᵖˡ : val.

Axiom mspan__reportZombiesⁱᵐᵖˡ : val.

Axiom mspan__setPinnerBitsⁱᵐᵖˡ : val.

Axiom mspan__setUserArenaChunkToFaultⁱᵐᵖˡ : val.

Axiom mspan__specialFindSplicePointⁱᵐᵖˡ : val.

Axiom mspan__typePointersOfⁱᵐᵖˡ : val.

Axiom mspan__typePointersOfTypeⁱᵐᵖˡ : val.

Axiom mspan__typePointersOfUncheckedⁱᵐᵖˡ : val.

Axiom mspan__userArenaNextFreeⁱᵐᵖˡ : val.

Axiom mspan__writeHeapBitsSmallⁱᵐᵖˡ : val.

Axiom mspan__writeUserArenaHeapBitsⁱᵐᵖˡ : val.

Axiom spanClass__noscanⁱᵐᵖˡ : val.

Axiom spanClass__sizeclassⁱᵐᵖˡ : val.

Axiom arenaIdx__l1ⁱᵐᵖˡ : val.

Axiom arenaIdx__l2ⁱᵐᵖˡ : val.

Axiom spanAllocType__manualⁱᵐᵖˡ : val.

Axiom specialsIter__nextⁱᵐᵖˡ : val.

Axiom specialsIter__unlinkAndNextⁱᵐᵖˡ : val.

Axiom specialsIter__validⁱᵐᵖˡ : val.

Axiom gcBits__bitpⁱᵐᵖˡ : val.

Axiom gcBits__bytepⁱᵐᵖˡ : val.

Axiom gcBitsArena__tryAllocⁱᵐᵖˡ : val.

Axiom chunkIdx__l1ⁱᵐᵖˡ : val.

Axiom chunkIdx__l2ⁱᵐᵖˡ : val.

Axiom pageAlloc__allocⁱᵐᵖˡ : val.

Axiom pageAlloc__allocRangeⁱᵐᵖˡ : val.

Axiom pageAlloc__allocToCacheⁱᵐᵖˡ : val.

Axiom pageAlloc__chunkOfⁱᵐᵖˡ : val.

Axiom pageAlloc__enableChunkHugePagesⁱᵐᵖˡ : val.

Axiom pageAlloc__findⁱᵐᵖˡ : val.

Axiom pageAlloc__findMappedAddrⁱᵐᵖˡ : val.

Axiom pageAlloc__freeⁱᵐᵖˡ : val.

Axiom pageAlloc__growⁱᵐᵖˡ : val.

Axiom pageAlloc__initⁱᵐᵖˡ : val.

Axiom pageAlloc__scavengeⁱᵐᵖˡ : val.

Axiom pageAlloc__scavengeOneⁱᵐᵖˡ : val.

Axiom pageAlloc__sysGrowⁱᵐᵖˡ : val.

Axiom pageAlloc__sysInitⁱᵐᵖˡ : val.

Axiom pageAlloc__tryChunkOfⁱᵐᵖˡ : val.

Axiom pageAlloc__updateⁱᵐᵖˡ : val.

Axiom pallocSum__endⁱᵐᵖˡ : val.

Axiom pallocSum__maxⁱᵐᵖˡ : val.

Axiom pallocSum__startⁱᵐᵖˡ : val.

Axiom pallocSum__unpackⁱᵐᵖˡ : val.

Axiom pageCache__allocⁱᵐᵖˡ : val.

Axiom pageCache__allocNⁱᵐᵖˡ : val.

Axiom pageCache__emptyⁱᵐᵖˡ : val.

Axiom pageCache__flushⁱᵐᵖˡ : val.

Axiom pageBits__block64ⁱᵐᵖˡ : val.

Axiom pageBits__clearⁱᵐᵖˡ : val.

Axiom pageBits__clearAllⁱᵐᵖˡ : val.

Axiom pageBits__clearBlock64ⁱᵐᵖˡ : val.

Axiom pageBits__clearRangeⁱᵐᵖˡ : val.

Axiom pageBits__getⁱᵐᵖˡ : val.

Axiom pageBits__popcntRangeⁱᵐᵖˡ : val.

Axiom pageBits__setⁱᵐᵖˡ : val.

Axiom pageBits__setAllⁱᵐᵖˡ : val.

Axiom pageBits__setBlock64ⁱᵐᵖˡ : val.

Axiom pageBits__setRangeⁱᵐᵖˡ : val.

Axiom pallocBits__allocAllⁱᵐᵖˡ : val.

Axiom pallocBits__allocPages64ⁱᵐᵖˡ : val.

Axiom pallocBits__allocRangeⁱᵐᵖˡ : val.

Axiom pallocBits__findⁱᵐᵖˡ : val.

Axiom pallocBits__find1ⁱᵐᵖˡ : val.

Axiom pallocBits__findLargeNⁱᵐᵖˡ : val.

Axiom pallocBits__findSmallNⁱᵐᵖˡ : val.

Axiom pallocBits__freeⁱᵐᵖˡ : val.

Axiom pallocBits__free1ⁱᵐᵖˡ : val.

Axiom pallocBits__freeAllⁱᵐᵖˡ : val.

Axiom pallocBits__pages64ⁱᵐᵖˡ : val.

Axiom pallocBits__summarizeⁱᵐᵖˡ : val.

Axiom pallocData__allocAllⁱᵐᵖˡ : val.

Axiom pallocData__allocPages64ⁱᵐᵖˡ : val.

Axiom pallocData__allocRangeⁱᵐᵖˡ : val.

Axiom pallocData__findⁱᵐᵖˡ : val.

Axiom pallocData__find1ⁱᵐᵖˡ : val.

Axiom pallocData__findLargeNⁱᵐᵖˡ : val.

Axiom pallocData__findScavengeCandidateⁱᵐᵖˡ : val.

Axiom pallocData__findSmallNⁱᵐᵖˡ : val.

Axiom pallocData__freeⁱᵐᵖˡ : val.

Axiom pallocData__free1ⁱᵐᵖˡ : val.

Axiom pallocData__freeAllⁱᵐᵖˡ : val.

Axiom pallocData__pages64ⁱᵐᵖˡ : val.

Axiom pallocData__summarizeⁱᵐᵖˡ : val.

Axiom bucket__bpⁱᵐᵖˡ : val.

Axiom bucket__mpⁱᵐᵖˡ : val.

Axiom bucket__stkⁱᵐᵖˡ : val.

Axiom memRecordCycle__addⁱᵐᵖˡ : val.

Axiom mProfCycleHolder__incrementⁱᵐᵖˡ : val.

Axiom mProfCycleHolder__readⁱᵐᵖˡ : val.

Axiom mProfCycleHolder__setFlushedⁱᵐᵖˡ : val.

Axiom lockTimer__beginⁱᵐᵖˡ : val.

Axiom lockTimer__endⁱᵐᵖˡ : val.

Axiom mLockProfile__captureStackⁱᵐᵖˡ : val.

Axiom mLockProfile__recordLockⁱᵐᵖˡ : val.

Axiom mLockProfile__recordUnlockⁱᵐᵖˡ : val.

Axiom mLockProfile__storeⁱᵐᵖˡ : val.

Axiom StackRecord__Stackⁱᵐᵖˡ : val.

Axiom MemProfileRecord__InUseBytesⁱᵐᵖˡ : val.

Axiom MemProfileRecord__InUseObjectsⁱᵐᵖˡ : val.

Axiom MemProfileRecord__Stackⁱᵐᵖˡ : val.

Axiom BlockProfileRecord__Stackⁱᵐᵖˡ : val.

Axiom goroutineProfileStateHolder__CompareAndSwapⁱᵐᵖˡ : val.

Axiom goroutineProfileStateHolder__Loadⁱᵐᵖˡ : val.

Axiom goroutineProfileStateHolder__Storeⁱᵐᵖˡ : val.

Axiom addrRange__containsⁱᵐᵖˡ : val.

Axiom addrRange__removeGreaterEqualⁱᵐᵖˡ : val.

Axiom addrRange__sizeⁱᵐᵖˡ : val.

Axiom addrRange__subtractⁱᵐᵖˡ : val.

Axiom addrRange__takeFromBackⁱᵐᵖˡ : val.

Axiom addrRange__takeFromFrontⁱᵐᵖˡ : val.

Axiom offAddr__addⁱᵐᵖˡ : val.

Axiom offAddr__addrⁱᵐᵖˡ : val.

Axiom offAddr__diffⁱᵐᵖˡ : val.

Axiom offAddr__equalⁱᵐᵖˡ : val.

Axiom offAddr__lessEqualⁱᵐᵖˡ : val.

Axiom offAddr__lessThanⁱᵐᵖˡ : val.

Axiom offAddr__subⁱᵐᵖˡ : val.

Axiom atomicOffAddr__Clearⁱᵐᵖˡ : val.

Axiom atomicOffAddr__Loadⁱᵐᵖˡ : val.

Axiom atomicOffAddr__StoreMarkedⁱᵐᵖˡ : val.

Axiom atomicOffAddr__StoreMinⁱᵐᵖˡ : val.

Axiom atomicOffAddr__StoreUnmarkⁱᵐᵖˡ : val.

Axiom addrRanges__addⁱᵐᵖˡ : val.

Axiom addrRanges__cloneIntoⁱᵐᵖˡ : val.

Axiom addrRanges__containsⁱᵐᵖˡ : val.

Axiom addrRanges__findAddrGreaterEqualⁱᵐᵖˡ : val.

Axiom addrRanges__findSuccⁱᵐᵖˡ : val.

Axiom addrRanges__initⁱᵐᵖˡ : val.

Axiom addrRanges__removeGreaterEqualⁱᵐᵖˡ : val.

Axiom addrRanges__removeLastⁱᵐᵖˡ : val.

Axiom spanSet__popⁱᵐᵖˡ : val.

Axiom spanSet__pushⁱᵐᵖˡ : val.

Axiom spanSet__resetⁱᵐᵖˡ : val.

Axiom atomicSpanSetSpinePointer__Loadⁱᵐᵖˡ : val.

Axiom atomicSpanSetSpinePointer__StoreNoWBⁱᵐᵖˡ : val.

Axiom spanSetSpinePointer__lookupⁱᵐᵖˡ : val.

Axiom spanSetBlockAlloc__allocⁱᵐᵖˡ : val.

Axiom spanSetBlockAlloc__freeⁱᵐᵖˡ : val.

Axiom headTailIndex__headⁱᵐᵖˡ : val.

Axiom headTailIndex__splitⁱᵐᵖˡ : val.

Axiom headTailIndex__tailⁱᵐᵖˡ : val.

Axiom atomicHeadTailIndex__casⁱᵐᵖˡ : val.

Axiom atomicHeadTailIndex__decHeadⁱᵐᵖˡ : val.

Axiom atomicHeadTailIndex__incHeadⁱᵐᵖˡ : val.

Axiom atomicHeadTailIndex__incTailⁱᵐᵖˡ : val.

Axiom atomicHeadTailIndex__loadⁱᵐᵖˡ : val.

Axiom atomicHeadTailIndex__resetⁱᵐᵖˡ : val.

Axiom atomicMSpanPointer__Loadⁱᵐᵖˡ : val.

Axiom atomicMSpanPointer__StoreNoWBⁱᵐᵖˡ : val.

Axiom sysMemStat__addⁱᵐᵖˡ : val.

Axiom sysMemStat__loadⁱᵐᵖˡ : val.

Axiom heapStatsDelta__mergeⁱᵐᵖˡ : val.

Axiom consistentHeapStats__acquireⁱᵐᵖˡ : val.

Axiom consistentHeapStats__readⁱᵐᵖˡ : val.

Axiom consistentHeapStats__releaseⁱᵐᵖˡ : val.

Axiom consistentHeapStats__unsafeClearⁱᵐᵖˡ : val.

Axiom consistentHeapStats__unsafeReadⁱᵐᵖˡ : val.

Axiom cpuStats__accumulateⁱᵐᵖˡ : val.

Axiom cpuStats__accumulateGCPauseTimeⁱᵐᵖˡ : val.

Axiom wbBuf__discardⁱᵐᵖˡ : val.

Axiom wbBuf__emptyⁱᵐᵖˡ : val.

Axiom wbBuf__get1ⁱᵐᵖˡ : val.

Axiom wbBuf__get2ⁱᵐᵖˡ : val.

Axiom wbBuf__resetⁱᵐᵖˡ : val.

Axiom pollDesc__infoⁱᵐᵖˡ : val.

Axiom pollDesc__makeArgⁱᵐᵖˡ : val.

Axiom pollDesc__publishInfoⁱᵐᵖˡ : val.

Axiom pollDesc__setEventErrⁱᵐᵖˡ : val.

Axiom pollInfo__closingⁱᵐᵖˡ : val.

Axiom pollInfo__eventErrⁱᵐᵖˡ : val.

Axiom pollInfo__expiredReadDeadlineⁱᵐᵖˡ : val.

Axiom pollInfo__expiredWriteDeadlineⁱᵐᵖˡ : val.

Axiom pollCache__allocⁱᵐᵖˡ : val.

Axiom pollCache__freeⁱᵐᵖˡ : val.

Axiom PanicNilError__Errorⁱᵐᵖˡ : val.

Axiom PanicNilError__RuntimeErrorⁱᵐᵖˡ : val.

Axiom Pinner__Pinⁱᵐᵖˡ : val.

Axiom Pinner__Unpinⁱᵐᵖˡ : val.

Axiom Pinner__unpinⁱᵐᵖˡ : val.

Axiom pinner__unpinⁱᵐᵖˡ : val.

Axiom pinState__isMultiPinnedⁱᵐᵖˡ : val.

Axiom pinState__isPinnedⁱᵐᵖˡ : val.

Axiom pinState__setⁱᵐᵖˡ : val.

Axiom pinState__setMultiPinnedⁱᵐᵖˡ : val.

Axiom pinState__setPinnedⁱᵐᵖˡ : val.

Axiom pinnerBits__ofObjectⁱᵐᵖˡ : val.

Axiom stwReason__Stringⁱᵐᵖˡ : val.

Axiom stwReason__isGCⁱᵐᵖˡ : val.

Axiom pMask__clearⁱᵐᵖˡ : val.

Axiom pMask__readⁱᵐᵖˡ : val.

Axiom pMask__setⁱᵐᵖˡ : val.

Axiom gQueue__emptyⁱᵐᵖˡ : val.

Axiom gQueue__popⁱᵐᵖˡ : val.

Axiom gQueue__popListⁱᵐᵖˡ : val.

Axiom gQueue__pushⁱᵐᵖˡ : val.

Axiom gQueue__pushBackⁱᵐᵖˡ : val.

Axiom gQueue__pushBackAllⁱᵐᵖˡ : val.

Axiom gList__emptyⁱᵐᵖˡ : val.

Axiom gList__popⁱᵐᵖˡ : val.

Axiom gList__pushⁱᵐᵖˡ : val.

Axiom gList__pushAllⁱᵐᵖˡ : val.

Axiom randomOrder__resetⁱᵐᵖˡ : val.

Axiom randomOrder__startⁱᵐᵖˡ : val.

Axiom randomEnum__doneⁱᵐᵖˡ : val.

Axiom randomEnum__nextⁱᵐᵖˡ : val.

Axiom randomEnum__positionⁱᵐᵖˡ : val.

Axiom profBuf__canWriteRecordⁱᵐᵖˡ : val.

Axiom profBuf__canWriteTwoRecordsⁱᵐᵖˡ : val.

Axiom profBuf__closeⁱᵐᵖˡ : val.

Axiom profBuf__hasOverflowⁱᵐᵖˡ : val.

Axiom profBuf__incrementOverflowⁱᵐᵖˡ : val.

Axiom profBuf__readⁱᵐᵖˡ : val.

Axiom profBuf__takeOverflowⁱᵐᵖˡ : val.

Axiom profBuf__wakeupExtraⁱᵐᵖˡ : val.

Axiom profBuf__writeⁱᵐᵖˡ : val.

Axiom profAtomic__casⁱᵐᵖˡ : val.

Axiom profAtomic__loadⁱᵐᵖˡ : val.

Axiom profAtomic__storeⁱᵐᵖˡ : val.

Axiom profIndex__addCountsAndClearFlagsⁱᵐᵖˡ : val.

Axiom profIndex__dataCountⁱᵐᵖˡ : val.

Axiom profIndex__tagCountⁱᵐᵖˡ : val.

Axiom ticksType__initⁱᵐᵖˡ : val.

Axiom godebugInc__IncNonDefaultⁱᵐᵖˡ : val.

Axiom guintptr__casⁱᵐᵖˡ : val.

Axiom guintptr__ptrⁱᵐᵖˡ : val.

Axiom guintptr__setⁱᵐᵖˡ : val.

Axiom puintptr__ptrⁱᵐᵖˡ : val.

Axiom puintptr__setⁱᵐᵖˡ : val.

Axiom muintptr__ptrⁱᵐᵖˡ : val.

Axiom muintptr__setⁱᵐᵖˡ : val.

Axiom g__guintptrⁱᵐᵖˡ : val.

Axiom m__becomeSpinningⁱᵐᵖˡ : val.

Axiom m__clearAllpSnapshotⁱᵐᵖˡ : val.

Axiom m__hasCgoOnStackⁱᵐᵖˡ : val.

Axiom m__snapshotAllpⁱᵐᵖˡ : val.

Axiom p__destroyⁱᵐᵖˡ : val.

Axiom p__initⁱᵐᵖˡ : val.

Axiom _func__funcInfoⁱᵐᵖˡ : val.

Axiom _func__isInlinedⁱᵐᵖˡ : val.

Axiom _panic__initOpenCodedDefersⁱᵐᵖˡ : val.

Axiom _panic__nextDeferⁱᵐᵖˡ : val.

Axiom _panic__nextFrameⁱᵐᵖˡ : val.

Axiom _panic__startⁱᵐᵖˡ : val.

Axiom waitReason__Stringⁱᵐᵖˡ : val.

Axiom waitReason__isIdleInSynctestⁱᵐᵖˡ : val.

Axiom waitReason__isMutexWaitⁱᵐᵖˡ : val.

Axiom waitReason__isWaitingForSuspendGⁱᵐᵖˡ : val.

Axiom rwmutex__initⁱᵐᵖˡ : val.

Axiom rwmutex__lockⁱᵐᵖˡ : val.

Axiom rwmutex__rlockⁱᵐᵖˡ : val.

Axiom rwmutex__runlockⁱᵐᵖˡ : val.

Axiom rwmutex__unlockⁱᵐᵖˡ : val.

Axiom semaRoot__dequeueⁱᵐᵖˡ : val.

Axiom semaRoot__queueⁱᵐᵖˡ : val.

Axiom semaRoot__rotateLeftⁱᵐᵖˡ : val.

Axiom semaRoot__rotateRightⁱᵐᵖˡ : val.

Axiom semTable__rootForⁱᵐᵖˡ : val.

Axiom sigctxt__csⁱᵐᵖˡ : val.

Axiom sigctxt__faultⁱᵐᵖˡ : val.

Axiom sigctxt__fixsigcodeⁱᵐᵖˡ : val.

Axiom sigctxt__fsⁱᵐᵖˡ : val.

Axiom sigctxt__gsⁱᵐᵖˡ : val.

Axiom sigctxt__preparePanicⁱᵐᵖˡ : val.

Axiom sigctxt__pushCallⁱᵐᵖˡ : val.

Axiom sigctxt__r10ⁱᵐᵖˡ : val.

Axiom sigctxt__r11ⁱᵐᵖˡ : val.

Axiom sigctxt__r12ⁱᵐᵖˡ : val.

Axiom sigctxt__r13ⁱᵐᵖˡ : val.

Axiom sigctxt__r14ⁱᵐᵖˡ : val.

Axiom sigctxt__r15ⁱᵐᵖˡ : val.

Axiom sigctxt__r8ⁱᵐᵖˡ : val.

Axiom sigctxt__r9ⁱᵐᵖˡ : val.

Axiom sigctxt__raxⁱᵐᵖˡ : val.

Axiom sigctxt__rbpⁱᵐᵖˡ : val.

Axiom sigctxt__rbxⁱᵐᵖˡ : val.

Axiom sigctxt__rcxⁱᵐᵖˡ : val.

Axiom sigctxt__rdiⁱᵐᵖˡ : val.

Axiom sigctxt__rdxⁱᵐᵖˡ : val.

Axiom sigctxt__regsⁱᵐᵖˡ : val.

Axiom sigctxt__rflagsⁱᵐᵖˡ : val.

Axiom sigctxt__ripⁱᵐᵖˡ : val.

Axiom sigctxt__rsiⁱᵐᵖˡ : val.

Axiom sigctxt__rspⁱᵐᵖˡ : val.

Axiom sigctxt__set_ripⁱᵐᵖˡ : val.

Axiom sigctxt__set_rspⁱᵐᵖˡ : val.

Axiom sigctxt__set_sigaddrⁱᵐᵖˡ : val.

Axiom sigctxt__set_sigcodeⁱᵐᵖˡ : val.

Axiom sigctxt__setsigpcⁱᵐᵖˡ : val.

Axiom sigctxt__sigFromSeccompⁱᵐᵖˡ : val.

Axiom sigctxt__sigFromUserⁱᵐᵖˡ : val.

Axiom sigctxt__sigaddrⁱᵐᵖˡ : val.

Axiom sigctxt__sigcodeⁱᵐᵖˡ : val.

Axiom sigctxt__siglrⁱᵐᵖˡ : val.

Axiom sigctxt__sigpcⁱᵐᵖˡ : val.

Axiom sigctxt__sigspⁱᵐᵖˡ : val.

Axiom bitvector__ptrbitⁱᵐᵖˡ : val.

Axiom stackObjectRecord__gcdataⁱᵐᵖˡ : val.

Axiom stkframe__argBytesⁱᵐᵖˡ : val.

Axiom stkframe__argMapInternalⁱᵐᵖˡ : val.

Axiom stkframe__getStackMapⁱᵐᵖˡ : val.

Axiom Frames__Nextⁱᵐᵖˡ : val.

Axiom Func__Entryⁱᵐᵖˡ : val.

Axiom Func__FileLineⁱᵐᵖˡ : val.

Axiom Func__Nameⁱᵐᵖˡ : val.

Axiom Func__funcInfoⁱᵐᵖˡ : val.

Axiom Func__rawⁱᵐᵖˡ : val.

Axiom Func__startLineⁱᵐᵖˡ : val.

Axiom moduledata__funcNameⁱᵐᵖˡ : val.

Axiom moduledata__textAddrⁱᵐᵖˡ : val.

Axiom moduledata__textOffⁱᵐᵖˡ : val.

Axiom funcInfo___Funcⁱᵐᵖˡ : val.

Axiom funcInfo__entryⁱᵐᵖˡ : val.

Axiom funcInfo__funcInfoⁱᵐᵖˡ : val.

Axiom funcInfo__isInlinedⁱᵐᵖˡ : val.

Axiom funcInfo__srcFuncⁱᵐᵖˡ : val.

Axiom funcInfo__validⁱᵐᵖˡ : val.

Axiom srcFunc__nameⁱᵐᵖˡ : val.

Axiom inlineUnwinder__fileLineⁱᵐᵖˡ : val.

Axiom inlineUnwinder__isInlinedⁱᵐᵖˡ : val.

Axiom inlineUnwinder__nextⁱᵐᵖˡ : val.

Axiom inlineUnwinder__resolveInternalⁱᵐᵖˡ : val.

Axiom inlineUnwinder__srcFuncⁱᵐᵖˡ : val.

Axiom inlineFrame__validⁱᵐᵖˡ : val.

Axiom synctestGroup__changegstatusⁱᵐᵖˡ : val.

Axiom synctestGroup__decActiveⁱᵐᵖˡ : val.

Axiom synctestGroup__incActiveⁱᵐᵖˡ : val.

Axiom synctestGroup__maybeWakeLockedⁱᵐᵖˡ : val.

Axiom synctestGroup__raceaddrⁱᵐᵖˡ : val.

Axiom taggedPointer__pointerⁱᵐᵖˡ : val.

Axiom taggedPointer__tagⁱᵐᵖˡ : val.

Axiom timer__hchanⁱᵐᵖˡ : val.

Axiom timer__initⁱᵐᵖˡ : val.

Axiom timer__lockⁱᵐᵖˡ : val.

Axiom timer__maybeAddⁱᵐᵖˡ : val.

Axiom timer__maybeRunAsyncⁱᵐᵖˡ : val.

Axiom timer__maybeRunChanⁱᵐᵖˡ : val.

Axiom timer__modifyⁱᵐᵖˡ : val.

Axiom timer__needsAddⁱᵐᵖˡ : val.

Axiom timer__resetⁱᵐᵖˡ : val.

Axiom timer__stopⁱᵐᵖˡ : val.

Axiom timer__traceⁱᵐᵖˡ : val.

Axiom timer__trace1ⁱᵐᵖˡ : val.

Axiom timer__unlockⁱᵐᵖˡ : val.

Axiom timer__unlockAndRunⁱᵐᵖˡ : val.

Axiom timer__updateHeapⁱᵐᵖˡ : val.

Axiom timers__addHeapⁱᵐᵖˡ : val.

Axiom timers__adjustⁱᵐᵖˡ : val.

Axiom timers__checkⁱᵐᵖˡ : val.

Axiom timers__cleanHeadⁱᵐᵖˡ : val.

Axiom timers__deleteMinⁱᵐᵖˡ : val.

Axiom timers__initHeapⁱᵐᵖˡ : val.

Axiom timers__lockⁱᵐᵖˡ : val.

Axiom timers__runⁱᵐᵖˡ : val.

Axiom timers__siftDownⁱᵐᵖˡ : val.

Axiom timers__siftUpⁱᵐᵖˡ : val.

Axiom timers__takeⁱᵐᵖˡ : val.

Axiom timers__traceⁱᵐᵖˡ : val.

Axiom timers__unlockⁱᵐᵖˡ : val.

Axiom timers__updateMinWhenHeapⁱᵐᵖˡ : val.

Axiom timers__updateMinWhenModifiedⁱᵐᵖˡ : val.

Axiom timers__verifyⁱᵐᵖˡ : val.

Axiom timers__wakeTimeⁱᵐᵖˡ : val.

Axiom timeTimer__hchanⁱᵐᵖˡ : val.

Axiom timeTimer__lockⁱᵐᵖˡ : val.

Axiom timeTimer__maybeAddⁱᵐᵖˡ : val.

Axiom timeTimer__maybeRunAsyncⁱᵐᵖˡ : val.

Axiom timeTimer__maybeRunChanⁱᵐᵖˡ : val.

Axiom timeTimer__modifyⁱᵐᵖˡ : val.

Axiom timeTimer__needsAddⁱᵐᵖˡ : val.

Axiom timeTimer__resetⁱᵐᵖˡ : val.

Axiom timeTimer__stopⁱᵐᵖˡ : val.

Axiom timeTimer__traceⁱᵐᵖˡ : val.

Axiom timeTimer__trace1ⁱᵐᵖˡ : val.

Axiom timeTimer__unlockⁱᵐᵖˡ : val.

Axiom timeTimer__unlockAndRunⁱᵐᵖˡ : val.

Axiom timeTimer__updateHeapⁱᵐᵖˡ : val.

Axiom traceAdvancerState__startⁱᵐᵖˡ : val.

Axiom traceAdvancerState__stopⁱᵐᵖˡ : val.

Axiom wakeableSleep__closeⁱᵐᵖˡ : val.

Axiom wakeableSleep__sleepⁱᵐᵖˡ : val.

Axiom wakeableSleep__wakeⁱᵐᵖˡ : val.

Axiom unwinder__cgoCallersⁱᵐᵖˡ : val.

Axiom unwinder__finishInternalⁱᵐᵖˡ : val.

Axiom unwinder__initⁱᵐᵖˡ : val.

Axiom unwinder__initAtⁱᵐᵖˡ : val.

Axiom unwinder__nextⁱᵐᵖˡ : val.

Axiom unwinder__resolveInternalⁱᵐᵖˡ : val.

Axiom unwinder__symPCⁱᵐᵖˡ : val.

Axiom unwinder__validⁱᵐᵖˡ : val.

Axiom traceWriter__GCActiveⁱᵐᵖˡ : val.

Axiom traceWriter__GCDoneⁱᵐᵖˡ : val.

Axiom traceWriter__GCMarkAssistDoneⁱᵐᵖˡ : val.

Axiom traceWriter__GCMarkAssistStartⁱᵐᵖˡ : val.

Axiom traceWriter__GCStartⁱᵐᵖˡ : val.

Axiom traceWriter__GCSweepDoneⁱᵐᵖˡ : val.

Axiom traceWriter__GCSweepSpanⁱᵐᵖˡ : val.

Axiom traceWriter__GCSweepStartⁱᵐᵖˡ : val.

Axiom traceWriter__GoCreateⁱᵐᵖˡ : val.

Axiom traceWriter__GoCreateSyscallⁱᵐᵖˡ : val.

Axiom traceWriter__GoDestroySyscallⁱᵐᵖˡ : val.

Axiom traceWriter__GoEndⁱᵐᵖˡ : val.

Axiom traceWriter__GoParkⁱᵐᵖˡ : val.

Axiom traceWriter__GoPreemptⁱᵐᵖˡ : val.

Axiom traceWriter__GoSchedⁱᵐᵖˡ : val.

Axiom traceWriter__GoStartⁱᵐᵖˡ : val.

Axiom traceWriter__GoStopⁱᵐᵖˡ : val.

Axiom traceWriter__GoSwitchⁱᵐᵖˡ : val.

Axiom traceWriter__GoSysCallⁱᵐᵖˡ : val.

Axiom traceWriter__GoSysExitⁱᵐᵖˡ : val.

Axiom traceWriter__GoUnparkⁱᵐᵖˡ : val.

Axiom traceWriter__Gomaxprocsⁱᵐᵖˡ : val.

Axiom traceWriter__GoroutineStackAllocⁱᵐᵖˡ : val.

Axiom traceWriter__GoroutineStackExistsⁱᵐᵖˡ : val.

Axiom traceWriter__GoroutineStackFreeⁱᵐᵖˡ : val.

Axiom traceWriter__HeapAllocⁱᵐᵖˡ : val.

Axiom traceWriter__HeapGoalⁱᵐᵖˡ : val.

Axiom traceWriter__HeapObjectAllocⁱᵐᵖˡ : val.

Axiom traceWriter__HeapObjectExistsⁱᵐᵖˡ : val.

Axiom traceWriter__HeapObjectFreeⁱᵐᵖˡ : val.

Axiom traceWriter__ProcStartⁱᵐᵖˡ : val.

Axiom traceWriter__ProcStealⁱᵐᵖˡ : val.

Axiom traceWriter__ProcStopⁱᵐᵖˡ : val.

Axiom traceWriter__STWDoneⁱᵐᵖˡ : val.

Axiom traceWriter__STWStartⁱᵐᵖˡ : val.

Axiom traceWriter__SpanAllocⁱᵐᵖˡ : val.

Axiom traceWriter__SpanExistsⁱᵐᵖˡ : val.

Axiom traceWriter__SpanFreeⁱᵐᵖˡ : val.

Axiom traceWriter__availableⁱᵐᵖˡ : val.

Axiom traceWriter__byteⁱᵐᵖˡ : val.

Axiom traceWriter__emitUnblockStatusⁱᵐᵖˡ : val.

Axiom traceWriter__endⁱᵐᵖˡ : val.

Axiom traceWriter__ensureⁱᵐᵖˡ : val.

Axiom traceWriter__eventⁱᵐᵖˡ : val.

Axiom traceWriter__eventWriterⁱᵐᵖˡ : val.

Axiom traceWriter__expWriterⁱᵐᵖˡ : val.

Axiom traceWriter__flushⁱᵐᵖˡ : val.

Axiom traceWriter__okⁱᵐᵖˡ : val.

Axiom traceWriter__refillⁱᵐᵖˡ : val.

Axiom traceWriter__rtypeⁱᵐᵖˡ : val.

Axiom traceWriter__stackⁱᵐᵖˡ : val.

Axiom traceWriter__startPCⁱᵐᵖˡ : val.

Axiom traceWriter__stringⁱᵐᵖˡ : val.

Axiom traceWriter__stringDataⁱᵐᵖˡ : val.

Axiom traceWriter__uniqueStringⁱᵐᵖˡ : val.

Axiom traceWriter__varintⁱᵐᵖˡ : val.

Axiom traceWriter__varintAtⁱᵐᵖˡ : val.

Axiom traceWriter__varintReserveⁱᵐᵖˡ : val.

Axiom traceWriter__writeGoStatusⁱᵐᵖˡ : val.

Axiom traceWriter__writeProcStatusⁱᵐᵖˡ : val.

Axiom traceWriter__writeProcStatusForPⁱᵐᵖˡ : val.

Axiom traceWriter__writerⁱᵐᵖˡ : val.

Axiom traceBufQueue__emptyⁱᵐᵖˡ : val.

Axiom traceBufQueue__popⁱᵐᵖˡ : val.

Axiom traceBufQueue__pushⁱᵐᵖˡ : val.

Axiom traceBuf__availableⁱᵐᵖˡ : val.

Axiom traceBuf__byteⁱᵐᵖˡ : val.

Axiom traceBuf__stringDataⁱᵐᵖˡ : val.

Axiom traceBuf__varintⁱᵐᵖˡ : val.

Axiom traceBuf__varintAtⁱᵐᵖˡ : val.

Axiom traceBuf__varintReserveⁱᵐᵖˡ : val.

Axiom traceEventWriter__eventⁱᵐᵖˡ : val.

Axiom traceMap__newTraceMapNodeⁱᵐᵖˡ : val.

Axiom traceMap__putⁱᵐᵖˡ : val.

Axiom traceMap__resetⁱᵐᵖˡ : val.

Axiom traceMap__stealIDⁱᵐᵖˡ : val.

Axiom traceRegionAlloc__allocⁱᵐᵖˡ : val.

Axiom traceRegionAlloc__dropⁱᵐᵖˡ : val.

Axiom gTraceState__acquireStatusⁱᵐᵖˡ : val.

Axiom gTraceState__nextSeqⁱᵐᵖˡ : val.

Axiom gTraceState__readyNextGenⁱᵐᵖˡ : val.

Axiom gTraceState__resetⁱᵐᵖˡ : val.

Axiom gTraceState__setStatusTracedⁱᵐᵖˡ : val.

Axiom gTraceState__statusWasTracedⁱᵐᵖˡ : val.

Axiom pTraceState__acquireStatusⁱᵐᵖˡ : val.

Axiom pTraceState__nextSeqⁱᵐᵖˡ : val.

Axiom pTraceState__readyNextGenⁱᵐᵖˡ : val.

Axiom pTraceState__setStatusTracedⁱᵐᵖˡ : val.

Axiom pTraceState__statusWasTracedⁱᵐᵖˡ : val.

Axiom traceLocker__GCActiveⁱᵐᵖˡ : val.

Axiom traceLocker__GCDoneⁱᵐᵖˡ : val.

Axiom traceLocker__GCMarkAssistDoneⁱᵐᵖˡ : val.

Axiom traceLocker__GCMarkAssistStartⁱᵐᵖˡ : val.

Axiom traceLocker__GCStartⁱᵐᵖˡ : val.

Axiom traceLocker__GCSweepDoneⁱᵐᵖˡ : val.

Axiom traceLocker__GCSweepSpanⁱᵐᵖˡ : val.

Axiom traceLocker__GCSweepStartⁱᵐᵖˡ : val.

Axiom traceLocker__GoCreateⁱᵐᵖˡ : val.

Axiom traceLocker__GoCreateSyscallⁱᵐᵖˡ : val.

Axiom traceLocker__GoDestroySyscallⁱᵐᵖˡ : val.

Axiom traceLocker__GoEndⁱᵐᵖˡ : val.

Axiom traceLocker__GoParkⁱᵐᵖˡ : val.

Axiom traceLocker__GoPreemptⁱᵐᵖˡ : val.

Axiom traceLocker__GoSchedⁱᵐᵖˡ : val.

Axiom traceLocker__GoStartⁱᵐᵖˡ : val.

Axiom traceLocker__GoStopⁱᵐᵖˡ : val.

Axiom traceLocker__GoSwitchⁱᵐᵖˡ : val.

Axiom traceLocker__GoSysCallⁱᵐᵖˡ : val.

Axiom traceLocker__GoSysExitⁱᵐᵖˡ : val.

Axiom traceLocker__GoUnparkⁱᵐᵖˡ : val.

Axiom traceLocker__Gomaxprocsⁱᵐᵖˡ : val.

Axiom traceLocker__GoroutineStackAllocⁱᵐᵖˡ : val.

Axiom traceLocker__GoroutineStackExistsⁱᵐᵖˡ : val.

Axiom traceLocker__GoroutineStackFreeⁱᵐᵖˡ : val.

Axiom traceLocker__HeapAllocⁱᵐᵖˡ : val.

Axiom traceLocker__HeapGoalⁱᵐᵖˡ : val.

Axiom traceLocker__HeapObjectAllocⁱᵐᵖˡ : val.

Axiom traceLocker__HeapObjectExistsⁱᵐᵖˡ : val.

Axiom traceLocker__HeapObjectFreeⁱᵐᵖˡ : val.

Axiom traceLocker__ProcStartⁱᵐᵖˡ : val.

Axiom traceLocker__ProcStealⁱᵐᵖˡ : val.

Axiom traceLocker__ProcStopⁱᵐᵖˡ : val.

Axiom traceLocker__STWDoneⁱᵐᵖˡ : val.

Axiom traceLocker__STWStartⁱᵐᵖˡ : val.

Axiom traceLocker__SpanAllocⁱᵐᵖˡ : val.

Axiom traceLocker__SpanExistsⁱᵐᵖˡ : val.

Axiom traceLocker__SpanFreeⁱᵐᵖˡ : val.

Axiom traceLocker__emitUnblockStatusⁱᵐᵖˡ : val.

Axiom traceLocker__eventWriterⁱᵐᵖˡ : val.

Axiom traceLocker__expWriterⁱᵐᵖˡ : val.

Axiom traceLocker__okⁱᵐᵖˡ : val.

Axiom traceLocker__rtypeⁱᵐᵖˡ : val.

Axiom traceLocker__stackⁱᵐᵖˡ : val.

Axiom traceLocker__startPCⁱᵐᵖˡ : val.

Axiom traceLocker__stringⁱᵐᵖˡ : val.

Axiom traceLocker__uniqueStringⁱᵐᵖˡ : val.

Axiom traceLocker__writerⁱᵐᵖˡ : val.

Axiom traceStackTable__dumpⁱᵐᵖˡ : val.

Axiom traceStackTable__putⁱᵐᵖˡ : val.

Axiom traceSchedResourceState__acquireStatusⁱᵐᵖˡ : val.

Axiom traceSchedResourceState__nextSeqⁱᵐᵖˡ : val.

Axiom traceSchedResourceState__readyNextGenⁱᵐᵖˡ : val.

Axiom traceSchedResourceState__setStatusTracedⁱᵐᵖˡ : val.

Axiom traceSchedResourceState__statusWasTracedⁱᵐᵖˡ : val.

Axiom traceStringTable__emitⁱᵐᵖˡ : val.

Axiom traceStringTable__putⁱᵐᵖˡ : val.

Axiom traceStringTable__resetⁱᵐᵖˡ : val.

Axiom traceStringTable__writeStringⁱᵐᵖˡ : val.

Axiom traceTypeTable__dumpⁱᵐᵖˡ : val.

Axiom traceTypeTable__putⁱᵐᵖˡ : val.

Axiom rtype__Alignⁱᵐᵖˡ : val.

Axiom rtype__ArrayTypeⁱᵐᵖˡ : val.

Axiom rtype__ChanDirⁱᵐᵖˡ : val.

Axiom rtype__Commonⁱᵐᵖˡ : val.

Axiom rtype__Elemⁱᵐᵖˡ : val.

Axiom rtype__ExportedMethodsⁱᵐᵖˡ : val.

Axiom rtype__FieldAlignⁱᵐᵖˡ : val.

Axiom rtype__FuncTypeⁱᵐᵖˡ : val.

Axiom rtype__GcSliceⁱᵐᵖˡ : val.

Axiom rtype__HasNameⁱᵐᵖˡ : val.

Axiom rtype__IfaceIndirⁱᵐᵖˡ : val.

Axiom rtype__InterfaceTypeⁱᵐᵖˡ : val.

Axiom rtype__IsDirectIfaceⁱᵐᵖˡ : val.

Axiom rtype__Keyⁱᵐᵖˡ : val.

Axiom rtype__Kindⁱᵐᵖˡ : val.

Axiom rtype__Lenⁱᵐᵖˡ : val.

Axiom rtype__MapTypeⁱᵐᵖˡ : val.

Axiom rtype__NumMethodⁱᵐᵖˡ : val.

Axiom rtype__Pointersⁱᵐᵖˡ : val.

Axiom rtype__Sizeⁱᵐᵖˡ : val.

Axiom rtype__StructTypeⁱᵐᵖˡ : val.

Axiom rtype__Uncommonⁱᵐᵖˡ : val.

Axiom rtype__nameⁱᵐᵖˡ : val.

Axiom rtype__nameOffⁱᵐᵖˡ : val.

Axiom rtype__pkgpathⁱᵐᵖˡ : val.

Axiom rtype__stringⁱᵐᵖˡ : val.

Axiom rtype__textOffⁱᵐᵖˡ : val.

Axiom rtype__typeOffⁱᵐᵖˡ : val.

Axiom rtype__uncommonⁱᵐᵖˡ : val.

Axiom bitCursor__offsetⁱᵐᵖˡ : val.

Axiom bitCursor__writeⁱᵐᵖˡ : val.

Definition msets' : list (go_string * (list (go_string * val))) := [(userArena.id, []); (ptrT.id userArena.id, [("alloc"%go, userArena__allocⁱᵐᵖˡ); ("free"%go, userArena__freeⁱᵐᵖˡ); ("new"%go, userArena__newⁱᵐᵖˡ); ("refill"%go, userArena__refillⁱᵐᵖˡ); ("slice"%go, userArena__sliceⁱᵐᵖˡ)]); (liveUserArenaChunk.id, [("allocBitsForIndex"%go, liveUserArenaChunk__allocBitsForIndexⁱᵐᵖˡ); ("base"%go, liveUserArenaChunk__baseⁱᵐᵖˡ); ("countAlloc"%go, liveUserArenaChunk__countAllocⁱᵐᵖˡ); ("decPinCounter"%go, liveUserArenaChunk__decPinCounterⁱᵐᵖˡ); ("divideByElemSize"%go, liveUserArenaChunk__divideByElemSizeⁱᵐᵖˡ); ("ensureSwept"%go, liveUserArenaChunk__ensureSweptⁱᵐᵖˡ); ("getPinnerBits"%go, liveUserArenaChunk__getPinnerBitsⁱᵐᵖˡ); ("heapBits"%go, liveUserArenaChunk__heapBitsⁱᵐᵖˡ); ("heapBitsSmallForAddr"%go, liveUserArenaChunk__heapBitsSmallForAddrⁱᵐᵖˡ); ("inList"%go, liveUserArenaChunk__inListⁱᵐᵖˡ); ("incPinCounter"%go, liveUserArenaChunk__incPinCounterⁱᵐᵖˡ); ("init"%go, liveUserArenaChunk__initⁱᵐᵖˡ); ("initHeapBits"%go, liveUserArenaChunk__initHeapBitsⁱᵐᵖˡ); ("isFree"%go, liveUserArenaChunk__isFreeⁱᵐᵖˡ); ("isUnusedUserArenaChunk"%go, liveUserArenaChunk__isUnusedUserArenaChunkⁱᵐᵖˡ); ("layout"%go, liveUserArenaChunk__layoutⁱᵐᵖˡ); ("markBitsForBase"%go, liveUserArenaChunk__markBitsForBaseⁱᵐᵖˡ); ("markBitsForIndex"%go, liveUserArenaChunk__markBitsForIndexⁱᵐᵖˡ); ("newPinnerBits"%go, liveUserArenaChunk__newPinnerBitsⁱᵐᵖˡ); ("nextFreeIndex"%go, liveUserArenaChunk__nextFreeIndexⁱᵐᵖˡ); ("objBase"%go, liveUserArenaChunk__objBaseⁱᵐᵖˡ); ("objIndex"%go, liveUserArenaChunk__objIndexⁱᵐᵖˡ); ("pinnerBitSize"%go, liveUserArenaChunk__pinnerBitSizeⁱᵐᵖˡ); ("refillAllocCache"%go, liveUserArenaChunk__refillAllocCacheⁱᵐᵖˡ); ("refreshPinnerBits"%go, liveUserArenaChunk__refreshPinnerBitsⁱᵐᵖˡ); ("reportZombies"%go, liveUserArenaChunk__reportZombiesⁱᵐᵖˡ); ("setPinnerBits"%go, liveUserArenaChunk__setPinnerBitsⁱᵐᵖˡ); ("setUserArenaChunkToFault"%go, liveUserArenaChunk__setUserArenaChunkToFaultⁱᵐᵖˡ); ("specialFindSplicePoint"%go, liveUserArenaChunk__specialFindSplicePointⁱᵐᵖˡ); ("typePointersOf"%go, liveUserArenaChunk__typePointersOfⁱᵐᵖˡ); ("typePointersOfType"%go, liveUserArenaChunk__typePointersOfTypeⁱᵐᵖˡ); ("typePointersOfUnchecked"%go, liveUserArenaChunk__typePointersOfUncheckedⁱᵐᵖˡ); ("userArenaNextFree"%go, liveUserArenaChunk__userArenaNextFreeⁱᵐᵖˡ); ("writeHeapBitsSmall"%go, liveUserArenaChunk__writeHeapBitsSmallⁱᵐᵖˡ); ("writeUserArenaHeapBits"%go, liveUserArenaChunk__writeUserArenaHeapBitsⁱᵐᵖˡ)]); (ptrT.id liveUserArenaChunk.id, [("allocBitsForIndex"%go, liveUserArenaChunk__allocBitsForIndexⁱᵐᵖˡ); ("base"%go, liveUserArenaChunk__baseⁱᵐᵖˡ); ("countAlloc"%go, liveUserArenaChunk__countAllocⁱᵐᵖˡ); ("decPinCounter"%go, liveUserArenaChunk__decPinCounterⁱᵐᵖˡ); ("divideByElemSize"%go, liveUserArenaChunk__divideByElemSizeⁱᵐᵖˡ); ("ensureSwept"%go, liveUserArenaChunk__ensureSweptⁱᵐᵖˡ); ("getPinnerBits"%go, liveUserArenaChunk__getPinnerBitsⁱᵐᵖˡ); ("heapBits"%go, liveUserArenaChunk__heapBitsⁱᵐᵖˡ); ("heapBitsSmallForAddr"%go, liveUserArenaChunk__heapBitsSmallForAddrⁱᵐᵖˡ); ("inList"%go, liveUserArenaChunk__inListⁱᵐᵖˡ); ("incPinCounter"%go, liveUserArenaChunk__incPinCounterⁱᵐᵖˡ); ("init"%go, liveUserArenaChunk__initⁱᵐᵖˡ); ("initHeapBits"%go, liveUserArenaChunk__initHeapBitsⁱᵐᵖˡ); ("isFree"%go, liveUserArenaChunk__isFreeⁱᵐᵖˡ); ("isUnusedUserArenaChunk"%go, liveUserArenaChunk__isUnusedUserArenaChunkⁱᵐᵖˡ); ("layout"%go, liveUserArenaChunk__layoutⁱᵐᵖˡ); ("markBitsForBase"%go, liveUserArenaChunk__markBitsForBaseⁱᵐᵖˡ); ("markBitsForIndex"%go, liveUserArenaChunk__markBitsForIndexⁱᵐᵖˡ); ("newPinnerBits"%go, liveUserArenaChunk__newPinnerBitsⁱᵐᵖˡ); ("nextFreeIndex"%go, liveUserArenaChunk__nextFreeIndexⁱᵐᵖˡ); ("objBase"%go, liveUserArenaChunk__objBaseⁱᵐᵖˡ); ("objIndex"%go, liveUserArenaChunk__objIndexⁱᵐᵖˡ); ("pinnerBitSize"%go, liveUserArenaChunk__pinnerBitSizeⁱᵐᵖˡ); ("refillAllocCache"%go, liveUserArenaChunk__refillAllocCacheⁱᵐᵖˡ); ("refreshPinnerBits"%go, liveUserArenaChunk__refreshPinnerBitsⁱᵐᵖˡ); ("reportZombies"%go, liveUserArenaChunk__reportZombiesⁱᵐᵖˡ); ("setPinnerBits"%go, liveUserArenaChunk__setPinnerBitsⁱᵐᵖˡ); ("setUserArenaChunkToFault"%go, liveUserArenaChunk__setUserArenaChunkToFaultⁱᵐᵖˡ); ("specialFindSplicePoint"%go, liveUserArenaChunk__specialFindSplicePointⁱᵐᵖˡ); ("typePointersOf"%go, liveUserArenaChunk__typePointersOfⁱᵐᵖˡ); ("typePointersOfType"%go, liveUserArenaChunk__typePointersOfTypeⁱᵐᵖˡ); ("typePointersOfUnchecked"%go, liveUserArenaChunk__typePointersOfUncheckedⁱᵐᵖˡ); ("userArenaNextFree"%go, liveUserArenaChunk__userArenaNextFreeⁱᵐᵖˡ); ("writeHeapBitsSmall"%go, liveUserArenaChunk__writeHeapBitsSmallⁱᵐᵖˡ); ("writeUserArenaHeapBits"%go, liveUserArenaChunk__writeUserArenaHeapBitsⁱᵐᵖˡ)]); (writeUserArenaHeapBits.id, [("flush"%go, writeUserArenaHeapBits__flushⁱᵐᵖˡ); ("pad"%go, writeUserArenaHeapBits__padⁱᵐᵖˡ); ("write"%go, writeUserArenaHeapBits__writeⁱᵐᵖˡ)]); (ptrT.id writeUserArenaHeapBits.id, [("flush"%go, writeUserArenaHeapBits__flushⁱᵐᵖˡ); ("pad"%go, writeUserArenaHeapBits__padⁱᵐᵖˡ); ("write"%go, writeUserArenaHeapBits__writeⁱᵐᵖˡ)]); (cgoCallers.id, []); (ptrT.id cgoCallers.id, []); (argset.id, []); (ptrT.id argset.id, []); (hchan.id, []); (ptrT.id hchan.id, [("raceaddr"%go, hchan__raceaddrⁱᵐᵖˡ); ("sortkey"%go, hchan__sortkeyⁱᵐᵖˡ)]); (waitq.id, []); (ptrT.id waitq.id, [("dequeue"%go, waitq__dequeueⁱᵐᵖˡ); ("dequeueSudoG"%go, waitq__dequeueSudoGⁱᵐᵖˡ); ("enqueue"%go, waitq__enqueueⁱᵐᵖˡ)]); (coro.id, []); (ptrT.id coro.id, []); (cpuProfile.id, []); (ptrT.id cpuProfile.id, [("add"%go, cpuProfile__addⁱᵐᵖˡ); ("addExtra"%go, cpuProfile__addExtraⁱᵐᵖˡ); ("addNonGo"%go, cpuProfile__addNonGoⁱᵐᵖˡ)]); (debugCallWrapArgs.id, []); (ptrT.id debugCallWrapArgs.id, []); (dloggerImpl.id, []); (ptrT.id dloggerImpl.id, [("b"%go, dloggerImpl__bⁱᵐᵖˡ); ("end"%go, dloggerImpl__endⁱᵐᵖˡ); ("hex"%go, dloggerImpl__hexⁱᵐᵖˡ); ("i"%go, dloggerImpl__iⁱᵐᵖˡ); ("i16"%go, dloggerImpl__i16ⁱᵐᵖˡ); ("i32"%go, dloggerImpl__i32ⁱᵐᵖˡ); ("i64"%go, dloggerImpl__i64ⁱᵐᵖˡ); ("i8"%go, dloggerImpl__i8ⁱᵐᵖˡ); ("p"%go, dloggerImpl__pⁱᵐᵖˡ); ("pc"%go, dloggerImpl__pcⁱᵐᵖˡ); ("s"%go, dloggerImpl__sⁱᵐᵖˡ); ("traceback"%go, dloggerImpl__tracebackⁱᵐᵖˡ); ("u"%go, dloggerImpl__uⁱᵐᵖˡ); ("u16"%go, dloggerImpl__u16ⁱᵐᵖˡ); ("u32"%go, dloggerImpl__u32ⁱᵐᵖˡ); ("u64"%go, dloggerImpl__u64ⁱᵐᵖˡ); ("u8"%go, dloggerImpl__u8ⁱᵐᵖˡ); ("uptr"%go, dloggerImpl__uptrⁱᵐᵖˡ)]); (dloggerFake.id, [("b"%go, dloggerFake__bⁱᵐᵖˡ); ("end"%go, dloggerFake__endⁱᵐᵖˡ); ("hex"%go, dloggerFake__hexⁱᵐᵖˡ); ("i"%go, dloggerFake__iⁱᵐᵖˡ); ("i16"%go, dloggerFake__i16ⁱᵐᵖˡ); ("i32"%go, dloggerFake__i32ⁱᵐᵖˡ); ("i64"%go, dloggerFake__i64ⁱᵐᵖˡ); ("i8"%go, dloggerFake__i8ⁱᵐᵖˡ); ("p"%go, dloggerFake__pⁱᵐᵖˡ); ("pc"%go, dloggerFake__pcⁱᵐᵖˡ); ("s"%go, dloggerFake__sⁱᵐᵖˡ); ("traceback"%go, dloggerFake__tracebackⁱᵐᵖˡ); ("u"%go, dloggerFake__uⁱᵐᵖˡ); ("u16"%go, dloggerFake__u16ⁱᵐᵖˡ); ("u32"%go, dloggerFake__u32ⁱᵐᵖˡ); ("u64"%go, dloggerFake__u64ⁱᵐᵖˡ); ("u8"%go, dloggerFake__u8ⁱᵐᵖˡ); ("uptr"%go, dloggerFake__uptrⁱᵐᵖˡ)]); (ptrT.id dloggerFake.id, [("b"%go, dloggerFake__bⁱᵐᵖˡ); ("end"%go, dloggerFake__endⁱᵐᵖˡ); ("hex"%go, dloggerFake__hexⁱᵐᵖˡ); ("i"%go, dloggerFake__iⁱᵐᵖˡ); ("i16"%go, dloggerFake__i16ⁱᵐᵖˡ); ("i32"%go, dloggerFake__i32ⁱᵐᵖˡ); ("i64"%go, dloggerFake__i64ⁱᵐᵖˡ); ("i8"%go, dloggerFake__i8ⁱᵐᵖˡ); ("p"%go, dloggerFake__pⁱᵐᵖˡ); ("pc"%go, dloggerFake__pcⁱᵐᵖˡ); ("s"%go, dloggerFake__sⁱᵐᵖˡ); ("traceback"%go, dloggerFake__tracebackⁱᵐᵖˡ); ("u"%go, dloggerFake__uⁱᵐᵖˡ); ("u16"%go, dloggerFake__u16ⁱᵐᵖˡ); ("u32"%go, dloggerFake__u32ⁱᵐᵖˡ); ("u64"%go, dloggerFake__u64ⁱᵐᵖˡ); ("u8"%go, dloggerFake__u8ⁱᵐᵖˡ); ("uptr"%go, dloggerFake__uptrⁱᵐᵖˡ)]); (debugLogWriter.id, []); (ptrT.id debugLogWriter.id, [("byte"%go, debugLogWriter__byteⁱᵐᵖˡ); ("bytes"%go, debugLogWriter__bytesⁱᵐᵖˡ); ("ensure"%go, debugLogWriter__ensureⁱᵐᵖˡ); ("uvarint"%go, debugLogWriter__uvarintⁱᵐᵖˡ); ("varint"%go, debugLogWriter__varintⁱᵐᵖˡ); ("writeFrameAt"%go, debugLogWriter__writeFrameAtⁱᵐᵖˡ); ("writeSync"%go, debugLogWriter__writeSyncⁱᵐᵖˡ); ("writeUint64LE"%go, debugLogWriter__writeUint64LEⁱᵐᵖˡ)]); (debugLogBuf.id, []); (ptrT.id debugLogBuf.id, []); (debugLogReader.id, []); (ptrT.id debugLogReader.id, [("header"%go, debugLogReader__headerⁱᵐᵖˡ); ("peek"%go, debugLogReader__peekⁱᵐᵖˡ); ("printVal"%go, debugLogReader__printValⁱᵐᵖˡ); ("readUint16LEAt"%go, debugLogReader__readUint16LEAtⁱᵐᵖˡ); ("readUint64LEAt"%go, debugLogReader__readUint64LEAtⁱᵐᵖˡ); ("skip"%go, debugLogReader__skipⁱᵐᵖˡ); ("uvarint"%go, debugLogReader__uvarintⁱᵐᵖˡ); ("varint"%go, debugLogReader__varintⁱᵐᵖˡ)]); (dlogPerM.id, []); (ptrT.id dlogPerM.id, []); (timespec.id, []); (ptrT.id timespec.id, [("setNsec"%go, timespec__setNsecⁱᵐᵖˡ)]); (timeval.id, []); (ptrT.id timeval.id, [("set_usec"%go, timeval__set_usecⁱᵐᵖˡ)]); (sigactiont.id, []); (ptrT.id sigactiont.id, []); (siginfoFields.id, []); (ptrT.id siginfoFields.id, []); (siginfo.id, []); (ptrT.id siginfo.id, []); (itimerspec.id, []); (ptrT.id itimerspec.id, []); (itimerval.id, []); (ptrT.id itimerval.id, []); (sigeventFields.id, []); (ptrT.id sigeventFields.id, []); (sigevent.id, []); (ptrT.id sigevent.id, []); (usigset.id, []); (ptrT.id usigset.id, []); (fpxreg.id, []); (ptrT.id fpxreg.id, []); (xmmreg.id, []); (ptrT.id xmmreg.id, []); (fpstate.id, []); (ptrT.id fpstate.id, []); (fpxreg1.id, []); (ptrT.id fpxreg1.id, []); (xmmreg1.id, []); (ptrT.id xmmreg1.id, []); (fpstate1.id, []); (ptrT.id fpstate1.id, []); (fpreg1.id, []); (ptrT.id fpreg1.id, []); (stackt.id, []); (ptrT.id stackt.id, []); (mcontext.id, []); (ptrT.id mcontext.id, []); (ucontext.id, []); (ptrT.id ucontext.id, []); (sigcontext.id, []); (ptrT.id sigcontext.id, []); (sockaddr_un.id, []); (ptrT.id sockaddr_un.id, []); (TypeAssertionError.id, []); (ptrT.id TypeAssertionError.id, [("Error"%go, TypeAssertionError__Errorⁱᵐᵖˡ); ("RuntimeError"%go, TypeAssertionError__RuntimeErrorⁱᵐᵖˡ)]); (errorString.id, [("Error"%go, errorString__Errorⁱᵐᵖˡ); ("RuntimeError"%go, errorString__RuntimeErrorⁱᵐᵖˡ)]); (ptrT.id errorString.id, [("Error"%go, errorString__Errorⁱᵐᵖˡ); ("RuntimeError"%go, errorString__RuntimeErrorⁱᵐᵖˡ)]); (errorAddressString.id, [("Addr"%go, errorAddressString__Addrⁱᵐᵖˡ); ("Error"%go, errorAddressString__Errorⁱᵐᵖˡ); ("RuntimeError"%go, errorAddressString__RuntimeErrorⁱᵐᵖˡ)]); (ptrT.id errorAddressString.id, [("Addr"%go, errorAddressString__Addrⁱᵐᵖˡ); ("Error"%go, errorAddressString__Errorⁱᵐᵖˡ); ("RuntimeError"%go, errorAddressString__RuntimeErrorⁱᵐᵖˡ)]); (plainError.id, [("Error"%go, plainError__Errorⁱᵐᵖˡ); ("RuntimeError"%go, plainError__RuntimeErrorⁱᵐᵖˡ)]); (ptrT.id plainError.id, [("Error"%go, plainError__Errorⁱᵐᵖˡ); ("RuntimeError"%go, plainError__RuntimeErrorⁱᵐᵖˡ)]); (boundsError.id, [("Error"%go, boundsError__Errorⁱᵐᵖˡ); ("RuntimeError"%go, boundsError__RuntimeErrorⁱᵐᵖˡ)]); (ptrT.id boundsError.id, [("Error"%go, boundsError__Errorⁱᵐᵖˡ); ("RuntimeError"%go, boundsError__RuntimeErrorⁱᵐᵖˡ)]); (boundsErrorCode.id, []); (ptrT.id boundsErrorCode.id, []); (typeCacheBucket.id, []); (ptrT.id typeCacheBucket.id, []); (childInfo.id, []); (ptrT.id childInfo.id, []); (timeHistogram.id, []); (ptrT.id timeHistogram.id, [("record"%go, timeHistogram__recordⁱᵐᵖˡ); ("write"%go, timeHistogram__writeⁱᵐᵖˡ)]); (itabTableType.id, []); (ptrT.id itabTableType.id, [("add"%go, itabTableType__addⁱᵐᵖˡ); ("find"%go, itabTableType__findⁱᵐᵖˡ)]); (uint16InterfacePtr.id, []); (ptrT.id uint16InterfacePtr.id, []); (uint32InterfacePtr.id, []); (ptrT.id uint32InterfacePtr.id, []); (uint64InterfacePtr.id, []); (ptrT.id uint64InterfacePtr.id, []); (stringInterfacePtr.id, []); (ptrT.id stringInterfacePtr.id, []); (sliceInterfacePtr.id, []); (ptrT.id sliceInterfacePtr.id, []); (lfstack.id, []); (ptrT.id lfstack.id, [("empty"%go, lfstack__emptyⁱᵐᵖˡ); ("pop"%go, lfstack__popⁱᵐᵖˡ); ("push"%go, lfstack__pushⁱᵐᵖˡ)]); (linknameIter.id, []); (ptrT.id linknameIter.id, []); (mWaitList.id, []); (ptrT.id mWaitList.id, []); (lockRank.id, [("String"%go, lockRank__Stringⁱᵐᵖˡ)]); (ptrT.id lockRank.id, [("String"%go, lockRank__Stringⁱᵐᵖˡ)]); (lockRankStruct.id, []); (ptrT.id lockRankStruct.id, []); (persistentAlloc.id, []); (ptrT.id persistentAlloc.id, []); (linearAlloc.id, []); (ptrT.id linearAlloc.id, [("alloc"%go, linearAlloc__allocⁱᵐᵖˡ); ("init"%go, linearAlloc__initⁱᵐᵖˡ)]); (notInHeap.id, []); (ptrT.id notInHeap.id, [("add"%go, notInHeap__addⁱᵐᵖˡ)]); (typePointers.id, [("fastForward"%go, typePointers__fastForwardⁱᵐᵖˡ); ("next"%go, typePointers__nextⁱᵐᵖˡ); ("nextFast"%go, typePointers__nextFastⁱᵐᵖˡ)]); (ptrT.id typePointers.id, [("fastForward"%go, typePointers__fastForwardⁱᵐᵖˡ); ("next"%go, typePointers__nextⁱᵐᵖˡ); ("nextFast"%go, typePointers__nextFastⁱᵐᵖˡ)]); (markBits.id, [("clearMarked"%go, markBits__clearMarkedⁱᵐᵖˡ); ("isMarked"%go, markBits__isMarkedⁱᵐᵖˡ); ("setMarked"%go, markBits__setMarkedⁱᵐᵖˡ); ("setMarkedNonAtomic"%go, markBits__setMarkedNonAtomicⁱᵐᵖˡ)]); (ptrT.id markBits.id, [("advance"%go, markBits__advanceⁱᵐᵖˡ); ("clearMarked"%go, markBits__clearMarkedⁱᵐᵖˡ); ("isMarked"%go, markBits__isMarkedⁱᵐᵖˡ); ("setMarked"%go, markBits__setMarkedⁱᵐᵖˡ); ("setMarkedNonAtomic"%go, markBits__setMarkedNonAtomicⁱᵐᵖˡ)]); (mcache.id, []); (ptrT.id mcache.id, [("allocLarge"%go, mcache__allocLargeⁱᵐᵖˡ); ("nextFree"%go, mcache__nextFreeⁱᵐᵖˡ); ("prepareForSweep"%go, mcache__prepareForSweepⁱᵐᵖˡ); ("refill"%go, mcache__refillⁱᵐᵖˡ); ("releaseAll"%go, mcache__releaseAllⁱᵐᵖˡ)]); (gclink.id, []); (ptrT.id gclink.id, []); (gclinkptr.id, [("ptr"%go, gclinkptr__ptrⁱᵐᵖˡ)]); (ptrT.id gclinkptr.id, [("ptr"%go, gclinkptr__ptrⁱᵐᵖˡ)]); (stackfreelist.id, []); (ptrT.id stackfreelist.id, []); (mcentral.id, []); (ptrT.id mcentral.id, [("cacheSpan"%go, mcentral__cacheSpanⁱᵐᵖˡ); ("fullSwept"%go, mcentral__fullSweptⁱᵐᵖˡ); ("fullUnswept"%go, mcentral__fullUnsweptⁱᵐᵖˡ); ("grow"%go, mcentral__growⁱᵐᵖˡ); ("init"%go, mcentral__initⁱᵐᵖˡ); ("partialSwept"%go, mcentral__partialSweptⁱᵐᵖˡ); ("partialUnswept"%go, mcentral__partialUnsweptⁱᵐᵖˡ); ("uncacheSpan"%go, mcentral__uncacheSpanⁱᵐᵖˡ)]); (checkmarksMap.id, []); (ptrT.id checkmarksMap.id, []); (Cleanup.id, [("Stop"%go, Cleanup__Stopⁱᵐᵖˡ)]); (ptrT.id Cleanup.id, [("Stop"%go, Cleanup__Stopⁱᵐᵖˡ)]); (metricData.id, []); (ptrT.id metricData.id, []); (metricReader.id, [("compute"%go, metricReader__computeⁱᵐᵖˡ)]); (ptrT.id metricReader.id, [("compute"%go, metricReader__computeⁱᵐᵖˡ)]); (statDep.id, []); (ptrT.id statDep.id, []); (statDepSet.id, [("difference"%go, statDepSet__differenceⁱᵐᵖˡ); ("union"%go, statDepSet__unionⁱᵐᵖˡ)]); (ptrT.id statDepSet.id, [("difference"%go, statDepSet__differenceⁱᵐᵖˡ); ("empty"%go, statDepSet__emptyⁱᵐᵖˡ); ("has"%go, statDepSet__hasⁱᵐᵖˡ); ("union"%go, statDepSet__unionⁱᵐᵖˡ)]); (heapStatsAggregate.id, []); (ptrT.id heapStatsAggregate.id, [("compute"%go, heapStatsAggregate__computeⁱᵐᵖˡ); ("merge"%go, heapStatsAggregate__mergeⁱᵐᵖˡ)]); (sysStatsAggregate.id, []); (ptrT.id sysStatsAggregate.id, [("compute"%go, sysStatsAggregate__computeⁱᵐᵖˡ)]); (cpuStatsAggregate.id, []); (ptrT.id cpuStatsAggregate.id, [("accumulate"%go, cpuStatsAggregate__accumulateⁱᵐᵖˡ); ("accumulateGCPauseTime"%go, cpuStatsAggregate__accumulateGCPauseTimeⁱᵐᵖˡ); ("compute"%go, cpuStatsAggregate__computeⁱᵐᵖˡ)]); (gcStatsAggregate.id, []); (ptrT.id gcStatsAggregate.id, [("compute"%go, gcStatsAggregate__computeⁱᵐᵖˡ)]); (statAggregate.id, []); (ptrT.id statAggregate.id, [("ensure"%go, statAggregate__ensureⁱᵐᵖˡ)]); (metricKind.id, []); (ptrT.id metricKind.id, []); (metricSample.id, []); (ptrT.id metricSample.id, []); (metricValue.id, []); (ptrT.id metricValue.id, [("float64HistOrInit"%go, metricValue__float64HistOrInitⁱᵐᵖˡ)]); (metricFloat64Histogram.id, []); (ptrT.id metricFloat64Histogram.id, []); (metricName.id, []); (ptrT.id metricName.id, []); (finblock.id, []); (ptrT.id finblock.id, []); (finalizer.id, []); (ptrT.id finalizer.id, []); (fixalloc.id, []); (ptrT.id fixalloc.id, [("alloc"%go, fixalloc__allocⁱᵐᵖˡ); ("free"%go, fixalloc__freeⁱᵐᵖˡ); ("init"%go, fixalloc__initⁱᵐᵖˡ)]); (mlink.id, []); (ptrT.id mlink.id, []); (gcMarkWorkerMode.id, []); (ptrT.id gcMarkWorkerMode.id, []); (workType.id, []); (ptrT.id workType.id, [("accumulate"%go, workType__accumulateⁱᵐᵖˡ); ("accumulateGCPauseTime"%go, workType__accumulateGCPauseTimeⁱᵐᵖˡ)]); (gcMode.id, []); (ptrT.id gcMode.id, []); (gcTrigger.id, [("test"%go, gcTrigger__testⁱᵐᵖˡ)]); (ptrT.id gcTrigger.id, [("test"%go, gcTrigger__testⁱᵐᵖˡ)]); (gcTriggerKind.id, []); (ptrT.id gcTriggerKind.id, []); (gcBgMarkWorkerNode.id, []); (ptrT.id gcBgMarkWorkerNode.id, []); (gcCPULimiterState.id, []); (ptrT.id gcCPULimiterState.id, [("accumulate"%go, gcCPULimiterState__accumulateⁱᵐᵖˡ); ("addAssistTime"%go, gcCPULimiterState__addAssistTimeⁱᵐᵖˡ); ("addIdleTime"%go, gcCPULimiterState__addIdleTimeⁱᵐᵖˡ); ("finishGCTransition"%go, gcCPULimiterState__finishGCTransitionⁱᵐᵖˡ); ("limiting"%go, gcCPULimiterState__limitingⁱᵐᵖˡ); ("needUpdate"%go, gcCPULimiterState__needUpdateⁱᵐᵖˡ); ("resetCapacity"%go, gcCPULimiterState__resetCapacityⁱᵐᵖˡ); ("startGCTransition"%go, gcCPULimiterState__startGCTransitionⁱᵐᵖˡ); ("tryLock"%go, gcCPULimiterState__tryLockⁱᵐᵖˡ); ("unlock"%go, gcCPULimiterState__unlockⁱᵐᵖˡ); ("update"%go, gcCPULimiterState__updateⁱᵐᵖˡ); ("updateLocked"%go, gcCPULimiterState__updateLockedⁱᵐᵖˡ)]); (limiterEventType.id, []); (ptrT.id limiterEventType.id, []); (limiterEventStamp.id, [("duration"%go, limiterEventStamp__durationⁱᵐᵖˡ); ("typ"%go, limiterEventStamp__typⁱᵐᵖˡ)]); (ptrT.id limiterEventStamp.id, [("duration"%go, limiterEventStamp__durationⁱᵐᵖˡ); ("typ"%go, limiterEventStamp__typⁱᵐᵖˡ)]); (limiterEvent.id, []); (ptrT.id limiterEvent.id, [("consume"%go, limiterEvent__consumeⁱᵐᵖˡ); ("start"%go, limiterEvent__startⁱᵐᵖˡ); ("stop"%go, limiterEvent__stopⁱᵐᵖˡ)]); (gcDrainFlags.id, []); (ptrT.id gcDrainFlags.id, []); (gcControllerState.id, []); (ptrT.id gcControllerState.id, [("addGlobals"%go, gcControllerState__addGlobalsⁱᵐᵖˡ); ("addIdleMarkWorker"%go, gcControllerState__addIdleMarkWorkerⁱᵐᵖˡ); ("addScannableStack"%go, gcControllerState__addScannableStackⁱᵐᵖˡ); ("commit"%go, gcControllerState__commitⁱᵐᵖˡ); ("endCycle"%go, gcControllerState__endCycleⁱᵐᵖˡ); ("enlistWorker"%go, gcControllerState__enlistWorkerⁱᵐᵖˡ); ("findRunnableGCWorker"%go, gcControllerState__findRunnableGCWorkerⁱᵐᵖˡ); ("heapGoal"%go, gcControllerState__heapGoalⁱᵐᵖˡ); ("heapGoalInternal"%go, gcControllerState__heapGoalInternalⁱᵐᵖˡ); ("init"%go, gcControllerState__initⁱᵐᵖˡ); ("markWorkerStop"%go, gcControllerState__markWorkerStopⁱᵐᵖˡ); ("memoryLimitHeapGoal"%go, gcControllerState__memoryLimitHeapGoalⁱᵐᵖˡ); ("needIdleMarkWorker"%go, gcControllerState__needIdleMarkWorkerⁱᵐᵖˡ); ("removeIdleMarkWorker"%go, gcControllerState__removeIdleMarkWorkerⁱᵐᵖˡ); ("resetLive"%go, gcControllerState__resetLiveⁱᵐᵖˡ); ("revise"%go, gcControllerState__reviseⁱᵐᵖˡ); ("setGCPercent"%go, gcControllerState__setGCPercentⁱᵐᵖˡ); ("setMaxIdleMarkWorkers"%go, gcControllerState__setMaxIdleMarkWorkersⁱᵐᵖˡ); ("setMemoryLimit"%go, gcControllerState__setMemoryLimitⁱᵐᵖˡ); ("startCycle"%go, gcControllerState__startCycleⁱᵐᵖˡ); ("trigger"%go, gcControllerState__triggerⁱᵐᵖˡ); ("update"%go, gcControllerState__updateⁱᵐᵖˡ)]); (scavengerState.id, []); (ptrT.id scavengerState.id, [("controllerFailed"%go, scavengerState__controllerFailedⁱᵐᵖˡ); ("init"%go, scavengerState__initⁱᵐᵖˡ); ("park"%go, scavengerState__parkⁱᵐᵖˡ); ("ready"%go, scavengerState__readyⁱᵐᵖˡ); ("run"%go, scavengerState__runⁱᵐᵖˡ); ("sleep"%go, scavengerState__sleepⁱᵐᵖˡ); ("wake"%go, scavengerState__wakeⁱᵐᵖˡ)]); (scavengeIndex.id, []); (ptrT.id scavengeIndex.id, [("alloc"%go, scavengeIndex__allocⁱᵐᵖˡ); ("find"%go, scavengeIndex__findⁱᵐᵖˡ); ("free"%go, scavengeIndex__freeⁱᵐᵖˡ); ("grow"%go, scavengeIndex__growⁱᵐᵖˡ); ("init"%go, scavengeIndex__initⁱᵐᵖˡ); ("nextGen"%go, scavengeIndex__nextGenⁱᵐᵖˡ); ("setEmpty"%go, scavengeIndex__setEmptyⁱᵐᵖˡ); ("sysGrow"%go, scavengeIndex__sysGrowⁱᵐᵖˡ); ("sysInit"%go, scavengeIndex__sysInitⁱᵐᵖˡ)]); (atomicScavChunkData.id, []); (ptrT.id atomicScavChunkData.id, [("load"%go, atomicScavChunkData__loadⁱᵐᵖˡ); ("store"%go, atomicScavChunkData__storeⁱᵐᵖˡ)]); (scavChunkData.id, [("pack"%go, scavChunkData__packⁱᵐᵖˡ); ("shouldScavenge"%go, scavChunkData__shouldScavengeⁱᵐᵖˡ)]); (ptrT.id scavChunkData.id, [("alloc"%go, scavChunkData__allocⁱᵐᵖˡ); ("free"%go, scavChunkData__freeⁱᵐᵖˡ); ("isEmpty"%go, scavChunkData__isEmptyⁱᵐᵖˡ); ("pack"%go, scavChunkData__packⁱᵐᵖˡ); ("setEmpty"%go, scavChunkData__setEmptyⁱᵐᵖˡ); ("setNonEmpty"%go, scavChunkData__setNonEmptyⁱᵐᵖˡ); ("shouldScavenge"%go, scavChunkData__shouldScavengeⁱᵐᵖˡ)]); (scavChunkFlags.id, []); (ptrT.id scavChunkFlags.id, [("isEmpty"%go, scavChunkFlags__isEmptyⁱᵐᵖˡ); ("setEmpty"%go, scavChunkFlags__setEmptyⁱᵐᵖˡ); ("setNonEmpty"%go, scavChunkFlags__setNonEmptyⁱᵐᵖˡ)]); (piController.id, []); (ptrT.id piController.id, [("next"%go, piController__nextⁱᵐᵖˡ); ("reset"%go, piController__resetⁱᵐᵖˡ)]); (stackWorkBuf.id, []); (ptrT.id stackWorkBuf.id, []); (stackWorkBufHdr.id, []); (ptrT.id stackWorkBufHdr.id, []); (stackObjectBuf.id, []); (ptrT.id stackObjectBuf.id, []); (stackObjectBufHdr.id, []); (ptrT.id stackObjectBufHdr.id, []); (stackObject.id, []); (ptrT.id stackObject.id, [("setRecord"%go, stackObject__setRecordⁱᵐᵖˡ)]); (stackScanState.id, []); (ptrT.id stackScanState.id, [("addObject"%go, stackScanState__addObjectⁱᵐᵖˡ); ("buildIndex"%go, stackScanState__buildIndexⁱᵐᵖˡ); ("findObject"%go, stackScanState__findObjectⁱᵐᵖˡ); ("getPtr"%go, stackScanState__getPtrⁱᵐᵖˡ); ("putPtr"%go, stackScanState__putPtrⁱᵐᵖˡ)]); (sweepdata.id, []); (ptrT.id sweepdata.id, []); (sweepClass.id, [("split"%go, sweepClass__splitⁱᵐᵖˡ)]); (ptrT.id sweepClass.id, [("clear"%go, sweepClass__clearⁱᵐᵖˡ); ("load"%go, sweepClass__loadⁱᵐᵖˡ); ("split"%go, sweepClass__splitⁱᵐᵖˡ); ("update"%go, sweepClass__updateⁱᵐᵖˡ)]); (activeSweep.id, []); (ptrT.id activeSweep.id, [("begin"%go, activeSweep__beginⁱᵐᵖˡ); ("end"%go, activeSweep__endⁱᵐᵖˡ); ("isDone"%go, activeSweep__isDoneⁱᵐᵖˡ); ("markDrained"%go, activeSweep__markDrainedⁱᵐᵖˡ); ("reset"%go, activeSweep__resetⁱᵐᵖˡ); ("sweepers"%go, activeSweep__sweepersⁱᵐᵖˡ)]); (sweepLocker.id, []); (ptrT.id sweepLocker.id, [("tryAcquire"%go, sweepLocker__tryAcquireⁱᵐᵖˡ)]); (sweepLocked.id, [("allocBitsForIndex"%go, sweepLocked__allocBitsForIndexⁱᵐᵖˡ); ("base"%go, sweepLocked__baseⁱᵐᵖˡ); ("countAlloc"%go, sweepLocked__countAllocⁱᵐᵖˡ); ("decPinCounter"%go, sweepLocked__decPinCounterⁱᵐᵖˡ); ("divideByElemSize"%go, sweepLocked__divideByElemSizeⁱᵐᵖˡ); ("ensureSwept"%go, sweepLocked__ensureSweptⁱᵐᵖˡ); ("getPinnerBits"%go, sweepLocked__getPinnerBitsⁱᵐᵖˡ); ("heapBits"%go, sweepLocked__heapBitsⁱᵐᵖˡ); ("heapBitsSmallForAddr"%go, sweepLocked__heapBitsSmallForAddrⁱᵐᵖˡ); ("inList"%go, sweepLocked__inListⁱᵐᵖˡ); ("incPinCounter"%go, sweepLocked__incPinCounterⁱᵐᵖˡ); ("init"%go, sweepLocked__initⁱᵐᵖˡ); ("initHeapBits"%go, sweepLocked__initHeapBitsⁱᵐᵖˡ); ("isFree"%go, sweepLocked__isFreeⁱᵐᵖˡ); ("isUnusedUserArenaChunk"%go, sweepLocked__isUnusedUserArenaChunkⁱᵐᵖˡ); ("layout"%go, sweepLocked__layoutⁱᵐᵖˡ); ("markBitsForBase"%go, sweepLocked__markBitsForBaseⁱᵐᵖˡ); ("markBitsForIndex"%go, sweepLocked__markBitsForIndexⁱᵐᵖˡ); ("newPinnerBits"%go, sweepLocked__newPinnerBitsⁱᵐᵖˡ); ("nextFreeIndex"%go, sweepLocked__nextFreeIndexⁱᵐᵖˡ); ("objBase"%go, sweepLocked__objBaseⁱᵐᵖˡ); ("objIndex"%go, sweepLocked__objIndexⁱᵐᵖˡ); ("pinnerBitSize"%go, sweepLocked__pinnerBitSizeⁱᵐᵖˡ); ("refillAllocCache"%go, sweepLocked__refillAllocCacheⁱᵐᵖˡ); ("refreshPinnerBits"%go, sweepLocked__refreshPinnerBitsⁱᵐᵖˡ); ("reportZombies"%go, sweepLocked__reportZombiesⁱᵐᵖˡ); ("setPinnerBits"%go, sweepLocked__setPinnerBitsⁱᵐᵖˡ); ("setUserArenaChunkToFault"%go, sweepLocked__setUserArenaChunkToFaultⁱᵐᵖˡ); ("specialFindSplicePoint"%go, sweepLocked__specialFindSplicePointⁱᵐᵖˡ); ("typePointersOf"%go, sweepLocked__typePointersOfⁱᵐᵖˡ); ("typePointersOfType"%go, sweepLocked__typePointersOfTypeⁱᵐᵖˡ); ("typePointersOfUnchecked"%go, sweepLocked__typePointersOfUncheckedⁱᵐᵖˡ); ("userArenaNextFree"%go, sweepLocked__userArenaNextFreeⁱᵐᵖˡ); ("writeHeapBitsSmall"%go, sweepLocked__writeHeapBitsSmallⁱᵐᵖˡ); ("writeUserArenaHeapBits"%go, sweepLocked__writeUserArenaHeapBitsⁱᵐᵖˡ)]); (ptrT.id sweepLocked.id, [("allocBitsForIndex"%go, sweepLocked__allocBitsForIndexⁱᵐᵖˡ); ("base"%go, sweepLocked__baseⁱᵐᵖˡ); ("countAlloc"%go, sweepLocked__countAllocⁱᵐᵖˡ); ("decPinCounter"%go, sweepLocked__decPinCounterⁱᵐᵖˡ); ("divideByElemSize"%go, sweepLocked__divideByElemSizeⁱᵐᵖˡ); ("ensureSwept"%go, sweepLocked__ensureSweptⁱᵐᵖˡ); ("getPinnerBits"%go, sweepLocked__getPinnerBitsⁱᵐᵖˡ); ("heapBits"%go, sweepLocked__heapBitsⁱᵐᵖˡ); ("heapBitsSmallForAddr"%go, sweepLocked__heapBitsSmallForAddrⁱᵐᵖˡ); ("inList"%go, sweepLocked__inListⁱᵐᵖˡ); ("incPinCounter"%go, sweepLocked__incPinCounterⁱᵐᵖˡ); ("init"%go, sweepLocked__initⁱᵐᵖˡ); ("initHeapBits"%go, sweepLocked__initHeapBitsⁱᵐᵖˡ); ("isFree"%go, sweepLocked__isFreeⁱᵐᵖˡ); ("isUnusedUserArenaChunk"%go, sweepLocked__isUnusedUserArenaChunkⁱᵐᵖˡ); ("layout"%go, sweepLocked__layoutⁱᵐᵖˡ); ("markBitsForBase"%go, sweepLocked__markBitsForBaseⁱᵐᵖˡ); ("markBitsForIndex"%go, sweepLocked__markBitsForIndexⁱᵐᵖˡ); ("newPinnerBits"%go, sweepLocked__newPinnerBitsⁱᵐᵖˡ); ("nextFreeIndex"%go, sweepLocked__nextFreeIndexⁱᵐᵖˡ); ("objBase"%go, sweepLocked__objBaseⁱᵐᵖˡ); ("objIndex"%go, sweepLocked__objIndexⁱᵐᵖˡ); ("pinnerBitSize"%go, sweepLocked__pinnerBitSizeⁱᵐᵖˡ); ("refillAllocCache"%go, sweepLocked__refillAllocCacheⁱᵐᵖˡ); ("refreshPinnerBits"%go, sweepLocked__refreshPinnerBitsⁱᵐᵖˡ); ("reportZombies"%go, sweepLocked__reportZombiesⁱᵐᵖˡ); ("setPinnerBits"%go, sweepLocked__setPinnerBitsⁱᵐᵖˡ); ("setUserArenaChunkToFault"%go, sweepLocked__setUserArenaChunkToFaultⁱᵐᵖˡ); ("specialFindSplicePoint"%go, sweepLocked__specialFindSplicePointⁱᵐᵖˡ); ("sweep"%go, sweepLocked__sweepⁱᵐᵖˡ); ("typePointersOf"%go, sweepLocked__typePointersOfⁱᵐᵖˡ); ("typePointersOfType"%go, sweepLocked__typePointersOfTypeⁱᵐᵖˡ); ("typePointersOfUnchecked"%go, sweepLocked__typePointersOfUncheckedⁱᵐᵖˡ); ("userArenaNextFree"%go, sweepLocked__userArenaNextFreeⁱᵐᵖˡ); ("writeHeapBitsSmall"%go, sweepLocked__writeHeapBitsSmallⁱᵐᵖˡ); ("writeUserArenaHeapBits"%go, sweepLocked__writeUserArenaHeapBitsⁱᵐᵖˡ)]); (gcWork.id, []); (ptrT.id gcWork.id, [("balance"%go, gcWork__balanceⁱᵐᵖˡ); ("dispose"%go, gcWork__disposeⁱᵐᵖˡ); ("empty"%go, gcWork__emptyⁱᵐᵖˡ); ("init"%go, gcWork__initⁱᵐᵖˡ); ("put"%go, gcWork__putⁱᵐᵖˡ); ("putBatch"%go, gcWork__putBatchⁱᵐᵖˡ); ("putFast"%go, gcWork__putFastⁱᵐᵖˡ); ("tryGet"%go, gcWork__tryGetⁱᵐᵖˡ); ("tryGetFast"%go, gcWork__tryGetFastⁱᵐᵖˡ)]); (workbufhdr.id, []); (ptrT.id workbufhdr.id, []); (workbuf.id, []); (ptrT.id workbuf.id, [("checkempty"%go, workbuf__checkemptyⁱᵐᵖˡ); ("checknonempty"%go, workbuf__checknonemptyⁱᵐᵖˡ)]); (mheap.id, []); (ptrT.id mheap.id, [("alloc"%go, mheap__allocⁱᵐᵖˡ); ("allocMSpanLocked"%go, mheap__allocMSpanLockedⁱᵐᵖˡ); ("allocManual"%go, mheap__allocManualⁱᵐᵖˡ); ("allocNeedsZero"%go, mheap__allocNeedsZeroⁱᵐᵖˡ); ("allocSpan"%go, mheap__allocSpanⁱᵐᵖˡ); ("allocUserArenaChunk"%go, mheap__allocUserArenaChunkⁱᵐᵖˡ); ("enableMetadataHugePages"%go, mheap__enableMetadataHugePagesⁱᵐᵖˡ); ("freeMSpanLocked"%go, mheap__freeMSpanLockedⁱᵐᵖˡ); ("freeManual"%go, mheap__freeManualⁱᵐᵖˡ); ("freeSpan"%go, mheap__freeSpanⁱᵐᵖˡ); ("freeSpanLocked"%go, mheap__freeSpanLockedⁱᵐᵖˡ); ("grow"%go, mheap__growⁱᵐᵖˡ); ("init"%go, mheap__initⁱᵐᵖˡ); ("initSpan"%go, mheap__initSpanⁱᵐᵖˡ); ("nextSpanForSweep"%go, mheap__nextSpanForSweepⁱᵐᵖˡ); ("reclaim"%go, mheap__reclaimⁱᵐᵖˡ); ("reclaimChunk"%go, mheap__reclaimChunkⁱᵐᵖˡ); ("scavengeAll"%go, mheap__scavengeAllⁱᵐᵖˡ); ("setSpans"%go, mheap__setSpansⁱᵐᵖˡ); ("sysAlloc"%go, mheap__sysAllocⁱᵐᵖˡ); ("tryAllocMSpan"%go, mheap__tryAllocMSpanⁱᵐᵖˡ)]); (heapArena.id, []); (ptrT.id heapArena.id, []); (arenaHint.id, []); (ptrT.id arenaHint.id, []); (mSpanState.id, []); (ptrT.id mSpanState.id, []); (mSpanStateBox.id, []); (ptrT.id mSpanStateBox.id, [("get"%go, mSpanStateBox__getⁱᵐᵖˡ); ("set"%go, mSpanStateBox__setⁱᵐᵖˡ)]); (mSpanList.id, []); (ptrT.id mSpanList.id, [("init"%go, mSpanList__initⁱᵐᵖˡ); ("insert"%go, mSpanList__insertⁱᵐᵖˡ); ("insertBack"%go, mSpanList__insertBackⁱᵐᵖˡ); ("isEmpty"%go, mSpanList__isEmptyⁱᵐᵖˡ); ("remove"%go, mSpanList__removeⁱᵐᵖˡ); ("takeAll"%go, mSpanList__takeAllⁱᵐᵖˡ)]); (mspan.id, []); (ptrT.id mspan.id, [("allocBitsForIndex"%go, mspan__allocBitsForIndexⁱᵐᵖˡ); ("base"%go, mspan__baseⁱᵐᵖˡ); ("countAlloc"%go, mspan__countAllocⁱᵐᵖˡ); ("decPinCounter"%go, mspan__decPinCounterⁱᵐᵖˡ); ("divideByElemSize"%go, mspan__divideByElemSizeⁱᵐᵖˡ); ("ensureSwept"%go, mspan__ensureSweptⁱᵐᵖˡ); ("getPinnerBits"%go, mspan__getPinnerBitsⁱᵐᵖˡ); ("heapBits"%go, mspan__heapBitsⁱᵐᵖˡ); ("heapBitsSmallForAddr"%go, mspan__heapBitsSmallForAddrⁱᵐᵖˡ); ("inList"%go, mspan__inListⁱᵐᵖˡ); ("incPinCounter"%go, mspan__incPinCounterⁱᵐᵖˡ); ("init"%go, mspan__initⁱᵐᵖˡ); ("initHeapBits"%go, mspan__initHeapBitsⁱᵐᵖˡ); ("isFree"%go, mspan__isFreeⁱᵐᵖˡ); ("isUnusedUserArenaChunk"%go, mspan__isUnusedUserArenaChunkⁱᵐᵖˡ); ("layout"%go, mspan__layoutⁱᵐᵖˡ); ("markBitsForBase"%go, mspan__markBitsForBaseⁱᵐᵖˡ); ("markBitsForIndex"%go, mspan__markBitsForIndexⁱᵐᵖˡ); ("newPinnerBits"%go, mspan__newPinnerBitsⁱᵐᵖˡ); ("nextFreeIndex"%go, mspan__nextFreeIndexⁱᵐᵖˡ); ("objBase"%go, mspan__objBaseⁱᵐᵖˡ); ("objIndex"%go, mspan__objIndexⁱᵐᵖˡ); ("pinnerBitSize"%go, mspan__pinnerBitSizeⁱᵐᵖˡ); ("refillAllocCache"%go, mspan__refillAllocCacheⁱᵐᵖˡ); ("refreshPinnerBits"%go, mspan__refreshPinnerBitsⁱᵐᵖˡ); ("reportZombies"%go, mspan__reportZombiesⁱᵐᵖˡ); ("setPinnerBits"%go, mspan__setPinnerBitsⁱᵐᵖˡ); ("setUserArenaChunkToFault"%go, mspan__setUserArenaChunkToFaultⁱᵐᵖˡ); ("specialFindSplicePoint"%go, mspan__specialFindSplicePointⁱᵐᵖˡ); ("typePointersOf"%go, mspan__typePointersOfⁱᵐᵖˡ); ("typePointersOfType"%go, mspan__typePointersOfTypeⁱᵐᵖˡ); ("typePointersOfUnchecked"%go, mspan__typePointersOfUncheckedⁱᵐᵖˡ); ("userArenaNextFree"%go, mspan__userArenaNextFreeⁱᵐᵖˡ); ("writeHeapBitsSmall"%go, mspan__writeHeapBitsSmallⁱᵐᵖˡ); ("writeUserArenaHeapBits"%go, mspan__writeUserArenaHeapBitsⁱᵐᵖˡ)]); (spanClass.id, [("noscan"%go, spanClass__noscanⁱᵐᵖˡ); ("sizeclass"%go, spanClass__sizeclassⁱᵐᵖˡ)]); (ptrT.id spanClass.id, [("noscan"%go, spanClass__noscanⁱᵐᵖˡ); ("sizeclass"%go, spanClass__sizeclassⁱᵐᵖˡ)]); (arenaIdx.id, [("l1"%go, arenaIdx__l1ⁱᵐᵖˡ); ("l2"%go, arenaIdx__l2ⁱᵐᵖˡ)]); (ptrT.id arenaIdx.id, [("l1"%go, arenaIdx__l1ⁱᵐᵖˡ); ("l2"%go, arenaIdx__l2ⁱᵐᵖˡ)]); (spanAllocType.id, [("manual"%go, spanAllocType__manualⁱᵐᵖˡ)]); (ptrT.id spanAllocType.id, [("manual"%go, spanAllocType__manualⁱᵐᵖˡ)]); (special.id, []); (ptrT.id special.id, []); (specialfinalizer.id, []); (ptrT.id specialfinalizer.id, []); (specialCleanup.id, []); (ptrT.id specialCleanup.id, []); (specialWeakHandle.id, []); (ptrT.id specialWeakHandle.id, []); (specialprofile.id, []); (ptrT.id specialprofile.id, []); (specialReachable.id, []); (ptrT.id specialReachable.id, []); (specialPinCounter.id, []); (ptrT.id specialPinCounter.id, []); (specialsIter.id, []); (ptrT.id specialsIter.id, [("next"%go, specialsIter__nextⁱᵐᵖˡ); ("unlinkAndNext"%go, specialsIter__unlinkAndNextⁱᵐᵖˡ); ("valid"%go, specialsIter__validⁱᵐᵖˡ)]); (gcBits.id, []); (ptrT.id gcBits.id, [("bitp"%go, gcBits__bitpⁱᵐᵖˡ); ("bytep"%go, gcBits__bytepⁱᵐᵖˡ)]); (gcBitsHeader.id, []); (ptrT.id gcBitsHeader.id, []); (gcBitsArena.id, []); (ptrT.id gcBitsArena.id, [("tryAlloc"%go, gcBitsArena__tryAllocⁱᵐᵖˡ)]); (chunkIdx.id, [("l1"%go, chunkIdx__l1ⁱᵐᵖˡ); ("l2"%go, chunkIdx__l2ⁱᵐᵖˡ)]); (ptrT.id chunkIdx.id, [("l1"%go, chunkIdx__l1ⁱᵐᵖˡ); ("l2"%go, chunkIdx__l2ⁱᵐᵖˡ)]); (pageAlloc.id, []); (ptrT.id pageAlloc.id, [("alloc"%go, pageAlloc__allocⁱᵐᵖˡ); ("allocRange"%go, pageAlloc__allocRangeⁱᵐᵖˡ); ("allocToCache"%go, pageAlloc__allocToCacheⁱᵐᵖˡ); ("chunkOf"%go, pageAlloc__chunkOfⁱᵐᵖˡ); ("enableChunkHugePages"%go, pageAlloc__enableChunkHugePagesⁱᵐᵖˡ); ("find"%go, pageAlloc__findⁱᵐᵖˡ); ("findMappedAddr"%go, pageAlloc__findMappedAddrⁱᵐᵖˡ); ("free"%go, pageAlloc__freeⁱᵐᵖˡ); ("grow"%go, pageAlloc__growⁱᵐᵖˡ); ("init"%go, pageAlloc__initⁱᵐᵖˡ); ("scavenge"%go, pageAlloc__scavengeⁱᵐᵖˡ); ("scavengeOne"%go, pageAlloc__scavengeOneⁱᵐᵖˡ); ("sysGrow"%go, pageAlloc__sysGrowⁱᵐᵖˡ); ("sysInit"%go, pageAlloc__sysInitⁱᵐᵖˡ); ("tryChunkOf"%go, pageAlloc__tryChunkOfⁱᵐᵖˡ); ("update"%go, pageAlloc__updateⁱᵐᵖˡ)]); (pallocSum.id, [("end"%go, pallocSum__endⁱᵐᵖˡ); ("max"%go, pallocSum__maxⁱᵐᵖˡ); ("start"%go, pallocSum__startⁱᵐᵖˡ); ("unpack"%go, pallocSum__unpackⁱᵐᵖˡ)]); (ptrT.id pallocSum.id, [("end"%go, pallocSum__endⁱᵐᵖˡ); ("max"%go, pallocSum__maxⁱᵐᵖˡ); ("start"%go, pallocSum__startⁱᵐᵖˡ); ("unpack"%go, pallocSum__unpackⁱᵐᵖˡ)]); (pageCache.id, []); (ptrT.id pageCache.id, [("alloc"%go, pageCache__allocⁱᵐᵖˡ); ("allocN"%go, pageCache__allocNⁱᵐᵖˡ); ("empty"%go, pageCache__emptyⁱᵐᵖˡ); ("flush"%go, pageCache__flushⁱᵐᵖˡ)]); (pageBits.id, []); (ptrT.id pageBits.id, [("block64"%go, pageBits__block64ⁱᵐᵖˡ); ("clear"%go, pageBits__clearⁱᵐᵖˡ); ("clearAll"%go, pageBits__clearAllⁱᵐᵖˡ); ("clearBlock64"%go, pageBits__clearBlock64ⁱᵐᵖˡ); ("clearRange"%go, pageBits__clearRangeⁱᵐᵖˡ); ("get"%go, pageBits__getⁱᵐᵖˡ); ("popcntRange"%go, pageBits__popcntRangeⁱᵐᵖˡ); ("set"%go, pageBits__setⁱᵐᵖˡ); ("setAll"%go, pageBits__setAllⁱᵐᵖˡ); ("setBlock64"%go, pageBits__setBlock64ⁱᵐᵖˡ); ("setRange"%go, pageBits__setRangeⁱᵐᵖˡ)]); (pallocBits.id, []); (ptrT.id pallocBits.id, [("allocAll"%go, pallocBits__allocAllⁱᵐᵖˡ); ("allocPages64"%go, pallocBits__allocPages64ⁱᵐᵖˡ); ("allocRange"%go, pallocBits__allocRangeⁱᵐᵖˡ); ("find"%go, pallocBits__findⁱᵐᵖˡ); ("find1"%go, pallocBits__find1ⁱᵐᵖˡ); ("findLargeN"%go, pallocBits__findLargeNⁱᵐᵖˡ); ("findSmallN"%go, pallocBits__findSmallNⁱᵐᵖˡ); ("free"%go, pallocBits__freeⁱᵐᵖˡ); ("free1"%go, pallocBits__free1ⁱᵐᵖˡ); ("freeAll"%go, pallocBits__freeAllⁱᵐᵖˡ); ("pages64"%go, pallocBits__pages64ⁱᵐᵖˡ); ("summarize"%go, pallocBits__summarizeⁱᵐᵖˡ)]); (pallocData.id, []); (ptrT.id pallocData.id, [("allocAll"%go, pallocData__allocAllⁱᵐᵖˡ); ("allocPages64"%go, pallocData__allocPages64ⁱᵐᵖˡ); ("allocRange"%go, pallocData__allocRangeⁱᵐᵖˡ); ("find"%go, pallocData__findⁱᵐᵖˡ); ("find1"%go, pallocData__find1ⁱᵐᵖˡ); ("findLargeN"%go, pallocData__findLargeNⁱᵐᵖˡ); ("findScavengeCandidate"%go, pallocData__findScavengeCandidateⁱᵐᵖˡ); ("findSmallN"%go, pallocData__findSmallNⁱᵐᵖˡ); ("free"%go, pallocData__freeⁱᵐᵖˡ); ("free1"%go, pallocData__free1ⁱᵐᵖˡ); ("freeAll"%go, pallocData__freeAllⁱᵐᵖˡ); ("pages64"%go, pallocData__pages64ⁱᵐᵖˡ); ("summarize"%go, pallocData__summarizeⁱᵐᵖˡ)]); (bucketType.id, []); (ptrT.id bucketType.id, []); (bucket.id, []); (ptrT.id bucket.id, [("bp"%go, bucket__bpⁱᵐᵖˡ); ("mp"%go, bucket__mpⁱᵐᵖˡ); ("stk"%go, bucket__stkⁱᵐᵖˡ)]); (memRecord.id, []); (ptrT.id memRecord.id, []); (memRecordCycle.id, []); (ptrT.id memRecordCycle.id, [("add"%go, memRecordCycle__addⁱᵐᵖˡ)]); (blockRecord.id, []); (ptrT.id blockRecord.id, []); (buckhashArray.id, []); (ptrT.id buckhashArray.id, []); (mProfCycleHolder.id, []); (ptrT.id mProfCycleHolder.id, [("increment"%go, mProfCycleHolder__incrementⁱᵐᵖˡ); ("read"%go, mProfCycleHolder__readⁱᵐᵖˡ); ("setFlushed"%go, mProfCycleHolder__setFlushedⁱᵐᵖˡ)]); (lockTimer.id, []); (ptrT.id lockTimer.id, [("begin"%go, lockTimer__beginⁱᵐᵖˡ); ("end"%go, lockTimer__endⁱᵐᵖˡ)]); (mLockProfile.id, []); (ptrT.id mLockProfile.id, [("captureStack"%go, mLockProfile__captureStackⁱᵐᵖˡ); ("recordLock"%go, mLockProfile__recordLockⁱᵐᵖˡ); ("recordUnlock"%go, mLockProfile__recordUnlockⁱᵐᵖˡ); ("store"%go, mLockProfile__storeⁱᵐᵖˡ)]); (StackRecord.id, []); (ptrT.id StackRecord.id, [("Stack"%go, StackRecord__Stackⁱᵐᵖˡ)]); (MemProfileRecord.id, []); (ptrT.id MemProfileRecord.id, [("InUseBytes"%go, MemProfileRecord__InUseBytesⁱᵐᵖˡ); ("InUseObjects"%go, MemProfileRecord__InUseObjectsⁱᵐᵖˡ); ("Stack"%go, MemProfileRecord__Stackⁱᵐᵖˡ)]); (BlockProfileRecord.id, []); (ptrT.id BlockProfileRecord.id, [("Stack"%go, BlockProfileRecord__Stackⁱᵐᵖˡ)]); (goroutineProfileState.id, []); (ptrT.id goroutineProfileState.id, []); (goroutineProfileStateHolder.id, []); (ptrT.id goroutineProfileStateHolder.id, [("CompareAndSwap"%go, goroutineProfileStateHolder__CompareAndSwapⁱᵐᵖˡ); ("Load"%go, goroutineProfileStateHolder__Loadⁱᵐᵖˡ); ("Store"%go, goroutineProfileStateHolder__Storeⁱᵐᵖˡ)]); (addrRange.id, [("contains"%go, addrRange__containsⁱᵐᵖˡ); ("removeGreaterEqual"%go, addrRange__removeGreaterEqualⁱᵐᵖˡ); ("size"%go, addrRange__sizeⁱᵐᵖˡ); ("subtract"%go, addrRange__subtractⁱᵐᵖˡ)]); (ptrT.id addrRange.id, [("contains"%go, addrRange__containsⁱᵐᵖˡ); ("removeGreaterEqual"%go, addrRange__removeGreaterEqualⁱᵐᵖˡ); ("size"%go, addrRange__sizeⁱᵐᵖˡ); ("subtract"%go, addrRange__subtractⁱᵐᵖˡ); ("takeFromBack"%go, addrRange__takeFromBackⁱᵐᵖˡ); ("takeFromFront"%go, addrRange__takeFromFrontⁱᵐᵖˡ)]); (offAddr.id, [("add"%go, offAddr__addⁱᵐᵖˡ); ("addr"%go, offAddr__addrⁱᵐᵖˡ); ("diff"%go, offAddr__diffⁱᵐᵖˡ); ("equal"%go, offAddr__equalⁱᵐᵖˡ); ("lessEqual"%go, offAddr__lessEqualⁱᵐᵖˡ); ("lessThan"%go, offAddr__lessThanⁱᵐᵖˡ); ("sub"%go, offAddr__subⁱᵐᵖˡ)]); (ptrT.id offAddr.id, [("add"%go, offAddr__addⁱᵐᵖˡ); ("addr"%go, offAddr__addrⁱᵐᵖˡ); ("diff"%go, offAddr__diffⁱᵐᵖˡ); ("equal"%go, offAddr__equalⁱᵐᵖˡ); ("lessEqual"%go, offAddr__lessEqualⁱᵐᵖˡ); ("lessThan"%go, offAddr__lessThanⁱᵐᵖˡ); ("sub"%go, offAddr__subⁱᵐᵖˡ)]); (atomicOffAddr.id, []); (ptrT.id atomicOffAddr.id, [("Clear"%go, atomicOffAddr__Clearⁱᵐᵖˡ); ("Load"%go, atomicOffAddr__Loadⁱᵐᵖˡ); ("StoreMarked"%go, atomicOffAddr__StoreMarkedⁱᵐᵖˡ); ("StoreMin"%go, atomicOffAddr__StoreMinⁱᵐᵖˡ); ("StoreUnmark"%go, atomicOffAddr__StoreUnmarkⁱᵐᵖˡ)]); (addrRanges.id, []); (ptrT.id addrRanges.id, [("add"%go, addrRanges__addⁱᵐᵖˡ); ("cloneInto"%go, addrRanges__cloneIntoⁱᵐᵖˡ); ("contains"%go, addrRanges__containsⁱᵐᵖˡ); ("findAddrGreaterEqual"%go, addrRanges__findAddrGreaterEqualⁱᵐᵖˡ); ("findSucc"%go, addrRanges__findSuccⁱᵐᵖˡ); ("init"%go, addrRanges__initⁱᵐᵖˡ); ("removeGreaterEqual"%go, addrRanges__removeGreaterEqualⁱᵐᵖˡ); ("removeLast"%go, addrRanges__removeLastⁱᵐᵖˡ)]); (spanSet.id, []); (ptrT.id spanSet.id, [("pop"%go, spanSet__popⁱᵐᵖˡ); ("push"%go, spanSet__pushⁱᵐᵖˡ); ("reset"%go, spanSet__resetⁱᵐᵖˡ)]); (spanSetBlock.id, []); (ptrT.id spanSetBlock.id, []); (atomicSpanSetSpinePointer.id, []); (ptrT.id atomicSpanSetSpinePointer.id, [("Load"%go, atomicSpanSetSpinePointer__Loadⁱᵐᵖˡ); ("StoreNoWB"%go, atomicSpanSetSpinePointer__StoreNoWBⁱᵐᵖˡ)]); (spanSetSpinePointer.id, [("lookup"%go, spanSetSpinePointer__lookupⁱᵐᵖˡ)]); (ptrT.id spanSetSpinePointer.id, [("lookup"%go, spanSetSpinePointer__lookupⁱᵐᵖˡ)]); (spanSetBlockAlloc.id, []); (ptrT.id spanSetBlockAlloc.id, [("alloc"%go, spanSetBlockAlloc__allocⁱᵐᵖˡ); ("free"%go, spanSetBlockAlloc__freeⁱᵐᵖˡ)]); (headTailIndex.id, [("head"%go, headTailIndex__headⁱᵐᵖˡ); ("split"%go, headTailIndex__splitⁱᵐᵖˡ); ("tail"%go, headTailIndex__tailⁱᵐᵖˡ)]); (ptrT.id headTailIndex.id, [("head"%go, headTailIndex__headⁱᵐᵖˡ); ("split"%go, headTailIndex__splitⁱᵐᵖˡ); ("tail"%go, headTailIndex__tailⁱᵐᵖˡ)]); (atomicHeadTailIndex.id, []); (ptrT.id atomicHeadTailIndex.id, [("cas"%go, atomicHeadTailIndex__casⁱᵐᵖˡ); ("decHead"%go, atomicHeadTailIndex__decHeadⁱᵐᵖˡ); ("incHead"%go, atomicHeadTailIndex__incHeadⁱᵐᵖˡ); ("incTail"%go, atomicHeadTailIndex__incTailⁱᵐᵖˡ); ("load"%go, atomicHeadTailIndex__loadⁱᵐᵖˡ); ("reset"%go, atomicHeadTailIndex__resetⁱᵐᵖˡ)]); (atomicMSpanPointer.id, []); (ptrT.id atomicMSpanPointer.id, [("Load"%go, atomicMSpanPointer__Loadⁱᵐᵖˡ); ("StoreNoWB"%go, atomicMSpanPointer__StoreNoWBⁱᵐᵖˡ)]); (mstats.id, []); (ptrT.id mstats.id, []); (MemStats.id, []); (ptrT.id MemStats.id, []); (sysMemStat.id, []); (ptrT.id sysMemStat.id, [("add"%go, sysMemStat__addⁱᵐᵖˡ); ("load"%go, sysMemStat__loadⁱᵐᵖˡ)]); (heapStatsDelta.id, []); (ptrT.id heapStatsDelta.id, [("merge"%go, heapStatsDelta__mergeⁱᵐᵖˡ)]); (consistentHeapStats.id, []); (ptrT.id consistentHeapStats.id, [("acquire"%go, consistentHeapStats__acquireⁱᵐᵖˡ); ("read"%go, consistentHeapStats__readⁱᵐᵖˡ); ("release"%go, consistentHeapStats__releaseⁱᵐᵖˡ); ("unsafeClear"%go, consistentHeapStats__unsafeClearⁱᵐᵖˡ); ("unsafeRead"%go, consistentHeapStats__unsafeReadⁱᵐᵖˡ)]); (cpuStats.id, []); (ptrT.id cpuStats.id, [("accumulate"%go, cpuStats__accumulateⁱᵐᵖˡ); ("accumulateGCPauseTime"%go, cpuStats__accumulateGCPauseTimeⁱᵐᵖˡ)]); (wbBuf.id, []); (ptrT.id wbBuf.id, [("discard"%go, wbBuf__discardⁱᵐᵖˡ); ("empty"%go, wbBuf__emptyⁱᵐᵖˡ); ("get1"%go, wbBuf__get1ⁱᵐᵖˡ); ("get2"%go, wbBuf__get2ⁱᵐᵖˡ); ("reset"%go, wbBuf__resetⁱᵐᵖˡ)]); (pollDesc.id, []); (ptrT.id pollDesc.id, [("info"%go, pollDesc__infoⁱᵐᵖˡ); ("makeArg"%go, pollDesc__makeArgⁱᵐᵖˡ); ("publishInfo"%go, pollDesc__publishInfoⁱᵐᵖˡ); ("setEventErr"%go, pollDesc__setEventErrⁱᵐᵖˡ)]); (pollInfo.id, [("closing"%go, pollInfo__closingⁱᵐᵖˡ); ("eventErr"%go, pollInfo__eventErrⁱᵐᵖˡ); ("expiredReadDeadline"%go, pollInfo__expiredReadDeadlineⁱᵐᵖˡ); ("expiredWriteDeadline"%go, pollInfo__expiredWriteDeadlineⁱᵐᵖˡ)]); (ptrT.id pollInfo.id, [("closing"%go, pollInfo__closingⁱᵐᵖˡ); ("eventErr"%go, pollInfo__eventErrⁱᵐᵖˡ); ("expiredReadDeadline"%go, pollInfo__expiredReadDeadlineⁱᵐᵖˡ); ("expiredWriteDeadline"%go, pollInfo__expiredWriteDeadlineⁱᵐᵖˡ)]); (pollCache.id, []); (ptrT.id pollCache.id, [("alloc"%go, pollCache__allocⁱᵐᵖˡ); ("free"%go, pollCache__freeⁱᵐᵖˡ)]); (winlibcall.id, []); (ptrT.id winlibcall.id, []); (note.id, []); (ptrT.id note.id, []); (mOS.id, []); (ptrT.id mOS.id, []); (perThreadSyscallArgs.id, []); (ptrT.id perThreadSyscallArgs.id, []); (sigset.id, []); (ptrT.id sigset.id, []); (throwType.id, []); (ptrT.id throwType.id, []); (PanicNilError.id, []); (ptrT.id PanicNilError.id, [("Error"%go, PanicNilError__Errorⁱᵐᵖˡ); ("RuntimeError"%go, PanicNilError__RuntimeErrorⁱᵐᵖˡ)]); (Pinner.id, [("unpin"%go, Pinner__unpinⁱᵐᵖˡ)]); (ptrT.id Pinner.id, [("Pin"%go, Pinner__Pinⁱᵐᵖˡ); ("Unpin"%go, Pinner__Unpinⁱᵐᵖˡ); ("unpin"%go, Pinner__unpinⁱᵐᵖˡ)]); (pinner.id, []); (ptrT.id pinner.id, [("unpin"%go, pinner__unpinⁱᵐᵖˡ)]); (pinState.id, []); (ptrT.id pinState.id, [("isMultiPinned"%go, pinState__isMultiPinnedⁱᵐᵖˡ); ("isPinned"%go, pinState__isPinnedⁱᵐᵖˡ); ("set"%go, pinState__setⁱᵐᵖˡ); ("setMultiPinned"%go, pinState__setMultiPinnedⁱᵐᵖˡ); ("setPinned"%go, pinState__setPinnedⁱᵐᵖˡ)]); (pinnerBits.id, []); (ptrT.id pinnerBits.id, [("ofObject"%go, pinnerBits__ofObjectⁱᵐᵖˡ)]); (ptabEntry.id, []); (ptrT.id ptabEntry.id, []); (suspendGState.id, []); (ptrT.id suspendGState.id, []); (hex.id, []); (ptrT.id hex.id, []); (stwReason.id, [("String"%go, stwReason__Stringⁱᵐᵖˡ); ("isGC"%go, stwReason__isGCⁱᵐᵖˡ)]); (ptrT.id stwReason.id, [("String"%go, stwReason__Stringⁱᵐᵖˡ); ("isGC"%go, stwReason__isGCⁱᵐᵖˡ)]); (worldStop.id, []); (ptrT.id worldStop.id, []); (cgothreadstart.id, []); (ptrT.id cgothreadstart.id, []); (sysmontick.id, []); (ptrT.id sysmontick.id, []); (pMask.id, [("clear"%go, pMask__clearⁱᵐᵖˡ); ("read"%go, pMask__readⁱᵐᵖˡ); ("set"%go, pMask__setⁱᵐᵖˡ)]); (ptrT.id pMask.id, [("clear"%go, pMask__clearⁱᵐᵖˡ); ("read"%go, pMask__readⁱᵐᵖˡ); ("set"%go, pMask__setⁱᵐᵖˡ)]); (gQueue.id, []); (ptrT.id gQueue.id, [("empty"%go, gQueue__emptyⁱᵐᵖˡ); ("pop"%go, gQueue__popⁱᵐᵖˡ); ("popList"%go, gQueue__popListⁱᵐᵖˡ); ("push"%go, gQueue__pushⁱᵐᵖˡ); ("pushBack"%go, gQueue__pushBackⁱᵐᵖˡ); ("pushBackAll"%go, gQueue__pushBackAllⁱᵐᵖˡ)]); (gList.id, []); (ptrT.id gList.id, [("empty"%go, gList__emptyⁱᵐᵖˡ); ("pop"%go, gList__popⁱᵐᵖˡ); ("push"%go, gList__pushⁱᵐᵖˡ); ("pushAll"%go, gList__pushAllⁱᵐᵖˡ)]); (randomOrder.id, []); (ptrT.id randomOrder.id, [("reset"%go, randomOrder__resetⁱᵐᵖˡ); ("start"%go, randomOrder__startⁱᵐᵖˡ)]); (randomEnum.id, []); (ptrT.id randomEnum.id, [("done"%go, randomEnum__doneⁱᵐᵖˡ); ("next"%go, randomEnum__nextⁱᵐᵖˡ); ("position"%go, randomEnum__positionⁱᵐᵖˡ)]); (initTask.id, []); (ptrT.id initTask.id, []); (tracestat.id, []); (ptrT.id tracestat.id, []); (profBuf.id, []); (ptrT.id profBuf.id, [("canWriteRecord"%go, profBuf__canWriteRecordⁱᵐᵖˡ); ("canWriteTwoRecords"%go, profBuf__canWriteTwoRecordsⁱᵐᵖˡ); ("close"%go, profBuf__closeⁱᵐᵖˡ); ("hasOverflow"%go, profBuf__hasOverflowⁱᵐᵖˡ); ("incrementOverflow"%go, profBuf__incrementOverflowⁱᵐᵖˡ); ("read"%go, profBuf__readⁱᵐᵖˡ); ("takeOverflow"%go, profBuf__takeOverflowⁱᵐᵖˡ); ("wakeupExtra"%go, profBuf__wakeupExtraⁱᵐᵖˡ); ("write"%go, profBuf__writeⁱᵐᵖˡ)]); (profAtomic.id, []); (ptrT.id profAtomic.id, [("cas"%go, profAtomic__casⁱᵐᵖˡ); ("load"%go, profAtomic__loadⁱᵐᵖˡ); ("store"%go, profAtomic__storeⁱᵐᵖˡ)]); (profIndex.id, [("addCountsAndClearFlags"%go, profIndex__addCountsAndClearFlagsⁱᵐᵖˡ); ("dataCount"%go, profIndex__dataCountⁱᵐᵖˡ); ("tagCount"%go, profIndex__tagCountⁱᵐᵖˡ)]); (ptrT.id profIndex.id, [("addCountsAndClearFlags"%go, profIndex__addCountsAndClearFlagsⁱᵐᵖˡ); ("dataCount"%go, profIndex__dataCountⁱᵐᵖˡ); ("tagCount"%go, profIndex__tagCountⁱᵐᵖˡ)]); (profBufReadMode.id, []); (ptrT.id profBufReadMode.id, []); (ticksType.id, []); (ptrT.id ticksType.id, [("init"%go, ticksType__initⁱᵐᵖˡ)]); (godebugInc.id, []); (ptrT.id godebugInc.id, [("IncNonDefault"%go, godebugInc__IncNonDefaultⁱᵐᵖˡ)]); (dbgVar.id, []); (ptrT.id dbgVar.id, []); (mutex.id, []); (ptrT.id mutex.id, []); (funcval.id, []); (ptrT.id funcval.id, []); (iface.id, []); (ptrT.id iface.id, []); (eface.id, []); (ptrT.id eface.id, []); (guintptr.id, [("ptr"%go, guintptr__ptrⁱᵐᵖˡ)]); (ptrT.id guintptr.id, [("cas"%go, guintptr__casⁱᵐᵖˡ); ("ptr"%go, guintptr__ptrⁱᵐᵖˡ); ("set"%go, guintptr__setⁱᵐᵖˡ)]); (puintptr.id, [("ptr"%go, puintptr__ptrⁱᵐᵖˡ)]); (ptrT.id puintptr.id, [("ptr"%go, puintptr__ptrⁱᵐᵖˡ); ("set"%go, puintptr__setⁱᵐᵖˡ)]); (muintptr.id, [("ptr"%go, muintptr__ptrⁱᵐᵖˡ)]); (ptrT.id muintptr.id, [("ptr"%go, muintptr__ptrⁱᵐᵖˡ); ("set"%go, muintptr__setⁱᵐᵖˡ)]); (gobuf.id, []); (ptrT.id gobuf.id, []); (sudog.id, []); (ptrT.id sudog.id, []); (libcall.id, []); (ptrT.id libcall.id, []); (stack.id, []); (ptrT.id stack.id, []); (heldLockInfo.id, []); (ptrT.id heldLockInfo.id, []); (g.id, []); (ptrT.id g.id, [("guintptr"%go, g__guintptrⁱᵐᵖˡ)]); (m.id, []); (ptrT.id m.id, [("becomeSpinning"%go, m__becomeSpinningⁱᵐᵖˡ); ("clearAllpSnapshot"%go, m__clearAllpSnapshotⁱᵐᵖˡ); ("hasCgoOnStack"%go, m__hasCgoOnStackⁱᵐᵖˡ); ("snapshotAllp"%go, m__snapshotAllpⁱᵐᵖˡ)]); (p.id, []); (ptrT.id p.id, [("destroy"%go, p__destroyⁱᵐᵖˡ); ("init"%go, p__initⁱᵐᵖˡ)]); (schedt.id, []); (ptrT.id schedt.id, []); (_func.id, []); (ptrT.id _func.id, [("funcInfo"%go, _func__funcInfoⁱᵐᵖˡ); ("isInlined"%go, _func__isInlinedⁱᵐᵖˡ)]); (funcinl.id, []); (ptrT.id funcinl.id, []); (lfnode.id, []); (ptrT.id lfnode.id, []); (forcegcstate.id, []); (ptrT.id forcegcstate.id, []); (_defer.id, []); (ptrT.id _defer.id, []); (_panic.id, []); (ptrT.id _panic.id, [("initOpenCodedDefers"%go, _panic__initOpenCodedDefersⁱᵐᵖˡ); ("nextDefer"%go, _panic__nextDeferⁱᵐᵖˡ); ("nextFrame"%go, _panic__nextFrameⁱᵐᵖˡ); ("start"%go, _panic__startⁱᵐᵖˡ)]); (savedOpenDeferState.id, []); (ptrT.id savedOpenDeferState.id, []); (ancestorInfo.id, []); (ptrT.id ancestorInfo.id, []); (waitReason.id, [("String"%go, waitReason__Stringⁱᵐᵖˡ); ("isIdleInSynctest"%go, waitReason__isIdleInSynctestⁱᵐᵖˡ); ("isMutexWait"%go, waitReason__isMutexWaitⁱᵐᵖˡ); ("isWaitingForSuspendG"%go, waitReason__isWaitingForSuspendGⁱᵐᵖˡ)]); (ptrT.id waitReason.id, [("String"%go, waitReason__Stringⁱᵐᵖˡ); ("isIdleInSynctest"%go, waitReason__isIdleInSynctestⁱᵐᵖˡ); ("isMutexWait"%go, waitReason__isMutexWaitⁱᵐᵖˡ); ("isWaitingForSuspendG"%go, waitReason__isWaitingForSuspendGⁱᵐᵖˡ)]); (rwmutex.id, []); (ptrT.id rwmutex.id, [("init"%go, rwmutex__initⁱᵐᵖˡ); ("lock"%go, rwmutex__lockⁱᵐᵖˡ); ("rlock"%go, rwmutex__rlockⁱᵐᵖˡ); ("runlock"%go, rwmutex__runlockⁱᵐᵖˡ); ("unlock"%go, rwmutex__unlockⁱᵐᵖˡ)]); (scase.id, []); (ptrT.id scase.id, []); (runtimeSelect.id, []); (ptrT.id runtimeSelect.id, []); (selectDir.id, []); (ptrT.id selectDir.id, []); (semaRoot.id, []); (ptrT.id semaRoot.id, [("dequeue"%go, semaRoot__dequeueⁱᵐᵖˡ); ("queue"%go, semaRoot__queueⁱᵐᵖˡ); ("rotateLeft"%go, semaRoot__rotateLeftⁱᵐᵖˡ); ("rotateRight"%go, semaRoot__rotateRightⁱᵐᵖˡ)]); (semTable.id, []); (ptrT.id semTable.id, [("rootFor"%go, semTable__rootForⁱᵐᵖˡ)]); (semaProfileFlags.id, []); (ptrT.id semaProfileFlags.id, []); (notifyList.id, []); (ptrT.id notifyList.id, []); (sigctxt.id, []); (ptrT.id sigctxt.id, [("cs"%go, sigctxt__csⁱᵐᵖˡ); ("fault"%go, sigctxt__faultⁱᵐᵖˡ); ("fixsigcode"%go, sigctxt__fixsigcodeⁱᵐᵖˡ); ("fs"%go, sigctxt__fsⁱᵐᵖˡ); ("gs"%go, sigctxt__gsⁱᵐᵖˡ); ("preparePanic"%go, sigctxt__preparePanicⁱᵐᵖˡ); ("pushCall"%go, sigctxt__pushCallⁱᵐᵖˡ); ("r10"%go, sigctxt__r10ⁱᵐᵖˡ); ("r11"%go, sigctxt__r11ⁱᵐᵖˡ); ("r12"%go, sigctxt__r12ⁱᵐᵖˡ); ("r13"%go, sigctxt__r13ⁱᵐᵖˡ); ("r14"%go, sigctxt__r14ⁱᵐᵖˡ); ("r15"%go, sigctxt__r15ⁱᵐᵖˡ); ("r8"%go, sigctxt__r8ⁱᵐᵖˡ); ("r9"%go, sigctxt__r9ⁱᵐᵖˡ); ("rax"%go, sigctxt__raxⁱᵐᵖˡ); ("rbp"%go, sigctxt__rbpⁱᵐᵖˡ); ("rbx"%go, sigctxt__rbxⁱᵐᵖˡ); ("rcx"%go, sigctxt__rcxⁱᵐᵖˡ); ("rdi"%go, sigctxt__rdiⁱᵐᵖˡ); ("rdx"%go, sigctxt__rdxⁱᵐᵖˡ); ("regs"%go, sigctxt__regsⁱᵐᵖˡ); ("rflags"%go, sigctxt__rflagsⁱᵐᵖˡ); ("rip"%go, sigctxt__ripⁱᵐᵖˡ); ("rsi"%go, sigctxt__rsiⁱᵐᵖˡ); ("rsp"%go, sigctxt__rspⁱᵐᵖˡ); ("set_rip"%go, sigctxt__set_ripⁱᵐᵖˡ); ("set_rsp"%go, sigctxt__set_rspⁱᵐᵖˡ); ("set_sigaddr"%go, sigctxt__set_sigaddrⁱᵐᵖˡ); ("set_sigcode"%go, sigctxt__set_sigcodeⁱᵐᵖˡ); ("setsigpc"%go, sigctxt__setsigpcⁱᵐᵖˡ); ("sigFromSeccomp"%go, sigctxt__sigFromSeccompⁱᵐᵖˡ); ("sigFromUser"%go, sigctxt__sigFromUserⁱᵐᵖˡ); ("sigaddr"%go, sigctxt__sigaddrⁱᵐᵖˡ); ("sigcode"%go, sigctxt__sigcodeⁱᵐᵖˡ); ("siglr"%go, sigctxt__siglrⁱᵐᵖˡ); ("sigpc"%go, sigctxt__sigpcⁱᵐᵖˡ); ("sigsp"%go, sigctxt__sigspⁱᵐᵖˡ)]); (sigTabT.id, []); (ptrT.id sigTabT.id, []); (gsignalStack.id, []); (ptrT.id gsignalStack.id, []); (slice.id, []); (ptrT.id slice.id, []); (notInHeapSlice.id, []); (ptrT.id notInHeapSlice.id, []); (stackpoolItem.id, []); (ptrT.id stackpoolItem.id, []); (adjustinfo.id, []); (ptrT.id adjustinfo.id, []); (bitvector.id, []); (ptrT.id bitvector.id, [("ptrbit"%go, bitvector__ptrbitⁱᵐᵖˡ)]); (stackObjectRecord.id, []); (ptrT.id stackObjectRecord.id, [("gcdata"%go, stackObjectRecord__gcdataⁱᵐᵖˡ)]); (stkframe.id, []); (ptrT.id stkframe.id, [("argBytes"%go, stkframe__argBytesⁱᵐᵖˡ); ("argMapInternal"%go, stkframe__argMapInternalⁱᵐᵖˡ); ("getStackMap"%go, stkframe__getStackMapⁱᵐᵖˡ)]); (reflectMethodValue.id, []); (ptrT.id reflectMethodValue.id, []); (tmpBuf.id, []); (ptrT.id tmpBuf.id, []); (stringStruct.id, []); (ptrT.id stringStruct.id, []); (stringStructDWARF.id, []); (ptrT.id stringStructDWARF.id, []); (neverCallThisFunction.id, []); (ptrT.id neverCallThisFunction.id, []); (Frames.id, []); (ptrT.id Frames.id, [("Next"%go, Frames__Nextⁱᵐᵖˡ)]); (Frame.id, []); (ptrT.id Frame.id, []); (Func.id, []); (ptrT.id Func.id, [("Entry"%go, Func__Entryⁱᵐᵖˡ); ("FileLine"%go, Func__FileLineⁱᵐᵖˡ); ("Name"%go, Func__Nameⁱᵐᵖˡ); ("funcInfo"%go, Func__funcInfoⁱᵐᵖˡ); ("raw"%go, Func__rawⁱᵐᵖˡ); ("startLine"%go, Func__startLineⁱᵐᵖˡ)]); (pcHeader.id, []); (ptrT.id pcHeader.id, []); (moduledata.id, []); (ptrT.id moduledata.id, [("funcName"%go, moduledata__funcNameⁱᵐᵖˡ); ("textAddr"%go, moduledata__textAddrⁱᵐᵖˡ); ("textOff"%go, moduledata__textOffⁱᵐᵖˡ)]); (modulehash.id, []); (ptrT.id modulehash.id, []); (functab.id, []); (ptrT.id functab.id, []); (textsect.id, []); (ptrT.id textsect.id, []); (findfuncbucket.id, []); (ptrT.id findfuncbucket.id, []); (funcInfo.id, [("_Func"%go, funcInfo___Funcⁱᵐᵖˡ); ("entry"%go, funcInfo__entryⁱᵐᵖˡ); ("funcInfo"%go, funcInfo__funcInfoⁱᵐᵖˡ); ("isInlined"%go, funcInfo__isInlinedⁱᵐᵖˡ); ("srcFunc"%go, funcInfo__srcFuncⁱᵐᵖˡ); ("valid"%go, funcInfo__validⁱᵐᵖˡ)]); (ptrT.id funcInfo.id, [("_Func"%go, funcInfo___Funcⁱᵐᵖˡ); ("entry"%go, funcInfo__entryⁱᵐᵖˡ); ("funcInfo"%go, funcInfo__funcInfoⁱᵐᵖˡ); ("isInlined"%go, funcInfo__isInlinedⁱᵐᵖˡ); ("srcFunc"%go, funcInfo__srcFuncⁱᵐᵖˡ); ("valid"%go, funcInfo__validⁱᵐᵖˡ)]); (srcFunc.id, [("name"%go, srcFunc__nameⁱᵐᵖˡ)]); (ptrT.id srcFunc.id, [("name"%go, srcFunc__nameⁱᵐᵖˡ)]); (pcvalueCache.id, []); (ptrT.id pcvalueCache.id, []); (pcvalueCacheEnt.id, []); (ptrT.id pcvalueCacheEnt.id, []); (stackmap.id, []); (ptrT.id stackmap.id, []); (inlinedCall.id, []); (ptrT.id inlinedCall.id, []); (inlineUnwinder.id, []); (ptrT.id inlineUnwinder.id, [("fileLine"%go, inlineUnwinder__fileLineⁱᵐᵖˡ); ("isInlined"%go, inlineUnwinder__isInlinedⁱᵐᵖˡ); ("next"%go, inlineUnwinder__nextⁱᵐᵖˡ); ("resolveInternal"%go, inlineUnwinder__resolveInternalⁱᵐᵖˡ); ("srcFunc"%go, inlineUnwinder__srcFuncⁱᵐᵖˡ)]); (inlineFrame.id, [("valid"%go, inlineFrame__validⁱᵐᵖˡ)]); (ptrT.id inlineFrame.id, [("valid"%go, inlineFrame__validⁱᵐᵖˡ)]); (synctestGroup.id, []); (ptrT.id synctestGroup.id, [("changegstatus"%go, synctestGroup__changegstatusⁱᵐᵖˡ); ("decActive"%go, synctestGroup__decActiveⁱᵐᵖˡ); ("incActive"%go, synctestGroup__incActiveⁱᵐᵖˡ); ("maybeWakeLocked"%go, synctestGroup__maybeWakeLockedⁱᵐᵖˡ); ("raceaddr"%go, synctestGroup__raceaddrⁱᵐᵖˡ)]); (taggedPointer.id, [("pointer"%go, taggedPointer__pointerⁱᵐᵖˡ); ("tag"%go, taggedPointer__tagⁱᵐᵖˡ)]); (ptrT.id taggedPointer.id, [("pointer"%go, taggedPointer__pointerⁱᵐᵖˡ); ("tag"%go, taggedPointer__tagⁱᵐᵖˡ)]); (timer.id, []); (ptrT.id timer.id, [("hchan"%go, timer__hchanⁱᵐᵖˡ); ("init"%go, timer__initⁱᵐᵖˡ); ("lock"%go, timer__lockⁱᵐᵖˡ); ("maybeAdd"%go, timer__maybeAddⁱᵐᵖˡ); ("maybeRunAsync"%go, timer__maybeRunAsyncⁱᵐᵖˡ); ("maybeRunChan"%go, timer__maybeRunChanⁱᵐᵖˡ); ("modify"%go, timer__modifyⁱᵐᵖˡ); ("needsAdd"%go, timer__needsAddⁱᵐᵖˡ); ("reset"%go, timer__resetⁱᵐᵖˡ); ("stop"%go, timer__stopⁱᵐᵖˡ); ("trace"%go, timer__traceⁱᵐᵖˡ); ("trace1"%go, timer__trace1ⁱᵐᵖˡ); ("unlock"%go, timer__unlockⁱᵐᵖˡ); ("unlockAndRun"%go, timer__unlockAndRunⁱᵐᵖˡ); ("updateHeap"%go, timer__updateHeapⁱᵐᵖˡ)]); (timers.id, []); (ptrT.id timers.id, [("addHeap"%go, timers__addHeapⁱᵐᵖˡ); ("adjust"%go, timers__adjustⁱᵐᵖˡ); ("check"%go, timers__checkⁱᵐᵖˡ); ("cleanHead"%go, timers__cleanHeadⁱᵐᵖˡ); ("deleteMin"%go, timers__deleteMinⁱᵐᵖˡ); ("initHeap"%go, timers__initHeapⁱᵐᵖˡ); ("lock"%go, timers__lockⁱᵐᵖˡ); ("run"%go, timers__runⁱᵐᵖˡ); ("siftDown"%go, timers__siftDownⁱᵐᵖˡ); ("siftUp"%go, timers__siftUpⁱᵐᵖˡ); ("take"%go, timers__takeⁱᵐᵖˡ); ("trace"%go, timers__traceⁱᵐᵖˡ); ("unlock"%go, timers__unlockⁱᵐᵖˡ); ("updateMinWhenHeap"%go, timers__updateMinWhenHeapⁱᵐᵖˡ); ("updateMinWhenModified"%go, timers__updateMinWhenModifiedⁱᵐᵖˡ); ("verify"%go, timers__verifyⁱᵐᵖˡ); ("wakeTime"%go, timers__wakeTimeⁱᵐᵖˡ)]); (timerWhen.id, []); (ptrT.id timerWhen.id, []); (timeTimer.id, []); (ptrT.id timeTimer.id, [("hchan"%go, timeTimer__hchanⁱᵐᵖˡ); ("lock"%go, timeTimer__lockⁱᵐᵖˡ); ("maybeAdd"%go, timeTimer__maybeAddⁱᵐᵖˡ); ("maybeRunAsync"%go, timeTimer__maybeRunAsyncⁱᵐᵖˡ); ("maybeRunChan"%go, timeTimer__maybeRunChanⁱᵐᵖˡ); ("modify"%go, timeTimer__modifyⁱᵐᵖˡ); ("needsAdd"%go, timeTimer__needsAddⁱᵐᵖˡ); ("reset"%go, timeTimer__resetⁱᵐᵖˡ); ("stop"%go, timeTimer__stopⁱᵐᵖˡ); ("trace"%go, timeTimer__traceⁱᵐᵖˡ); ("trace1"%go, timeTimer__trace1ⁱᵐᵖˡ); ("unlock"%go, timeTimer__unlockⁱᵐᵖˡ); ("unlockAndRun"%go, timeTimer__unlockAndRunⁱᵐᵖˡ); ("updateHeap"%go, timeTimer__updateHeapⁱᵐᵖˡ)]); (traceAdvancerState.id, []); (ptrT.id traceAdvancerState.id, [("start"%go, traceAdvancerState__startⁱᵐᵖˡ); ("stop"%go, traceAdvancerState__stopⁱᵐᵖˡ)]); (wakeableSleep.id, []); (ptrT.id wakeableSleep.id, [("close"%go, wakeableSleep__closeⁱᵐᵖˡ); ("sleep"%go, wakeableSleep__sleepⁱᵐᵖˡ); ("wake"%go, wakeableSleep__wakeⁱᵐᵖˡ)]); (unwindFlags.id, []); (ptrT.id unwindFlags.id, []); (unwinder.id, []); (ptrT.id unwinder.id, [("cgoCallers"%go, unwinder__cgoCallersⁱᵐᵖˡ); ("finishInternal"%go, unwinder__finishInternalⁱᵐᵖˡ); ("init"%go, unwinder__initⁱᵐᵖˡ); ("initAt"%go, unwinder__initAtⁱᵐᵖˡ); ("next"%go, unwinder__nextⁱᵐᵖˡ); ("resolveInternal"%go, unwinder__resolveInternalⁱᵐᵖˡ); ("symPC"%go, unwinder__symPCⁱᵐᵖˡ); ("valid"%go, unwinder__validⁱᵐᵖˡ)]); (cgoTracebackArg.id, []); (ptrT.id cgoTracebackArg.id, []); (cgoContextArg.id, []); (ptrT.id cgoContextArg.id, []); (cgoSymbolizerArg.id, []); (ptrT.id cgoSymbolizerArg.id, []); (traceWriter.id, [("GCActive"%go, traceWriter__GCActiveⁱᵐᵖˡ); ("GCDone"%go, traceWriter__GCDoneⁱᵐᵖˡ); ("GCMarkAssistDone"%go, traceWriter__GCMarkAssistDoneⁱᵐᵖˡ); ("GCMarkAssistStart"%go, traceWriter__GCMarkAssistStartⁱᵐᵖˡ); ("GCStart"%go, traceWriter__GCStartⁱᵐᵖˡ); ("GCSweepDone"%go, traceWriter__GCSweepDoneⁱᵐᵖˡ); ("GCSweepSpan"%go, traceWriter__GCSweepSpanⁱᵐᵖˡ); ("GCSweepStart"%go, traceWriter__GCSweepStartⁱᵐᵖˡ); ("GoCreate"%go, traceWriter__GoCreateⁱᵐᵖˡ); ("GoCreateSyscall"%go, traceWriter__GoCreateSyscallⁱᵐᵖˡ); ("GoDestroySyscall"%go, traceWriter__GoDestroySyscallⁱᵐᵖˡ); ("GoEnd"%go, traceWriter__GoEndⁱᵐᵖˡ); ("GoPark"%go, traceWriter__GoParkⁱᵐᵖˡ); ("GoPreempt"%go, traceWriter__GoPreemptⁱᵐᵖˡ); ("GoSched"%go, traceWriter__GoSchedⁱᵐᵖˡ); ("GoStart"%go, traceWriter__GoStartⁱᵐᵖˡ); ("GoStop"%go, traceWriter__GoStopⁱᵐᵖˡ); ("GoSwitch"%go, traceWriter__GoSwitchⁱᵐᵖˡ); ("GoSysCall"%go, traceWriter__GoSysCallⁱᵐᵖˡ); ("GoSysExit"%go, traceWriter__GoSysExitⁱᵐᵖˡ); ("GoUnpark"%go, traceWriter__GoUnparkⁱᵐᵖˡ); ("Gomaxprocs"%go, traceWriter__Gomaxprocsⁱᵐᵖˡ); ("GoroutineStackAlloc"%go, traceWriter__GoroutineStackAllocⁱᵐᵖˡ); ("GoroutineStackExists"%go, traceWriter__GoroutineStackExistsⁱᵐᵖˡ); ("GoroutineStackFree"%go, traceWriter__GoroutineStackFreeⁱᵐᵖˡ); ("HeapAlloc"%go, traceWriter__HeapAllocⁱᵐᵖˡ); ("HeapGoal"%go, traceWriter__HeapGoalⁱᵐᵖˡ); ("HeapObjectAlloc"%go, traceWriter__HeapObjectAllocⁱᵐᵖˡ); ("HeapObjectExists"%go, traceWriter__HeapObjectExistsⁱᵐᵖˡ); ("HeapObjectFree"%go, traceWriter__HeapObjectFreeⁱᵐᵖˡ); ("ProcStart"%go, traceWriter__ProcStartⁱᵐᵖˡ); ("ProcSteal"%go, traceWriter__ProcStealⁱᵐᵖˡ); ("ProcStop"%go, traceWriter__ProcStopⁱᵐᵖˡ); ("STWDone"%go, traceWriter__STWDoneⁱᵐᵖˡ); ("STWStart"%go, traceWriter__STWStartⁱᵐᵖˡ); ("SpanAlloc"%go, traceWriter__SpanAllocⁱᵐᵖˡ); ("SpanExists"%go, traceWriter__SpanExistsⁱᵐᵖˡ); ("SpanFree"%go, traceWriter__SpanFreeⁱᵐᵖˡ); ("available"%go, traceWriter__availableⁱᵐᵖˡ); ("byte"%go, traceWriter__byteⁱᵐᵖˡ); ("emitUnblockStatus"%go, traceWriter__emitUnblockStatusⁱᵐᵖˡ); ("end"%go, traceWriter__endⁱᵐᵖˡ); ("ensure"%go, traceWriter__ensureⁱᵐᵖˡ); ("event"%go, traceWriter__eventⁱᵐᵖˡ); ("eventWriter"%go, traceWriter__eventWriterⁱᵐᵖˡ); ("expWriter"%go, traceWriter__expWriterⁱᵐᵖˡ); ("flush"%go, traceWriter__flushⁱᵐᵖˡ); ("ok"%go, traceWriter__okⁱᵐᵖˡ); ("refill"%go, traceWriter__refillⁱᵐᵖˡ); ("rtype"%go, traceWriter__rtypeⁱᵐᵖˡ); ("stack"%go, traceWriter__stackⁱᵐᵖˡ); ("startPC"%go, traceWriter__startPCⁱᵐᵖˡ); ("string"%go, traceWriter__stringⁱᵐᵖˡ); ("stringData"%go, traceWriter__stringDataⁱᵐᵖˡ); ("uniqueString"%go, traceWriter__uniqueStringⁱᵐᵖˡ); ("varint"%go, traceWriter__varintⁱᵐᵖˡ); ("varintAt"%go, traceWriter__varintAtⁱᵐᵖˡ); ("varintReserve"%go, traceWriter__varintReserveⁱᵐᵖˡ); ("writeGoStatus"%go, traceWriter__writeGoStatusⁱᵐᵖˡ); ("writeProcStatus"%go, traceWriter__writeProcStatusⁱᵐᵖˡ); ("writeProcStatusForP"%go, traceWriter__writeProcStatusForPⁱᵐᵖˡ); ("writer"%go, traceWriter__writerⁱᵐᵖˡ)]); (ptrT.id traceWriter.id, [("GCActive"%go, traceWriter__GCActiveⁱᵐᵖˡ); ("GCDone"%go, traceWriter__GCDoneⁱᵐᵖˡ); ("GCMarkAssistDone"%go, traceWriter__GCMarkAssistDoneⁱᵐᵖˡ); ("GCMarkAssistStart"%go, traceWriter__GCMarkAssistStartⁱᵐᵖˡ); ("GCStart"%go, traceWriter__GCStartⁱᵐᵖˡ); ("GCSweepDone"%go, traceWriter__GCSweepDoneⁱᵐᵖˡ); ("GCSweepSpan"%go, traceWriter__GCSweepSpanⁱᵐᵖˡ); ("GCSweepStart"%go, traceWriter__GCSweepStartⁱᵐᵖˡ); ("GoCreate"%go, traceWriter__GoCreateⁱᵐᵖˡ); ("GoCreateSyscall"%go, traceWriter__GoCreateSyscallⁱᵐᵖˡ); ("GoDestroySyscall"%go, traceWriter__GoDestroySyscallⁱᵐᵖˡ); ("GoEnd"%go, traceWriter__GoEndⁱᵐᵖˡ); ("GoPark"%go, traceWriter__GoParkⁱᵐᵖˡ); ("GoPreempt"%go, traceWriter__GoPreemptⁱᵐᵖˡ); ("GoSched"%go, traceWriter__GoSchedⁱᵐᵖˡ); ("GoStart"%go, traceWriter__GoStartⁱᵐᵖˡ); ("GoStop"%go, traceWriter__GoStopⁱᵐᵖˡ); ("GoSwitch"%go, traceWriter__GoSwitchⁱᵐᵖˡ); ("GoSysCall"%go, traceWriter__GoSysCallⁱᵐᵖˡ); ("GoSysExit"%go, traceWriter__GoSysExitⁱᵐᵖˡ); ("GoUnpark"%go, traceWriter__GoUnparkⁱᵐᵖˡ); ("Gomaxprocs"%go, traceWriter__Gomaxprocsⁱᵐᵖˡ); ("GoroutineStackAlloc"%go, traceWriter__GoroutineStackAllocⁱᵐᵖˡ); ("GoroutineStackExists"%go, traceWriter__GoroutineStackExistsⁱᵐᵖˡ); ("GoroutineStackFree"%go, traceWriter__GoroutineStackFreeⁱᵐᵖˡ); ("HeapAlloc"%go, traceWriter__HeapAllocⁱᵐᵖˡ); ("HeapGoal"%go, traceWriter__HeapGoalⁱᵐᵖˡ); ("HeapObjectAlloc"%go, traceWriter__HeapObjectAllocⁱᵐᵖˡ); ("HeapObjectExists"%go, traceWriter__HeapObjectExistsⁱᵐᵖˡ); ("HeapObjectFree"%go, traceWriter__HeapObjectFreeⁱᵐᵖˡ); ("ProcStart"%go, traceWriter__ProcStartⁱᵐᵖˡ); ("ProcSteal"%go, traceWriter__ProcStealⁱᵐᵖˡ); ("ProcStop"%go, traceWriter__ProcStopⁱᵐᵖˡ); ("STWDone"%go, traceWriter__STWDoneⁱᵐᵖˡ); ("STWStart"%go, traceWriter__STWStartⁱᵐᵖˡ); ("SpanAlloc"%go, traceWriter__SpanAllocⁱᵐᵖˡ); ("SpanExists"%go, traceWriter__SpanExistsⁱᵐᵖˡ); ("SpanFree"%go, traceWriter__SpanFreeⁱᵐᵖˡ); ("available"%go, traceWriter__availableⁱᵐᵖˡ); ("byte"%go, traceWriter__byteⁱᵐᵖˡ); ("emitUnblockStatus"%go, traceWriter__emitUnblockStatusⁱᵐᵖˡ); ("end"%go, traceWriter__endⁱᵐᵖˡ); ("ensure"%go, traceWriter__ensureⁱᵐᵖˡ); ("event"%go, traceWriter__eventⁱᵐᵖˡ); ("eventWriter"%go, traceWriter__eventWriterⁱᵐᵖˡ); ("expWriter"%go, traceWriter__expWriterⁱᵐᵖˡ); ("flush"%go, traceWriter__flushⁱᵐᵖˡ); ("ok"%go, traceWriter__okⁱᵐᵖˡ); ("refill"%go, traceWriter__refillⁱᵐᵖˡ); ("rtype"%go, traceWriter__rtypeⁱᵐᵖˡ); ("stack"%go, traceWriter__stackⁱᵐᵖˡ); ("startPC"%go, traceWriter__startPCⁱᵐᵖˡ); ("string"%go, traceWriter__stringⁱᵐᵖˡ); ("stringData"%go, traceWriter__stringDataⁱᵐᵖˡ); ("uniqueString"%go, traceWriter__uniqueStringⁱᵐᵖˡ); ("varint"%go, traceWriter__varintⁱᵐᵖˡ); ("varintAt"%go, traceWriter__varintAtⁱᵐᵖˡ); ("varintReserve"%go, traceWriter__varintReserveⁱᵐᵖˡ); ("writeGoStatus"%go, traceWriter__writeGoStatusⁱᵐᵖˡ); ("writeProcStatus"%go, traceWriter__writeProcStatusⁱᵐᵖˡ); ("writeProcStatusForP"%go, traceWriter__writeProcStatusForPⁱᵐᵖˡ); ("writer"%go, traceWriter__writerⁱᵐᵖˡ)]); (traceBufQueue.id, []); (ptrT.id traceBufQueue.id, [("empty"%go, traceBufQueue__emptyⁱᵐᵖˡ); ("pop"%go, traceBufQueue__popⁱᵐᵖˡ); ("push"%go, traceBufQueue__pushⁱᵐᵖˡ)]); (traceBufHeader.id, []); (ptrT.id traceBufHeader.id, []); (traceBuf.id, []); (ptrT.id traceBuf.id, [("available"%go, traceBuf__availableⁱᵐᵖˡ); ("byte"%go, traceBuf__byteⁱᵐᵖˡ); ("stringData"%go, traceBuf__stringDataⁱᵐᵖˡ); ("varint"%go, traceBuf__varintⁱᵐᵖˡ); ("varintAt"%go, traceBuf__varintAtⁱᵐᵖˡ); ("varintReserve"%go, traceBuf__varintReserveⁱᵐᵖˡ)]); (traceEv.id, []); (ptrT.id traceEv.id, []); (traceArg.id, []); (ptrT.id traceArg.id, []); (traceEventWriter.id, [("event"%go, traceEventWriter__eventⁱᵐᵖˡ)]); (ptrT.id traceEventWriter.id, [("event"%go, traceEventWriter__eventⁱᵐᵖˡ)]); (traceExperiment.id, []); (ptrT.id traceExperiment.id, []); (traceMap.id, []); (ptrT.id traceMap.id, [("newTraceMapNode"%go, traceMap__newTraceMapNodeⁱᵐᵖˡ); ("put"%go, traceMap__putⁱᵐᵖˡ); ("reset"%go, traceMap__resetⁱᵐᵖˡ); ("stealID"%go, traceMap__stealIDⁱᵐᵖˡ)]); (traceMapNode.id, []); (ptrT.id traceMapNode.id, []); (traceRegionAlloc.id, []); (ptrT.id traceRegionAlloc.id, [("alloc"%go, traceRegionAlloc__allocⁱᵐᵖˡ); ("drop"%go, traceRegionAlloc__dropⁱᵐᵖˡ)]); (traceRegionAllocBlock.id, []); (ptrT.id traceRegionAllocBlock.id, []); (traceRegionAllocBlockHeader.id, []); (ptrT.id traceRegionAllocBlockHeader.id, []); (gTraceState.id, []); (ptrT.id gTraceState.id, [("acquireStatus"%go, gTraceState__acquireStatusⁱᵐᵖˡ); ("nextSeq"%go, gTraceState__nextSeqⁱᵐᵖˡ); ("readyNextGen"%go, gTraceState__readyNextGenⁱᵐᵖˡ); ("reset"%go, gTraceState__resetⁱᵐᵖˡ); ("setStatusTraced"%go, gTraceState__setStatusTracedⁱᵐᵖˡ); ("statusWasTraced"%go, gTraceState__statusWasTracedⁱᵐᵖˡ)]); (mTraceState.id, []); (ptrT.id mTraceState.id, []); (pTraceState.id, []); (ptrT.id pTraceState.id, [("acquireStatus"%go, pTraceState__acquireStatusⁱᵐᵖˡ); ("nextSeq"%go, pTraceState__nextSeqⁱᵐᵖˡ); ("readyNextGen"%go, pTraceState__readyNextGenⁱᵐᵖˡ); ("setStatusTraced"%go, pTraceState__setStatusTracedⁱᵐᵖˡ); ("statusWasTraced"%go, pTraceState__statusWasTracedⁱᵐᵖˡ)]); (traceBlockReason.id, []); (ptrT.id traceBlockReason.id, []); (traceGoStopReason.id, []); (ptrT.id traceGoStopReason.id, []); (traceLocker.id, [("GCActive"%go, traceLocker__GCActiveⁱᵐᵖˡ); ("GCDone"%go, traceLocker__GCDoneⁱᵐᵖˡ); ("GCMarkAssistDone"%go, traceLocker__GCMarkAssistDoneⁱᵐᵖˡ); ("GCMarkAssistStart"%go, traceLocker__GCMarkAssistStartⁱᵐᵖˡ); ("GCStart"%go, traceLocker__GCStartⁱᵐᵖˡ); ("GCSweepDone"%go, traceLocker__GCSweepDoneⁱᵐᵖˡ); ("GCSweepSpan"%go, traceLocker__GCSweepSpanⁱᵐᵖˡ); ("GCSweepStart"%go, traceLocker__GCSweepStartⁱᵐᵖˡ); ("GoCreate"%go, traceLocker__GoCreateⁱᵐᵖˡ); ("GoCreateSyscall"%go, traceLocker__GoCreateSyscallⁱᵐᵖˡ); ("GoDestroySyscall"%go, traceLocker__GoDestroySyscallⁱᵐᵖˡ); ("GoEnd"%go, traceLocker__GoEndⁱᵐᵖˡ); ("GoPark"%go, traceLocker__GoParkⁱᵐᵖˡ); ("GoPreempt"%go, traceLocker__GoPreemptⁱᵐᵖˡ); ("GoSched"%go, traceLocker__GoSchedⁱᵐᵖˡ); ("GoStart"%go, traceLocker__GoStartⁱᵐᵖˡ); ("GoStop"%go, traceLocker__GoStopⁱᵐᵖˡ); ("GoSwitch"%go, traceLocker__GoSwitchⁱᵐᵖˡ); ("GoSysCall"%go, traceLocker__GoSysCallⁱᵐᵖˡ); ("GoSysExit"%go, traceLocker__GoSysExitⁱᵐᵖˡ); ("GoUnpark"%go, traceLocker__GoUnparkⁱᵐᵖˡ); ("Gomaxprocs"%go, traceLocker__Gomaxprocsⁱᵐᵖˡ); ("GoroutineStackAlloc"%go, traceLocker__GoroutineStackAllocⁱᵐᵖˡ); ("GoroutineStackExists"%go, traceLocker__GoroutineStackExistsⁱᵐᵖˡ); ("GoroutineStackFree"%go, traceLocker__GoroutineStackFreeⁱᵐᵖˡ); ("HeapAlloc"%go, traceLocker__HeapAllocⁱᵐᵖˡ); ("HeapGoal"%go, traceLocker__HeapGoalⁱᵐᵖˡ); ("HeapObjectAlloc"%go, traceLocker__HeapObjectAllocⁱᵐᵖˡ); ("HeapObjectExists"%go, traceLocker__HeapObjectExistsⁱᵐᵖˡ); ("HeapObjectFree"%go, traceLocker__HeapObjectFreeⁱᵐᵖˡ); ("ProcStart"%go, traceLocker__ProcStartⁱᵐᵖˡ); ("ProcSteal"%go, traceLocker__ProcStealⁱᵐᵖˡ); ("ProcStop"%go, traceLocker__ProcStopⁱᵐᵖˡ); ("STWDone"%go, traceLocker__STWDoneⁱᵐᵖˡ); ("STWStart"%go, traceLocker__STWStartⁱᵐᵖˡ); ("SpanAlloc"%go, traceLocker__SpanAllocⁱᵐᵖˡ); ("SpanExists"%go, traceLocker__SpanExistsⁱᵐᵖˡ); ("SpanFree"%go, traceLocker__SpanFreeⁱᵐᵖˡ); ("emitUnblockStatus"%go, traceLocker__emitUnblockStatusⁱᵐᵖˡ); ("eventWriter"%go, traceLocker__eventWriterⁱᵐᵖˡ); ("expWriter"%go, traceLocker__expWriterⁱᵐᵖˡ); ("ok"%go, traceLocker__okⁱᵐᵖˡ); ("rtype"%go, traceLocker__rtypeⁱᵐᵖˡ); ("stack"%go, traceLocker__stackⁱᵐᵖˡ); ("startPC"%go, traceLocker__startPCⁱᵐᵖˡ); ("string"%go, traceLocker__stringⁱᵐᵖˡ); ("uniqueString"%go, traceLocker__uniqueStringⁱᵐᵖˡ); ("writer"%go, traceLocker__writerⁱᵐᵖˡ)]); (ptrT.id traceLocker.id, [("GCActive"%go, traceLocker__GCActiveⁱᵐᵖˡ); ("GCDone"%go, traceLocker__GCDoneⁱᵐᵖˡ); ("GCMarkAssistDone"%go, traceLocker__GCMarkAssistDoneⁱᵐᵖˡ); ("GCMarkAssistStart"%go, traceLocker__GCMarkAssistStartⁱᵐᵖˡ); ("GCStart"%go, traceLocker__GCStartⁱᵐᵖˡ); ("GCSweepDone"%go, traceLocker__GCSweepDoneⁱᵐᵖˡ); ("GCSweepSpan"%go, traceLocker__GCSweepSpanⁱᵐᵖˡ); ("GCSweepStart"%go, traceLocker__GCSweepStartⁱᵐᵖˡ); ("GoCreate"%go, traceLocker__GoCreateⁱᵐᵖˡ); ("GoCreateSyscall"%go, traceLocker__GoCreateSyscallⁱᵐᵖˡ); ("GoDestroySyscall"%go, traceLocker__GoDestroySyscallⁱᵐᵖˡ); ("GoEnd"%go, traceLocker__GoEndⁱᵐᵖˡ); ("GoPark"%go, traceLocker__GoParkⁱᵐᵖˡ); ("GoPreempt"%go, traceLocker__GoPreemptⁱᵐᵖˡ); ("GoSched"%go, traceLocker__GoSchedⁱᵐᵖˡ); ("GoStart"%go, traceLocker__GoStartⁱᵐᵖˡ); ("GoStop"%go, traceLocker__GoStopⁱᵐᵖˡ); ("GoSwitch"%go, traceLocker__GoSwitchⁱᵐᵖˡ); ("GoSysCall"%go, traceLocker__GoSysCallⁱᵐᵖˡ); ("GoSysExit"%go, traceLocker__GoSysExitⁱᵐᵖˡ); ("GoUnpark"%go, traceLocker__GoUnparkⁱᵐᵖˡ); ("Gomaxprocs"%go, traceLocker__Gomaxprocsⁱᵐᵖˡ); ("GoroutineStackAlloc"%go, traceLocker__GoroutineStackAllocⁱᵐᵖˡ); ("GoroutineStackExists"%go, traceLocker__GoroutineStackExistsⁱᵐᵖˡ); ("GoroutineStackFree"%go, traceLocker__GoroutineStackFreeⁱᵐᵖˡ); ("HeapAlloc"%go, traceLocker__HeapAllocⁱᵐᵖˡ); ("HeapGoal"%go, traceLocker__HeapGoalⁱᵐᵖˡ); ("HeapObjectAlloc"%go, traceLocker__HeapObjectAllocⁱᵐᵖˡ); ("HeapObjectExists"%go, traceLocker__HeapObjectExistsⁱᵐᵖˡ); ("HeapObjectFree"%go, traceLocker__HeapObjectFreeⁱᵐᵖˡ); ("ProcStart"%go, traceLocker__ProcStartⁱᵐᵖˡ); ("ProcSteal"%go, traceLocker__ProcStealⁱᵐᵖˡ); ("ProcStop"%go, traceLocker__ProcStopⁱᵐᵖˡ); ("STWDone"%go, traceLocker__STWDoneⁱᵐᵖˡ); ("STWStart"%go, traceLocker__STWStartⁱᵐᵖˡ); ("SpanAlloc"%go, traceLocker__SpanAllocⁱᵐᵖˡ); ("SpanExists"%go, traceLocker__SpanExistsⁱᵐᵖˡ); ("SpanFree"%go, traceLocker__SpanFreeⁱᵐᵖˡ); ("emitUnblockStatus"%go, traceLocker__emitUnblockStatusⁱᵐᵖˡ); ("eventWriter"%go, traceLocker__eventWriterⁱᵐᵖˡ); ("expWriter"%go, traceLocker__expWriterⁱᵐᵖˡ); ("ok"%go, traceLocker__okⁱᵐᵖˡ); ("rtype"%go, traceLocker__rtypeⁱᵐᵖˡ); ("stack"%go, traceLocker__stackⁱᵐᵖˡ); ("startPC"%go, traceLocker__startPCⁱᵐᵖˡ); ("string"%go, traceLocker__stringⁱᵐᵖˡ); ("uniqueString"%go, traceLocker__uniqueStringⁱᵐᵖˡ); ("writer"%go, traceLocker__writerⁱᵐᵖˡ)]); (traceStackTable.id, []); (ptrT.id traceStackTable.id, [("dump"%go, traceStackTable__dumpⁱᵐᵖˡ); ("put"%go, traceStackTable__putⁱᵐᵖˡ)]); (traceFrame.id, []); (ptrT.id traceFrame.id, []); (traceGoStatus.id, []); (ptrT.id traceGoStatus.id, []); (traceProcStatus.id, []); (ptrT.id traceProcStatus.id, []); (traceSchedResourceState.id, []); (ptrT.id traceSchedResourceState.id, [("acquireStatus"%go, traceSchedResourceState__acquireStatusⁱᵐᵖˡ); ("nextSeq"%go, traceSchedResourceState__nextSeqⁱᵐᵖˡ); ("readyNextGen"%go, traceSchedResourceState__readyNextGenⁱᵐᵖˡ); ("setStatusTraced"%go, traceSchedResourceState__setStatusTracedⁱᵐᵖˡ); ("statusWasTraced"%go, traceSchedResourceState__statusWasTracedⁱᵐᵖˡ)]); (traceStringTable.id, []); (ptrT.id traceStringTable.id, [("emit"%go, traceStringTable__emitⁱᵐᵖˡ); ("put"%go, traceStringTable__putⁱᵐᵖˡ); ("reset"%go, traceStringTable__resetⁱᵐᵖˡ); ("writeString"%go, traceStringTable__writeStringⁱᵐᵖˡ)]); (traceTime.id, []); (ptrT.id traceTime.id, []); (traceTypeTable.id, []); (ptrT.id traceTypeTable.id, [("dump"%go, traceTypeTable__dumpⁱᵐᵖˡ); ("put"%go, traceTypeTable__putⁱᵐᵖˡ)]); (rtype.id, [("Align"%go, rtype__Alignⁱᵐᵖˡ); ("ArrayType"%go, rtype__ArrayTypeⁱᵐᵖˡ); ("ChanDir"%go, rtype__ChanDirⁱᵐᵖˡ); ("Common"%go, rtype__Commonⁱᵐᵖˡ); ("Elem"%go, rtype__Elemⁱᵐᵖˡ); ("ExportedMethods"%go, rtype__ExportedMethodsⁱᵐᵖˡ); ("FieldAlign"%go, rtype__FieldAlignⁱᵐᵖˡ); ("FuncType"%go, rtype__FuncTypeⁱᵐᵖˡ); ("GcSlice"%go, rtype__GcSliceⁱᵐᵖˡ); ("HasName"%go, rtype__HasNameⁱᵐᵖˡ); ("IfaceIndir"%go, rtype__IfaceIndirⁱᵐᵖˡ); ("InterfaceType"%go, rtype__InterfaceTypeⁱᵐᵖˡ); ("IsDirectIface"%go, rtype__IsDirectIfaceⁱᵐᵖˡ); ("Key"%go, rtype__Keyⁱᵐᵖˡ); ("Kind"%go, rtype__Kindⁱᵐᵖˡ); ("Len"%go, rtype__Lenⁱᵐᵖˡ); ("MapType"%go, rtype__MapTypeⁱᵐᵖˡ); ("NumMethod"%go, rtype__NumMethodⁱᵐᵖˡ); ("Pointers"%go, rtype__Pointersⁱᵐᵖˡ); ("Size"%go, rtype__Sizeⁱᵐᵖˡ); ("StructType"%go, rtype__StructTypeⁱᵐᵖˡ); ("Uncommon"%go, rtype__Uncommonⁱᵐᵖˡ); ("name"%go, rtype__nameⁱᵐᵖˡ); ("nameOff"%go, rtype__nameOffⁱᵐᵖˡ); ("pkgpath"%go, rtype__pkgpathⁱᵐᵖˡ); ("string"%go, rtype__stringⁱᵐᵖˡ); ("textOff"%go, rtype__textOffⁱᵐᵖˡ); ("typeOff"%go, rtype__typeOffⁱᵐᵖˡ); ("uncommon"%go, rtype__uncommonⁱᵐᵖˡ)]); (ptrT.id rtype.id, [("Align"%go, rtype__Alignⁱᵐᵖˡ); ("ArrayType"%go, rtype__ArrayTypeⁱᵐᵖˡ); ("ChanDir"%go, rtype__ChanDirⁱᵐᵖˡ); ("Common"%go, rtype__Commonⁱᵐᵖˡ); ("Elem"%go, rtype__Elemⁱᵐᵖˡ); ("ExportedMethods"%go, rtype__ExportedMethodsⁱᵐᵖˡ); ("FieldAlign"%go, rtype__FieldAlignⁱᵐᵖˡ); ("FuncType"%go, rtype__FuncTypeⁱᵐᵖˡ); ("GcSlice"%go, rtype__GcSliceⁱᵐᵖˡ); ("HasName"%go, rtype__HasNameⁱᵐᵖˡ); ("IfaceIndir"%go, rtype__IfaceIndirⁱᵐᵖˡ); ("InterfaceType"%go, rtype__InterfaceTypeⁱᵐᵖˡ); ("IsDirectIface"%go, rtype__IsDirectIfaceⁱᵐᵖˡ); ("Key"%go, rtype__Keyⁱᵐᵖˡ); ("Kind"%go, rtype__Kindⁱᵐᵖˡ); ("Len"%go, rtype__Lenⁱᵐᵖˡ); ("MapType"%go, rtype__MapTypeⁱᵐᵖˡ); ("NumMethod"%go, rtype__NumMethodⁱᵐᵖˡ); ("Pointers"%go, rtype__Pointersⁱᵐᵖˡ); ("Size"%go, rtype__Sizeⁱᵐᵖˡ); ("StructType"%go, rtype__StructTypeⁱᵐᵖˡ); ("Uncommon"%go, rtype__Uncommonⁱᵐᵖˡ); ("name"%go, rtype__nameⁱᵐᵖˡ); ("nameOff"%go, rtype__nameOffⁱᵐᵖˡ); ("pkgpath"%go, rtype__pkgpathⁱᵐᵖˡ); ("string"%go, rtype__stringⁱᵐᵖˡ); ("textOff"%go, rtype__textOffⁱᵐᵖˡ); ("typeOff"%go, rtype__typeOffⁱᵐᵖˡ); ("uncommon"%go, rtype__uncommonⁱᵐᵖˡ)]); (bitCursor.id, [("offset"%go, bitCursor__offsetⁱᵐᵖˡ); ("write"%go, bitCursor__writeⁱᵐᵖˡ)]); (ptrT.id bitCursor.id, [("offset"%go, bitCursor__offsetⁱᵐᵖˡ); ("write"%go, bitCursor__writeⁱᵐᵖˡ)]); (_typePair.id, []); (ptrT.id _typePair.id, []); (elfSym.id, []); (ptrT.id elfSym.id, []); (elfVerdef.id, []); (ptrT.id elfVerdef.id, []); (elfEhdr.id, []); (ptrT.id elfEhdr.id, []); (elfPhdr.id, []); (ptrT.id elfPhdr.id, []); (elfShdr.id, []); (ptrT.id elfShdr.id, []); (elfDyn.id, []); (ptrT.id elfDyn.id, []); (elfVerdaux.id, []); (ptrT.id elfVerdaux.id, []); (vdsoSymbolKey.id, []); (ptrT.id vdsoSymbolKey.id, []); (vdsoVersionKey.id, []); (ptrT.id vdsoVersionKey.id, []); (vdsoInfo.id, []); (ptrT.id vdsoInfo.id, [])].

#[global] Instance info' : PkgInfo runtime.runtime :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  λ: <>,
    package.init #runtime.runtime (λ: <>,
      exception_do (do:  (package.alloc runtime.runtime #());;;
      do:  (cgo_yield'init #());;;
      do:  (debugPinnerKeepUnpin'init #());;;
      do:  (boundsErrorFmts'init #());;;
      do:  (boundsNegErrorFmts'init #());;;
      do:  (fastlog2Table'init #());;;
      do:  (inf'init #());;;
      do:  (dumphdr'init #());;;
      do:  (itabTableInit'init #());;;
      do:  (itabTable'init #());;;
      do:  (uint16Eface'init #());;;
      do:  (uint32Eface'init #());;;
      do:  (uint64Eface'init #());;;
      do:  (stringEface'init #());;;
      do:  (sliceEface'init #());;;
      do:  (uint16Type'init #());;;
      do:  (uint32Type'init #());;;
      do:  (uint64Type'init #());;;
      do:  (stringType'init #());;;
      do:  (sliceType'init #());;;
      do:  (emptyTypeAssertCache'init #());;;
      do:  (emptyInterfaceSwitchCache'init #());;;
      do:  (lockNames'init #());;;
      do:  (lockPartialOrder'init #());;;
      do:  (maps_errNilAssign'init #());;;
      do:  (useCheckmark'init #());;;
      do:  (adviseUnused'init #());;;
      do:  (metricsSema'init #());;;
      do:  (finalizer1'init #());;;
      do:  (gcMarkWorkerModeStrings'init #());;;
      do:  (oneptrmask'init #());;;
      do:  (mSpanStateNames'init #());;;
      do:  (levelBits'init #());;;
      do:  (levelShift'init #());;;
      do:  (levelLogPages'init #());;;
      do:  (MemProfileRate'init #());;;
      do:  (goroutineProfile'init #());;;
      do:  (minOffAddr'init #());;;
      do:  (maxOffAddr'init #());;;
      do:  (doubleCheckReadMemStats'init #());;;
      do:  (pdEface'init #());;;
      do:  (pdType'init #());;;
      do:  (epfd'init #());;;
      do:  (haveHighResSleep'init #());;;
      do:  (procAuxv'init #());;;
      do:  (sysTHPSizePath'init #());;;
      do:  (urandom_dev'init #());;;
      do:  (sigset_all'init #());;;
      do:  (shiftError'init #());;;
      do:  (divideError'init #());;;
      do:  (overflowError'init #());;;
      do:  (floatError'init #());;;
      do:  (memoryError'init #());;;
      do:  (rangeDoneError'init #());;;
      do:  (rangePanicError'init #());;;
      do:  (rangeExhaustedError'init #());;;
      do:  (rangeMissingPanicError'init #());;;
      do:  (panicnil'init #());;;
      do:  (pinnerLeakPanic'init #());;;
      do:  (asyncPreemptStack'init #());;;
      do:  (minhexdigits'init #());;;
      do:  (casgstatusAlwaysTrack'init #());;;
      do:  (stwReasonStrings'init #());;;
      do:  (worldsema'init #());;;
      do:  (gcsema'init #());;;
      do:  (forcegcperiod'init #());;;
      do:  (needSysmonWorkaround'init #());;;
      do:  (traceback_cache'init #());;;
      do:  (dbgvars'init #());;;
      do:  (waitReasonStrings'init #());;;
      do:  (isWaitingForSuspendG'init #());;;
      do:  (isIdleInSynctest'init #());;;
      do:  (sigsetAllExiting'init #());;;
      do:  (sigtable'init #());;;
      do:  (class_to_size'init #());;;
      do:  (class_to_allocnpages'init #());;;
      do:  (class_to_divmagic'init #());;;
      do:  (size_to_class8'init #());;;
      do:  (size_to_class128'init #());;;
      do:  (stackPoisonCopy'init #());;;
      do:  (maxstacksize'init #());;;
      do:  (maxstackceiling'init #());;;
      do:  (ptrnames'init #());;;
      do:  (startingStackSize'init #());;;
      do:  (intArgRegs'init #());;;
      do:  (traceAdvanceSema'init #());;;
      do:  (traceShutdownSema'init #());;;
      do:  (gStatusStrings'init #());;;
      do:  (traceBlockReasonStrings'init #());;;
      do:  (traceGoStopReasonStrings'init #());;;
      do:  (chansendpc'init #());;;
      do:  (chanrecvpc'init #());;;
      do:  (adjustSignalStack2Indirect'init #());;;
      do:  (vdsoLinuxVersion'init #());;;
      do:  (vdsoSymbolKeys'init #()))
      ).

End code.
End runtime.
