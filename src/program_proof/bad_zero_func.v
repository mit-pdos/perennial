(*
package main

func main () {
	a := make(map[uint64]func())
	f := a[0]
	if f == nil {
		panic("nil")
	}
	f()
	// FIXME: this doesn't translate correctly.
	a[0]()
} *)

(* autogenerated from command-line-arguments *)
From Perennial.goose_lang Require Import prelude.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

Definition main: val :=
  rec: "main" <> :=
    let: "a" := NewMap uint64T ((unitT -> unitT)%ht) #() in
    let: "f" := Fst (MapGet "a" #0) in
    "f" #();;
    "a" #();;
    #().

End code.

From Perennial.program_proof Require Import grove_prelude.
From Perennial.goose_lang.lib Require Import map.
Section proof.
Context `{!heapGS Σ}.
Lemma wp_main :
  {{{
        True
  }}}
    main #()
  {{{
        RET #(); True
  }}}
.
Proof.
  iIntros (Φ) "_ HΦ".
  wp_rec. wp_pures.
  wp_apply (wp_NewMap u64).
  iIntros (?) "Hmap".
  wp_pures.
  wp_apply (wp_MapGet with "[$]").
  iIntros (??) "[%Hlookup Hmap]".
  wp_pures.

  (* FIXME: this is a bug in the semantics of a map with `func()` val type.
     The zero_val for a function type should be nil: https://go.dev/ref/spec#The_zero_value
   *)
  rewrite /map_get lookup_empty /zero_val /= in Hlookup.
  injection Hlookup as <- <-.
  wp_pures.

  (* FIXME: this is a bug in Goose. It mistranslted the line `a[0]()` into `a()` *)
  admit.
Admitted.

End proof.
