(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From Perennial.program_proof Require Import grove_prelude.
From Perennial.program_proof Require Import marshal_stateless_proof.
From Goose Require Import github_com.mit_pdos.gokv.tutorial.objectstore.chunk.writechunk_gk.
From Perennial.goose_lang Require Import lib.slice.pred_slice.

Module writeChunk.
Section writeChunk.

Typeclasses Opaque app.

Context `{!heapGS Σ}.

Record C :=
    mkC {
        writeId :  u64;
        chunk : list u8;
        index :  u64;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u64_le args.(writeId)) ++
              (u64_le $ length $ args.(chunk)) ++ args.(chunk) ++
              (u64_le args.(index)).

Definition own (args__v: val) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃ (chunk_sl : Slice.t), 
  "%Hown_struct" ∷ ⌜ args__v = (#args__c.(writeId), (slice_val chunk_sl, (#args__c.(index), #())))%V ⌝ ∗
  "Hown_chunk" ∷ own_slice_small chunk_sl byteT dq args__c.(chunk).


Lemma own_val_ty :
  ∀ (v : val) (x : C) (dq : dfrac), own v x dq -∗ ⌜val_ty v (struct.t writechunk_gk.S)⌝.
Proof.
  iIntros (???) "Hown".
  unfold own. iNamed "Hown".
  
  iPureIntro.
  subst.
  repeat constructor.
  all: by val_ty.
Qed.

Lemma wp_Encode (args__v : val) (args__c : C) (pre_sl : Slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        own args__v args__c dq ∗
        own_slice pre_sl byteT (DfracOwn 1) prefix
  }}}
    writechunk_gk.Marshal (slice_val pre_sl) args__v
  {{{
        enc enc_sl, RET (slice_val enc_sl);
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__v args__c dq ∗
        own_slice enc_sl byteT (DfracOwn 1) (prefix ++ enc)
  }}}.

Proof.
  iIntros (?) "[Hown Hsl] HΦ".
  wp_rec. wp_pures.
  iUnfold own in "Hown". iNamed "Hown". rewrite Hown_struct.
  wp_apply (wp_ref_to); first by val_ty.
  iIntros (?) "Hptr". wp_pures.

  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  iDestruct (own_slice_small_sz with "Hown_chunk") as "%Hargs_chunk_sz".
  wp_pures. wp_apply (wp_slice_len). wp_load.
  wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.
  wp_pures. wp_load.
  wp_apply (wp_WriteBytes with "[$Hsl $Hown_chunk]").
  iIntros (?) "[Hsl Hargs_chunk_sl]". wp_store.

  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.


  wp_load. iApply "HΦ". iModIntro. rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding. split.
  {
  
  rewrite ?string_bytes_length.
  rewrite Hargs_chunk_sz.
  rewrite ?w64_to_nat_id.

  done.
  } done.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : Slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice_small enc_sl byteT dq (enc ++ suffix)
  }}}
    writechunk_gk.Unmarshal (slice_val enc_sl)
  {{{
        args__v suff_sl, RET (args__v, suff_sl);
        own args__v args__c (DfracOwn 1) ∗
        own_slice_small suff_sl byteT dq suffix
  }}}.

Proof.
  iIntros (?) "[%Henc Hsl] HΦ". wp_rec.
  wp_apply wp_ref_to; first done.
  iIntros (l__s) "Hs". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__writeId) "HwriteId". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__chunk) "Hchunk". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__index) "Hindex". wp_pures.
  
  rewrite Henc. rewrite -?app_assoc.

  wp_load. wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "HchunkLen". iApply array_singleton in "HchunkLen". wp_pures.
  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "HchunkBytes". iApply array_singleton in "HchunkBytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %Hchunk_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in Hchunk_sz. word. }
  iIntros (??) "[Hchunk' Hsl]". iApply own_slice_to_small in "Hchunk'".

  wp_pures. wp_store. wp_store. wp_load. wp_store.

  wp_load. wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_load. wp_load. wp_load. wp_load.
  wp_pures. iApply "HΦ". iModIntro. rewrite ?string_to_bytes_to_string. iFrame.
  iPureIntro. reflexivity.
Qed.

End writeChunk.
End writeChunk.

