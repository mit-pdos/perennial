(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From Perennial.program_proof Require Import grove_prelude.
From Perennial.program_proof Require Import marshal_stateless_proof.
From Goose Require Import github_com.mit_pdos.gokv.tutorial.kvservice.conditionalput_gk.
From Perennial.goose_lang Require Import lib.slice.pred_slice.

Module conditionalPut.
Section conditionalPut.

Typeclasses Opaque app.

Context `{!heapGS Σ}.

Record C :=
    mkC {
        opId :  u64;
        key :  byte_string;
        expectedVal :  byte_string;
        newVal :  byte_string;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u64_le args.(opId)) ++
              (u64_le $ length $ args.(key)) ++ args.(key) ++
              (u64_le $ length $ args.(expectedVal)) ++ args.(expectedVal) ++
              (u64_le $ length $ args.(newVal)) ++ args.(newVal).

Definition own (args__v: val) (args__c: C) (dq: dfrac) : iProp Σ :=
  "%Hown_struct" ∷ ⌜ args__v = (#args__c.(opId), (#(str args__c.(key)), (#(str args__c.(expectedVal)), (#(str args__c.(newVal)), #()))))%V ⌝.


Definition to_val' (c : C) : val :=
  (#c.(opId), (#(str c.(key)), (#(str c.(expectedVal)), (#(str c.(newVal)), #())))).

Definition from_val' (v : val) : option C :=
  match v with
  | (#(LitInt opId), (#(LitString key), (#(LitString expectedVal), (#(LitString newVal), #()))))%V =>
    Some (mkC opId key expectedVal newVal)
  | _ => None
  end.

#[global]
Instance conditionalPut_into_val : IntoVal C.
Proof.
  refine {|
    to_val := to_val';
    from_val := from_val';
    IntoVal_def := (mkC (W64 0) "" "" "")
  |}.
  intros v. 
  destruct v as [opId key expectedVal newVal]; done.
Defined.

#[global]
Instance conditionalPut_into_val_for_type : IntoValForType C (struct.t conditionalput_gk.S).
Proof. constructor; auto 10. Defined.

Lemma own_to_val (v : val) (c : C) (dq : dfrac) :
  own v c dq -∗ ⌜ v = to_val c ⌝.
Proof.
  iIntros "%Hown_struct".
  
  subst. done.
Qed.


Lemma own_val_ty :
  ∀ (v : val) (x : C) (dq : dfrac), own v x dq -∗ ⌜val_ty v (struct.t conditionalput_gk.S)⌝.
Proof.
  iIntros (???) "Hown".
  unfold own. iNamed "Hown".
  
  iPureIntro.
  subst.
  repeat constructor.
Qed.

Lemma wp_Encode (args__v : val) (args__c : C) (pre_sl : Slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        own args__v args__c dq ∗
        own_slice pre_sl byteT (DfracOwn 1) prefix
  }}}
    conditionalput_gk.Marshal (slice_val pre_sl) args__v
  {{{
        enc enc_sl, RET (slice_val enc_sl);
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__v args__c dq ∗
        own_slice enc_sl byteT (DfracOwn 1) (prefix ++ enc)
  }}}.

Proof.
  iIntros (?) "[Hown Hsl] HΦ".
  wp_rec. wp_pures.
  iUnfold own in "Hown". iNamed "Hown". rewrite Hown_struct.
  wp_apply (wp_ref_to); first by val_ty.
  iIntros (?) "Hptr". wp_pures.

  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_apply wp_StringToBytes. iIntros (?) "Hargs_key_enc". wp_pures.
  wp_apply (wp_slice_len).
  iDestruct (own_slice_sz with "Hargs_key_enc") as "%Hargs_key_sz".
  iApply own_slice_to_small in "Hargs_key_enc".
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.
  wp_load. wp_apply (wp_WriteBytes with "[$Hsl $Hargs_key_enc]").
  iIntros (?) "[Hsl _]". wp_store.

  wp_apply wp_StringToBytes. iIntros (?) "Hargs_expectedVal_enc". wp_pures.
  wp_apply (wp_slice_len).
  iDestruct (own_slice_sz with "Hargs_expectedVal_enc") as "%Hargs_expectedVal_sz".
  iApply own_slice_to_small in "Hargs_expectedVal_enc".
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.
  wp_load. wp_apply (wp_WriteBytes with "[$Hsl $Hargs_expectedVal_enc]").
  iIntros (?) "[Hsl _]". wp_store.

  wp_apply wp_StringToBytes. iIntros (?) "Hargs_newVal_enc". wp_pures.
  wp_apply (wp_slice_len).
  iDestruct (own_slice_sz with "Hargs_newVal_enc") as "%Hargs_newVal_sz".
  iApply own_slice_to_small in "Hargs_newVal_enc".
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.
  wp_load. wp_apply (wp_WriteBytes with "[$Hsl $Hargs_newVal_enc]").
  iIntros (?) "[Hsl _]". wp_store.


  wp_load. iApply "HΦ". iModIntro. rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding. split.
  {
  
  rewrite ?string_bytes_length.
  rewrite Hargs_key_sz.
  rewrite Hargs_expectedVal_sz.
  rewrite Hargs_newVal_sz.
  rewrite ?w64_to_nat_id.

  done.
  } done.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : Slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice_small enc_sl byteT dq (enc ++ suffix)
  }}}
    conditionalput_gk.Unmarshal (slice_val enc_sl)
  {{{
        args__v suff_sl, RET (args__v, suff_sl);
        own args__v args__c (DfracOwn 1) ∗
        own_slice_small suff_sl byteT dq suffix
  }}}.

Proof.
  iIntros (?) "[%Henc Hsl] HΦ". wp_rec.
  wp_apply wp_ref_to; first done.
  iIntros (l__s) "Hs". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__opId) "HopId". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__key) "Hkey". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__expectedVal) "HexpectedVal". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__newVal) "HnewVal". wp_pures.
  
  rewrite Henc. rewrite -?app_assoc.

  wp_load. wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done. iIntros (keyLen) "HkeyLen". wp_pures.
  wp_apply wp_ref_of_zero; first done. iIntros (keyBytes) "HkeyBytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %Hkey_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in Hkey_sz. word. }
  iIntros (??) "[Hkey' Hsl]".

  wp_pures. wp_store. wp_store. wp_load.
  iApply own_slice_to_small in "Hkey'".
  wp_apply (wp_StringFromBytes with "[$Hkey']"). iIntros "_".
  wp_store.

  wp_apply wp_ref_of_zero; first done. iIntros (expectedValLen) "HexpectedValLen". wp_pures.
  wp_apply wp_ref_of_zero; first done. iIntros (expectedValBytes) "HexpectedValBytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %HexpectedVal_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in HexpectedVal_sz. word. }
  iIntros (??) "[HexpectedVal' Hsl]".

  wp_pures. wp_store. wp_store. wp_load.
  iApply own_slice_to_small in "HexpectedVal'".
  wp_apply (wp_StringFromBytes with "[$HexpectedVal']"). iIntros "_".
  wp_store.

  wp_apply wp_ref_of_zero; first done. iIntros (newValLen) "HnewValLen". wp_pures.
  wp_apply wp_ref_of_zero; first done. iIntros (newValBytes) "HnewValBytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %HnewVal_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in HnewVal_sz. word. }
  iIntros (??) "[HnewVal' Hsl]".

  wp_pures. wp_store. wp_store. wp_load.
  iApply own_slice_to_small in "HnewVal'".
  wp_apply (wp_StringFromBytes with "[$HnewVal']"). iIntros "_".
  wp_store.

  wp_load. wp_load. wp_load. wp_load. wp_load.
  wp_pures. iApply "HΦ". iModIntro. rewrite ?string_to_bytes_to_string. iFrame.
  iPureIntro. reflexivity.
Qed.

End conditionalPut.
End conditionalPut.

