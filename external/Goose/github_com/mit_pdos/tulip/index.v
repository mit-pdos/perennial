(* autogenerated from github.com/mit-pdos/tulip/index *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mit_pdos.tulip.tuple.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Definition Index := struct.decl [
  "mu" :: ptrT;
  "tplm" :: mapT ptrT
].

Definition Index__GetTuple: val :=
  rec: "Index__GetTuple" "idx" "key" :=
    Mutex__Lock (struct.loadF Index "mu" "idx");;
    let: ("tpl", "ok") := MapGet (struct.loadF Index "tplm" "idx") "key" in
    (if: "ok"
    then
      Mutex__Unlock (struct.loadF Index "mu" "idx");;
      "tpl"
    else
      let: "tplnew" := tuple.MkTuple #() in
      MapInsert (struct.loadF Index "tplm" "idx") "key" "tplnew";;
      Mutex__Unlock (struct.loadF Index "mu" "idx");;
      "tplnew").

Definition MkIndex: val :=
  rec: "MkIndex" <> :=
    let: "idx" := struct.alloc Index (zero_val (struct.t Index)) in
    struct.storeF Index "mu" "idx" (newMutex #());;
    struct.storeF Index "tplm" "idx" (NewMap stringT ptrT #());;
    "idx".
