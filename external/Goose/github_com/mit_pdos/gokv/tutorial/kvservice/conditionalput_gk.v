(* autogenerated from github.com/mit-pdos/gokv/tutorial/kvservice/conditionalput_gk *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.

Definition S := struct.decl [
  "OpId" :: uint64T;
  "Key" :: stringT;
  "ExpectedVal" :: stringT;
  "NewVal" :: stringT
].

Definition Marshal: val :=
  rec: "Marshal" "prefix" "c" :=
    let: "enc" := ref_to (slice.T byteT) "prefix" in
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (struct.get S "OpId" "c"));;
    let: "keyBytes" := StringToBytes (struct.get S "Key" "c") in
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len "keyBytes"));;
    "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") "keyBytes");;
    let: "expectedvalBytes" := StringToBytes (struct.get S "ExpectedVal" "c") in
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len "expectedvalBytes"));;
    "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") "expectedvalBytes");;
    let: "newvalBytes" := StringToBytes (struct.get S "NewVal" "c") in
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len "newvalBytes"));;
    "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") "newvalBytes");;
    ![slice.T byteT] "enc".

Definition Unmarshal: val :=
  rec: "Unmarshal" "s" :=
    let: "enc" := ref_to (slice.T byteT) "s" in
    let: "opId" := ref (zero_val uint64T) in
    let: "key" := ref (zero_val stringT) in
    let: "expectedVal" := ref (zero_val stringT) in
    let: "newVal" := ref (zero_val stringT) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "opId" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: "keyLen" := ref (zero_val uint64T) in
    let: "keyBytes" := ref (zero_val (slice.T byteT)) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "keyLen" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadBytesCopy (![slice.T byteT] "enc") (![uint64T] "keyLen") in
    "keyBytes" <-[slice.T byteT] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    "key" <-[stringT] (StringFromBytes (![slice.T byteT] "keyBytes"));;
    let: "expectedValLen" := ref (zero_val uint64T) in
    let: "expectedValBytes" := ref (zero_val (slice.T byteT)) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "expectedValLen" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadBytesCopy (![slice.T byteT] "enc") (![uint64T] "expectedValLen") in
    "expectedValBytes" <-[slice.T byteT] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    "expectedVal" <-[stringT] (StringFromBytes (![slice.T byteT] "expectedValBytes"));;
    let: "newValLen" := ref (zero_val uint64T) in
    let: "newValBytes" := ref (zero_val (slice.T byteT)) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "newValLen" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadBytesCopy (![slice.T byteT] "enc") (![uint64T] "newValLen") in
    "newValBytes" <-[slice.T byteT] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    "newVal" <-[stringT] (StringFromBytes (![slice.T byteT] "newValBytes"));;
    (struct.mk S [
       "OpId" ::= ![uint64T] "opId";
       "Key" ::= ![stringT] "key";
       "ExpectedVal" ::= ![stringT] "expectedVal";
       "NewVal" ::= ![stringT] "newVal"
     ], ![slice.T byteT] "enc").

End code.
