(* autogenerated from github.com/mit-pdos/gokv/connman *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mit_pdos.gokv.urpc.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Notation HostName := uint64T (only parsing).

Definition ConnMan := struct.decl [
  "mu" :: ptrT;
  "rpcCls" :: mapT ptrT;
  "making" :: mapT ptrT
].

Definition MakeConnMan: val :=
  rec: "MakeConnMan" <> :=
    let: "c" := struct.alloc ConnMan (zero_val (struct.t ConnMan)) in
    struct.storeF ConnMan "mu" "c" (lock.new #());;
    struct.storeF ConnMan "rpcCls" "c" (NewMap HostName ptrT #());;
    struct.storeF ConnMan "making" "c" (NewMap HostName ptrT #());;
    "c".

Definition ConnMan__getClient: val :=
  rec: "ConnMan__getClient" "c" "host" :=
    let: "ret" := ref (zero_val ptrT) in
    lock.acquire (struct.loadF ConnMan "mu" "c");;
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: ("cl", "ok") := MapGet (struct.loadF ConnMan "rpcCls" "c") "host" in
      (if: "ok"
      then
        "ret" <-[ptrT] "cl";;
        Break
      else
        let: ("cond", "ok") := MapGet (struct.loadF ConnMan "making" "c") "host" in
        (if: "ok"
        then
          lock.condWait "cond";;
          Continue
        else
          let: "my_cond" := lock.newCond (struct.loadF ConnMan "mu" "c") in
          MapInsert (struct.loadF ConnMan "making" "c") "host" "my_cond";;
          lock.release (struct.loadF ConnMan "mu" "c");;
          "ret" <-[ptrT] (urpc.MakeClient "host");;
          lock.acquire (struct.loadF ConnMan "mu" "c");;
          MapInsert (struct.loadF ConnMan "rpcCls" "c") "host" (![ptrT] "ret");;
          lock.condBroadcast "my_cond";;
          MapDelete (struct.loadF ConnMan "making" "c") "host";;
          Break)));;
    lock.release (struct.loadF ConnMan "mu" "c");;
    ![ptrT] "ret".

(* This repeatedly retries the RPC after retryTimeout until it gets a response. *)
Definition ConnMan__CallAtLeastOnce: val :=
  rec: "ConnMan__CallAtLeastOnce" "c" "host" "rpcid" "args" "reply" "retryTimeout" :=
    let: "cl" := ref (zero_val ptrT) in
    "cl" <-[ptrT] (ConnMan__getClient "c" "host");;
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: "err" := urpc.Client__Call (![ptrT] "cl") "rpcid" "args" "reply" "retryTimeout" in
      (if: "err" = urpc.ErrTimeout
      then Continue
      else
        (if: "err" = urpc.ErrDisconnect
        then
          lock.acquire (struct.loadF ConnMan "mu" "c");;
          (if: (![ptrT] "cl") = (Fst (MapGet (struct.loadF ConnMan "rpcCls" "c") "host"))
          then MapDelete (struct.loadF ConnMan "rpcCls" "c") "host"
          else #());;
          lock.release (struct.loadF ConnMan "mu" "c");;
          "cl" <-[ptrT] (ConnMan__getClient "c" "host");;
          Continue
        else Break)));;
    #().
